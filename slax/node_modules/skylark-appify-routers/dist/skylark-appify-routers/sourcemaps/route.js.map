{"version":3,"sources":["route.js"],"names":["define","langx","routers","createEvent","Route","Evented","inherit","klassName","init","name","setting","pathto","mixin","pattern","paramNames","match","map","paramName","substring","replace","this","_setting","params","regex","RegExp","self","forEach","eventName","isFunction","on","enter","ctx","query","r","_entering","Deferred","when","then","e","route","result","trigger","_entered","safeMixin","exit","_exiting","_exited","path","names","x","indexOf","m","slice","decodeURIComponent","exec","i","len","length","val"],"mappings":";;;;;;;AAAAA,QACC,sBACA,aACC,SAASC,EAAMC,GACb,IAAIC,EAAcD,EAAQC,YAEtBC,EAAQH,EAAMI,QAAQC,SACtBC,UAAW,QACXC,KAAM,SAASC,EAAMC,GAEjB,IAAIC,GADJD,EAAUT,EAAMW,SAAUF,IACLC,QAAU,GAC3BE,EAAUF,EACVG,EAAaD,EAAQE,MAAM,sBACZ,OAAfD,GACAA,EAAaA,EAAWE,IAAI,SAASC,GACjC,OAAOA,EAAUC,UAAU,KAE/BL,EAAUA,EAAQM,QAAQ,qBAAsB,UAEhDL,KAGAD,EADY,MAAZA,EACU,OAEAA,EAAQM,QAAQ,IAAK,OAGnCC,KAAKC,SAAWX,EAChBU,KAAKX,KAAOA,EACZW,KAAKT,OAASA,EACdS,KAAKN,WAAaA,EAClBM,KAAKE,OAAST,EACdO,KAAKG,MAAQ,IAAIC,OAAO,IAAMX,EAAU,IAAK,IAE7C,IAAIY,EAAOL,MACV,WAAY,UAAW,UAAW,UAAUM,QAAQ,SAASC,GACtD1B,EAAM2B,WAAWlB,EAAQiB,KACzBF,EAAKI,GAAGF,EAAWjB,EAAQiB,OAKvCG,MAAO,SAASC,EAAIC,GAChB,GAAIA,EAAO,CACP,IAAIC,EAAIb,KAAKc,UAAUH,GACnBN,EAAOL,KAEX,OAAOnB,EAAMkC,SAASC,KAAKH,GAAGI,KAAK,WAC/B,IAAIC,EAAInC,EAAY,YAChBoC,MAAOd,EACPe,QAAQ,IAKZ,OAFAf,EAAKgB,QAAQH,GAENA,EAAEE,SAQb,OALApB,KAAKsB,SAASX,GAEdX,KAAKqB,QAAQtC,EAAY,UAAWF,EAAM0C,WACtCJ,MAAOnB,MACRW,KACIX,MAIfwB,KAAM,SAASb,EAAKC,GAChB,GAAIA,EAAO,CAEP,IADSZ,KAAKyB,SAASd,GAEnB,OAAO,EAGX,IAAIO,EAAInC,EAAY,WAChBoC,MAAOnB,KACPoB,QAAQ,IAKZ,OAFApB,KAAKqB,QAAQH,GAENA,EAAEE,OAOT,OALApB,KAAK0B,QAAQf,GACbX,KAAKqB,QAAQtC,EAAY,SAAUF,EAAM0C,WACrCJ,MAAOnB,MACRW,KAEIX,MAIfL,MAAO,SAASgC,GACZ,IAAIC,EAAQ5B,KAAKN,WACbmC,EAAIF,EAAKG,QAAQ,KAEjBC,GADAJ,GAAQE,EAAIF,EAAKK,MAAM,EAAGH,GAAKI,mBAAmBN,GAC9C3B,KAAKG,MAAM+B,KAAKP,IAExB,IAAKI,EACD,OAAO,EAIX,IADA,IAAI7B,KACKiC,EAAI,EAAGC,EAAML,EAAEM,OAAQF,EAAIC,IAAOD,EAAG,CAC1C,IAAI9C,EAAOuC,EAAMO,EAAI,GACjBG,EAAML,mBAAmBF,EAAEI,IAC/BjC,EAAOb,GAAQiD,EAGnB,OAAOpC,GAGXyB,KAAM,SAASzB,GACX,IAAIyB,EAAO3B,KAAKT,OAMhB,OALIW,IACAyB,EAAOA,EAAK5B,QAAQ,oBAAqB,SAASJ,EAAOE,GACrD,OAAOK,EAAOL,MAGf8B,GAGXb,UAAW,SAASH,GAChB,OAAO,GAEXW,SAAU,SAASX,GACf,OAAO,GAEXc,SAAU,SAASd,GACf,OAAO,GAEXe,QAAS,SAASf,GACd,OAAO,KAIlB,OAAO7B,EAAQE,MAAQA","file":"../route.js","sourcesContent":["define([\r\n\t\"skylark-langx/langx\",\r\n\t\"./routers\"\r\n],function(langx,routers){\r\n    var createEvent = routers.createEvent;\r\n    \r\n    var Route = langx.Evented.inherit({\r\n        klassName: \"Route\",\r\n        init: function(name, setting) {\r\n            setting = langx.mixin({}, setting);\r\n            var pathto = setting.pathto || \"\",\r\n                pattern = pathto,\r\n                paramNames = pattern.match(/\\:([a-zA-Z0-9_]+)/g);\r\n            if (paramNames !== null) {\r\n                paramNames = paramNames.map(function(paramName) {\r\n                    return paramName.substring(1);\r\n                });\r\n                pattern = pattern.replace(/\\:([a-zA-Z0-9_]+)/g, '(.*?)');\r\n            } else {\r\n                paramNames = [];\r\n            }\r\n            if (pattern === \"*\") {\r\n                pattern = \"(.*)\";\r\n            } else {\r\n                pattern = pattern.replace(\"/\", \"\\\\/\");\r\n            }\r\n\r\n            this._setting = setting;\r\n            this.name = name;\r\n            this.pathto = pathto;\r\n            this.paramNames = paramNames;\r\n            this.params = pattern;\r\n            this.regex = new RegExp(\"^\" + pattern + \"$\", \"\");\r\n\r\n            var self = this;\r\n            [\"entering\", \"entered\", \"exiting\", \"exited\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        enter: function(ctx,query) {\r\n            if (query) {\r\n                var r = this._entering(ctx),\r\n                    self = this;\r\n\r\n                return langx.Deferred.when(r).then(function(){\r\n                    var e = createEvent(\"entering\", {\r\n                        route: self,\r\n                        result: true\r\n                    });\r\n\r\n                    self.trigger(e);\r\n\r\n                    return e.result;\r\n                });\r\n            } else {\r\n                this._entered(ctx);\r\n\r\n                this.trigger(createEvent(\"entered\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n                return this;\r\n            }\r\n        },\r\n\r\n        exit: function(ctx, query) {\r\n            if (query) {\r\n                var ok = this._exiting(ctx);\r\n                if (!ok) {\r\n                    return false;\r\n                }\r\n\r\n                var e = createEvent(\"exiting\", {\r\n                    route: this,\r\n                    result: true\r\n                });\r\n\r\n                this.trigger(e);\r\n\r\n                return e.result;\r\n            } else {\r\n                this._exited(ctx);\r\n                this.trigger(createEvent(\"exited\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n\r\n                return this;\r\n            }\r\n        },\r\n\r\n        match: function(path) {\r\n            var names = this.paramNames,\r\n                x = path.indexOf('?'),\r\n                path = ~x ? path.slice(0, x) : decodeURIComponent(path),\r\n                m = this.regex.exec(path);\r\n\r\n            if (!m) {\r\n                return false\r\n            };\r\n\r\n            var params = {};\r\n            for (var i = 1, len = m.length; i < len; ++i) {\r\n                var name = names[i - 1],\r\n                    val = decodeURIComponent(m[i]);\r\n                params[name] = val;\r\n            }\r\n\r\n            return params;\r\n        },\r\n\r\n        path: function(params) {\r\n            var path = this.pathto;\r\n            if (params) {\r\n                path = path.replace(/:([a-zA-Z0-9_]+)/g, function(match, paramName) {\r\n                    return params[paramName];\r\n                });\r\n            }\r\n            return path;\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            return true;\r\n        },\r\n        _entered: function(ctx) {\r\n            return true;\r\n        },\r\n        _exiting: function(ctx) {\r\n            return true;\r\n        },\r\n        _exited: function(ctx) {\r\n            return true;\r\n        }\r\n    });\r\n\r\n\treturn routers.Route = Route;\t\r\n})"]}