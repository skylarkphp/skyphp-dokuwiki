{"version":3,"sources":["router.js"],"names":["define","langx","routers","Route","createEvent","Router","_curCtx","_prevCtx","_baseUrl","_homePath","_routes","_cache","_hub","Evented","router","this","dispatch","ctx","route","exit","path","params","m","map","r","enter","force","Deferred","when","then","trigger","current","previous","go","useHistoryApi","state","window","history","pushState","document","title","replace","dispatchEvent","useHashbang","newHash","location","hash","noCache","finded","each","name","ret","match","routes","settings","isDefined","mixin","hub","off","apply","arguments","on","one","routeName","baseUrl","homePath","setting","start","host","initPath","pathname","undefined","startsWith","addEventListener","e","preventDefault"],"mappings":"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","file":"../router.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"./routers\",\r\n    \"./route\"\r\n],function(langx,routers,Route){\r\n    var createEvent = routers.createEvent;\r\n\r\n    function Router() {\r\n        var _curCtx,\r\n            _prevCtx,\r\n            _baseUrl,\r\n            _homePath,\r\n            _routes = {},\r\n            _cache = {},\r\n            _hub = new langx.Evented();\r\n\r\n        var router = this;\r\n\r\n\r\n        function current() {\r\n            return _curCtx;\r\n        }\r\n\r\n        // refresh the current route\r\n        function dispatch(ctx) {\r\n\r\n            if (_curCtx) {\r\n                var ret = _curCtx.route.exit({\r\n                    path: _curCtx.path,\r\n                    params: _curCtx.params\r\n                }, true);\r\n                if (!ret) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            _prevCtx = _curCtx;\r\n            _curCtx = ctx;\r\n            if (!_curCtx.route) {\r\n                var m = map(_curCtx.path);\r\n                _curCtx.route = m.route;\r\n                _curCtx.params = m.params;\r\n            }\r\n\r\n            var r = _curCtx.route.enter({\r\n                force: _curCtx.force,\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            },true);\r\n\r\n            langx.Deferred.when(r).then(function() {\r\n                _hub.trigger(createEvent(\"routing\", {\r\n                    current: _curCtx,\r\n                    previous: _prevCtx\r\n                }));\r\n\r\n                _curCtx.route.enter({\r\n                    path: _curCtx.path,\r\n                    params: _curCtx.params\r\n                },false);\r\n\r\n                if (_prevCtx) {\r\n                    _prevCtx.route.exit({\r\n                        path: _prevCtx.path,\r\n                        params: _prevCtx.params\r\n                    }, false);\r\n                }\r\n\r\n                _hub.trigger(createEvent(\"routed\", {\r\n                    current: _curCtx,\r\n                    previous: _prevCtx\r\n                }));\r\n            });\r\n        }\r\n\r\n        function go(path, force) {\r\n            if (!force && _curCtx && _curCtx.path == path) {\r\n                return false;\r\n            }\r\n            var ctx = map(path);\r\n            if (ctx) {\r\n                ctx.path = path;\r\n\r\n                if (router.useHistoryApi) {\r\n                    var state = {\r\n                        force: force,\r\n                        path: path\r\n                    }\r\n\r\n                    window.history.pushState(state, document.title, (_baseUrl + path).replace(\"//\", \"/\"));\r\n                    window.dispatchEvent(createEvent(\"popstate\", {\r\n                        state: state\r\n                    }));\r\n                } else if (router.useHashbang) {\r\n                    var newHash = \"#!\" + path;\r\n                    if (window.location.hash !== newHash) {\r\n                        window.location.hash = newHash;\r\n                    } else {\r\n                        dispatch(ctx);\r\n                    };\r\n                } else {\r\n                    dispatch(ctx);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function map(path, noCache) {\r\n            var finded = false;\r\n            if (!noCache) {\r\n                finded = _cache[path];\r\n                if (finded) {\r\n                    return finded;\r\n                }\r\n            }\r\n            langx.each(_routes, function(name, route) {\r\n                var ret = route.match(path);\r\n                if (ret) {\r\n                    finded = {\r\n                        route: route,\r\n                        params: ret\r\n                    }\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            if (finded && !noCache) {\r\n                _cache[path] = finded;\r\n            }\r\n            return finded;\r\n        }\r\n\r\n        function path(routeName, params) {\r\n            var route = _routes[routeName],\r\n                path;\r\n            if (route) {\r\n                path = route.path(params);\r\n            }\r\n            return path;\r\n        }\r\n\r\n        function previous() {\r\n            return _prevCtx;\r\n        }\r\n\r\n        function baseUrl(path) {\r\n            if (langx.isDefined(path)) {\r\n                _baseUrl = path;\r\n                return this;\r\n            } else {\r\n                return _baseUrl;\r\n            }\r\n        }\r\n\r\n        function hub(){\r\n            return _hub;\r\n        }\r\n\r\n        function homePath(path) {\r\n            if (langx.isDefined(path)) {\r\n                _homePath = path;\r\n                return this;\r\n            } else {\r\n                return _homePath;\r\n            }\r\n        }\r\n\r\n        function route(name, setting) {\r\n            if (langx.isDefined(setting)) {\r\n                var settings = {};\r\n                settings[name] = setting;\r\n                routes(settings);\r\n                return this;\r\n            } else {\r\n                return _routes[name];\r\n            }\r\n        }\r\n\r\n        function routes(settings) {\r\n            if (!langx.isDefined(settings)) {\r\n                return langx.mixin({}, _routes);\r\n            } else {\r\n                for (var name in settings) {\r\n                    _routes[name] = new router.Route(name, settings[name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        //starts routing urls\r\n        function start() {\r\n            if (router.useHashbang == null && router.useHistoryApi == null) {\r\n                if (window.location.host  && window.history.pushState) {\r\n                    //web access\r\n                    router.useHistoryApi = true;\r\n                } else {\r\n                    // local access\r\n                    router.useHashbang = true;\r\n                }\r\n            }\r\n\r\n            var initPath = \"\";\r\n\r\n            if (router.useHistoryApi) {\r\n                initPath = window.location.pathname;\r\n                if (_baseUrl === undefined) {\r\n                    _baseUrl = initPath.replace(/\\/$/, \"\");\r\n                }\r\n                initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\r\n            } else if (router.useHashbang) {\r\n                initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\r\n            } else {\r\n                initPath = \"/\";\r\n            }\r\n\r\n            if (!initPath.startsWith(\"/\")) {\r\n                initPath = \"/\" + initPath;\r\n            }\r\n            /*\r\n            eventer.on(document.body, \"click\", \"a[href]\", function(e) {\r\n                var elm = e.currentTarget,\r\n                    url = elm.getAttribute(\"href\");\r\n\r\n                if (url == \"#\") {\r\n                    return;\r\n                }\r\n                if (url && langx.isSameOrigin(elm.href)) {\r\n                    if (url.indexOf(_baseUrl) === 0) {\r\n                        url = url.substr(_baseUrl.length);\r\n                        eventer.stop(e);\r\n                        url = url.replace('#!', '');\r\n                        go(url);\r\n                    }\r\n                }\r\n            });\r\n            */\r\n            if (router.useHistoryApi) {\r\n                window.addEventListener(\"popstate\", function(e) {\r\n                    if(e.state) dispatch(e.state);\r\n                    e.preventDefault();\r\n                });\r\n            } else if (router.useHashbang) {\r\n                window.addEventListener(\"hashchange\", function(e) {\r\n                    dispatch({\r\n                        path: window.location.hash.replace(/^#!/, \"\")\r\n                    });\r\n                    e.preventDefault();\r\n                });\r\n            }\r\n\r\n            go(initPath);\r\n        }\r\n\r\n        langx.mixin(router, {\r\n            \"Route\": Route,\r\n\r\n            // Current path being processed\r\n            \"current\": current,\r\n\r\n            // Changes the current path\r\n            \"go\": go,\r\n\r\n            \"map\": map,\r\n\r\n            \"hub\": hub,\r\n\r\n            \"off\": function() {\r\n                _hub.off.apply(_hub, arguments);\r\n            },\r\n\r\n            \"on\": function() {\r\n                _hub.on.apply(_hub, arguments);\r\n            },\r\n\r\n            \"one\": function() {\r\n                _hub.one.apply(_hub, arguments);\r\n            },\r\n\r\n            // Returns the path of the named route\r\n            \"path\": path,\r\n\r\n            \"previous\": previous,\r\n\r\n            \"baseUrl\": baseUrl,\r\n\r\n            \"homePath\": homePath,\r\n\r\n            \"route\": route,\r\n\r\n            \"routes\": routes,\r\n\r\n            //starts routing urls\r\n            \"start\": start,\r\n\r\n            \"trigger\": function(e) {\r\n                _hub.trigger(e);\r\n                return this;\r\n            },\r\n\r\n            \"useHistoryApi\": null,\r\n            \"useHashbang\": null\r\n        });\r\n\r\n    }\r\n\r\n    return routers.Router = Router;\r\n});\r\n"]}