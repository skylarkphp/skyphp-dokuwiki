{"version":3,"sources":["skylark-appify-routers.js"],"names":["define","skylark","langx","attach","createEvent","type","props","e","CustomEvent","safeMixin","routers","Route","Evented","inherit","klassName","init","name","setting","pathto","mixin","pattern","paramNames","match","map","paramName","substring","replace","this","_setting","params","regex","RegExp","self","forEach","eventName","isFunction","on","enter","ctx","query","r","_entering","Deferred","when","then","route","result","trigger","_entered","exit","ok","_exiting","_exited","path","names","x","indexOf","slice","decodeURIComponent","m","exec","i","len","length","val","Router","_curCtx","_prevCtx","_baseUrl","_homePath","_routes","_cache","_hub","router","dispatch","ret","force","current","previous","go","useHistoryApi","state","window","history","pushState","document","title","dispatchEvent","useHashbang","newHash","location","hash","noCache","finded","each","routes","settings","isDefined","hub","off","apply","arguments","one","routeName","baseUrl","homePath","start","host","initPath","pathname","undefined","startsWith","addEventListener","preventDefault","main"],"mappings":"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","file":"../skylark-appify-routers.js","sourcesContent":["define('skylark-appify-routers/routers',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-langx/langx\"\t\r\n],function(skylark,langx){\r\n\r\n\treturn skylark.attach(\"appify.routers\",{\r\n        createEvent : function (type,props) {\r\n            var e = new CustomEvent(type,props);\r\n            return langx.safeMixin(e, props);\r\n        }\r\n\r\n\t});\t\r\n});\r\n\ndefine('skylark-appify-routers/route',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./routers\"\r\n],function(langx,routers){\r\n    var createEvent = routers.createEvent;\r\n    \r\n    var Route = langx.Evented.inherit({\r\n        klassName: \"Route\",\r\n        init: function(name, setting) {\r\n            setting = langx.mixin({}, setting);\r\n            var pathto = setting.pathto || \"\",\r\n                pattern = pathto,\r\n                paramNames = pattern.match(/\\:([a-zA-Z0-9_]+)/g);\r\n            if (paramNames !== null) {\r\n                paramNames = paramNames.map(function(paramName) {\r\n                    return paramName.substring(1);\r\n                });\r\n                pattern = pattern.replace(/\\:([a-zA-Z0-9_]+)/g, '(.*?)');\r\n            } else {\r\n                paramNames = [];\r\n            }\r\n            if (pattern === \"*\") {\r\n                pattern = \"(.*)\";\r\n            } else {\r\n                pattern = pattern.replace(\"/\", \"\\\\/\");\r\n            }\r\n\r\n            this._setting = setting;\r\n            this.name = name;\r\n            this.pathto = pathto;\r\n            this.paramNames = paramNames;\r\n            this.params = pattern;\r\n            this.regex = new RegExp(\"^\" + pattern + \"$\", \"\");\r\n\r\n            var self = this;\r\n            [\"entering\", \"entered\", \"exiting\", \"exited\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        enter: function(ctx,query) {\r\n            if (query) {\r\n                var r = this._entering(ctx),\r\n                    self = this;\r\n\r\n                return langx.Deferred.when(r).then(function(){\r\n                    var e = createEvent(\"entering\", {\r\n                        route: self,\r\n                        result: true\r\n                    });\r\n\r\n                    self.trigger(e);\r\n\r\n                    return e.result;\r\n                });\r\n            } else {\r\n                this._entered(ctx);\r\n\r\n                this.trigger(createEvent(\"entered\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n                return this;\r\n            }\r\n        },\r\n\r\n        exit: function(ctx, query) {\r\n            if (query) {\r\n                var ok = this._exiting(ctx);\r\n                if (!ok) {\r\n                    return false;\r\n                }\r\n\r\n                var e = createEvent(\"exiting\", {\r\n                    route: this,\r\n                    result: true\r\n                });\r\n\r\n                this.trigger(e);\r\n\r\n                return e.result;\r\n            } else {\r\n                this._exited(ctx);\r\n                this.trigger(createEvent(\"exited\", langx.safeMixin({\r\n                    route: this\r\n                }, ctx)));\r\n\r\n                return this;\r\n            }\r\n        },\r\n\r\n        match: function(path) {\r\n            var names = this.paramNames,\r\n                x = path.indexOf('?'),\r\n                path = ~x ? path.slice(0, x) : decodeURIComponent(path),\r\n                m = this.regex.exec(path);\r\n\r\n            if (!m) {\r\n                return false\r\n            };\r\n\r\n            var params = {};\r\n            for (var i = 1, len = m.length; i < len; ++i) {\r\n                var name = names[i - 1],\r\n                    val = decodeURIComponent(m[i]);\r\n                params[name] = val;\r\n            }\r\n\r\n            return params;\r\n        },\r\n\r\n        path: function(params) {\r\n            var path = this.pathto;\r\n            if (params) {\r\n                path = path.replace(/:([a-zA-Z0-9_]+)/g, function(match, paramName) {\r\n                    return params[paramName];\r\n                });\r\n            }\r\n            return path;\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            return true;\r\n        },\r\n        _entered: function(ctx) {\r\n            return true;\r\n        },\r\n        _exiting: function(ctx) {\r\n            return true;\r\n        },\r\n        _exited: function(ctx) {\r\n            return true;\r\n        }\r\n    });\r\n\r\n\treturn routers.Route = Route;\t\r\n});\ndefine('skylark-appify-routers/router',[\r\n    \"skylark-langx/langx\",\r\n    \"./routers\",\r\n    \"./route\"\r\n],function(langx,routers,Route){\r\n    var createEvent = routers.createEvent;\r\n\r\n    function Router() {\r\n        var _curCtx,\r\n            _prevCtx,\r\n            _baseUrl,\r\n            _homePath,\r\n            _routes = {},\r\n            _cache = {},\r\n            _hub = new langx.Evented();\r\n\r\n        var router = this;\r\n\r\n\r\n        function current() {\r\n            return _curCtx;\r\n        }\r\n\r\n        // refresh the current route\r\n        function dispatch(ctx) {\r\n\r\n            if (_curCtx) {\r\n                var ret = _curCtx.route.exit({\r\n                    path: _curCtx.path,\r\n                    params: _curCtx.params\r\n                }, true);\r\n                if (!ret) {\r\n                    return;\r\n                }\r\n            }\r\n\r\n            _prevCtx = _curCtx;\r\n            _curCtx = ctx;\r\n            if (!_curCtx.route) {\r\n                var m = map(_curCtx.path);\r\n                _curCtx.route = m.route;\r\n                _curCtx.params = m.params;\r\n            }\r\n\r\n            var r = _curCtx.route.enter({\r\n                force: _curCtx.force,\r\n                path: _curCtx.path,\r\n                params: _curCtx.params\r\n            },true);\r\n\r\n            langx.Deferred.when(r).then(function() {\r\n                _hub.trigger(createEvent(\"routing\", {\r\n                    current: _curCtx,\r\n                    previous: _prevCtx\r\n                }));\r\n\r\n                _curCtx.route.enter({\r\n                    path: _curCtx.path,\r\n                    params: _curCtx.params\r\n                },false);\r\n\r\n                if (_prevCtx) {\r\n                    _prevCtx.route.exit({\r\n                        path: _prevCtx.path,\r\n                        params: _prevCtx.params\r\n                    }, false);\r\n                }\r\n\r\n                _hub.trigger(createEvent(\"routed\", {\r\n                    current: _curCtx,\r\n                    previous: _prevCtx\r\n                }));\r\n            });\r\n        }\r\n\r\n        function go(path, force) {\r\n            if (!force && _curCtx && _curCtx.path == path) {\r\n                return false;\r\n            }\r\n            var ctx = map(path);\r\n            if (ctx) {\r\n                ctx.path = path;\r\n\r\n                if (router.useHistoryApi) {\r\n                    var state = {\r\n                        force: force,\r\n                        path: path\r\n                    }\r\n\r\n                    window.history.pushState(state, document.title, (_baseUrl + path).replace(\"//\", \"/\"));\r\n                    window.dispatchEvent(createEvent(\"popstate\", {\r\n                        state: state\r\n                    }));\r\n                } else if (router.useHashbang) {\r\n                    var newHash = \"#!\" + path;\r\n                    if (window.location.hash !== newHash) {\r\n                        window.location.hash = newHash;\r\n                    } else {\r\n                        dispatch(ctx);\r\n                    };\r\n                } else {\r\n                    dispatch(ctx);\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        function map(path, noCache) {\r\n            var finded = false;\r\n            if (!noCache) {\r\n                finded = _cache[path];\r\n                if (finded) {\r\n                    return finded;\r\n                }\r\n            }\r\n            langx.each(_routes, function(name, route) {\r\n                var ret = route.match(path);\r\n                if (ret) {\r\n                    finded = {\r\n                        route: route,\r\n                        params: ret\r\n                    }\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n            if (finded && !noCache) {\r\n                _cache[path] = finded;\r\n            }\r\n            return finded;\r\n        }\r\n\r\n        function path(routeName, params) {\r\n            var route = _routes[routeName],\r\n                path;\r\n            if (route) {\r\n                path = route.path(params);\r\n            }\r\n            return path;\r\n        }\r\n\r\n        function previous() {\r\n            return _prevCtx;\r\n        }\r\n\r\n        function baseUrl(path) {\r\n            if (langx.isDefined(path)) {\r\n                _baseUrl = path;\r\n                return this;\r\n            } else {\r\n                return _baseUrl;\r\n            }\r\n        }\r\n\r\n        function hub(){\r\n            return _hub;\r\n        }\r\n\r\n        function homePath(path) {\r\n            if (langx.isDefined(path)) {\r\n                _homePath = path;\r\n                return this;\r\n            } else {\r\n                return _homePath;\r\n            }\r\n        }\r\n\r\n        function route(name, setting) {\r\n            if (langx.isDefined(setting)) {\r\n                var settings = {};\r\n                settings[name] = setting;\r\n                routes(settings);\r\n                return this;\r\n            } else {\r\n                return _routes[name];\r\n            }\r\n        }\r\n\r\n        function routes(settings) {\r\n            if (!langx.isDefined(settings)) {\r\n                return langx.mixin({}, _routes);\r\n            } else {\r\n                for (var name in settings) {\r\n                    _routes[name] = new router.Route(name, settings[name]);\r\n                }\r\n            }\r\n        }\r\n\r\n        //starts routing urls\r\n        function start() {\r\n            if (router.useHashbang == null && router.useHistoryApi == null) {\r\n                if (window.location.host  && window.history.pushState) {\r\n                    //web access\r\n                    router.useHistoryApi = true;\r\n                } else {\r\n                    // local access\r\n                    router.useHashbang = true;\r\n                }\r\n            }\r\n\r\n            var initPath = \"\";\r\n\r\n            if (router.useHistoryApi) {\r\n                initPath = window.location.pathname;\r\n                if (_baseUrl === undefined) {\r\n                    _baseUrl = initPath.replace(/\\/$/, \"\");\r\n                }\r\n                initPath = initPath.replace(_baseUrl, \"\") || _homePath || \"/\";\r\n            } else if (router.useHashbang) {\r\n                initPath = window.location.hash.replace(\"#!\", \"\") || _homePath || \"/\";\r\n            } else {\r\n                initPath = \"/\";\r\n            }\r\n\r\n            if (!initPath.startsWith(\"/\")) {\r\n                initPath = \"/\" + initPath;\r\n            }\r\n            /*\r\n            eventer.on(document.body, \"click\", \"a[href]\", function(e) {\r\n                var elm = e.currentTarget,\r\n                    url = elm.getAttribute(\"href\");\r\n\r\n                if (url == \"#\") {\r\n                    return;\r\n                }\r\n                if (url && langx.isSameOrigin(elm.href)) {\r\n                    if (url.indexOf(_baseUrl) === 0) {\r\n                        url = url.substr(_baseUrl.length);\r\n                        eventer.stop(e);\r\n                        url = url.replace('#!', '');\r\n                        go(url);\r\n                    }\r\n                }\r\n            });\r\n            */\r\n            if (router.useHistoryApi) {\r\n                window.addEventListener(\"popstate\", function(e) {\r\n                    if(e.state) dispatch(e.state);\r\n                    e.preventDefault();\r\n                });\r\n            } else if (router.useHashbang) {\r\n                window.addEventListener(\"hashchange\", function(e) {\r\n                    dispatch({\r\n                        path: window.location.hash.replace(/^#!/, \"\")\r\n                    });\r\n                    e.preventDefault();\r\n                });\r\n            }\r\n\r\n            go(initPath);\r\n        }\r\n\r\n        langx.mixin(router, {\r\n            \"Route\": Route,\r\n\r\n            // Current path being processed\r\n            \"current\": current,\r\n\r\n            // Changes the current path\r\n            \"go\": go,\r\n\r\n            \"map\": map,\r\n\r\n            \"hub\": hub,\r\n\r\n            \"off\": function() {\r\n                _hub.off.apply(_hub, arguments);\r\n            },\r\n\r\n            \"on\": function() {\r\n                _hub.on.apply(_hub, arguments);\r\n            },\r\n\r\n            \"one\": function() {\r\n                _hub.one.apply(_hub, arguments);\r\n            },\r\n\r\n            // Returns the path of the named route\r\n            \"path\": path,\r\n\r\n            \"previous\": previous,\r\n\r\n            \"baseUrl\": baseUrl,\r\n\r\n            \"homePath\": homePath,\r\n\r\n            \"route\": route,\r\n\r\n            \"routes\": routes,\r\n\r\n            //starts routing urls\r\n            \"start\": start,\r\n\r\n            \"trigger\": function(e) {\r\n                _hub.trigger(e);\r\n                return this;\r\n            },\r\n\r\n            \"useHistoryApi\": null,\r\n            \"useHashbang\": null\r\n        });\r\n\r\n    }\r\n\r\n    return routers.Router = Router;\r\n});\r\n\ndefine('skylark-appify-routers/main',[\r\n    \"./routers\",\r\n    \"./router\",\r\n    \"./route\"\r\n], function(routers) {\r\n    return routers;\r\n});\r\n\ndefine('skylark-appify-routers', ['skylark-appify-routers/main'], function (main) { return main; });\n\n"]}