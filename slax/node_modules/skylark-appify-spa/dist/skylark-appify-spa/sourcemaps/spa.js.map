{"version":3,"sources":["spa.js"],"names":["define","skylark","langx","routers","Deferred","createEvent","type","props","e","CustomEvent","safeMixin","app","router","Router","Route","inherit","klassName","init","name","setting","this","overrided","content","forceRefresh","data","self","forEach","eventName","isFunction","on","_entering","ctx","force","_prepared","prepare","getConfigData","key","getNamedValue","window","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","require","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","undefined","isString","innerHTML","appendChild","Plugin","hookers","split","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","URL","baseURI","homePath","getConfig","go","path","promises0","map","all","promises1","lazy","promises2","concat","run","start","attach"],"mappings":"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","file":"../spa.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-appify-routers\"\r\n], function(skylark, langx, routers) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var router = new routers.Router();\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.forceRefresh = setting.forceRefresh;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (this.forceRefresh || ctx.force || !this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        getNamedValue: function() {\r\n            return window.location.pathname.match(this.regex);\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (content===undefined || content===null) {\r\n                return;\r\n            }\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            curCtx.route.trigger(createEvent(\"rendered\", {\r\n                route: curCtx.route,\r\n                content: content\r\n            }));\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked: function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        baseUrl : function() {\r\n            return router.baseUrl();\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path, force) {\r\n            router.go(path, force);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                if (plugin.isHooked(\"starting\")) {\r\n                    return plugin.prepare();\r\n                }\r\n            });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n\r\n        \"router\" : router,\r\n        \r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.attach(\"appify.spa\",spa);\r\n});\r\n"]}