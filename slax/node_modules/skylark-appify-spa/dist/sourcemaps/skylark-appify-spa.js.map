{"version":3,"sources":["skylark-appify-spa.js"],"names":["define","skylark","langx","routers","Deferred","createEvent","type","props","e","CustomEvent","safeMixin","app","router","Router","Route","inherit","klassName","init","name","setting","this","overrided","content","forceRefresh","data","self","forEach","eventName","isFunction","on","_entering","ctx","force","_prepared","prepare","getConfigData","key","getNamedValue","window","location","pathname","match","regex","d","_setting","controllerSetting","controller","contentPath","require","resolve","then","route","result","trigger","when","render","context","perform","RouteController","Evented","call","Page","params","mixin","routeViewer","_params","_rvc","document","querySelector","_router","proxy","refresh","curCtx","current","previous","undefined","isString","innerHTML","appendChild","Plugin","hookers","split","isHooked","indexOf","plugin","PluginController","Application","config","plugins","_plugins","_config","each","pluginName","routes","_page","spa","page","title","baseUrl","URL","baseURI","homePath","getConfig","go","path","promises0","map","all","promises1","lazy","promises2","concat","run","start","attach","main"],"mappings":"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","file":"../skylark-appify-spa.js","sourcesContent":["define('skylark-appify-spa/spa',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-appify-routers\"\r\n], function(skylark, langx, routers) {\r\n    var Deferred = langx.Deferred;\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n        return langx.safeMixin(e, props);\r\n    }\r\n\r\n    var router = new routers.Router();\r\n\r\n    var Route = router.Route = router.Route.inherit({\r\n        klassName: \"SpaRoute\",\r\n\r\n        init: function(name, setting) {\r\n            this.overrided(name, setting);\r\n            this.content = setting.content;\r\n            this.forceRefresh = setting.forceRefresh;\r\n            this.data = setting.data;\r\n            //this.lazy = !!setting.lazy;\r\n            var self = this;\r\n            [\"preparing\", \"rendering\", \"rendered\"].forEach(function(eventName) {\r\n                if (langx.isFunction(setting[eventName])) {\r\n                    self.on(eventName, setting[eventName]);\r\n                }\r\n            });\r\n        },\r\n\r\n        _entering: function(ctx) {\r\n            if (this.forceRefresh || ctx.force || !this._prepared) {\r\n                return this.prepare();\r\n            }\r\n            return this;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        getNamedValue: function() {\r\n            return window.location.pathname.match(this.regex);\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n\r\n                self = this,\r\n                content = setting.content,\r\n                contentPath = setting.contentPath;\r\n\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                d.resolve();\r\n            });\r\n\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    route: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        render: function(ctx) {\r\n            var e = createEvent(\"rendering\", {\r\n                route: this,\r\n                context: ctx,\r\n                content: this.content\r\n            });\r\n            this.trigger(e);\r\n            return e.content;\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    var RouteController = langx.Evented.inherit({\r\n        klassName: \"SpaRouteController\",\r\n\r\n        init: function(route, setting) {\r\n            setting = setting || {};\r\n            this.content = setting.content;\r\n            this.data = setting.data;\r\n        },\r\n\r\n        getConfigData: function(key) {\r\n            return key ? this.data[key] : this.data;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Page = langx.Evented.inherit({\r\n        klassName: \"SpaPage\",\r\n\r\n        init: function(params) {\r\n            params = langx.mixin({\r\n                \"routeViewer\": \"body\"\r\n            }, params);\r\n\r\n            this._params = params;\r\n            this._rvc = document.querySelector(params.routeViewer);\r\n            this._router = router;\r\n\r\n            router.on(\"routed\", langx.proxy(this, \"refresh\"));\r\n        },\r\n\r\n        prepare: function() {\r\n\r\n        },\r\n\r\n        //Refreshes the route\r\n        refresh: function() {\r\n            var curCtx = router.current(),\r\n                prevCtx = router.previous();\r\n            var content = curCtx.route.render(curCtx);\r\n            if (content===undefined || content===null) {\r\n                return;\r\n            }\r\n            if (langx.isString(content)) {\r\n                this._rvc.innerHTML = content;\r\n            } else {\r\n                this._rvc.innerHTML = \"\";\r\n                this._rvc.appendChild(content);\r\n            }\r\n            curCtx.route.trigger(createEvent(\"rendered\", {\r\n                route: curCtx.route,\r\n                content: content\r\n            }));\r\n        }\r\n    });\r\n\r\n    var Plugin = langx.Evented.inherit({\r\n        klassName: \"SpaPlugin\",\r\n\r\n        init: function(name, setting) {\r\n            this.name = name;\r\n\r\n            if (langx.isString(setting.hookers)) {\r\n                setting.hookers = setting.hookers.split(\" \");\r\n            }\r\n            this._setting = setting;\r\n        },\r\n\r\n        isHooked: function(eventName) {\r\n            var hookers = this._setting.hookers || [];\r\n            return hookers.indexOf(eventName) > -1;\r\n        },\r\n\r\n        prepare: function() {\r\n            var d = new Deferred(),\r\n                setting = this._setting,\r\n                controllerSetting = setting.controller,\r\n                controller = this.controller,\r\n                self = this;\r\n            require([controllerSetting.type], function(type) {\r\n                controller = self.controller = new type(controllerSetting);\r\n                router.on(setting.hookers, {\r\n                    plugin: self\r\n                }, langx.proxy(controller.perform, controller));\r\n                d.resolve();\r\n            });\r\n            return d.then(function() {\r\n                var e = createEvent(\"preparing\", {\r\n                    plugin: self,\r\n                    result: true\r\n                });\r\n                self.trigger(e);\r\n                return Deferred.when(e.result).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        trigger: function(e) {\r\n            var controller = this.controller;\r\n            if (controller) {\r\n                return controller.perform(e);\r\n            } else {\r\n                return this.overrided(e);\r\n            }\r\n        }\r\n    });\r\n\r\n    var PluginController = langx.Evented.inherit({\r\n        klassName: \"SpaPluginController\",\r\n\r\n        init: function(plugin) {\r\n            this.plugin = plugin;\r\n        },\r\n\r\n        perform: function(e) {\r\n            var eventName = e.type;\r\n            if (this[eventName]) {\r\n                return this[eventName].call(this, e);\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var Application = langx.Evented.inherit({\r\n        klassName: \"SpaApplication\",\r\n\r\n        init: function(config) {\r\n            if (app) {\r\n                return app;\r\n            }\r\n            var plugins = this._plugins = {};\r\n\r\n            config = this._config = langx.mixin({\r\n                plugins: {}\r\n            }, config, true);\r\n\r\n            langx.each(config.plugins, function(pluginName, setting) {\r\n                plugins[pluginName] = new Plugin(pluginName, setting);\r\n            });\r\n\r\n            router.routes(config.routes);\r\n\r\n            this._router = router;\r\n\r\n            this._page = new spa.Page(config.page);\r\n\r\n            document.title = config.title;\r\n            var baseUrl = config.baseUrl;\r\n            if (baseUrl === undefined) {\r\n                baseUrl = config.baseUrl = (new langx.URL(document.baseURI)).pathname;\r\n            }\r\n            router.baseUrl(baseUrl);\r\n\r\n            if (config.homePath) {\r\n                router.homePath(config.homePath);\r\n            }\r\n\r\n            app = this;\r\n        },\r\n\r\n        baseUrl : function() {\r\n            return router.baseUrl();\r\n        },\r\n\r\n        getConfig: function(key) {\r\n            return key ? this._config[key] : this._config;\r\n        },\r\n\r\n        go: function(path, force) {\r\n            router.go(path, force);\r\n            return this;\r\n        },\r\n\r\n        page: function() {\r\n            return this._page;\r\n        },\r\n\r\n        prepare: function() {\r\n            if (this._prepared) {\r\n                return Deferred.resolve();\r\n            }\r\n            var self = this;\r\n\r\n            var promises0 = langx.map(this._plugins, function(plugin, name) {\r\n                if (plugin.isHooked(\"starting\")) {\r\n                    return plugin.prepare();\r\n                }\r\n            });\r\n\r\n            return Deferred.all(promises0).then(function() {\r\n                router.trigger(createEvent(\"starting\", {\r\n                    spa: self\r\n                }));\r\n                var promises1 = langx.map(router.routes(), function(route, name) {\r\n                        if (route.lazy === false) {\r\n                            return route.prepare();\r\n                        }\r\n                    }),\r\n                    promises2 = langx.map(self._plugins, function(plugin, name) {\r\n                        if (!plugin.isHooked(\"starting\")) {\r\n                            return plugin.prepare();\r\n                        }\r\n                    });\r\n\r\n\r\n                return Deferred.all(promises1.concat(promises2)).then(function() {\r\n                    self._prepared = true;\r\n                });\r\n            });\r\n        },\r\n\r\n        run: function() {\r\n            this._router.start();\r\n            router.trigger(createEvent(\"started\", {\r\n                spa: this\r\n            }));\r\n        }\r\n    });\r\n\r\n    var app;\r\n    var spa = function(config) {\r\n        if (!app) {\r\n            window[config.name || \"app\"] = app = new spa.Application(config);\r\n        }\r\n\r\n        return app;\r\n    }\r\n\r\n    langx.mixin(spa, {\r\n        \"Application\": Application,\r\n\r\n        \"Page\": Page,\r\n\r\n        \"Plugin\": Plugin,\r\n        \"PluginController\": PluginController,\r\n\r\n        \"Route\": Route,\r\n\r\n        \"router\" : router,\r\n        \r\n        \"RouteController\": RouteController\r\n\r\n    });\r\n\r\n    return skylark.attach(\"appify.spa\",spa);\r\n});\r\n\ndefine('skylark-appify-spa/main',[\r\n    \"./spa\"\r\n], function(spa) {\r\n    return spa;\r\n});\r\n\ndefine('skylark-appify-spa', ['skylark-appify-spa/main'], function (main) { return main; });\n\n"]}