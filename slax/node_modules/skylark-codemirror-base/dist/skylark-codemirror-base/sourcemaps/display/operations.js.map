{"version":3,"sources":["display/operations.js"],"names":["define","m_pos","m_spans","position_measurement","m_event","m_dom","m_operation_group","m_focus","m_scrollbars","m_selection","m_scrolling","m_update_display","m_update_lines","nextOpId","startOperation","cm","curOp","viewChanged","startHeight","doc","height","forceUpdate","updateInput","typing","changeObjs","cursorActivityHandlers","cursorActivityCalled","selectionChanged","updateMaxLine","scrollLeft","scrollTop","scrollToPos","focus","id","pushOperation","endOperation","op","finishOperation","group","i","ops","length","endOperation_R1","updatedDisplay","mustUpdate","updateDisplayIfNeeded","update","endOperation_R2","endOperation_W2","endOperation_finish","endOperations","display","maybeClipScrollbars","findMaxLine","from","line","viewFrom","to","viewTo","maxLineChanged","options","lineWrapping","DisplayUpdate","top","ensure","updateHeightsInViewport","barMeasure","measureForScrollbars","adjustWidthTo","measureChar","maxLine","text","left","sizerWidth","scrollWidth","Math","max","scroller","clientWidth","sizer","offsetLeft","scrollGap","barWidth","maxScrollLeft","displayWidth","preparedSelection","input","prepareSelection","style","minWidth","setScrollLeft","min","takeFocus","activeElt","showSelection","updateScrollbars","setDocumentHeight","restartBlink","state","focused","reset","ensureFocus","postUpdateDisplay","wheelStartX","wheelStartY","setScrollTop","forceScroll","rect","scrollPosIntoView","clipPos","margin","maybeScrollWindow","hidden","maybeHiddenMarkers","unhidden","maybeUnhiddenMarkers","lines","signal","wrapper","offsetHeight","finish","runInOp","f","operation","apply","arguments","methodOp","this","docMethodOp"],"mappings":"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","file":"../../display/operations.js","sourcesContent":["define([\n    '../line/pos',\n    '../line/spans',\n    '../measurement/position_measurement',\n    '../util/event',\n    '../util/dom',\n    '../util/operation_group',\n    './focus',\n    './scrollbars',\n    './selection',\n    './scrolling',\n    './update_display',\n    './update_lines'\n], function (m_pos, m_spans, position_measurement, m_event, m_dom, m_operation_group, m_focus, m_scrollbars, m_selection, m_scrolling, m_update_display, m_update_lines) {\n    'use strict';\n    let nextOpId = 0;\n    function startOperation(cm) {\n        cm.curOp = {\n            cm: cm,\n            viewChanged: false,\n            startHeight: cm.doc.height,\n            forceUpdate: false,\n            updateInput: 0,\n            typing: false,\n            changeObjs: null,\n            cursorActivityHandlers: null,\n            cursorActivityCalled: 0,\n            selectionChanged: false,\n            updateMaxLine: false,\n            scrollLeft: null,\n            scrollTop: null,\n            scrollToPos: null,\n            focus: false,\n            id: ++nextOpId\n        };\n        m_operation_group.pushOperation(cm.curOp);\n    }\n    function endOperation(cm) {\n        let op = cm.curOp;\n        if (op)\n            m_operation_group.finishOperation(op, group => {\n                for (let i = 0; i < group.ops.length; i++)\n                    group.ops[i].cm.curOp = null;\n                endOperations(group);\n            });\n    }\n    function endOperations(group) {\n        let ops = group.ops;\n        for (let i = 0; i < ops.length; i++)\n            endOperation_R1(ops[i]);\n        for (let i = 0; i < ops.length; i++)\n            endOperation_W1(ops[i]);\n        for (let i = 0; i < ops.length; i++)\n            endOperation_R2(ops[i]);\n        for (let i = 0; i < ops.length; i++)\n            endOperation_W2(ops[i]);\n        for (let i = 0; i < ops.length; i++)\n            endOperation_finish(ops[i]);\n    }\n    function endOperation_R1(op) {\n        let cm = op.cm, display = cm.display;\n        m_update_display.maybeClipScrollbars(cm);\n        if (op.updateMaxLine)\n            m_spans.findMaxLine(cm);\n        op.mustUpdate = op.viewChanged || op.forceUpdate || op.scrollTop != null || op.scrollToPos && (op.scrollToPos.from.line < display.viewFrom || op.scrollToPos.to.line >= display.viewTo) || display.maxLineChanged && cm.options.lineWrapping;\n        op.update = op.mustUpdate && new m_update_display.DisplayUpdate(cm, op.mustUpdate && {\n            top: op.scrollTop,\n            ensure: op.scrollToPos\n        }, op.forceUpdate);\n    }\n    function endOperation_W1(op) {\n        op.updatedDisplay = op.mustUpdate && m_update_display.updateDisplayIfNeeded(op.cm, op.update);\n    }\n    function endOperation_R2(op) {\n        let cm = op.cm, display = cm.display;\n        if (op.updatedDisplay)\n            m_update_lines.updateHeightsInViewport(cm);\n        op.barMeasure = m_scrollbars.measureForScrollbars(cm);\n        if (display.maxLineChanged && !cm.options.lineWrapping) {\n            op.adjustWidthTo = position_measurement.measureChar(cm, display.maxLine, display.maxLine.text.length).left + 3;\n            cm.display.sizerWidth = op.adjustWidthTo;\n            op.barMeasure.scrollWidth = Math.max(display.scroller.clientWidth, display.sizer.offsetLeft + op.adjustWidthTo + position_measurement.scrollGap(cm) + cm.display.barWidth);\n            op.maxScrollLeft = Math.max(0, display.sizer.offsetLeft + op.adjustWidthTo - position_measurement.displayWidth(cm));\n        }\n        if (op.updatedDisplay || op.selectionChanged)\n            op.preparedSelection = display.input.prepareSelection();\n    }\n    function endOperation_W2(op) {\n        let cm = op.cm;\n        if (op.adjustWidthTo != null) {\n            cm.display.sizer.style.minWidth = op.adjustWidthTo + 'px';\n            if (op.maxScrollLeft < cm.doc.scrollLeft)\n                m_scrolling.setScrollLeft(cm, Math.min(cm.display.scroller.scrollLeft, op.maxScrollLeft), true);\n            cm.display.maxLineChanged = false;\n        }\n        let takeFocus = op.focus && op.focus == m_dom.activeElt();\n        if (op.preparedSelection)\n            cm.display.input.showSelection(op.preparedSelection, takeFocus);\n        if (op.updatedDisplay || op.startHeight != cm.doc.height)\n            m_scrollbars.updateScrollbars(cm, op.barMeasure);\n        if (op.updatedDisplay)\n            m_update_display.setDocumentHeight(cm, op.barMeasure);\n        if (op.selectionChanged)\n            m_selection.restartBlink(cm);\n        if (cm.state.focused && op.updateInput)\n            cm.display.input.reset(op.typing);\n        if (takeFocus)\n            m_focus.ensureFocus(op.cm);\n    }\n    function endOperation_finish(op) {\n        let cm = op.cm, display = cm.display, doc = cm.doc;\n        if (op.updatedDisplay)\n            m_update_display.postUpdateDisplay(cm, op.update);\n        if (display.wheelStartX != null && (op.scrollTop != null || op.scrollLeft != null || op.scrollToPos))\n            display.wheelStartX = display.wheelStartY = null;\n        if (op.scrollTop != null)\n            m_scrolling.setScrollTop(cm, op.scrollTop, op.forceScroll);\n        if (op.scrollLeft != null)\n            m_scrolling.setScrollLeft(cm, op.scrollLeft, true, true);\n        if (op.scrollToPos) {\n            let rect = m_scrolling.scrollPosIntoView(cm, m_pos.clipPos(doc, op.scrollToPos.from), m_pos.clipPos(doc, op.scrollToPos.to), op.scrollToPos.margin);\n            m_scrolling.maybeScrollWindow(cm, rect);\n        }\n        let hidden = op.maybeHiddenMarkers, unhidden = op.maybeUnhiddenMarkers;\n        if (hidden)\n            for (let i = 0; i < hidden.length; ++i)\n                if (!hidden[i].lines.length)\n                    m_event.signal(hidden[i], 'hide');\n        if (unhidden)\n            for (let i = 0; i < unhidden.length; ++i)\n                if (unhidden[i].lines.length)\n                    m_event.signal(unhidden[i], 'unhide');\n        if (display.wrapper.offsetHeight)\n            doc.scrollTop = cm.display.scroller.scrollTop;\n        if (op.changeObjs)\n            m_event.signal(cm, 'changes', cm, op.changeObjs);\n        if (op.update)\n            op.update.finish();\n    }\n    function runInOp(cm, f) {\n        if (cm.curOp)\n            return f();\n        startOperation(cm);\n        try {\n            return f();\n        } finally {\n            endOperation(cm);\n        }\n    }\n    function operation(cm, f) {\n        return function () {\n            if (cm.curOp)\n                return f.apply(cm, arguments);\n            startOperation(cm);\n            try {\n                return f.apply(cm, arguments);\n            } finally {\n                endOperation(cm);\n            }\n        };\n    }\n    function methodOp(f) {\n        return function () {\n            if (this.curOp)\n                return f.apply(this, arguments);\n            startOperation(this);\n            try {\n                return f.apply(this, arguments);\n            } finally {\n                endOperation(this);\n            }\n        };\n    }\n    function docMethodOp(f) {\n        return function () {\n            let cm = this.cm;\n            if (!cm || cm.curOp)\n                return f.apply(this, arguments);\n            startOperation(cm);\n            try {\n                return f.apply(this, arguments);\n            } finally {\n                endOperation(cm);\n            }\n        };\n    }\n    return {\n        startOperation: startOperation,\n        endOperation: endOperation,\n        runInOp: runInOp,\n        operation: operation,\n        methodOp: methodOp,\n        docMethodOp: docMethodOp\n    };\n});"]}