{"version":3,"sources":["display/update_display.js"],"names":["define","saw_special_spans","m_spans","m_utils_line","m_position_measurement","m_browser","m_dom","m_event","m_misc","m_update_line","m_selection","m_update_lines","m_view_tracking","DisplayUpdate","[object Object]","cm","viewport","force","display","this","visible","visibleLines","doc","editorIsHidden","wrapper","offsetWidth","wrapperHeight","clientHeight","wrapperWidth","clientWidth","oldDisplayWidth","displayWidth","dims","getDimensions","events","emitter","type","hasHandler","push","arguments","i","length","signal","apply","updateDisplayIfNeeded","update","resetView","from","viewFrom","to","viewTo","updateLineNumbers","renderedView","view","countDirtyView","maybeUpdateLineNumberWidth","end","first","size","Math","max","options","viewportMargin","min","sawCollapsedSpans","visualLineNo","visualLineEndNo","different","lastWrapHeight","lastWrapWidth","adjustView","viewOffset","heightAtLine","getLine","mover","style","top","toUpdate","selSnapshot","hasFocus","active","activeElt","contains","lineDiv","result","window","getSelection","sel","anchorNode","extend","anchorOffset","focusNode","focusOffset","selectionSnapshot","updateNumbersFrom","lineNumbers","container","cur","firstChild","rm","node","next","nextSibling","webkit","mac","currentWheelTarget","parentNode","removeChild","lineN","lineView","hidden","updateNumber","lineNumber","changes","indexOf","updateLineForChanges","removeChildren","appendChild","document","createTextNode","lineNumberFor","buildLineElement","insertBefore","patchDisplay","snapshot","focus","body","range","createRange","setEnd","collapse","removeAllRanges","addRange","restoreSelection","cursorDiv","selectionDiv","gutters","height","sizer","minHeight","startWorker","postUpdateDisplay","lineWrapping","paddingVert","displayHeight","updateHeightsInViewport","barMeasure","measureForScrollbars","updateSelection","updateScrollbars","setDocumentHeight","reportedViewFrom","reportedViewTo","measure","docHeight","heightForcer","barHeight","scrollGap","maybeClipScrollbars","scrollbarsClipped","scroller","nativeBarWidth","marginBottom","borderRightWidth","updateDisplaySimple","finish","updateGutterSpace","width","marginLeft"],"mappings":"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","file":"../../display/update_display.js","sourcesContent":["define([\n    '../line/saw_special_spans',\n    '../line/spans',\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/browser',\n    '../util/dom',\n    '../util/event',\n    '../util/misc',\n    './update_line',\n//    './highlight_worker', // dependence cycle \n//    './line_numbers',\n//    './scrollbars',\n    './selection',\n    './update_lines',\n    './view_tracking'\n], function (\n    saw_special_spans, \n    m_spans, \n    m_utils_line, \n    m_position_measurement, \n    m_browser, \n    m_dom, \n    m_event, \n    m_misc, \n    m_update_line, \n//    j, \n//    k, \n//    l, \n    m_selection, \n    m_update_lines, \n    m_view_tracking\n) {\n    'use strict';\n    class DisplayUpdate {\n        constructor(cm, viewport, force) {\n            let display = cm.display;\n            this.viewport = viewport;\n            this.visible = m_update_lines.visibleLines(display, cm.doc, viewport);\n            this.editorIsHidden = !display.wrapper.offsetWidth;\n            this.wrapperHeight = display.wrapper.clientHeight;\n            this.wrapperWidth = display.wrapper.clientWidth;\n            this.oldDisplayWidth = m_position_measurement.displayWidth(cm);\n            this.force = force;\n            this.dims = m_position_measurement.getDimensions(cm);\n            this.events = [];\n        }\n        signal(emitter, type) {\n            if (m_event.hasHandler(emitter, type))\n                this.events.push(arguments);\n        }\n        finish() {\n            for (let i = 0; i < this.events.length; i++)\n                m_event.signal.apply(null, this.events[i]);\n        }\n    }\n    function maybeClipScrollbars(cm) {\n        let display = cm.display;\n        if (!display.scrollbarsClipped && display.scroller.offsetWidth) {\n            display.nativeBarWidth = display.scroller.offsetWidth - display.scroller.clientWidth;\n            display.heightForcer.style.height = m_position_measurement.scrollGap(cm) + 'px';\n            display.sizer.style.marginBottom = -display.nativeBarWidth + 'px';\n            display.sizer.style.borderRightWidth = m_position_measurement.scrollGap(cm) + 'px';\n            display.scrollbarsClipped = true;\n        }\n    }\n    function selectionSnapshot(cm) {\n        if (cm.hasFocus())\n            return null;\n        let active = m_dom.activeElt();\n        if (!active || !m_dom.contains(cm.display.lineDiv, active))\n            return null;\n        let result = { activeElt: active };\n        if (window.getSelection) {\n            let sel = window.getSelection();\n            if (sel.anchorNode && sel.extend && m_dom.contains(cm.display.lineDiv, sel.anchorNode)) {\n                result.anchorNode = sel.anchorNode;\n                result.anchorOffset = sel.anchorOffset;\n                result.focusNode = sel.focusNode;\n                result.focusOffset = sel.focusOffset;\n            }\n        }\n        return result;\n    }\n    function restoreSelection(snapshot) {\n        if (!snapshot || !snapshot.activeElt || snapshot.activeElt == m_dom.activeElt())\n            return;\n        snapshot.activeElt.focus();\n        if (snapshot.anchorNode && m_dom.contains(document.body, snapshot.anchorNode) && m_dom.contains(document.body, snapshot.focusNode)) {\n            let sel = window.getSelection(), range = document.createRange();\n            range.setEnd(snapshot.anchorNode, snapshot.anchorOffset);\n            range.collapse(false);\n            sel.removeAllRanges();\n            sel.addRange(range);\n            sel.extend(snapshot.focusNode, snapshot.focusOffset);\n        }\n    }\n    function updateDisplayIfNeeded(cm, update) {\n        let display = cm.display, doc = cm.doc;\n        if (update.editorIsHidden) {\n            m_view_tracking.resetView(cm);\n            return false;\n        }\n        if (!update.force && update.visible.from >= display.viewFrom && update.visible.to <= display.viewTo && (display.updateLineNumbers == null || display.updateLineNumbers >= display.viewTo) && display.renderedView == display.view && m_view_tracking.countDirtyView(cm) == 0)\n            return false;\n        if (cm.maybeUpdateLineNumberWidth()) { //if (k.maybeUpdateLineNumberWidth(cm)) {\n            m_view_tracking.resetView(cm);\n            update.dims = m_position_measurement.getDimensions(cm);\n        }\n        let end = doc.first + doc.size;\n        let from = Math.max(update.visible.from - cm.options.viewportMargin, doc.first);\n        let to = Math.min(end, update.visible.to + cm.options.viewportMargin);\n        if (display.viewFrom < from && from - display.viewFrom < 20)\n            from = Math.max(doc.first, display.viewFrom);\n        if (display.viewTo > to && display.viewTo - to < 20)\n            to = Math.min(end, display.viewTo);\n        if (saw_special_spans.sawCollapsedSpans) {\n            from = m_spans.visualLineNo(cm.doc, from);\n            to = m_spans.visualLineEndNo(cm.doc, to);\n        }\n        let different = from != display.viewFrom || to != display.viewTo || display.lastWrapHeight != update.wrapperHeight || display.lastWrapWidth != update.wrapperWidth;\n        m_view_tracking.adjustView(cm, from, to);\n        display.viewOffset = m_spans.heightAtLine(m_utils_line.getLine(cm.doc, display.viewFrom));\n        cm.display.mover.style.top = display.viewOffset + 'px';\n        let toUpdate = m_view_tracking.countDirtyView(cm);\n        if (!different && toUpdate == 0 && !update.force && display.renderedView == display.view && (display.updateLineNumbers == null || display.updateLineNumbers >= display.viewTo))\n            return false;\n        let selSnapshot = selectionSnapshot(cm);\n        if (toUpdate > 4)\n            display.lineDiv.style.display = 'none';\n        patchDisplay(cm, display.updateLineNumbers, update.dims);\n        if (toUpdate > 4)\n            display.lineDiv.style.display = '';\n        display.renderedView = display.view;\n        restoreSelection(selSnapshot);\n        m_dom.removeChildren(display.cursorDiv);\n        m_dom.removeChildren(display.selectionDiv);\n        display.gutters.style.height = display.sizer.style.minHeight = 0;\n        if (different) {\n            display.lastWrapHeight = update.wrapperHeight;\n            display.lastWrapWidth = update.wrapperWidth;\n            cm.startWorker(400); // j.startWorker(cm, 400);\n        }\n        display.updateLineNumbers = null;\n        return true;\n    }\n    function postUpdateDisplay(cm, update) {\n        let viewport = update.viewport;\n        for (let first = true;; first = false) {\n            if (!first || !cm.options.lineWrapping || update.oldDisplayWidth == m_position_measurement.displayWidth(cm)) {\n                if (viewport && viewport.top != null)\n                    viewport = { top: Math.min(cm.doc.height + m_position_measurement.paddingVert(cm.display) - m_position_measurement.displayHeight(cm), viewport.top) };\n                update.visible = m_update_lines.visibleLines(cm.display, cm.doc, viewport);\n                if (update.visible.from >= cm.display.viewFrom && update.visible.to <= cm.display.viewTo)\n                    break;\n            }\n            if (!updateDisplayIfNeeded(cm, update))\n                break;\n            m_update_lines.updateHeightsInViewport(cm);\n            let barMeasure = cm.measureForScrollbars(); //l.measureForScrollbars(cm);\n            m_selection.updateSelection(cm);\n            cm.updateScrollbars(barMeasure); //l.updateScrollbars(cm, barMeasure);\n            setDocumentHeight(cm, barMeasure);\n            update.force = false;\n        }\n        update.signal(cm, 'update', cm);\n        if (cm.display.viewFrom != cm.display.reportedViewFrom || cm.display.viewTo != cm.display.reportedViewTo) {\n            update.signal(cm, 'viewportChange', cm, cm.display.viewFrom, cm.display.viewTo);\n            cm.display.reportedViewFrom = cm.display.viewFrom;\n            cm.display.reportedViewTo = cm.display.viewTo;\n        }\n    }\n    function updateDisplaySimple(cm, viewport) {\n        let update = new DisplayUpdate(cm, viewport);\n        if (updateDisplayIfNeeded(cm, update)) {\n            m_update_lines.updateHeightsInViewport(cm);\n            postUpdateDisplay(cm, update);\n            let barMeasure = cm.measureForScrollbars(); //l.measureForScrollbars(cm);\n            m_selection.updateSelection(cm);\n            cm.updateScrollbars(barMeasure); // l.updateScrollbars(cm, barMeasure);\n            setDocumentHeight(cm, barMeasure);\n            update.finish();\n        }\n    }\n    function patchDisplay(cm, updateNumbersFrom, dims) {\n        let display = cm.display, lineNumbers = cm.options.lineNumbers;\n        let container = display.lineDiv, cur = container.firstChild;\n        function rm(node) {\n            let next = node.nextSibling;\n            if (m_browser.webkit && m_browser.mac && cm.display.currentWheelTarget == node)\n                node.style.display = 'none';\n            else\n                node.parentNode.removeChild(node);\n            return next;\n        }\n        let view = display.view, lineN = display.viewFrom;\n        for (let i = 0; i < view.length; i++) {\n            let lineView = view[i];\n            if (lineView.hidden) {\n            } else if (!lineView.node || lineView.node.parentNode != container) {\n                let node = m_update_line.buildLineElement(cm, lineView, lineN, dims);\n                container.insertBefore(node, cur);\n            } else {\n                while (cur != lineView.node)\n                    cur = rm(cur);\n                let updateNumber = lineNumbers && updateNumbersFrom != null && updateNumbersFrom <= lineN && lineView.lineNumber;\n                if (lineView.changes) {\n                    if (m_misc.indexOf(lineView.changes, 'gutter') > -1)\n                        updateNumber = false;\n                    m_update_line.updateLineForChanges(cm, lineView, lineN, dims);\n                }\n                if (updateNumber) {\n                    m_dom.removeChildren(lineView.lineNumber);\n                    lineView.lineNumber.appendChild(document.createTextNode(m_utils_line.lineNumberFor(cm.options, lineN)));\n                }\n                cur = lineView.node.nextSibling;\n            }\n            lineN += lineView.size;\n        }\n        while (cur)\n            cur = rm(cur);\n    }\n    function updateGutterSpace(cm) {\n        let width = cm.display.gutters.offsetWidth;\n        cm.display.sizer.style.marginLeft = width + 'px';\n    }\n    function setDocumentHeight(cm, measure) {\n        cm.display.sizer.style.minHeight = measure.docHeight + 'px';\n        cm.display.heightForcer.style.top = measure.docHeight + 'px';\n        cm.display.gutters.style.height = measure.docHeight + cm.display.barHeight + m_position_measurement.scrollGap(cm) + 'px';\n    }\n    return {\n        DisplayUpdate: DisplayUpdate,\n        maybeClipScrollbars: maybeClipScrollbars,\n        updateDisplayIfNeeded: updateDisplayIfNeeded,\n        postUpdateDisplay: postUpdateDisplay,\n        updateDisplaySimple: updateDisplaySimple,\n        updateGutterSpace: updateGutterSpace,\n        setDocumentHeight: setDocumentHeight\n    };\n});"]}