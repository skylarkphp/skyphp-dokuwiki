{"version":3,"sources":["model/document_data.js"],"names":["define","mode_state","operations","view_tracking","line_data","e","f","g","h","i","j","isWholeLineUpdate","doc","change","from","ch","to","lst","text","cm","options","wholeLineUpdateBefore","setDirectionClass","direction","addClass","rmClass","display","lineDiv","updateDoc","markedSpans","estimateHeight","spansFor","n","update","line","spans","updateLine","signalLater","linesFor","start","end","result","push","Line","firstLine","getLine","lastLine","lastText","lastSpans","length","nlines","full","insert","remove","size","added","slice","linkedDocs","sharedHistOnly","propagate","skip","sharedHist","linked","rel","shared","attachDoc","Error","estimateLineHeights","loadMode","lineWrapping","findMaxLine","mode","modeOption","regChange","directionChanged","runInOp"],"mappings":"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","file":"../../model/document_data.js","sourcesContent":["define([\n    '../display/mode_state',\n    '../display/operations',\n    '../display/view_tracking',\n    '../line/line_data',\n    '../line/spans',\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/dom',\n    '../util/misc',\n    '../util/operation_group'\n], function (mode_state, operations, view_tracking, line_data, e, f, g, h, i, j) {\n    'use strict';\n    function isWholeLineUpdate(doc, change) {\n        return change.from.ch == 0 && change.to.ch == 0 && i.lst(change.text) == '' && (!doc.cm || doc.cm.options.wholeLineUpdateBefore);\n    }\n    function updateDoc(doc, change, markedSpans, estimateHeight) {\n        function spansFor(n) {\n            return markedSpans ? markedSpans[n] : null;\n        }\n        function update(line, text, spans) {\n            line_data.updateLine(line, text, spans, estimateHeight);\n            j.signalLater(line, 'change', line, change);\n        }\n        function linesFor(start, end) {\n            let result = [];\n            for (let i = start; i < end; ++i)\n                result.push(new line_data.Line(text[i], spansFor(i), estimateHeight));\n            return result;\n        }\n        let from = change.from, to = change.to, text = change.text;\n        let firstLine = f.getLine(doc, from.line), lastLine = f.getLine(doc, to.line);\n        let lastText = i.lst(text), lastSpans = spansFor(text.length - 1), nlines = to.line - from.line;\n        if (change.full) {\n            doc.insert(0, linesFor(0, text.length));\n            doc.remove(text.length, doc.size - text.length);\n        } else if (isWholeLineUpdate(doc, change)) {\n            let added = linesFor(0, text.length - 1);\n            update(lastLine, lastLine.text, lastSpans);\n            if (nlines)\n                doc.remove(from.line, nlines);\n            if (added.length)\n                doc.insert(from.line, added);\n        } else if (firstLine == lastLine) {\n            if (text.length == 1) {\n                update(firstLine, firstLine.text.slice(0, from.ch) + lastText + firstLine.text.slice(to.ch), lastSpans);\n            } else {\n                let added = linesFor(1, text.length - 1);\n                added.push(new line_data.Line(lastText + firstLine.text.slice(to.ch), lastSpans, estimateHeight));\n                update(firstLine, firstLine.text.slice(0, from.ch) + text[0], spansFor(0));\n                doc.insert(from.line + 1, added);\n            }\n        } else if (text.length == 1) {\n            update(firstLine, firstLine.text.slice(0, from.ch) + text[0] + lastLine.text.slice(to.ch), spansFor(0));\n            doc.remove(from.line + 1, nlines);\n        } else {\n            update(firstLine, firstLine.text.slice(0, from.ch) + text[0], spansFor(0));\n            update(lastLine, lastText + lastLine.text.slice(to.ch), lastSpans);\n            let added = linesFor(1, text.length - 1);\n            if (nlines > 1)\n                doc.remove(from.line + 1, nlines - 1);\n            doc.insert(from.line + 1, added);\n        }\n        j.signalLater(doc, 'change', doc, change);\n    }\n    function linkedDocs(doc, f, sharedHistOnly) {\n        function propagate(doc, skip, sharedHist) {\n            if (doc.linked)\n                for (let i = 0; i < doc.linked.length; ++i) {\n                    let rel = doc.linked[i];\n                    if (rel.doc == skip)\n                        continue;\n                    let shared = sharedHist && rel.sharedHist;\n                    if (sharedHistOnly && !shared)\n                        continue;\n                    f(rel.doc, shared);\n                    propagate(rel.doc, doc, shared);\n                }\n        }\n        propagate(doc, null, true);\n    }\n    function attachDoc(cm, doc) {\n        if (doc.cm)\n            throw new Error('This document is already in use.');\n        cm.doc = doc;\n        doc.cm = cm;\n        g.estimateLineHeights(cm);\n        mode_state.loadMode(cm);\n        setDirectionClass(cm);\n        if (!cm.options.lineWrapping)\n            e.findMaxLine(cm);\n        cm.options.mode = doc.modeOption;\n        view_tracking.regChange(cm);\n    }\n    function setDirectionClass(cm) {\n        ;\n        (cm.doc.direction == 'rtl' ? h.addClass : h.rmClass)(cm.display.lineDiv, 'CodeMirror-rtl');\n    }\n    function directionChanged(cm) {\n        operations.runInOp(cm, () => {\n            setDirectionClass(cm);\n            view_tracking.regChange(cm);\n        });\n    }\n    return {\n        isWholeLineUpdate: isWholeLineUpdate,\n        updateDoc: updateDoc,\n        linkedDocs: linkedDocs,\n        attachDoc: attachDoc,\n        directionChanged: directionChanged\n    };\n});"]}