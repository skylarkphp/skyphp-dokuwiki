{"version":3,"sources":["list.js"],"names":["define","arrays","collections","Collection","List","inherit","klassName","_getInnerItems","this","_items","_clear","contains","item","indexOf","count","length","getAll","get","index","items","Error","getRange","a1","i","Math","max","push","iterator","self","hasNext","next","init","data","makeArray"],"mappings":";;;;;;;AAAAA,QACI,uBACA,gBACA,gBACD,SAASC,EAAOC,EAAaC,GAwI5B,OAtIWD,EAAYE,KAAOD,EAAWE,SAErCC,UAAa,OAGbC,eAAiB,WACb,OAAOC,KAAKC,QAGhBC,OAAS,WACLF,KAAKC,WAGTE,SAAY,SAAqBC,GAY7B,OADYJ,KAAKD,iBACJM,QAAQD,IAAS,GAGlCE,MAAS,WAQL,OADYN,KAAKD,iBACJQ,QAGjBC,OAAU,WAON,OAAOR,KAAKD,kBAGhBU,IAAO,SAASC,GAWZ,IAAIC,EAAQX,KAAKD,iBACjB,GAAIW,EAAQ,GAAKA,GAASC,EAAMJ,OAC5B,MAAM,IAAIK,MAAM,aAAeF,GAEnC,OAAOC,EAAMD,IAGjBG,SAAY,SAAqBH,EAAkBJ,GAiB/C,IAFA,IAAIK,EAAQX,KAAKD,iBACbe,KACKC,EAAIC,KAAKC,IAAIP,EAAO,GAAIK,EAAIT,KAC7BS,GAAKJ,EAAMJ,QADyBQ,IAIxCD,EAAGI,KAAKP,EAAMI,IAElB,OAAOD,GAGXT,QAAW,SAAqBD,GAY5B,OADYJ,KAAKD,iBACJM,QAAQD,IAGzBe,SAAa,WACT,IAAIJ,EAAG,EACHK,EAAOpB,KACX,OACIqB,QAAU,WACN,OAAON,EAAIK,EAAKnB,OAAOM,QAE3Be,KAAO,WACH,OAAOF,EAAKnB,OAAOc,QAS/BQ,KAAQ,SAAkBC,GAElBxB,KAAKC,OADLuB,EACc/B,EAAOgC,UAAUD","file":"../list.js","sourcesContent":["define([\r\n    \"skylark-langx-arrays\",\r\n    \"./collections\",\r\n    \"./collection\"\r\n], function(arrays,collections, Collection) {\r\n\r\n    var List = collections.List = Collection.inherit({\r\n        \r\n        \"klassName\": \"List\",\r\n\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        \"contains\": function( /*Object*/ item) {\r\n            //desc: \"Determines whether an item is in the Collection.\",\r\n            //result: {\r\n            //    type: Boolean,\r\n            //    desc: \"true if item is found in the Collection; otherwise, false.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to check.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            return items.indexOf(item) >= 0;\r\n        },\r\n\r\n        \"count\": function() {\r\n            //desc: \"Gets the number of items actually contained in the Collection.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"the number of items\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            return items.length;\r\n        },\r\n\r\n        \"getAll\": function() {\r\n            //desc: \"Returns all items.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"all items\"\r\n            //},\r\n            //params: [],\r\n            return this._getInnerItems();\r\n        },\r\n\r\n        \"get\": function(index) {\r\n            //desc: \"Returns the item at the specified position in the List.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified position.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"index of the element to return.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index >= items.length) {\r\n                throw new Error(\"Not exist:\" + index);\r\n            }\r\n            return items[index];\r\n        },\r\n\r\n        \"getRange\": function( /*Number*/ index, /*Number*/ count) {\r\n            //desc: \"Returns an Array which represents a subset of the items in the source list.\",\r\n            //result: {\r\n            //    type: Array,\r\n            //    desc: \"An Array which represents a subset of the items in the source list.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based list index at which the range starts.\"\r\n            //}, {\r\n            //    name: \"count\",\r\n            //    type: Number,\r\n            //    desc: \"The number of items in the range.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                a1 = [];\r\n            for (var i = Math.max(index, 0); i < count; i++) {\r\n                if (i >= items.length) {\r\n                    break;\r\n                }\r\n                a1.push(items[i]);\r\n            }\r\n            return a1;\r\n        },\r\n\r\n        \"indexOf\": function( /*Object*/ item) {\r\n            //desc: \"Searches for the specified Object and returns the zero-based index of the first occurrence within the entire list.\",\r\n            //result: {\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the first occurrence of value within the entire list,if found; otherwise, -1.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The Object to locate in the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            return items.indexOf(item);\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0,\r\n                self = this;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < self._items.length;\r\n                },\r\n                next : function() {\r\n                    return self._items[i++];\r\n                }\r\n            }\r\n        },\r\n\r\n        /*\r\n         *@params {Object}args\r\n         *  a plain object for the initialize arguments.\r\n         */\r\n        init :  function(/*Array*/data){\r\n            if (data) {\r\n                this._items = arrays.makeArray(data);\r\n            } else {\r\n                this._items =  [];\r\n            }\r\n        }\r\n    });\r\n\r\n    return List;\r\n});\r\n"]}