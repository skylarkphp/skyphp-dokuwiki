{"version":3,"sources":["map.js"],"names":["define","collections","Collection","Map","inherit","klassName","_getInnerItems","this","_items","_clear","_findKeyByRegExp","regExp","callback","filter","key","match","get","strKey","silent","iterator","i","hasNext","length","next","set","value","items","indexOf","push","oldValue","updated","name","trigger","data","remove","idx","findByRegExp","self","item","removeByRegExp","toPlain","plain","toString","delim","join","init"],"mappings":";;;;;;;AACAA,QACI,gBACA,gBACD,SAAUC,EAAaC,GA2NtB,OAzNUD,EAAYE,IAAMD,EAAWE,SAEnCC,UAAa,MAEbC,eAAiB,WACb,OAAOC,KAAKC,QAGhBC,OAAS,WACLF,KAAKC,WAGTE,iBAAkB,SAASC,EAAQC,GAE/B,OADYL,KAAKD,iBACJO,OAAO,SAASC,GACzB,QAAIA,EAAIC,MAAMJ,KACNC,GAAUA,EAASE,IAChB,MAOnBE,IAAQ,SAASC,EAAQC,GAgBrB,GAAsB,iBAAZ,EACN,KAAM,0BAQV,OADYX,KAAKD,iBACJW,IAGjBE,SAAa,WACT,IAAIC,EAAG,EACP,OACIC,QAAU,WACN,OAAOD,EAAIb,KAAKC,OAAOc,QAE3BC,KAAO,WACH,IAAIT,EAAOP,KAAKC,OAAOY,KACvB,OAAQb,KAAKC,OAAOM,GAAKA,MAKrCU,IAAO,SAAqBP,EAAmBQ,GAe3C,GAAsB,iBAAZ,EACN,KAAM,0BASV,IAAIC,EAAQnB,KAAKD,kBACa,GAA1BoB,EAAMC,QAAQV,IACdS,EAAME,KAAKX,GAEf,IAAIY,EAAWH,EAAMT,GACrB,GAAIY,IAAaJ,EAAO,CACpBC,EAAMT,GAAUQ,EAChB,IAAIK,KACJA,EAAQb,IACJc,KAAOd,EACPQ,MAAQA,EACRI,SAAWA,GAEftB,KAAKyB,QAAQ,WACTC,KAAOH,IAGf,OAAOvB,MAIX2B,OAAU,SAAqBjB,GAW3B,GAAsB,iBAAZ,EACN,KAAM,0BAEV,IAAIS,EAAQnB,KAAKD,iBACb6B,EAAMT,EAAMC,QAAQV,GACpBkB,GAAO,WACAT,EAAMT,UACNS,EAAMS,KAIrBC,aAAc,SAAqBzB,EAAQC,GAevC,IAAIc,KACAW,EAAO9B,KAMX,OALAA,KAAKG,iBAAiBC,EAAQ,SAASG,GACnC,IAAIwB,EAAOD,EAAKrB,IAAIF,GAChBF,GAAUA,EAAS0B,GACvBZ,EAAME,KAAKU,KAERZ,GAGXa,eAAgB,SAAqB5B,GAWjC,IAAI0B,EAAO9B,KACXA,KAAKG,iBAAiBC,EAAQ,SAASG,GACnCuB,EAAKH,OAAOpB,MAIpB0B,QAAW,WASP,IAFA,IAAId,EAAQnB,KAAKD,iBAERc,EAAI,EAAGA,EAAIM,EAAMJ,OAAQF,IAAK,CACnC,IAAIN,EAAMY,EAAMN,GAChBqB,MAAM3B,GAAOY,EAAMZ,GAEvB,OAAO2B,OAGXC,SAAY,SAAsBC,GAc9B,OAFYpC,KAAKD,iBAEJsC,KAAMD,GAAS,MAGhCE,KAAQ,SAAqBZ,GACzB,IAAIP,EAAQnB,KAAKC,UACjB,IAAK,IAAIuB,KAAQE,EACbP,EAAME,KAAKG,GACXL,EAAMK,GAAOE,EAAKF","file":"../map.js","sourcesContent":["\r\ndefine([\r\n    \"./collections\",\r\n    \"./collection\"\r\n], function( collections, Collection) {\r\n\r\n    var Map = collections.Map = Collection.inherit({\r\n\r\n        \"klassName\": \"Map\",\r\n\r\n        _getInnerItems : function() {\r\n            return this._items;\r\n        },\r\n\r\n        _clear : function() {\r\n            this._items = [];\r\n        },\r\n\r\n        _findKeyByRegExp: function(regExp, callback) {\r\n            var items = this._getInnerItems();\r\n            return items.filter(function(key) {\r\n                if (key.match(regExp)) {\r\n                    if (callback) callback(key);\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n\r\n        \"get\":  function(strKey, silent) {\r\n            //desc: \"Returns the item at the specified key in the Hashtable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"The item at the specified key.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key of the item to return.\"\r\n            //}, {\r\n            //    name: \"silent\",\r\n            //    type: Boolean,\r\n            //    desc: \"the silent flag.\",\r\n            //    optional: true\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            /*\r\n            if (!silent && !this.contains(strKey)) {\r\n                throw \"hash key is not  existed\";\r\n            }\r\n            */\r\n            var items = this._getInnerItems();\r\n            return items[strKey];\r\n        },\r\n\r\n        \"iterator\" : function() {\r\n            var i =0;\r\n            return {\r\n                hasNext : function() {\r\n                    return i < this._items.length;\r\n                },\r\n                next : function() {\r\n                    var key =  this._items[i++];\r\n                    return [this._items[key],key];\r\n                }\r\n            }\r\n        },\r\n\r\n        \"set\": function( /*String*/ strKey, /*Object*/ value) {\r\n            //desc: \"Replaces the item at the specified key in the Hashtable with the specified item.\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"key of the item to replace.\"\r\n            //}, {\r\n            //    name: \"value\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n\r\n            /*\r\n            if (!this.contains(strKey)) {\r\n                throw \"hash key is not existed\";\r\n            }\r\n            */\r\n\r\n            var items = this._getInnerItems();\r\n            if (items.indexOf(strKey) == -1) {\r\n                items.push(strKey);\r\n            }\r\n            var oldValue = items[strKey];\r\n            if (oldValue !== value) {\r\n                items[strKey] = value;\r\n                var updated = {};\r\n                updated[strKey] = {\r\n                    name : strKey,\r\n                    value : value,\r\n                    oldValue : oldValue\r\n                };\r\n                this.trigger(\"changed\" ,{ //TODO: \"changed:\"+ strKey\r\n                    data : updated\r\n                });\r\n            }\r\n            return this;\r\n        },\r\n\r\n\r\n        \"remove\": function( /*String*/ strKey) {\r\n            //desc: \"Removes the first occurrence of a specific item from the Hashtable\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"strKey\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            if (typeof(strKey) != \"string\") {\r\n                throw \"hash key is not string!\";\r\n            }\r\n            var items = this._getInnerItems();\r\n            var idx = items.indexOf(strKey);\r\n            if (idx >= 0) {\r\n                delete items[strKey];\r\n                delete items[idx];\r\n            }\r\n        },\r\n\r\n        findByRegExp: function( /*String*/ regExp, callback) {\r\n            //desc: \"find regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}, {\r\n            //    name: \"callback\",\r\n            //    type: Function,\r\n            //    desc: \"the callback method\"\r\n            //}],\r\n            var items = [],\r\n                self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                var item = self.get(key);\r\n                if (callback) callback(item);\r\n                items.push(item);\r\n            });\r\n            return items;\r\n        },\r\n\r\n        removeByRegExp: function( /*String*/ regExp) {\r\n            //desc: \"Removes regExp items\",\r\n            //result: {\r\n            //    type: Map,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"regExp\",\r\n            //    type: String,\r\n            //    desc: \"The key for The item to remove from the Hashtable.\"\r\n            //}],\r\n            var self = this;\r\n            this._findKeyByRegExp(regExp, function(key) {\r\n                self.remove(key);\r\n            });\r\n        },\r\n\r\n        \"toPlain\": function() {\r\n            //desc: \"Returns a plain object containing all of the items in this Hashable.\",\r\n            //result: {\r\n            //    type: Object,\r\n            //    desc: \"a plain object containing all of the items in this Hashtable.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems(); \r\n\r\n            for (var i = 0; i < items.length; i++) {\r\n                var key = items[i];\r\n                plain[key] = items[key];\r\n            }\r\n            return plain;\r\n        },\r\n\r\n        \"toString\": function( /*String?*/ delim) {\r\n            //desc: \"implementation of toString, follows [].toString().\",\r\n            //result: {\r\n            //    type: String,\r\n            //   desc: \"The string.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"delim\",\r\n            //    type: String,\r\n            //    desc: \"The delim \",\r\n            //    optional: true\r\n            //}],\r\n            var items = this._getInnerItems();\r\n\r\n            return items.join((delim || \",\"));\r\n        },\r\n\r\n        \"init\": function( /*Object*/ data) {\r\n            var items = this._items = [];\r\n            for (var name in data) {\r\n                items.push(name);\r\n                items[name]= data[name];\r\n            }\r\n        }\r\n       \r\n    });\r\n    return Map;\r\n});\r\n"]}