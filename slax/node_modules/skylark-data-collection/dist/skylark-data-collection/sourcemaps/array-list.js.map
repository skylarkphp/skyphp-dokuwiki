{"version":3,"sources":["array-list.js"],"names":["define","collections","List","ArrayList","inherit","klassName","add","item","items","this","_getInnerItems","push","trigger","data","index","length","isSingle","addRange","c","a1","toArray","toAdd","i","clone","_","insert","Error","splice","insertRange","removeFirstMatch","len","removeAt","remove","toRemove","Array","removeRange","count","removed","setByIndex","old","oldItem","reset","newItems","reverse","sort","fn"],"mappings":"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","file":"../array-list.js","sourcesContent":["define([\r\n    \"./collections\",\r\n    \"./list\"\r\n], function(collections, List) {\r\n\r\n    var ArrayList = collections.ArrayList = List.inherit({\r\n        \r\n        \"klassName\": \"ArrayList\",\r\n\r\n        \"add\": function(item) {\r\n            //desc: \"Adds an item to the end of the List.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to be added to the end of the List. \\nThe item can be null.\"\r\n            //}],\r\n\r\n            var items = this._getInnerItems();\r\n            items.push(item);\r\n            this.trigger(\"changed:add\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\": items.length - 1, isSingle: true}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"addRange\": function( /*Collection*/ c) {\r\n            //desc: \"Adds the items of a collection into the List at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"c\",\r\n            //    type: [Collection, Array],\r\n            //    desc: \"The Collection whose items should be added into the List.\\nThe collection itself cannot be null, but it can contain items that are null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            var a1 = c.toArray ? c.toArray() : c,\r\n                toAdd = [];\r\n            for (var i = 0; i < a1.length; i++) {\r\n                items.push(a1[i]);\r\n                toAdd.push({\r\n                    \"item\" : a1[i],\r\n                    \"index\" : items.length-1\r\n                });\r\n            }\r\n            this.trigger(\"changed:add\",{\r\n                \"data\" :  toAdd\r\n            });\r\n            return this;\r\n        },\r\n\r\n\r\n        \"clone\": function() {\r\n            //desc: \"Returns a shallow copy of this ArrayList instance. (The items themselves are not copied.)\",\r\n            //result: {\r\n            //    type: ArrayList,\r\n            //   desc: \"a clone of this ArrayList instance.\"\r\n            //},\r\n            //params: [],\r\n\r\n           return new ArrayList({\r\n                \"items\": this._.items\r\n            });\r\n        },\r\n\r\n        \"insert\": function( /*Number*/ index, /*Object*/ item) {\r\n            //desc: \"Inserts an item into the list at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index at which the new item should be inserted.\"\r\n            //}, {\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to insert. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index > items.length) {\r\n                throw new Error(\"invalid parameter!\");\r\n            }\r\n            items.splice(index, 0, item);\r\n            this.trigger(\"changed\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\" : index}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"insertRange\": function( /*Number*/ index, /*Collection*/ c) {\r\n            //desc: \"Inserts the items of a collection into the list at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index at which the new item should be inserted.\"\r\n            //}, {\r\n            //    name: \"c\",\r\n            //    type: Collection,\r\n            //    desc: \"The Collection whose items should be inserted into the ArrayList. \\nThe collection itself cannot be null, but it can contain items that are null. \"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toAdd = [];\r\n            if (index < 0 || index >= items.length) {\r\n                throw new Error(\"invalid parameter!\");\r\n            }\r\n            var a1 = c.toArray();\r\n            for (var i = 0; i<a1.length - 1; i++) {\r\n                items.splice(index+i, 0, a1[i]);\r\n                toAdd.push({\r\n                    \"item\" : a1[i],\r\n                    \"index\" : index+i\r\n                });\r\n            }\r\n            this.trigger(\"changed:insert\",{\r\n                \"data\" :  toAdd\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeFirstMatch\": function( /*Object*/ item) {\r\n            //desc: \"Removes the first occurrence of a specific item from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to remove from the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            for (var i = 0, len = items.length; i < len; i++) {\r\n                if (items[i] === item) {\r\n                    this.removeAt(i);\r\n                    break;\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        \"remove\": function( /*Object*/ item) {\r\n            //desc: \"Removes the all occurrence of a specific item from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"The item to remove from the list. The value can be null.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toRemove = [];\r\n            for (var i = 0, len = items.length; i < len; i++) {\r\n                if (items[i] === item) {\r\n                    Array.removeAt(items, i);\r\n                    toRemove.push({\r\n                        \"item\" : item,\r\n                        \"index\" : i\r\n                    });\r\n                }\r\n            }\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" :  toRemove\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeAt\": function(index) {\r\n            //desc: \"Removes the item at the specified index of the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the item to remove.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                item = items.splice(index, 1)[0];\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" :  [\r\n                    { \"item\" : item, \"index\" : index}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"removeRange\": function( /*Number*/ index, /*Number*/ count) {\r\n            //desc: \"Removes a range of items from the list.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"The zero-based index of the item to remove.\"\r\n            //}, {\r\n            //    name: \"count\",\r\n            //    type: Number,\r\n            //    desc: \"The number of items to remove.\"\r\n            //}],\r\n            var items = this._getInnerItems(),\r\n                toRemove = [];\r\n\r\n            for (var i = index; i<index+count;i++) {\r\n                toRemove.push({\r\n                    \"item\" : items[i],\r\n                    \"index\" : i\r\n                });\r\n            }\r\n            items.splice(index, count);\r\n\r\n            this.trigger(\"changed:remove\",{\r\n                \"data\" : {\r\n                    \"removed\" : toRemove\r\n                }\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"setByIndex\": function( /*Number*/ index, /*Item*/ item) {\r\n            //desc: \"Replaces the item at the specified position in the list with the specified item.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"index\",\r\n            //    type: Number,\r\n            //    desc: \"index of the item to replace.\"\r\n            //}, {\r\n            //    name: \"item\",\r\n            //    type: Object,\r\n            //    desc: \"item to be stored at the specified position.\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (index < 0 || index >= items.length) throw new Error(\"\" + i);\r\n            var old = items[index];\r\n            items[i] = item;\r\n\r\n            this.trigger(\"changed:update\",{\r\n                \"data\" : [\r\n                    { \"item\" : item, \"index\" : index,\"oldItem\":old}\r\n                ]\r\n            });\r\n            return this;\r\n        },\r\n\r\n        \"reset\": function(newItems) {\r\n            //desc: \"Reset the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            items.length = 0;\r\n            for (var i=0;i<newItems.length;i++){\r\n                items.push(newItems[i]);\r\n            }\r\n            this.trigger(\"changed:reset\");\r\n\r\n            return this;\r\n        },\r\n        \r\n        \"reverse\": function() {\r\n            //desc: \"Reverse the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [],\r\n            var items = this._getInnerItems();\r\n            items.reverse();\r\n\r\n            this.trigger(\"changed:reverse\");\r\n            return this;\r\n        },\r\n\r\n        \"sort\": function( /*Function?*/ fn) {\r\n            //desc: \"sort the internal array.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this instance for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"fn\",\r\n            //    type: Function,\r\n            //    desc: \"The function for sort\"\r\n            //}],\r\n            var items = this._getInnerItems();\r\n            if (fn) {\r\n                items.sort(fn);\r\n            } else {\r\n                items.sort();\r\n            }\r\n            this.trigger(\"changed:sort\");\r\n            return this;\r\n        }\r\n\r\n    });\r\n\r\n    return ArrayList;\r\n});\r\n"]}