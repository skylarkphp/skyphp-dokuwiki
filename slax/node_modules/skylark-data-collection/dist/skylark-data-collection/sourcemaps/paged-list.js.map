{"version":3,"sources":["paged-list.js"],"names":["define","types","Deferred","collections","Collection","PagedList","inherit","klassName","_options","_cachePageData","pageNo","pageItems","pages","this","_pages","oldLen","_count","len","pageSize","length","trigger","data","OldLen","count","oldCount","_getPageData","items","_getInnerItems","idx","i","push","_laodPageData","loadData","from","deferred","self","then","resolve","err","reject","promise","get","_pageSize","totalCount","_endless","Infinity","totalPageCount","Math","ceil","pageCount","hasMore","loadMore","getPage","autoLoad","fetchPage","when","init","options"],"mappings":";;;;;;;AACAA,QACI,sBACA,+BACA,gBACA,gBACD,SAASC,EAAOC,EAAUC,EAAaC,GAyKtC,OAvKgBD,EAAYE,UAAYD,EAAWE,SAE/CC,UAAa,YAMbC,SAAW,KAEXC,eAAgB,SAASC,EAAQC,GAC7B,IAAIC,EAAQC,KAAKC,OACbC,EAASF,KAAKG,OACdC,GAAOP,EAAS,GAAKG,KAAKK,SAAWP,EAAUQ,OAEnDP,EAAMF,GAAUC,EAEhBE,KAAKO,QAAQ,iBACTC,MACIX,OAASA,EACTC,UAAYA,KAIhBM,EAAMK,SACNT,KAAKG,OAASC,EACdJ,KAAKO,QAAQ,iBACTC,MACIE,MAAQN,EACRO,SAAWT,OAM3BU,aAAc,SAASf,GAOnB,IANA,IAAIgB,EAAQb,KAAKc,iBACbhB,KACAO,EAAWL,KAAKK,SAChBU,GAAOlB,EAAS,GAAKQ,EACrBD,EAAMS,EAAMP,OAEPU,EAAI,EAAGA,EAAIX,GAAYU,EAAMX,EAAKY,IAAKD,IACxCF,EAAME,IAAMjB,EAAUmB,KAAKJ,EAAME,IAEzC,OAAOjB,GAGXoB,cAAiB,SAAqBrB,GAUlC,IAAIsB,EAAWnB,KAAKL,SAASwB,SAY7B,OAXAd,SAAWL,KAAKK,SACZe,MAAQvB,EAAS,GAAKQ,SAC1BgB,SAAW,IAAIhC,EACXiC,KAAOtB,KACXmB,EAASC,KAAMf,UAAUkB,KAAK,SAASV,GACnCS,KAAK1B,eAAeC,EAAQgB,GAC5BQ,SAASG,QAAQX,IAClB,SAASY,GACRJ,SAASK,OAAOD,KAGbJ,SAASM,SAIpBtB,UACIuB,IAAO,WACH,OAAO5B,KAAK6B,YAIpBC,YAIIF,IAAM,WACF,OAAO5B,KAAKL,WAAaK,KAAK+B,SAASpC,UAAYqC,EAAAA,KAK3DC,gBACIL,IAAO,WACH,OAAOM,KAAKC,KAAKnC,KAAK8B,WAAa9B,KAAKK,YAIhDK,OAIIkB,IAAM,WACF,OAAO5B,KAAKG,SAIpBiC,WACIR,IAAO,WACH,OAAOM,KAAKC,KAAKnC,KAAKU,MAAQV,KAAKK,YAK3CgC,QAAW,WAOP,OAAOrC,KAAKU,MAAQV,KAAK8B,YAG7BQ,SAAY,WAST,OAAOtC,KAAKkB,cAAclB,KAAKoC,YAKlCG,QAAW,SAAqB1C,EAAO2C,GAUnC,OAAQxC,KAAKY,aAAaf,IAG9B4C,UAAW,SAAS5C,GAEhB,OADgBG,KAAKY,aAAaf,GAIvBR,EAASqD,KAAK7B,OAFdb,KAAKkB,cAAcrB,IAMlC8C,KAAc,SAAStC,EAASuC,GAC5B5C,KAAKC,UACLD,KAAKG,OAAS,EAEdH,KAAKL,SAAUiD","file":"../paged-list.js","sourcesContent":["\r\ndefine([\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-async/deferred\",\r\n    \"./collections\",\r\n    \"./collection\"\r\n], function(types, Deferred, collections, Collection) {\r\n    \r\n    var PagedList = collections.PagedList = Collection.inherit({\r\n\r\n        \"klassName\": \"PagedList\",   ã€€\r\n\r\n        //{\r\n        //  provider : function(){},\r\n        //  totalCount : Infinity,  // the total count\r\n        //}\r\n        _options : null,\r\n\r\n        _cachePageData: function(pageNo, pageItems) {\r\n            var pages = this._pages,\r\n                oldLen = this._count,\r\n                len = (pageNo - 1) * this.pageSize + pageItems.length;\r\n\r\n            pages[pageNo] = pageItems;\r\n\r\n            this.trigger(\"changed:cache\",{\r\n                data : {\r\n                    pageNo : pageNo,\r\n                    pageItems : pageItems\r\n                }\r\n            })\r\n\r\n            if (len > OldLen) {\r\n                this._count = len;\r\n                this.trigger(\"changed:count\",{\r\n                    data : {\r\n                        count : len,\r\n                        oldCount : oldLen\r\n                    }\r\n                })\r\n            }\r\n        },\r\n\r\n        _getPageData: function(pageNo) {\r\n            var items = this._getInnerItems(),\r\n                pageItems = [],\r\n                pageSize = this.pageSize,\r\n                idx = (pageNo - 1) * pageSize,\r\n                len = items.length;\r\n\r\n            for (var i = 0; i < pageSize && idx < len; i++, idx++) {\r\n                if (items[idx]) pageItems.push(items[idx]);\r\n            }\r\n            return pageItems;\r\n        },\r\n\r\n        \"_laodPageData\": function( /*Number*/ pageNo) {\r\n            //desc: \"Get a page at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this page for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"pageNo\",\r\n            //    type: Number,\r\n            //}],\r\n            var loadData = this._options.loadData;\r\n            pageSize = this.pageSize,\r\n                from = (pageNo - 1) * pageSize;\r\n            deferred = new Deferred(),\r\n                self = this;\r\n            loadData(from, pageSize).then(function(items) {\r\n                self._cachePageData(pageNo, items);\r\n                deferred.resolve(items);\r\n            }, function(err) {\r\n                deferred.reject(err);\r\n            })\r\n\r\n            return deferred.promise;\r\n\r\n        },\r\n\r\n        \"pageSize\": {\r\n            \"get\": function() {\r\n                return this._pageSize;\r\n            }\r\n        },\r\n\r\n        \"totalCount\": {\r\n            //\"desc\": \"the total count\",\r\n            //\"type\": Number,\r\n            //\"defaultValue\": Infinity\r\n            get : function() {\r\n                return this._options && (this._endless._options || Infinity);\r\n            }\r\n        },\r\n\r\n\r\n        \"totalPageCount\": {\r\n            \"get\": function() {\r\n                return Math.ceil(this.totalCount / this.pageSize);\r\n            }\r\n        },\r\n\r\n        \"count\": {\r\n            //\"desc\": \"the total count\",\r\n            //\"type\": Number,\r\n            //\"defaultValue\": Infinity\r\n            get : function() {\r\n                return this._count;\r\n            }\r\n        },\r\n\r\n        \"pageCount\": {\r\n            \"get\": function() {\r\n                return Math.ceil(this.count / this.pageSize);\r\n            }\r\n        },\r\n\r\n\r\n        \"hasMore\": function() {\r\n            //desc: \"determine if the list has more items\",\r\n            //result: {\r\n            //    type: Boolean,\r\n            //    desc: \"false if reached the end\"\r\n            //},\r\n            //params: [],\r\n            return this.count < this.totalCount;\r\n        },\r\n\r\n        \"loadMore\": function() {\r\n            //desc: \"load more data.\",\r\n            //result: {\r\n            //    type: Promise,\r\n            //    desc: \"deferred object\"\r\n            //},\r\n            //params: [{\r\n            //}],\r\n\r\n           return this._laodPageData(this.pageCount);\r\n           \r\n        },\r\n\r\n\r\n        \"getPage\": function( /*Number*/ pageNo,autoLoad) {\r\n            //desc: \"Get a page at the specified index.\",\r\n            //result: {\r\n            //    type: List,\r\n            //    desc: \"this page for chain call.\"\r\n            //},\r\n            //params: [{\r\n            //    name: \"pageNo\",\r\n            //    type: Number,\r\n            //}],\r\n            return  this._getPageData(pageNo);\r\n        },\r\n\r\n        fetchPage: function(pageNo) {\r\n            var pageItems = this._getPageData(pageNo);\r\n            if (!pageItems) {\r\n                return this._laodPageData(pageNo);\r\n            } else {\r\n                return Deferred.when(items);\r\n            }\r\n        },\r\n\r\n        \"init\"    :   function(pageSize,options){\r\n            this._pages = {};\r\n            this._count = 0;\r\n            \r\n            this._options =options;\r\n        }\r\n\r\n    });\r\n\r\n    return PagedList;\r\n});\r\n"]}