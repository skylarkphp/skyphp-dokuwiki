{"version":3,"sources":["tree-item.js"],"names":["define","arrays","Evented","collections","TreeItem","inherit","klassName","_internalChildren","copy","children","this","_","makeArray","_checkPublicOperation","name","_internalSetParent","parent","_internalAddChild","item","at","child","_internalCreateItem","undefined","push","insert","_internalRemoveChildAt","splice","_internalClearChildren","i","length","data","root","createItem","get","type","Array","getter","firstChild","fullPath","path","lastChild","lastDescendants","last","level","result","next","nextItem","getNextChild","nextSibling","prev","prevItem","prevSibling","getPrevChild","r","prependChild","addChild","trigger","index","isSingle","appendChild","canHaveChildren","childrenCount","clearChildren","getChildAt","getChildren","idx","indexOf","hasChildren","indexOfChild","insertChild","parents","p","remove","removeChild","removeChildAt","init"],"mappings":"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","file":"../tree-item.js","sourcesContent":["\r\ndefine([\r\n    \"skylark-langx-arrays\",\r\n    \"skylark-langx-events/emitter\",\r\n    \"./collections\"\r\n], function(arrays, Evented, collections) {\r\n\r\n    var TreeItem = collections.TreeItem = Evented.inherit({\r\n\r\n        \"klassName\": \"TreeItem\",\r\n        \r\n        \"_internalChildren\": function(copy) {\r\n            var children = this._.children;\r\n            if (copy) {\r\n                return arrays.makeArray(children);\r\n            } else {\r\n                return children;\r\n            }\r\n        },\r\n\r\n        \"_checkPublicOperation\" : function(name) {\r\n            return true;\r\n        },\r\n\r\n        \"_internalSetParent\": function(parent) {\r\n            this._.parent = parent;\r\n        },\r\n\r\n        \"_internalAddChild\": function(item, at) {\r\n            var child = this._internalCreateItem(item),\r\n                children = this._internalChildren();\r\n            if (children) {\r\n                if (at === undefined) {\r\n                    children.push(child);\r\n                } else {\r\n                    children.insert(at, child);\r\n                }\r\n            }\r\n            child._internalSetParent(this);\r\n\r\n            return child;\r\n        },\r\n\r\n        \"_internalRemoveChildAt\": function(at) {\r\n            var children = this._internalChildren();\r\n            var child = children.splice(at,1);\r\n            child._internalSetParent(null);\r\n        },\r\n\r\n        \"_internalClearChildren\": function() {\r\n            var children = this._internalChildren();\r\n            if (children) {\r\n                for (var i = 0; i < children.length; i++) {\r\n                    children[i]._internalSetParent(null);\r\n                }\r\n                children.length = 0;\r\n            }\r\n        },\r\n\r\n        \"_internalCreateItem\": function(data) {\r\n            var root = this.root,\r\n                item = root ? root.createItem(data) : data;\r\n\r\n            return item;\r\n        },\r\n        \r\n        \"name\": {\r\n            //\"type\": String\r\n            get : function() {\r\n                return this._.name;\r\n            }\r\n        },\r\n\r\n        \"data\": {\r\n            //\"type\": Object\r\n            get : function() {\r\n                return this._.data;\r\n            }\r\n        },\r\n\r\n        \"children\": {\r\n            type: Array,\r\n            getter: function() {\r\n                return this._internalChildren(true);\r\n            }\r\n        },\r\n\r\n        \"firstChild\": {\r\n            //desc: \"Gets the first child tree item in the tree item collection.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var children = this._internalChildren();\r\n                return children && children[0];\r\n            }\r\n        },\r\n\r\n        \"fullPath\": {\r\n            //desc: \"Gets the path from the root tree item to the current tree item.\",\r\n            //type: String,\r\n            get: function() {\r\n                var path = this.name,\r\n                    parent = this.parent;\r\n                while (parent) {\r\n                    path = parent.name + \"/\" + path;\r\n                    parent = parent.parent;\r\n                }\r\n                return path;\r\n            }\r\n        },\r\n\r\n        \"lastChild\": {\r\n            //desc: \"Gets the last child tree item in the tree item collection\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var children = this._internalChildren();\r\n                return children && children[children.length - 1];\r\n            }\r\n        },\r\n\r\n        \"lastDescendants\": {\r\n            //desc: \"Gets the last descendants tree item in the tree item collection\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var last = this.lastChild,\r\n                    lastChild = last.lastChild;\r\n                while (lastChild) {\r\n                    last = lastChild;\r\n                    lastChild = last.lastChild;\r\n                }\r\n                return last;\r\n            }\r\n        },\r\n\r\n        \"level\": {\r\n            //desc: \"Gets the zero-based depth of the tree item in the Tree.\\nFor the Level property, the root node is considered the first level of nesting and returns 0.\",\r\n            //type: Number,\r\n            get: function() {\r\n                var result = 0,\r\n                    item = this.parent;\r\n                while (item) {\r\n                    result++;\r\n                    item = item.parent;\r\n                }\r\n                return result;\r\n            }\r\n        },\r\n\r\n        \"next\": {\r\n            //desc: \"Gets the next tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var nextItem = this.firstChild;\r\n                if (!nextItem) {\r\n                    var item = this,\r\n                        parent = item.parent;\r\n                    while (parent) {\r\n                        nextItem = parent.getNextChild(item);\r\n                        if (nextItem) {\r\n                            break;\r\n                        }\r\n                        item = parent;\r\n                        parent = item.parent;\r\n                    }\r\n                }\r\n                return nextItem;\r\n            }\r\n        },\r\n\r\n        \"nextSibling\": {\r\n            //desc: \"Gets the next sibling tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var parent = this.parent;\r\n                return parent && parent.getNextChild(this);\r\n            }\r\n        },\r\n\r\n        \"parent\": {\r\n            //desc: \"Gets the parent tree item of the current tree item.\",\r\n            //type: TreeItem\r\n            get : function(){\r\n                return this._.parent;\r\n            }\r\n        },\r\n\r\n        \"prev\": {\r\n            //desc: \"Gets the previous tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var prevSibling = this.prevSibling,\r\n                    prevItem;\r\n                if (prevSibling) {\r\n                    prevItem = prevSibling.lastDescendants;\r\n                    if (!prevItem) {\r\n                        prevItem = prevSibling;\r\n                    }\r\n                } else {\r\n                    prevItem = this.parent;\r\n                }\r\n\r\n                return prevItem;\r\n            }\r\n        },\r\n\r\n        \"prevSibling\": {\r\n            //desc: \"Gets the previous sibling tree item.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var parent = this.parent;\r\n                return parent && parent.getPrevChild(this);\r\n            }\r\n        },\r\n\r\n        \"root\": {\r\n            //desc: \"Gets the tree that the tree item is assigned to.\",\r\n            //type: TreeItem,\r\n            get: function() {\r\n                var r = this;\r\n                while (r.parent) {\r\n                    r = r.parent;\r\n                }\r\n                return r;\r\n            }\r\n        },\r\n        /*\r\n         *\r\n         *@method prepend a child item.\r\n         *@return TreeItem\r\n         */\r\n        \"prependChild\": function( /*Object*/ item) {\r\n            return this.addChild(item, 0);\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method add a Child item\r\n         *@return TreeItem\r\n         */\r\n        \"addChild\": function( /*Object*/ item, at) {\r\n            this._checkPublicOperation(\"addChild\");\r\n            var child = this._internalAddChild(item, at);\r\n\r\n            this.trigger(\"changed:addChild\",{\r\n                \"data\" :  [\r\n                    { \"item\" : child, \"index\": at, isSingle: true}\r\n                ]\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method addChildLast\r\n         *@return TreeItem\r\n         */\r\n        \"appendChild\": function( /*Object*/ item) {\r\n            return this.addChild(this);\r\n        },\r\n\r\n        \"canHaveChildren\": function() {\r\n            var children = this._internalChildren();\r\n            return children !== undefined;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return Number\r\n         */\r\n        \"childrenCount\": function() {\r\n            var children = this._internalChildren();\r\n            return children ? children.length : 0;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method clearChildren\r\n         *@return\r\n         */\r\n        \"clearChildren\": function() {\r\n            this._checkPublicOperation(\"clearChildren\");\r\n            this._internalClearChildren();\r\n\r\n            this.trigger(\"changed:clearChildren\");                    \r\n            return this;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getChildAt\r\n         *@return TreeItem\r\n         */\r\n        \"getChildAt\": function( /*Number*/ index) {\r\n            var children = this._internalChildren();\r\n            return children[index];\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getChildren\r\n         *@return Array\r\n         */\r\n        \"getChildren\": function() {\r\n            return this.children;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getPrevChild\r\n         *@return TreeItem\r\n         */\r\n        \"getPrevChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren(),\r\n                idx = children.indexOf(child);\r\n            if (idx > 0) {\r\n                return children[idx - 1];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method getNextChild\r\n         *@return TreeItem\r\n         */\r\n        \"getNextChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren(),\r\n                idx = children.indexOf(child);\r\n            if (idx >= 0 && idx < children.length - 1) {\r\n                return children[idx + 1];\r\n            } else {\r\n                return null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         *@method hasChildren\r\n         *@return {Boolean}\r\n         *  true  if this node has children.\r\n         */\r\n        \"hasChildren\": function() {\r\n            var children = this._internalChildren();\r\n            return children && children.length > 0;\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"indexOfChild\": function( /*TreeItem*/ child) {\r\n            var children = this._internalChildren();\r\n            return children.indexOf(child);\r\n        },\r\n\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"insertChild\": function( /*Object*/ data, /*Number*/ index) {\r\n            return this.addChild(item, index);\r\n        },\r\n\r\n        parents : function() {\r\n            var r = [],\r\n                p = this.parent;\r\n            while (p) {\r\n                r.push(p);\r\n                p = p.parent;\r\n            }\r\n            return r;\r\n        },\r\n\r\n        /*\r\n         *Removes the current tree item from the tree.\r\n         *@method remove\r\n         */\r\n        \"remove\": function() {\r\n            var parent = this.parent;\r\n            if (parent) {\r\n                parent.removeChild(this);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method removeChild\r\n         *@return TreeItem\r\n         */\r\n        \"removeChild\": function( /*TreeItem*/ child) {\r\n            var at = this.indexOfChild(child);\r\n            if (at>-1) {\r\n                return this.removeChildAt(at);\r\n            }\r\n        },\r\n\r\n        /*\r\n         *\r\n         *@method indexOfChild\r\n         *@return TreeItem\r\n         */\r\n        \"removeChildAt\": function( /*Number*/ at) {\r\n            this._checkPublicOperation(\"removeChild\");\r\n\r\n            this._internalRemoveChildAt(at);\r\n\r\n            this.trigger(\"changed:removeChild\",{\r\n                \"data\" : [\r\n                    { \"item\" : item, \"index\" : at}\r\n                ]\r\n            });\r\n        },\r\n\r\n        \"init\"  :   function(data){\r\n            var _ = this._ = {};\r\n            _.data = data;\r\n            _.name = data.name;\r\n            _.children = [];\r\n        }\r\n        \r\n    });\r\n\r\n    return TreeItem;\r\n});\r\n"]}