{"version":3,"sources":["KeyState.js"],"names":["define","klass","keyboard","KeyState","_construct","this","pressed","justPressed","justReleased","update","action","DOWN","UP","RESET","set","reset"],"mappings":";;;;;;;AAAAA,QACC,sBACA,cACC,SAASC,EAAMC,GAChB,aAQA,IAAIC,EAAWF,GACdG,WAAa,WAOZC,KAAKC,SAAU,EAQfD,KAAKE,aAAc,EAQnBF,KAAKG,cAAe,GASrBC,OAAS,SAASC,GACjBL,KAAKE,aAAc,EACnBF,KAAKG,cAAe,EAEjBE,IAAWP,EAASQ,OAEF,IAAjBN,KAAKC,UAEPD,KAAKE,aAAc,GAEpBF,KAAKC,SAAU,GAERI,IAAWP,EAASS,IAExBP,KAAKC,UAEPD,KAAKG,cAAe,GAErBH,KAAKC,SAAU,GAERI,IAAWP,EAASU,QAE3BR,KAAKG,cAAe,EACpBH,KAAKE,aAAc,IASrBO,IAAM,SAASP,EAAaD,EAASE,GACpCH,KAAKE,YAAcA,EACnBF,KAAKC,QAAUA,EACfD,KAAKG,aAAeA,GAQrBO,MAAQ,WACPV,KAAKE,aAAc,EACnBF,KAAKC,SAAU,EACfD,KAAKG,cAAe,KA0BtB,OAjBAL,EAASQ,MAAQ,EAOjBR,EAASS,GAAK,EAOdT,EAASU,MAAQ,EAGVX,EAASC,SAAWA","file":"../KeyState.js","sourcesContent":["define([\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\"\r\n],function(klass,keyboard){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * KeyState is used by Keyboard, Mouse, etc, to represent a key state.\r\n\t *\r\n\t * @class KeyState\r\n\t * @module Input\r\n\t*/\r\n\tvar KeyState = klass({\r\n\t\t_construct : function() {\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key is currently pressed.\r\n\t\t\t * @property pressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.pressed = false;\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just pressed.\r\n\t\t\t * @property justPressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justPressed = false;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just released.\r\n\t\t\t * @property justReleased\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update Key status based on new key state.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function(action)  {\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t\tif(action === KeyState.DOWN)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justPressed = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = true;\r\n\t\t\t}\r\n\t\t\telse if(action === KeyState.UP)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justReleased = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = false;\r\n\t\t\t}\r\n\t\t\telse if(action === KeyState.RESET)\r\n\t\t\t{\r\n\t\t\t\tthis.justReleased = false;\r\n\t\t\t\tthis.justPressed = false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set this key attributes manually.\r\n\t\t * \r\n\t\t * @method set\r\n\t\t */\r\n\t\tset : function(justPressed, pressed, justReleased){\r\n\t\t\tthis.justPressed = justPressed;\r\n\t\t\tthis.pressed = pressed;\r\n\t\t\tthis.justReleased = justReleased;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset key to default values.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t*/\r\n\t\treset : function() \t{\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.pressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Down\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tKeyState.DOWN = -1;\r\n\r\n\t/**\r\n\t * Up\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tKeyState.UP = 1;\r\n\r\n\t/**\r\n\t * Reset\r\n\t * @attribute RESET\r\n\t * @type {Number}\r\n\t */\r\n\tKeyState.RESET = 0;\r\n\r\n\r\n\treturn keyboard.KeyState = KeyState;\r\n\r\n});"]}