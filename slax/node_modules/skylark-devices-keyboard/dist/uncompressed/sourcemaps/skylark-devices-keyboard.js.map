{"version":3,"sources":["skylark-devices-keyboard.js"],"names":[],"mappingsfile":"../skylark-devices-keyboard.js","sourcesContent":["define('skylark-devices-keyboard/keyboard',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\tvar keyboard = {};\r\n\t/**\r\n\t * Function: isShiftDown\r\n\t * \r\n\t * Returns true if the shift key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isShiftDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.shiftKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isAltDown\r\n\t * \r\n\t * Returns true if the alt key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isAltDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.altKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isControlDown\r\n\t * \r\n\t * Returns true if the control key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isControlDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.ctrlKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isMetaDown\r\n\t * \r\n\t * Returns true if the meta key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isMetaDown = function (evt){\r\n\t\treturn (evt != null) ? evt.metaKey : false;\r\n\t};\r\n\r\n\r\n\treturn skylark.attach(\"devices.keyboard\",keyboard);\t\r\n});\ndefine('skylark-devices-keyboard/KeyState',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\"\r\n],function(klass,keyboard){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * KeyState is used by Keyboard, Mouse, etc, to represent a key state.\r\n\t *\r\n\t * @class KeyState\r\n\t * @module Input\r\n\t*/\r\n\tvar KeyState = klass({\r\n\t\t_construct : function() {\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key is currently pressed.\r\n\t\t\t * @property pressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.pressed = false;\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just pressed.\r\n\t\t\t * @property justPressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justPressed = false;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just released.\r\n\t\t\t * @property justReleased\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update Key status based on new key state.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function(action)  {\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t\tif(action === KeyState.DOWN)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justPressed = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = true;\r\n\t\t\t}\r\n\t\t\telse if(action === KeyState.UP)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justReleased = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = false;\r\n\t\t\t}\r\n\t\t\telse if(action === KeyState.RESET)\r\n\t\t\t{\r\n\t\t\t\tthis.justReleased = false;\r\n\t\t\t\tthis.justPressed = false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set this key attributes manually.\r\n\t\t * \r\n\t\t * @method set\r\n\t\t */\r\n\t\tset : function(justPressed, pressed, justReleased){\r\n\t\t\tthis.justPressed = justPressed;\r\n\t\t\tthis.pressed = pressed;\r\n\t\t\tthis.justReleased = justReleased;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset key to default values.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t*/\r\n\t\treset : function() \t{\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.pressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Down\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tKeyState.DOWN = -1;\r\n\r\n\t/**\r\n\t * Up\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tKeyState.UP = 1;\r\n\r\n\t/**\r\n\t * Reset\r\n\t * @attribute RESET\r\n\t * @type {Number}\r\n\t */\r\n\tKeyState.RESET = 0;\r\n\r\n\r\n\treturn keyboard.KeyState = KeyState;\r\n\r\n});\ndefine('skylark-devices-keyboard/keys',[\r\n\t\"./keyboard\"\r\n],function(keyboard){\r\n\tvar keys = {};\r\n\t/**\r\n\t * TAB key\r\n\t * @attribute TAB\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.TAB = 9;\r\n\r\n\t/**\r\n\t * ENTER key\r\n\t * @attribute ENTER\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.ENTER = 13;\r\n\r\n\t/**\r\n\t * SHIFT key\r\n\t * @attribute SHIFT\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.SHIFT = 16;\r\n\r\n\t/**\r\n\t * CTRL key\r\n\t * @attribute CTRL\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.CTRL = 17;\r\n\r\n\t/**\r\n\t * ALT key\r\n\t * @attribute ALT\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.ALT = 18;\r\n\r\n\t/**\r\n\t * CAPS_LOCK key\r\n\t * @attribute CAPS_LOCK\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.CAPS_LOCK = 20;\r\n\r\n\t/**\r\n\t * ESC key\r\n\t * @attribute ESC\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.ESC = 27;\r\n\r\n\t/**\r\n\t * SPACEBAR key\r\n\t * @attribute SPACEBAR\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.SPACEBAR = 32;\r\n\r\n\t/**\r\n\t * PAGE_UP key\r\n\t * @attribute PAGE_UP\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.PAGE_UP = 33;\r\n\r\n\t/**\r\n\t * PAGE_DOWN key\r\n\t * @attribute PAGE_DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.PAGE_DOWN = 34;\r\n\r\n\t/**\r\n\t * END key\r\n\t * @attribute END\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.END = 35;\r\n\r\n\t/**\r\n\t * HOME key\r\n\t * @attribute HOME\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.HOME = 36;\r\n\r\n\t/**\r\n\t * INSERT key\r\n\t * @attribute INSERT\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.INSERT = 45;\r\n\r\n\t/**\r\n\t * DEL key\r\n\t * @attribute DEL\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.DEL = 46;\r\n\r\n\t/**\r\n\t * LEFT key\r\n\t * @attribute LEFT\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.LEFT = 37;\r\n\r\n\t/**\r\n\t * RIGHT key\r\n\t * @attribute RIGHT\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.RIGHT = 39;\r\n\r\n\t/**\r\n\t * UP key\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.UP = 38;\r\n\r\n\t/**\r\n\t * DOWN key\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.DOWN = 40;\r\n\r\n\t/**\r\n\t * NUM0 key\r\n\t * @attribute NUM0\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM0 = 48;\r\n\r\n\t/**\r\n\t * NUM1 key\r\n\t * @attribute NUM1\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM1 = 49;\r\n\r\n\t/**\r\n\t * NUM2 key\r\n\t * @attribute NUM2\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM2 = 50;\r\n\r\n\t/**\r\n\t * NUM3 key\r\n\t * @attribute NUM3\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM3 = 51;\r\n\r\n\t/**\r\n\t * NUM4 key\r\n\t * @attribute NUM4\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM4 = 52;\r\n\r\n\t/**\r\n\t * NUM5 key\r\n\t * @attribute NUM5\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM5 = 53;\r\n\r\n\t/**\r\n\t * NUM6 key\r\n\t * @attribute NUM6\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM6 = 54;\r\n\r\n\t/**\r\n\t * NUM7 key\r\n\t * @attribute NUM7\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM7 = 55;\r\n\r\n\t/**\r\n\t * NUM8 key\r\n\t * @attribute NUM8\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM8 = 56;\r\n\r\n\t/**\r\n\t * NUM9 key\r\n\t * @attribute NUM9\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.NUM9 = 57;\r\n\r\n\t/**\r\n\t * A key\r\n\t * @attribute A\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.A = 65;\r\n\r\n\t/**\r\n\t * B key\r\n\t * @attribute B\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.B = 66;\r\n\r\n\t/**\r\n\t * C key\r\n\t * @attribute C\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.C = 67;\r\n\r\n\t/**\r\n\t * D key\r\n\t * @attribute D\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.D = 68;\r\n\r\n\t/**\r\n\t * E key\r\n\t * @attribute E\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.E = 69;\r\n\r\n\t/**\r\n\t * F key\r\n\t * @attribute F\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F = 70;\r\n\r\n\t/**\r\n\t * G key\r\n\t * @attribute G\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.G = 71;\r\n\r\n\t/**\r\n\t * H key\r\n\t * @attribute H\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.H = 72;\r\n\r\n\t/**\r\n\t * I key\r\n\t * @attribute I\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.I = 73;\r\n\r\n\t/**\r\n\t * J key\r\n\t * @attribute J\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.J = 74;\r\n\r\n\t/**\r\n\t * K key\r\n\t * @attribute K\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.K = 75;\r\n\r\n\t/**\r\n\t * L key\r\n\t * @attribute L\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.L = 76;\r\n\r\n\t/**\r\n\t * M key\r\n\t * @attribute M\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.M = 77;\r\n\r\n\t/**\r\n\t * N key\r\n\t * @attribute N\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.N = 78;\r\n\r\n\t/**\r\n\t * O key\r\n\t * @attribute O\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.O = 79;\r\n\r\n\t/**\r\n\t * P key\r\n\t * @attribute P\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.P = 80;\r\n\r\n\t/**\r\n\t * Q key\r\n\t * @attribute Q\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.Q = 81;\r\n\r\n\t/**\r\n\t * R key\r\n\t * @attribute R\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.R = 82;\r\n\r\n\t/**\r\n\t * S key\r\n\t * @attribute S\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.S = 83;\r\n\r\n\t/**\r\n\t * T key\r\n\t * @attribute T\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.T = 84;\r\n\r\n\t/**\r\n\t * U key\r\n\t * @attribute U\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.U = 85;\r\n\r\n\t/**\r\n\t * V key\r\n\t * @attribute V\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.V = 86;\r\n\r\n\t/**\r\n\t * W key\r\n\t * @attribute W\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.W = 87;\r\n\r\n\t/**\r\n\t * X key\r\n\t * @attribute X\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.X = 88;\r\n\r\n\t/**\r\n\t * Y key\r\n\t * @attribute Y\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.Y = 89;\r\n\r\n\t/**\r\n\t * Z key\r\n\t * @attribute Z\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.Z = 90;\r\n\r\n\t/**\r\n\t * F1 key\r\n\t * @attribute F1\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F1 = 112;\r\n\r\n\t/**\r\n\t * F2 key\r\n\t * @attribute F2\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F2 = 113;\r\n\r\n\t/**\r\n\t * F3 key\r\n\t * @attribute F3\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F3 = 114;\r\n\r\n\t/**\r\n\t * F4 key\r\n\t * @attribute F4\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F4 = 115;\r\n\r\n\t/**\r\n\t * F5 key\r\n\t * @attribute F5\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F5 = 116;\r\n\r\n\t/**\r\n\t * F6 key\r\n\t * @attribute F6\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F6 = 117;\r\n\r\n\t/**\r\n\t * F7 key\r\n\t * @attribute F7\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F7 = 118;\r\n\r\n\t/**\r\n\t * F8 key\r\n\t * @attribute F8\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F8 = 119;\r\n\r\n\t/**\r\n\t * F9 key\r\n\t * @attribute F9\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F9 = 120;\r\n\r\n\t/**\r\n\t * F10 key\r\n\t * @attribute F10\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F10 = 121;\r\n\r\n\t/**\r\n\t * F11 key\r\n\t * @attribute F11\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F11 = 122;\r\n\r\n\t/**\r\n\t * F12 key\r\n\t * @attribute F12\r\n\t * @type {Number}\r\n\t */\r\n\tkeys.F12 = 123;\r\n\r\n\treturn keyboard.keys = keys;\r\n\t\r\n});\ndefine('skylark-devices-keyboard/Monitor',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\",\r\n\t\"./KeyState\"\r\n],function(\r\n\tklass,\r\n\tkeyboard,\r\n\tKeyState\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Keyboard instance for input in sync with the running 3D application.\r\n\t * \r\n\t * The keyboard object provided by scripts is automatically updated by the runtime handler.\r\n\t * \r\n\t * @class Keyboard\r\n\t * @module Input\r\n\t * @param {Boolean} dontInitialize If true the mouse events are not created.\r\n\t */\r\n\tvar Monitor = klass({\r\n\t\t_construct : function (dontInitialize) \t{\r\n\t\t\t/**\r\n\t\t\t * Array with keyboard keys status.\r\n\t\t\t *\r\n\t\t\t * @property keyStates\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.keyStates = [];\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * The actions array serves as a buffer for the key input actions.\r\n\t\t\t *\r\n\t\t\t * Until the update method is called it stores all the key stroke actions.\r\n\t\t\t *\r\n\t\t\t * On update the key strokes are updated and the keys array stores the correct values.\r\n\t\t\t *\r\n\t\t\t * @property actions\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.actions = [];\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tvar actions = this.actions;\r\n\r\n\t\t\t/**\r\n\t\t\t * Event manager used to handle the keyup, keydown and focus events.\r\n\t\t\t *\r\n\t\t\t * On each event actions are added to the actions array.\r\n\t\t\t *\r\n\t\t\t * @property events\r\n\t\t\t * @type {EventManager}\r\n\t\t\t */\r\n\t\t\t//this.events = new EventManager();\r\n\t\t\t/*\r\n\t\t\tthis.events.add(window, \"keydown\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"keyup\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.UP);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"focus\", function(event)\r\n\t\t\t{\r\n\t\t\t\tself.reset();\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\tthis.handlers = {\r\n\t\t\t\t\"keydown\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"keyup\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.UP);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"focus\" : function(event) {\r\n\t\t\t\t\t\t\t\tself.reset();\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif(dontInitialize !== true)\r\n\t\t\t{\r\n\t\t\t\tthis.create();\r\n\t\t\t}\r\n\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update key flags synchronously.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function() \t{\r\n\t\t\tvar end = 0;\r\n\r\n\t\t\twhile(this.actions.length > end)\r\n\t\t\t{\r\n\t\t\t\tvar key = this.actions.shift();\r\n\t\t\t\tvar action = this.actions.shift();\r\n\r\n\t\t\t\tif(this.keyStates[key] === undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keyStates[key] = new Key();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.keyStates[key].update(action);\r\n\r\n\t\t\t\tif(this.keyStates[key].justReleased || this.keyStates[key].justPressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.actions.push(key);\r\n\t\t\t\t\tthis.actions.push(Key.RESET);\r\n\t\t\t\t\tend += 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset keyboard status to default.\r\n\t\t *\r\n\t\t * Does not clean the action list.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t */\r\n\t\treset : function() {\r\n\t\t\t//Reset all keys\r\n\t\t\tfor(var i = 0; i < this.keyStates.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(this.keyStates[i] !== undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keyStates[i].reset();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key is pressed.\r\n\t\t * \r\n\t\t * @method keyPressed\r\n\t\t * @return {boolean} True is the key is currently pressed\r\n\t\t */\r\n\t\tkeyPressed : function(key){\r\n\t\t\treturn this.keyStates[key] !== undefined && this.keyStates[key].pressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check is a key as just pressed.\r\n\t\t * \r\n\t\t * @method keyJustPressed\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustPressed : function(key){\r\n\t\t\treturn this.keyStates[key] !== undefined && this.keyStates[key].justPressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key was just released.\r\n\t\t * \r\n\t\t * @method keyJustReleased\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustReleased : function(key){\r\n\t\t\treturn this.keyStates[key] !== undefined && this.keyStates[key].justReleased;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Create keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tcreate : function(){\r\n\t\t\t//this.events.create();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.addEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Dispose keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tdispose : function()\t{\r\n\t\t\t//this.events.destroy();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.removeEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn keyboard.Monitor =  Monitor;\r\n});\ndefine('skylark-devices-keyboard/codes',[\r\n\t\"./keyboard\"\r\n],function(keyboard){\r\n\r\n  /**\r\n   * Get by name\r\n   *\r\n   *   exports.code['enter'] // => 13\r\n   */\r\n\r\n  var codes =  {\r\n    'backspace': 8,\r\n    'tab': 9,\r\n    'enter': 13,\r\n    'shift': 16,\r\n    'ctrl': 17,\r\n    'alt': 18,\r\n    'pause/break': 19,\r\n    'caps lock': 20,\r\n    'esc': 27,\r\n    'space': 32,\r\n    'page up': 33,\r\n    'page down': 34,\r\n    'end': 35,\r\n    'home': 36,\r\n    'left': 37,\r\n    'up': 38,\r\n    'right': 39,\r\n    'down': 40,\r\n    'insert': 45,\r\n    'delete': 46,\r\n    'command': 91,\r\n    'left command': 91,\r\n    'right command': 93,\r\n    'numpad *': 106,\r\n    'numpad +': 107,\r\n    'numpad -': 109,\r\n    'numpad .': 110,\r\n    'numpad /': 111,\r\n    'num lock': 144,\r\n    'scroll lock': 145,\r\n    'my computer': 182,\r\n    'my calculator': 183,\r\n    ';': 186,\r\n    '=': 187,\r\n    ',': 188,\r\n    '-': 189,\r\n    '.': 190,\r\n    '/': 191,\r\n    '`': 192,\r\n    '[': 219,\r\n    '\\\\': 220,\r\n    ']': 221,\r\n    \"'\": 222\r\n  };\r\n\r\n  /*!\r\n   * Programatically add the following\r\n   */\r\n\r\n  // lower case chars a-z\r\n  for (var i = 97; i < 123; i++) {\r\n    codes[String.fromCharCode(i)] = i - 32;\r\n  }\r\n\r\n  // numbers 0-9\r\n  for (var i = 48; i < 58; i++) {\r\n    codes[i - 48] = i;\r\n  }\r\n\r\n  // function keys f1-f12\r\n  for (var i = 1; i < 13; i++) {\r\n    codes['f'+i] = i + 111;\r\n  }\r\n\r\n  // numpad keys\r\n  for (var i = 0; i < 10; i++) {\r\n    codes['numpad '+i] = i + 96;\r\n  }\r\n\r\n  // Helper aliases\r\n\r\n\r\n  return keyboard.codes = codes;\r\n});\ndefine('skylark-devices-keyboard/names',[\r\n\t\"./keyboard\",\r\n\t\"./codes\"\r\n],function(keyboard,codes){\r\n\r\n  /**\r\n   * Get by code\r\n   *\r\n   *   exports.name[13] // => 'Enter'\r\n   */\r\n\r\n  var names = {} ;\r\n\r\n  // Create reverse mapping\r\n  for (var i in codes) {\r\n  \tnames[codes[i]] = i;\r\n  }\r\n\r\n  return keyboard.names = names;\r\n});\ndefine('skylark-devices-keyboard/aliases',[\r\n\t\"./keyboard\",\r\n\t\"./codes\",\r\n    \"./names\"\r\n],function(keyboard,codes){\r\n\r\n  var aliases =  {\r\n    'windows': 91,\r\n    '⇧': 16,\r\n    '⌥': 18,\r\n    '⌃': 17,\r\n    '⌘': 91,\r\n    'ctl': 17,\r\n    'control': 17,\r\n    'option': 18,\r\n    'pause': 19,\r\n    'break': 19,\r\n    'caps': 20,\r\n    'return': 13,\r\n    'escape': 27,\r\n    'spc': 32,\r\n    'spacebar': 32,\r\n    'pgup': 33,\r\n    'pgdn': 34,\r\n    'ins': 45,\r\n    'del': 46,\r\n    'cmd': 91\r\n  }\r\n\r\n  return keyboard.aliases = aliases;\r\n});\ndefine('skylark-devices-keyboard/isEventKey',[\r\n  \"skylark-langx-types\",\r\n  \"./keyboard\",\r\n  \"./aliases\",\r\n  \"./codes\",\r\n  \"./names\"\r\n],function(types,keyboard,aliases,codes,names){\r\n\r\n  /**\r\n   * Compares a keyboard event with a given keyCode or keyName.\r\n   *\r\n   * @param {Event} event Keyboard event that should be tested\r\n   * @param {Mixed} keyCode {Number} or keyName {String}\r\n   * @return {Boolean}\r\n   * @api public\r\n   */\r\n   function isEventKey(event, nameOrCode) {\r\n      var keyCode = event.which || event.keyCode || event.charCode;\r\n      if (keyCode === null || keyCode === undefined) { \r\n        return false; \r\n      }\r\n\r\n      if (types.isString(nameOrCode)) {\r\n        // check codes\r\n        var foundNamedKey = codes[nameOrCode.toLowerCase()]\r\n        if (foundNamedKey) { return foundNamedKey === keyCode; }\r\n      \r\n        // check aliases\r\n        var foundNamedKey = aliases[nameOrCode.toLowerCase()]\r\n        if (foundNamedKey) { return foundNamedKey === keyCode; }\r\n      } else if (types.isNumber(nameOrCode)) {\r\n        return nameOrCode === keyCode;\r\n      }\r\n      return false;\r\n  }\r\n\r\n  return keyboard.isEventKey = isEventKey;\r\n\r\n});\r\n\ndefine('skylark-devices-keyboard/main',[\r\n\t\"./keyboard\",\r\n\t\"./KeyState\",\r\n\t\"./keys\",\r\n\t\"./Monitor\",\r\n\t\"./aliases\",\r\n\t\"./codes\",\r\n\t\"./isEventKey\",\r\n\t\"./names\"\r\n],function(keyboard){\r\n\treturn keyboard;\r\n});\ndefine('skylark-devices-keyboard', ['skylark-devices-keyboard/main'], function (main) { return main; });\n\n"]}