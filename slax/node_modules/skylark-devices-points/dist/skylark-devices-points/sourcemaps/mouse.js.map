{"version":3,"sources":["mouse.js"],"names":["define","points","mouse","mouseWheelEvent","document","createElement","undefined","onmousewheel","normalizeWheel","event","sX","sY","pX","pY","detail","wheelDelta","wheelDeltaY","wheelDeltaX","axis","HORIZONTAL_AXIS","deltaY","deltaX","deltaMode","spinX","spinY","pixelX","pixelY","isMouseEvent","evt","pointerType","MSPOINTER_TYPE_MOUSE","mozInputSource","type","indexOf","isLeftMouseButton","buttons","which","button","isMiddleMouseButton","isRightMouseButton"],"mappings":";;;;;;;AAAAA,QACC,YACC,SAASC,GA4IV,OAAOA,EAAOC,OACbC,gBAhEA,WACE,MAAO,YAAaC,SAASC,cAAc,OAAS,aACxBC,IAA1BF,SAASG,aAA6B,aACpC,kBA8DNC,eAnDA,SAAwBC,GACtB,IAIIC,EAAK,EAAGC,EAAK,EACbC,EAAK,EAAGC,EAAK,EAmCjB,MAhCI,WAAiBJ,IAASE,EAAKF,EAAMK,QACrC,eAAiBL,IAASE,GAAMF,EAAMM,WAAa,KACnD,gBAAiBN,IAASE,GAAMF,EAAMO,YAAc,KACpD,gBAAiBP,IAASC,GAAMD,EAAMQ,YAAc,KAGpD,SAAUR,GAASA,EAAMS,OAAST,EAAMU,kBAC1CT,EAAKC,EACLA,EAAK,GAGPC,EAnBkB,GAmBbF,EACLG,EApBkB,GAoBbF,EAED,WAAYF,IAASI,EAAKJ,EAAMW,QAChC,WAAYX,IAASG,EAAKH,EAAMY,SAE/BT,GAAMC,IAAOJ,EAAMa,YACE,IAApBb,EAAMa,WACRV,GA1Bc,GA2BdC,GA3Bc,KA8BdD,GA7Bc,IA8BdC,GA9Bc,MAmCdD,IAAOF,IAAMA,EAAME,EAAK,GAAM,EAAI,GAClCC,IAAOF,IAAMA,EAAME,EAAK,GAAM,EAAI,IAGpCU,MAAOb,EACPc,MAAOb,EACPc,OAAQb,EACRc,OAAQb,IAQZc,aA1ID,SAAsBC,GACrB,OAA2B,MAAnBA,EAAIC,YAA2C,SAAnBD,EAAIC,aAA0BD,EAAIC,cACrED,EAAIE,qBAAgD,MAAtBF,EAAIG,eACX,GAAtBH,EAAIG,eAAmD,GAA7BH,EAAII,KAAKC,QAAQ,UAwI7CC,kBA7HD,SAA2BN,GAG1B,MAAI,YAAaA,IAAoB,aAAZA,EAAII,MAAmC,aAAZJ,EAAII,MAEjC,GAAfJ,EAAIO,QAEH,UAAWP,EAEQ,IAAdA,EAAIQ,MAIW,IAAfR,EAAIS,QAiHlBC,oBAtGD,SAA6BV,GAC5B,MAAI,UAAWA,EAEa,IAAdA,EAAIQ,MAIW,IAAfR,EAAIS,QAgGlBE,mBArFD,SAA4BX,GAC3B,MAAI,UAAWA,EAEa,IAAdA,EAAIQ,MAIW,IAAfR,EAAIS","file":"../mouse.js","sourcesContent":["define([\r\n\t\"./points\"\r\n],function(points){\r\n\t/**\r\n\t * Function: isMouseEvent\r\n\t * \r\n\t * Returns true if the event was generated using a mouse (not a pen or touch device).\r\n\t */\r\n\tfunction isMouseEvent(evt) \t{\r\n\t\treturn (evt.pointerType != null) ? (evt.pointerType == 'mouse' || evt.pointerType ===\r\n\t\t\tevt.MSPOINTER_TYPE_MOUSE) : ((evt.mozInputSource != null) ?\r\n\t\t\t\tevt.mozInputSource == 1 : evt.type.indexOf('mouse') == 0);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Function: isLeftMouseButton\r\n\t * \r\n\t * Returns true if the left mouse button is pressed for the given event.\r\n\t * To check if a button is pressed during a mouseMove you should use the\r\n\t * <mxGraph.isMouseDown> property. Note that this returns true in Firefox\r\n\t * for control+left-click on the Mac.\r\n\t */\r\n\tfunction isLeftMouseButton(evt) {\r\n\t\t// Special case for mousemove and mousedown we check the buttons\r\n\t\t// if it exists because which is 0 even if no button is pressed\r\n\t\tif ('buttons' in evt && (evt.type == 'mousedown' || evt.type == 'mousemove'))\r\n\t\t{\r\n\t\t\treturn evt.buttons == 1;\r\n\t\t}\r\n\t\telse if ('which' in evt)\r\n\t\t{\r\n\t        return evt.which === 1;\r\n\t    }\r\n\t\telse\r\n\t\t{\r\n\t        return evt.button === 1;\r\n\t    }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Function: isMiddleMouseButton\r\n\t * \r\n\t * Returns true if the middle mouse button is pressed for the given event.\r\n\t * To check if a button is pressed during a mouseMove you should use the\r\n\t * <mxGraph.isMouseDown> property.\r\n\t */\r\n\tfunction isMiddleMouseButton(evt) {\r\n\t\tif ('which' in evt)\r\n\t\t{\r\n\t        return evt.which === 2;\r\n\t    }\r\n\t\telse\r\n\t\t{\r\n\t        return evt.button === 4;\r\n\t    }\r\n\t}\r\n\t\r\n\t/**\r\n\t * Function: isRightMouseButton\r\n\t * \r\n\t * Returns true if the right mouse button was pressed. Note that this\r\n\t * button might not be available on some systems. For handling a popup\r\n\t * trigger <isPopupTrigger> should be used.\r\n\t */\r\n\tfunction isRightMouseButton(evt){\r\n\t\tif ('which' in evt)\r\n\t\t{\r\n\t        return evt.which === 3;\r\n\t    }\r\n\t\telse\r\n\t\t{\r\n\t        return evt.button === 2;\r\n\t    }\r\n\t}\r\n\r\n  /**\r\n   * @summary Gets the event name for mouse wheel\r\n   * @returns {string}\r\n   */\r\n  function mouseWheelEvent() {\r\n    return 'onwheel' in document.createElement('div') ? 'wheel' : // Modern browsers support \"wheel\"\r\n      document.onmousewheel !== undefined ? 'mousewheel' : // Webkit and IE support at least \"mousewheel\"\r\n        'DOMMouseScroll'; // let's assume that remaining browsers are older Firefox\r\n  };\r\n\r\n  /**\r\n   * @summary Normalize mousewheel values accross browsers\r\n   * @description From Facebook's Fixed Data Table\r\n   * {@link https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js}\r\n   * @copyright Facebook\r\n   * @param {MouseWheelEvent} event\r\n   * @returns {{spinX: number, spinY: number, pixelX: number, pixelY: number}}\r\n   */\r\n  function normalizeWheel(event) {\r\n    var PIXEL_STEP  = 10;\r\n    var LINE_HEIGHT = 40;\r\n    var PAGE_HEIGHT = 800;\r\n\r\n    var sX = 0, sY = 0; // spinX, spinY\r\n    var pX = 0, pY = 0; // pixelX, pixelY\r\n\r\n    // Legacy\r\n    if ('detail'      in event) { sY = event.detail; }\r\n    if ('wheelDelta'  in event) { sY = -event.wheelDelta / 120; }\r\n    if ('wheelDeltaY' in event) { sY = -event.wheelDeltaY / 120; }\r\n    if ('wheelDeltaX' in event) { sX = -event.wheelDeltaX / 120; }\r\n\r\n    // side scrolling on FF with DOMMouseScroll\r\n    if ('axis' in event && event.axis === event.HORIZONTAL_AXIS) {\r\n      sX = sY;\r\n      sY = 0;\r\n    }\r\n\r\n    pX = sX * PIXEL_STEP;\r\n    pY = sY * PIXEL_STEP;\r\n\r\n    if ('deltaY' in event) { pY = event.deltaY; }\r\n    if ('deltaX' in event) { pX = event.deltaX; }\r\n\r\n    if ((pX || pY) && event.deltaMode) {\r\n      if (event.deltaMode === 1) { // delta in LINE units\r\n        pX *= LINE_HEIGHT;\r\n        pY *= LINE_HEIGHT;\r\n      }\r\n      else {                      // delta in PAGE units\r\n        pX *= PAGE_HEIGHT;\r\n        pY *= PAGE_HEIGHT;\r\n      }\r\n    }\r\n\r\n    // Fall-back if spin cannot be determined\r\n    if (pX && !sX) { sX = (pX < 1) ? -1 : 1; }\r\n    if (pY && !sY) { sY = (pY < 1) ? -1 : 1; }\r\n\r\n    return {\r\n      spinX: sX,\r\n      spinY: sY,\r\n      pixelX: pX,\r\n      pixelY: pY\r\n    };\r\n  };\r\n\r\n\treturn points.mouse = {\r\n\t\tmouseWheelEvent,\r\n\t\tnormalizeWheel,\r\n\r\n\t\tisMouseEvent,\r\n\t\tisLeftMouseButton,\r\n\t\tisMiddleMouseButton,\r\n\t\tisRightMouseButton\r\n\t};\r\n});"]}