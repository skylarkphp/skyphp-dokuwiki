{"version":3,"sources":["skylark-domx-contents.js"],"names":[],"mappingsfile":"../skylark-domx-contents.js","sourcesContent":["define('skylark-domx-contents/contents',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\"\r\n], function(skylark, langx, noder,datax) {\r\n    \"use strict\";\r\n\r\n    var contents = function() {\r\n        return contents;\r\n    };\r\n\r\n\r\n    return skylark.attach(\"domx.contents\",contents);\r\n\r\n});\ndefine('skylark-domx-contents/Hotkeys',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n\r\n  var Hotkeys = langx.Evented.inherit({\r\n\r\n  });\r\n\r\n\r\n  Hotkeys.count = 0;\r\n\r\n  Hotkeys.keyNameMap = {\r\n    8: \"Backspace\",\r\n    9: \"Tab\",\r\n    13: \"Enter\",\r\n    16: \"Shift\",\r\n    17: \"Control\",\r\n    18: \"Alt\",\r\n    19: \"Pause\",\r\n    20: \"CapsLock\",\r\n    27: \"Esc\",\r\n    32: \"Spacebar\",\r\n    33: \"PageUp\",\r\n    34: \"PageDown\",\r\n    35: \"End\",\r\n    36: \"Home\",\r\n    37: \"Left\",\r\n    38: \"Up\",\r\n    39: \"Right\",\r\n    40: \"Down\",\r\n    45: \"Insert\",\r\n    46: \"Del\",\r\n    91: \"Meta\",\r\n    93: \"Meta\",\r\n    48: \"0\",\r\n    49: \"1\",\r\n    50: \"2\",\r\n    51: \"3\",\r\n    52: \"4\",\r\n    53: \"5\",\r\n    54: \"6\",\r\n    55: \"7\",\r\n    56: \"8\",\r\n    57: \"9\",\r\n    65: \"A\",\r\n    66: \"B\",\r\n    67: \"C\",\r\n    68: \"D\",\r\n    69: \"E\",\r\n    70: \"F\",\r\n    71: \"G\",\r\n    72: \"H\",\r\n    73: \"I\",\r\n    74: \"J\",\r\n    75: \"K\",\r\n    76: \"L\",\r\n    77: \"M\",\r\n    78: \"N\",\r\n    79: \"O\",\r\n    80: \"P\",\r\n    81: \"Q\",\r\n    82: \"R\",\r\n    83: \"S\",\r\n    84: \"T\",\r\n    85: \"U\",\r\n    86: \"V\",\r\n    87: \"W\",\r\n    88: \"X\",\r\n    89: \"Y\",\r\n    90: \"Z\",\r\n    96: \"0\",\r\n    97: \"1\",\r\n    98: \"2\",\r\n    99: \"3\",\r\n    100: \"4\",\r\n    101: \"5\",\r\n    102: \"6\",\r\n    103: \"7\",\r\n    104: \"8\",\r\n    105: \"9\",\r\n    106: \"Multiply\",\r\n    107: \"Add\",\r\n    109: \"Subtract\",\r\n    110: \"Decimal\",\r\n    111: \"Divide\",\r\n    112: \"F1\",\r\n    113: \"F2\",\r\n    114: \"F3\",\r\n    115: \"F4\",\r\n    116: \"F5\",\r\n    117: \"F6\",\r\n    118: \"F7\",\r\n    119: \"F8\",\r\n    120: \"F9\",\r\n    121: \"F10\",\r\n    122: \"F11\",\r\n    123: \"F12\",\r\n    124: \"F13\",\r\n    125: \"F14\",\r\n    126: \"F15\",\r\n    127: \"F16\",\r\n    128: \"F17\",\r\n    129: \"F18\",\r\n    130: \"F19\",\r\n    131: \"F20\",\r\n    132: \"F21\",\r\n    133: \"F22\",\r\n    134: \"F23\",\r\n    135: \"F24\",\r\n    59: \";\",\r\n    61: \"=\",\r\n    186: \";\",\r\n    187: \"=\",\r\n    188: \",\",\r\n    190: \".\",\r\n    191: \"/\",\r\n    192: \"`\",\r\n    219: \"[\",\r\n    220: \"\\\\\",\r\n    221: \"]\",\r\n    222: \"'\"\r\n  };\r\n\r\n  Hotkeys.aliases = {\r\n    \"escape\": \"esc\",\r\n    \"delete\": \"del\",\r\n    \"return\": \"enter\",\r\n    \"ctrl\": \"control\",\r\n    \"space\": \"spacebar\",\r\n    \"ins\": \"insert\",\r\n    \"cmd\": \"meta\",\r\n    \"command\": \"meta\",\r\n    \"wins\": \"meta\",\r\n    \"windows\": \"meta\"\r\n  };\r\n\r\n  Hotkeys.normalize = function(shortcut) {\r\n    var i, j, key, keyname, keys, len;\r\n    keys = shortcut.toLowerCase().replace(/\\s+/gi, \"\").split(\"+\");\r\n    for (i = j = 0, len = keys.length; j < len; i = ++j) {\r\n      key = keys[i];\r\n      keys[i] = this.aliases[key] || key;\r\n    }\r\n    keyname = keys.pop();\r\n    keys.sort().push(keyname);\r\n    return keys.join(\"_\");\r\n  };\r\n\r\n  Hotkeys.prototype.opts = {\r\n    el: document\r\n  };\r\n\r\n  Hotkeys.prototype.init = function() {\r\n    this.id = ++this.constructor.count;\r\n    this._map = {};\r\n    this._delegate = typeof this.opts.el === \"string\" ? document : this.opts.el;\r\n    $(this._delegate).on(\"keydown.simple-hotkeys-\" + this.id, this.opts.el, (function(_this) {\r\n      return function(e) {\r\n        var ref;\r\n        return (ref = _this._getHander(e)) != null ? ref.call(_this, e) : void 0;\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  Hotkeys.prototype._getHander = function(e) {\r\n    var keyname, shortcut;\r\n    if (!(keyname = this.constructor.keyNameMap[e.which])) {\r\n      return;\r\n    }\r\n    shortcut = \"\";\r\n    if (e.altKey) {\r\n      shortcut += \"alt_\";\r\n    }\r\n    if (e.ctrlKey) {\r\n      shortcut += \"control_\";\r\n    }\r\n    if (e.metaKey) {\r\n      shortcut += \"meta_\";\r\n    }\r\n    if (e.shiftKey) {\r\n      shortcut += \"shift_\";\r\n    }\r\n    shortcut += keyname.toLowerCase();\r\n    return this._map[shortcut];\r\n  };\r\n\r\n  Hotkeys.prototype.respondTo = function(subject) {\r\n    if (typeof subject === 'string') {\r\n      return this._map[this.constructor.normalize(subject)] != null;\r\n    } else {\r\n      return this._getHander(subject) != null;\r\n    }\r\n  };\r\n\r\n  Hotkeys.prototype.add = function(shortcut, handler) {\r\n    this._map[this.constructor.normalize(shortcut)] = handler;\r\n    return this;\r\n  };\r\n\r\n  Hotkeys.prototype.remove = function(shortcut) {\r\n    delete this._map[this.constructor.normalize(shortcut)];\r\n    return this;\r\n  };\r\n\r\n  Hotkeys.prototype.destroy = function() {\r\n    $(this._delegate).off(\".simple-hotkeys-\" + this.id);\r\n    this._map = {};\r\n    return this;\r\n  };\r\n\r\n  return  contents.Hotkeys = Hotkeys;\r\n\r\n});\r\n\r\n\ndefine('skylark-domx-contents/Util',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n  var Util = langx.Evented.inherit({\r\n    init : function(editor,opts) {\r\n      this.editor = editor; // this._module;\r\n      this.opts = langx.extend({}, this.opts, opts);\r\n      if (this.browser.msie && this.browser.version < 11) {\r\n        return this.phBr = '';\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  Util.pluginName = 'Util';\r\n\r\n  Util.prototype.phBr = '<br/>';\r\n\r\n  Util.prototype.os = (function() {\r\n    var os;\r\n    os = {};\r\n    if (/Mac/.test(navigator.appVersion)) {\r\n      os.mac = true;\r\n    } else if (/Linux/.test(navigator.appVersion)) {\r\n      os.linux = true;\r\n    } else if (/Win/.test(navigator.appVersion)) {\r\n      os.win = true;\r\n    } else if (/X11/.test(navigator.appVersion)) {\r\n      os.unix = true;\r\n    }\r\n    if (/Mobi/.test(navigator.appVersion)) {\r\n      os.mobile = true;\r\n    }\r\n    return os;\r\n  })();\r\n\r\n  Util.prototype.browser = (function() {\r\n    var chrome, edge, firefox, ie, ref, ref1, ref2, ref3, ref4, safari, ua;\r\n    ua = navigator.userAgent;\r\n    ie = /(msie|trident)/i.test(ua);\r\n    chrome = /chrome|crios/i.test(ua);\r\n    safari = /safari/i.test(ua) && !chrome;\r\n    firefox = /firefox/i.test(ua);\r\n    edge = /edge/i.test(ua);\r\n    if (ie) {\r\n      return {\r\n        msie: true,\r\n        version: ((ref = ua.match(/(msie |rv:)(\\d+(\\.\\d+)?)/i)) != null ? ref[2] : void 0) * 1\r\n      };\r\n    } else if (edge) {\r\n      return {\r\n        edge: true,\r\n        webkit: true,\r\n        version: ((ref1 = ua.match(/edge\\/(\\d+(\\.\\d+)?)/i)) != null ? ref1[1] : void 0) * 1\r\n      };\r\n    } else if (chrome) {\r\n      return {\r\n        webkit: true,\r\n        chrome: true,\r\n        version: ((ref2 = ua.match(/(?:chrome|crios)\\/(\\d+(\\.\\d+)?)/i)) != null ? ref2[1] : void 0) * 1\r\n      };\r\n    } else if (safari) {\r\n      return {\r\n        webkit: true,\r\n        safari: true,\r\n        version: ((ref3 = ua.match(/version\\/(\\d+(\\.\\d+)?)/i)) != null ? ref3[1] : void 0) * 1\r\n      };\r\n    } else if (firefox) {\r\n      return {\r\n        mozilla: true,\r\n        firefox: true,\r\n        version: ((ref4 = ua.match(/firefox\\/(\\d+(\\.\\d+)?)/i)) != null ? ref4[1] : void 0) * 1\r\n      };\r\n    } else {\r\n      return {};\r\n    }\r\n  })();\r\n\r\n  Util.prototype.support = (function() {\r\n    return {\r\n      onselectionchange: (function() {\r\n        var e, onselectionchange;\r\n        onselectionchange = document.onselectionchange;\r\n        if (onselectionchange !== void 0) {\r\n          try {\r\n            document.onselectionchange = 0;\r\n            return document.onselectionchange === null;\r\n          } catch (_error) {\r\n            e = _error;\r\n          } finally {\r\n            document.onselectionchange = onselectionchange;\r\n          }\r\n        }\r\n        return false;\r\n      })(),\r\n      oninput: (function() {\r\n        return !/(msie|trident)/i.test(navigator.userAgent);\r\n      })()\r\n    };\r\n  })();\r\n\r\n  Util.prototype.reflow = function(el) {\r\n    if (el == null) {\r\n      el = document;\r\n    }\r\n    return $(el)[0].offsetHeight;\r\n  };\r\n\r\n  Util.prototype.metaKey = function(e) {\r\n    var isMac;\r\n    isMac = /Mac/.test(navigator.userAgent);\r\n    if (isMac) {\r\n      return e.metaKey;\r\n    } else {\r\n      return e.ctrlKey;\r\n    }\r\n  };\r\n\r\n  Util.prototype.isEmptyNode = function(node) {\r\n    var $node;\r\n    $node = $(node);\r\n    return $node.is(':empty') || (!$node.text() && !$node.find(':not(br, span, div)').length);\r\n  };\r\n\r\n  Util.prototype.isDecoratedNode = function(node) {\r\n    return $(node).is('[class^=\"' + this.opts.classPrefix + '\"]');\r\n  };\r\n\r\n  Util.prototype.blockNodes = [\"div\", \"p\", \"ul\", \"ol\", \"li\", \"blockquote\", \"hr\", \"pre\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"table\"];\r\n\r\n  Util.prototype.isBlockNode = function(node) {\r\n    node = $(node)[0];\r\n    if (!node || node.nodeType === 3) {\r\n      return false;\r\n    }\r\n    return new RegExp(\"^(\" + (this.blockNodes.join('|')) + \")$\").test(node.nodeName.toLowerCase());\r\n  };\r\n\r\n  Util.prototype.getNodeLength = function(node) {\r\n    node = $(node)[0];\r\n    switch (node.nodeType) {\r\n      case 7:\r\n      case 10:\r\n        return 0;\r\n      case 3:\r\n      case 8:\r\n        return node.length;\r\n      default:\r\n        return node.childNodes.length;\r\n    }\r\n  };\r\n\r\n  Util.prototype.dataURLtoBlob = function(dataURL) {\r\n    var BlobBuilder, arrayBuffer, bb, blobArray, byteString, hasArrayBufferViewSupport, hasBlobConstructor, i, intArray, k, mimeString, ref, supportBlob;\r\n    hasBlobConstructor = window.Blob && (function() {\r\n      var e;\r\n      try {\r\n        return Boolean(new Blob());\r\n      } catch (_error) {\r\n        e = _error;\r\n        return false;\r\n      }\r\n    })();\r\n    hasArrayBufferViewSupport = hasBlobConstructor && window.Uint8Array && (function() {\r\n      var e;\r\n      try {\r\n        return new Blob([new Uint8Array(100)]).size === 100;\r\n      } catch (_error) {\r\n        e = _error;\r\n        return false;\r\n      }\r\n    })();\r\n    BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;\r\n    supportBlob = hasBlobConstructor || BlobBuilder;\r\n    if (!(supportBlob && window.atob && window.ArrayBuffer && window.Uint8Array)) {\r\n      return false;\r\n    }\r\n    if (dataURL.split(',')[0].indexOf('base64') >= 0) {\r\n      byteString = atob(dataURL.split(',')[1]);\r\n    } else {\r\n      byteString = decodeURIComponent(dataURL.split(',')[1]);\r\n    }\r\n    arrayBuffer = new ArrayBuffer(byteString.length);\r\n    intArray = new Uint8Array(arrayBuffer);\r\n    for (i = k = 0, ref = byteString.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {\r\n      intArray[i] = byteString.charCodeAt(i);\r\n    }\r\n    mimeString = dataURL.split(',')[0].split(':')[1].split(';')[0];\r\n    if (hasBlobConstructor) {\r\n      blobArray = hasArrayBufferViewSupport ? intArray : arrayBuffer;\r\n      return new Blob([blobArray], {\r\n        type: mimeString\r\n      });\r\n    }\r\n    bb = new BlobBuilder();\r\n    bb.append(arrayBuffer);\r\n    return bb.getBlob(mimeString);\r\n  };\r\n\r\n  Util.prototype.throttle = function(func, wait) {\r\n    var args, call, ctx, last, rtn, throttled, timeoutID;\r\n    last = 0;\r\n    timeoutID = 0;\r\n    ctx = args = rtn = null;\r\n    call = function() {\r\n      timeoutID = 0;\r\n      last = +new Date();\r\n      rtn = func.apply(ctx, args);\r\n      ctx = null;\r\n      return args = null;\r\n    };\r\n    throttled = function() {\r\n      var delta;\r\n      ctx = this;\r\n      args = arguments;\r\n      delta = new Date() - last;\r\n      if (!timeoutID) {\r\n        if (delta >= wait) {\r\n          call();\r\n        } else {\r\n          timeoutID = setTimeout(call, wait - delta);\r\n        }\r\n      }\r\n      return rtn;\r\n    };\r\n    throttled.clear = function() {\r\n      if (!timeoutID) {\r\n        return;\r\n      }\r\n      clearTimeout(timeoutID);\r\n      return call();\r\n    };\r\n    return throttled;\r\n  };\r\n\r\n  Util.prototype.formatHTML = function(html) {\r\n    var cursor, indentString, lastMatch, level, match, re, repeatString, result, str;\r\n    re = /<(\\/?)(.+?)(\\/?)>/g;\r\n    result = '';\r\n    level = 0;\r\n    lastMatch = null;\r\n    indentString = '  ';\r\n    repeatString = function(str, n) {\r\n      return new Array(n + 1).join(str);\r\n    };\r\n    while ((match = re.exec(html)) !== null) {\r\n      match.isBlockNode = langx.inArray(match[2], this.blockNodes) > -1;\r\n      match.isStartTag = match[1] !== '/' && match[3] !== '/';\r\n      match.isEndTag = match[1] === '/' || match[3] === '/';\r\n      cursor = lastMatch ? lastMatch.index + lastMatch[0].length : 0;\r\n      if ((str = html.substring(cursor, match.index)).length > 0 && langx.trim(str)) {\r\n        result += str;\r\n      }\r\n      if (match.isBlockNode && match.isEndTag && !match.isStartTag) {\r\n        level -= 1;\r\n      }\r\n      if (match.isBlockNode && match.isStartTag) {\r\n        if (!(lastMatch && lastMatch.isBlockNode && lastMatch.isEndTag)) {\r\n          result += '\\n';\r\n        }\r\n        result += repeatString(indentString, level);\r\n      }\r\n      result += match[0];\r\n      if (match.isBlockNode && match.isEndTag) {\r\n        result += '\\n';\r\n      }\r\n      if (match.isBlockNode && match.isStartTag) {\r\n        level += 1;\r\n      }\r\n      lastMatch = match;\r\n    }\r\n    return langx.trim(result);\r\n  };\r\n\r\n  return contents.Util = Util;\r\n});\ndefine('skylark-domx-contents/InputManager',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n \r\n\r\n  var indexOf = [].indexOf ;\r\n\r\n  var InputManager = langx.Evented.inherit({\r\n    init : function(editable,opts) {\r\n      this.editable = editable;\r\n      this.opts = langx.extend({}, this.opts, opts);\r\n\r\n      var selectAllKey, submitKey;\r\n      this.throttledValueChanged = this.editable.util.throttle((function(_this) {\r\n        return function(params) {\r\n          return setTimeout(function() {\r\n            return _this.editable.trigger('valuechanged', params);\r\n          }, 10);\r\n        };\r\n      })(this), 300);\r\n      this.throttledSelectionChanged = this.editable.util.throttle((function(_this) {\r\n        return function() {\r\n          return _this.editable.trigger('selectionchanged');\r\n        };\r\n      })(this), 50);\r\n      $(document).on('selectionchange.simditor' + this.editable.id, (function(_this) {\r\n        return function(e) {\r\n          var triggerEvent;\r\n          if (!(_this.focused && !_this.editable.clipboard.pasting)) {\r\n            return;\r\n          }\r\n          triggerEvent = function() {\r\n            if (_this._selectionTimer) {\r\n              clearTimeout(_this._selectionTimer);\r\n              _this._selectionTimer = null;\r\n            }\r\n            if (_this.editable.selection._selection.rangeCount > 0) {\r\n              return _this.throttledSelectionChanged();\r\n            } else {\r\n              return _this._selectionTimer = setTimeout(function() {\r\n                _this._selectionTimer = null;\r\n                if (_this.focused) {\r\n                  return triggerEvent();\r\n                }\r\n              }, 10);\r\n            }\r\n          };\r\n          return triggerEvent();\r\n        };\r\n      })(this));\r\n      this.editable.on('valuechanged', (function(_this) {\r\n        return function() {\r\n          var $rootBlocks;\r\n          _this.lastCaretPosition = null;\r\n          $rootBlocks = _this.editable.body.children().filter(function(i, node) {\r\n            return _this.editable.util.isBlockNode(node);\r\n          });\r\n          if (_this.focused && $rootBlocks.length === 0) {\r\n            _this.editable.selection.save();\r\n            _this.editable.formatter.format();\r\n            _this.editable.selection.restore();\r\n          }\r\n          _this.editable.body.find('hr, pre, .' + _this.opts.classPrefix + 'table').each(function(i, el) {\r\n            var $el, formatted;\r\n            $el = $(el);\r\n            if ($el.parent().is('blockquote') || $el.parent()[0] === _this.editable.body[0]) {\r\n              formatted = false;\r\n              if ($el.next().length === 0) {\r\n                $('<p/>').append(_this.editable.util.phBr).insertAfter($el);\r\n                formatted = true;\r\n              }\r\n              if ($el.prev().length === 0) {\r\n                $('<p/>').append(_this.editable.util.phBr).insertBefore($el);\r\n                formatted = true;\r\n              }\r\n              if (formatted) {\r\n                return _this.throttledValueChanged();\r\n              }\r\n            }\r\n          });\r\n          _this.editable.body.find('pre:empty').append(_this.editable.util.phBr);\r\n          if (!_this.editable.util.support.onselectionchange && _this.focused) {\r\n            return _this.throttledSelectionChanged();\r\n          }\r\n        };\r\n      })(this));\r\n      this.editable.body.on('keydown', langx.proxy(this._onKeyDown, this)).on('keypress', langx.proxy(this._onKeyPress, this)).on('keyup', langx.proxy(this._onKeyUp, this)).on('mouseup', langx.proxy(this._onMouseUp, this)).on('focus', langx.proxy(this._onFocus, this)).on('blur', langx.proxy(this._onBlur, this)).on('drop', langx.proxy(this._onDrop, this)).on('input', langx.proxy(this._onInput, this));\r\n      if (this.editable.util.browser.firefox) {\r\n        this.editable.hotkeys.add('cmd+left', (function(_this) {\r\n          return function(e) {\r\n            e.preventDefault();\r\n            _this.editable.selection._selection.modify('move', 'backward', 'lineboundary');\r\n            return false;\r\n          };\r\n        })(this));\r\n        this.editable.hotkeys.add('cmd+right', (function(_this) {\r\n          return function(e) {\r\n            e.preventDefault();\r\n            _this.editable.selection._selection.modify('move', 'forward', 'lineboundary');\r\n            return false;\r\n          };\r\n        })(this));\r\n        selectAllKey = this.editable.util.os.mac ? 'cmd+a' : 'ctrl+a';\r\n        this.editable.hotkeys.add(selectAllKey, (function(_this) {\r\n          return function(e) {\r\n            var $children, firstBlock, lastBlock, range;\r\n            $children = _this.editable.body.children();\r\n            if (!($children.length > 0)) {\r\n              return;\r\n            }\r\n            firstBlock = $children.first().get(0);\r\n            lastBlock = $children.last().get(0);\r\n            range = document.createRange();\r\n            range.setStart(firstBlock, 0);\r\n            range.setEnd(lastBlock, _this.editable.util.getNodeLength(lastBlock));\r\n            _this.editable.selection.range(range);\r\n            return false;\r\n          };\r\n        })(this));\r\n      }\r\n      submitKey = this.editable.util.os.mac ? 'cmd+enter' : 'ctrl+enter';\r\n      this.editable.hotkeys.add(submitKey, (function(_this) {\r\n        return function(e) {\r\n          _this.editable.$el.closest('form').find('button:submit').click();\r\n          return false;\r\n        };\r\n      })(this));\r\n    }\r\n\r\n  });\r\n\r\n  InputManager.pluginName = 'InputManager';\r\n\r\n  InputManager.prototype._modifierKeys = [16, 17, 18, 91, 93, 224];\r\n\r\n  InputManager.prototype._arrowKeys = [37, 38, 39, 40];\r\n\r\n\r\n  InputManager.prototype._onFocus = function(e) {\r\n    if (this.editable.clipboard.pasting) {\r\n      return;\r\n    }\r\n    this.editable.$el.addClass('focus').removeClass('error');\r\n    this.focused = true;\r\n    return setTimeout((function(_this) {\r\n      return function() {\r\n        var $blockEl, range;\r\n        range = _this.editable.selection._selection.getRangeAt(0);\r\n        if (range.startContainer === _this.editable.body[0]) {\r\n          if (_this.lastCaretPosition) {\r\n            _this.editable.undoManager.caretPosition(_this.lastCaretPosition);\r\n          } else {\r\n            $blockEl = _this.editable.body.children().first();\r\n            range = document.createRange();\r\n            _this.editable.selection.setRangeAtStartOf($blockEl, range);\r\n            console.log(\"aaaaaa\");\r\n          }\r\n        }\r\n        _this.lastCaretPosition = null;\r\n        _this.editable.trigger('focus');\r\n        if (!_this.editable.util.support.onselectionchange) {\r\n          return _this.throttledSelectionChanged();\r\n        }\r\n      };\r\n    })(this), 0);\r\n  };\r\n\r\n  InputManager.prototype._onBlur = function(e) {\r\n    var ref;\r\n    if (this.editable.clipboard.pasting) {\r\n      return;\r\n    }\r\n    this.editable.$el.removeClass('focus');\r\n    this.editable.sync();\r\n    this.focused = false;\r\n    this.lastCaretPosition = (ref = this.editable.undoManager.currentState()) != null ? ref.caret : void 0;\r\n    return this.editable.trigger('blur');\r\n  };\r\n\r\n  InputManager.prototype._onMouseUp = function(e) {\r\n    if (!this.editable.util.support.onselectionchange) {\r\n      return this.throttledSelectionChanged();\r\n    }\r\n  };\r\n\r\n  InputManager.prototype._onKeyDown = function(e) {\r\n    var ref, ref1;\r\n    if (this.editable.trigger(e) === false) {\r\n      return false;\r\n    }\r\n    if (this.editable.hotkeys.respondTo(e)) {\r\n      return;\r\n    }\r\n    if (this.editable.keystroke.respondTo(e)) {\r\n      this.throttledValueChanged();\r\n      return false;\r\n    }\r\n    if ((ref = e.which, indexOf.call(this._modifierKeys, ref) >= 0) || (ref1 = e.which, indexOf.call(this._arrowKeys, ref1) >= 0)) {\r\n      return;\r\n    }\r\n    if (this.editable.util.metaKey(e) && e.which === 86) {\r\n      return;\r\n    }\r\n    if (!this.editable.util.support.oninput) {\r\n      this.throttledValueChanged(['typing']);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  InputManager.prototype._onKeyPress = function(e) {\r\n    if (this.editable.trigger(e) === false) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  InputManager.prototype._onKeyUp = function(e) {\r\n    var p, ref;\r\n    if (this.editable.trigger(e) === false) {\r\n      return false;\r\n    }\r\n    if (!this.editable.util.support.onselectionchange && (ref = e.which, indexOf.call(this._arrowKeys, ref) >= 0)) {\r\n      this.throttledValueChanged();\r\n      return;\r\n    }\r\n    if ((e.which === 8 || e.which === 46) && this.editable.util.isEmptyNode(this.editable.body)) {\r\n      this.editable.body.empty();\r\n      p = $('<p/>').append(this.editable.util.phBr).appendTo(this.editable.body);\r\n      this.editable.selection.setRangeAtStartOf(p);\r\n    }\r\n  };\r\n\r\n  InputManager.prototype._onDrop = function(e) {\r\n    if (this.editable.trigger(e) === false) {\r\n      return false;\r\n    }\r\n    return this.throttledValueChanged();\r\n  };\r\n\r\n  InputManager.prototype._onInput = function(e) {\r\n    return this.throttledValueChanged(['oninput']);\r\n  };\r\n\r\n  return contents.InputManager = InputManager;\r\n\r\n});\r\n\ndefine('skylark-domx-contents/Selection',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,noder,$,contents){ \r\n\r\n  var Selection = langx.Evented.inherit({\r\n    _range : null,\r\n\r\n    _startNodes : null,\r\n\r\n    _endNodes : null,\r\n\r\n    _containerNode : null,\r\n\r\n    _nodes : null,\r\n\r\n    _blockNodes : null,\r\n\r\n    _rootNodes : null,\r\n\r\n    init : function(editable,opts) {\r\n      var self = this;\r\n      this.editable = editable; //this._module;\r\n      this.opts = langx.extend({}, this.opts, opts);\r\n      this._selection = document.getSelection();\r\n\r\n      this.editable.on('selectionchanged', function(e) {\r\n        console.log(\"selectionchanged\");\r\n        self.reset();\r\n        return self._range = self._selection.getRangeAt(0);\r\n      });\r\n\r\n      this.editable.on('blur', function(e) {\r\n        return self.reset();\r\n      });\r\n\r\n      this.editable.on('focus', function(e) {\r\n        self.reset();\r\n        return self._range = self._selection.getRangeAt(0);\r\n      });\r\n    },\r\n\r\n    reset : function() {\r\n      this._range = null;\r\n      this._startNodes = null;\r\n      this._endNodes = null;\r\n      this._containerNode = null;\r\n      this._nodes = null;\r\n      this._blockNodes = null;\r\n\r\n      return this._rootNodes = null;\r\n    },\r\n\r\n    clear : function() {\r\n      var e;\r\n      try {\r\n        this._selection.removeAllRanges();\r\n        console.log(\"clear\");\r\n      } catch (_error) {\r\n        e = _error;\r\n      }\r\n      return this.reset();\r\n    },\r\n\r\n    range : function(range) {\r\n      var ffOrIE;\r\n      if (range) {\r\n        this.clear();\r\n        this._selection.addRange(range);\r\n        this._range = range;\r\n //       ffOrIE = this.editable.util.browser.firefox || this.editable.util.browser.msie;\r\n        ffOrIE = langx.hoster.browser.mozilla || langx.hoster.browser.msie;\r\n        if (!this.editable.inputManager.focused && ffOrIE) {\r\n          this.editable.body.focus();\r\n        }\r\n      } else if (!this._range && this.editable.inputManager.focused && this._selection.rangeCount) {\r\n        this._range = this._selection.getRangeAt(0);\r\n      }\r\n      return this._range;\r\n    },\r\n\r\n    startNodes : function() {\r\n      if (this._range) {\r\n        if (!this._startNodes) {\r\n          this._startNodes = (function(self) {\r\n            return function() {\r\n              var startNodes;\r\n              startNodes = $(self._range.startContainer).parentsUntil(self.editable.body).get();\r\n              startNodes.unshift(self._range.startContainer);\r\n              return $(startNodes);\r\n            };\r\n          })(this)();\r\n        } \r\n\r\n      }\r\n      return this._startNodes;\r\n    },\r\n\r\n    endNodes : function() {\r\n      var endNodes;\r\n      if (this._range) {\r\n        this._endNodes || (this._endNodes = this._range.collapsed ? this.startNodes() : (endNodes = $(this._range.endContainer).parentsUntil(this.editable.body).get(), endNodes.unshift(this._range.endContainer), $(endNodes)));\r\n      }\r\n      return this._endNodes;\r\n    },\r\n\r\n    containerNode : function() {\r\n      if (this._range) {\r\n        this._containerNode || (this._containerNode = $(this._range.commonAncestorContainer));\r\n      }\r\n      return this._containerNode;\r\n    },\r\n\r\n    nodes : function() {\r\n      if (this._range) {\r\n        this._nodes || (this._nodes = (function(self) {\r\n          return function() {\r\n            var nodes;\r\n            nodes = [];\r\n            if (self.startNodes().first().is(self.endNodes().first())) {\r\n              nodes = self.startNodes().get();\r\n            } else {\r\n              self.startNodes().each(function(i, node) {\r\n                var $endNode, $node, $nodes, endIndex, index, sharedIndex, startIndex;\r\n                $node = $(node);\r\n                if (self.endNodes().index($node) > -1) {\r\n                  return nodes.push(node);\r\n                } else if ($node.parent().is(self.editable.body) || (sharedIndex = self.endNodes().index($node.parent())) > -1) {\r\n                  if (sharedIndex && sharedIndex > -1) {\r\n                    $endNode = self.endNodes().eq(sharedIndex - 1);\r\n                  } else {\r\n                    $endNode = self.endNodes().last();\r\n                  }\r\n                  $nodes = $node.parent().contents();\r\n                  startIndex = $nodes.index($node);\r\n                  endIndex = $nodes.index($endNode);\r\n                  return langx.merge(nodes, $nodes.slice(startIndex, endIndex).get());\r\n                } else {\r\n                  $nodes = $node.parent().contents();\r\n                  index = $nodes.index($node);\r\n                  return langx.merge(nodes, $nodes.slice(index).get());\r\n                }\r\n              });\r\n              self.endNodes().each(function(i, node) {\r\n                var $node, $nodes, index;\r\n                $node = $(node);\r\n                if ($node.parent().is(self.editable.body) || self.startNodes().index($node.parent()) > -1) {\r\n                  nodes.push(node);\r\n                  return false;\r\n                } else {\r\n                  $nodes = $node.parent().contents();\r\n                  index = $nodes.index($node);\r\n                  return langx.merge(nodes, $nodes.slice(0, index + 1));\r\n                }\r\n              });\r\n            }\r\n            return $(langx.uniq(nodes));\r\n          };\r\n        })(this)());\r\n      }\r\n      return this._nodes;\r\n    },\r\n\r\n    blockNodes : function() {\r\n      if (!this._range) {\r\n        return;\r\n      }\r\n\r\n      this._blockNodes || (this._blockNodes = (function(self) {\r\n        return function() {\r\n          return self.nodes().filter(function(i, node) {\r\n            return self.editable.util.isBlockNode(node);\r\n          });\r\n        };\r\n      })(this)());\r\n\r\n      return this._blockNodes;\r\n    },\r\n\r\n    rootNodes : function() {\r\n      if (!this._range) {\r\n        return;\r\n      }\r\n      this._rootNodes || (this._rootNodes = (function(self) {\r\n        return function() {\r\n          return self.nodes().filter(function(i, node) {\r\n            var $parent;\r\n            $parent = $(node).parent();\r\n            return $parent.is(self.editable.body) || $parent.is('blockquote');\r\n          });\r\n        };\r\n      })(this)());\r\n\r\n      return this._rootNodes;\r\n    },\r\n\r\n    rangeAtEndOf : function(node, range) {\r\n      var afterLastNode, beforeLastNode, endNode, endNodeLength, lastNodeIsBr, result;\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      if (!(range && range.collapsed)) {\r\n        return;\r\n      }\r\n      node = $(node)[0];\r\n      endNode = range.endContainer;\r\n      endNodeLength = this.editable.util.getNodeLength(endNode);\r\n      beforeLastNode = range.endOffset === endNodeLength - 1;\r\n      lastNodeIsBr = $(endNode).contents().last().is('br');\r\n      afterLastNode = range.endOffset === endNodeLength;\r\n      if (!((beforeLastNode && lastNodeIsBr) || afterLastNode)) {\r\n        return false;\r\n      }\r\n      if (node === endNode) {\r\n        return true;\r\n      } else if (!noder.contains(node, endNode)) {\r\n        return false;\r\n      }\r\n      result = true;\r\n      $(endNode).parentsUntil(node).addBack().each(function(i, n) {\r\n        var $lastChild, beforeLastbr, isLastNode, nodes;\r\n        nodes = $(n).parent().contents().filter(function() {\r\n          return !(this !== n && this.nodeType === 3 && !this.nodeValue);\r\n        });\r\n        $lastChild = nodes.last();\r\n        isLastNode = $lastChild.get(0) === n;\r\n        beforeLastbr = $lastChild.is('br') && $lastChild.prev().get(0) === n;\r\n        if (!(isLastNode || beforeLastbr)) {\r\n          result = false;\r\n          return false;\r\n        }\r\n      });\r\n      return result;\r\n    },\r\n\r\n    rangeAtStartOf : function(node, range) {\r\n      var result, startNode;\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      if (!(range && range.collapsed)) {\r\n        return;\r\n      }\r\n      node = $(node)[0];\r\n      startNode = range.startContainer;\r\n      if (range.startOffset !== 0) {\r\n        return false;\r\n      }\r\n      if (node === startNode) {\r\n        return true;\r\n      } else if (!noder.contains(node, startNode)) {\r\n        return false;\r\n      }\r\n      result = true;\r\n      $(startNode).parentsUntil(node).addBack().each(function(i, n) {\r\n        var nodes;\r\n        nodes = $(n).parent().contents().filter(function() {\r\n          return !(this !== n && this.nodeType === 3 && !this.nodeValue);\r\n        });\r\n        if (nodes.first().get(0) !== n) {\r\n          return result = false;\r\n        }\r\n      });\r\n      return result;\r\n    },\r\n\r\n    insertNode : function(node, range) {\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      if (!range) {\r\n        return;\r\n      }\r\n      node = $(node)[0];\r\n      range.insertNode(node);\r\n      return this.setRangeAfter(node, range);\r\n    },\r\n\r\n    setRangeAfter : function(node, range) {\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      if (range == null) {\r\n        return;\r\n      }\r\n      node = $(node)[0];\r\n      range.setEndAfter(node);\r\n      range.collapse(false);\r\n      return this.range(range);\r\n    },\r\n\r\n    setRangeBefore : function(node, range) {\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      if (range == null) {\r\n        return;\r\n      }\r\n      node = $(node)[0];\r\n      range.setEndBefore(node);\r\n      range.collapse(false);\r\n      return this.range(range);\r\n    },\r\n\r\n    setRangeAtStartOf : function(node, range) {\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      node = $(node).get(0);\r\n      range.setEnd(node, 0);\r\n      range.collapse(false);\r\n      return this.range(range);\r\n    },\r\n\r\n    setRangeAtEndOf : function(node, range) {\r\n      var $lastNode, $node, contents, lastChild, lastChildLength, lastText, nodeLength;\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      $node = $(node);\r\n      node = $node[0];\r\n      if (!node) {\r\n        return;\r\n      }\r\n      if ($node.is('pre')) {\r\n        contents = $node.contents();\r\n        if (contents.length > 0) {\r\n          lastChild = contents.last();\r\n          lastText = lastChild.text();\r\n          lastChildLength = this.editable.util.getNodeLength(lastChild[0]);\r\n          if (lastText.charAt(lastText.length - 1) === '\\n') {\r\n            range.setEnd(lastChild[0], lastChildLength - 1);\r\n          } else {\r\n            range.setEnd(lastChild[0], lastChildLength);\r\n          }\r\n        } else {\r\n          range.setEnd(node, 0);\r\n        }\r\n      } else {\r\n        nodeLength = this.editable.util.getNodeLength(node);\r\n        if (node.nodeType !== 3 && nodeLength > 0) {\r\n          $lastNode = $(node).contents().last();\r\n          if ($lastNode.is('br')) {\r\n            nodeLength -= 1;\r\n          } else if ($lastNode[0].nodeType !== 3 && this.editable.util.isEmptyNode($lastNode)) {\r\n            $lastNode.append(this.editable.util.phBr);\r\n            node = $lastNode[0];\r\n            nodeLength = 0;\r\n          }\r\n        }\r\n        range.setEnd(node, nodeLength);\r\n      }\r\n      range.collapse(false);\r\n      return this.range(range);\r\n    },\r\n\r\n    deleteRangeContents : function(range) {\r\n      var atEndOfBody, atStartOfBody, endRange, startRange;\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      startRange = range.cloneRange();\r\n      endRange = range.cloneRange();\r\n      startRange.collapse(true);\r\n      endRange.collapse(false);\r\n      atStartOfBody = this.rangeAtStartOf(this.editable.body, startRange);\r\n      atEndOfBody = this.rangeAtEndOf(this.editable.body, endRange);\r\n      if (!range.collapsed && atStartOfBody && atEndOfBody) {\r\n        this.editable.body.empty();\r\n        range.setStart(this.editable.body[0], 0);\r\n        range.collapse(true);\r\n        this.range(range);\r\n      } else {\r\n        range.deleteContents();\r\n      }\r\n      return range;\r\n    },\r\n\r\n    breakBlockEl : function(el, range) {\r\n      var $el;\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      $el = $(el);\r\n      if (!range.collapsed) {\r\n        return $el;\r\n      }\r\n      range.setStartBefore($el.get(0));\r\n      if (range.collapsed) {\r\n        return $el;\r\n      }\r\n      return $el.before(range.extractContents());\r\n    },\r\n\r\n    save : function(range) {\r\n      var endCaret, endRange, startCaret;\r\n      if (range == null) {\r\n        range = this.range();\r\n      }\r\n      if (this._selectionSaved) {\r\n        return;\r\n      }\r\n      endRange = range.cloneRange();\r\n      endRange.collapse(false);\r\n      startCaret = $('<span/>').addClass(this.opts.classPrefix +'caret-start');\r\n      endCaret = $('<span/>').addClass(this.opts.classPrefix +'caret-end');\r\n      endRange.insertNode(endCaret[0]);\r\n      range.insertNode(startCaret[0]);\r\n      this.clear();\r\n      return this._selectionSaved = true;\r\n    },\r\n\r\n    restore : function() {\r\n      var endCaret, endContainer, endOffset, range, startCaret, startContainer, startOffset;\r\n      if (!this._selectionSaved) {\r\n        return false;\r\n      }\r\n      startCaret = this.editable.body.find('.' + this.opts.classPrefix +'caret-start');\r\n      endCaret = this.editable.body.find('.' + this.opts.classPrefix +'caret-end');\r\n      if (startCaret.length && endCaret.length) {\r\n        startContainer = startCaret.parent();\r\n        startOffset = startContainer.contents().index(startCaret);\r\n        endContainer = endCaret.parent();\r\n        endOffset = endContainer.contents().index(endCaret);\r\n        if (startContainer[0] === endContainer[0]) {\r\n          endOffset -= 1;\r\n        }\r\n        range = document.createRange();\r\n        range.setStart(startContainer.get(0), startOffset);\r\n        range.setEnd(endContainer.get(0), endOffset);\r\n        startCaret.remove();\r\n        endCaret.remove();\r\n        this.range(range);\r\n      } else {\r\n        startCaret.remove();\r\n        endCaret.remove();\r\n      }\r\n      this._selectionSaved = false;\r\n      return range;\r\n    },\r\n  });\r\n\r\n  Selection.pluginName = 'Selection';\r\n\r\n\r\n  return contents.Selection = Selection;\r\n\r\n});\ndefine('skylark-domx-contents/UndoManager',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n  var UndoManager = langx.Evented.inherit({\r\n    init : function(editable,opts) {\r\n      this.editable = editable;\r\n      this.opts = langx.extend({}, this.opts, opts);\r\n\r\n      var redoShortcut, undoShortcut;\r\n      this._stack = [];\r\n      if (this.editable.util.os.mac) {\r\n        undoShortcut = 'cmd+z';\r\n        redoShortcut = 'shift+cmd+z';\r\n      } else if (this.editable.util.os.win) {\r\n        undoShortcut = 'ctrl+z';\r\n        redoShortcut = 'ctrl+y';\r\n      } else {\r\n        undoShortcut = 'ctrl+z';\r\n        redoShortcut = 'shift+ctrl+z';\r\n      }\r\n      this.editable.hotkeys.add(undoShortcut, (function(_this) {\r\n        return function(e) {\r\n          e.preventDefault();\r\n          _this.undo();\r\n          return false;\r\n        };\r\n      })(this));\r\n      this.editable.hotkeys.add(redoShortcut, (function(_this) {\r\n        return function(e) {\r\n          e.preventDefault();\r\n          _this.redo();\r\n          return false;\r\n        };\r\n      })(this));\r\n      this.throttledPushState = this.editable.util.throttle((function(_this) {\r\n        return function() {\r\n          return _this._pushUndoState();\r\n        };\r\n      })(this), 2000);\r\n      this.editable.on('valuechanged', (function(_this) {\r\n        return function(e, src) {\r\n          if (src === 'undo' || src === 'redo') {\r\n            return;\r\n          }\r\n          return _this.throttledPushState();\r\n        };\r\n      })(this));\r\n      this.editable.on('selectionchanged', (function(_this) {\r\n        return function(e) {\r\n          _this.resetCaretPosition();\r\n          return _this.update();\r\n        };\r\n      })(this));\r\n      this.editable.on('focus', (function(_this) {\r\n        return function(e) {\r\n          if (_this._stack.length === 0) {\r\n            return _this._pushUndoState();\r\n          }\r\n        };\r\n      })(this));\r\n      this.editable.on('blur', (function(_this) {\r\n        return function(e) {\r\n          return _this.resetCaretPosition();\r\n        };\r\n      })(this));\r\n    }\r\n\r\n  });\r\n\r\n  UndoManager.pluginName = 'UndoManager';\r\n\r\n  UndoManager.prototype._index = -1;\r\n\r\n  UndoManager.prototype._capacity = 20;\r\n\r\n  UndoManager.prototype._startPosition = null;\r\n\r\n  UndoManager.prototype._endPosition = null;\r\n\r\n  UndoManager.prototype.resetCaretPosition = function() {\r\n    this._startPosition = null;\r\n    return this._endPosition = null;\r\n  };\r\n\r\n  UndoManager.prototype.startPosition = function() {\r\n    if (this.editable.selection._range) {\r\n      this._startPosition || (this._startPosition = this._getPosition('start'));\r\n    }\r\n    return this._startPosition;\r\n  };\r\n\r\n  UndoManager.prototype.endPosition = function() {\r\n    if (this.editable.selection._range) {\r\n      this._endPosition || (this._endPosition = (function(_this) {\r\n        return function() {\r\n          var range;\r\n          range = _this.editable.selection.range();\r\n          if (range.collapsed) {\r\n            return _this._startPosition;\r\n          }\r\n          return _this._getPosition('end');\r\n        };\r\n      })(this)());\r\n    }\r\n    return this._endPosition;\r\n  };\r\n\r\n  UndoManager.prototype._pushUndoState = function() {\r\n    var caret;\r\n    if (this.editable.trigger('pushundostate') === false) {\r\n      return;\r\n    }\r\n    caret = this.caretPosition();\r\n    if (!caret.start) {\r\n      return;\r\n    }\r\n    this._index += 1;\r\n    this._stack.length = this._index;\r\n    this._stack.push({\r\n      html: this.editable.body.html(),\r\n      caret: this.caretPosition()\r\n    });\r\n    if (this._stack.length > this._capacity) {\r\n      this._stack.shift();\r\n      return this._index -= 1;\r\n    }\r\n  };\r\n\r\n  UndoManager.prototype.currentState = function() {\r\n    if (this._stack.length && this._index > -1) {\r\n      return this._stack[this._index];\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  UndoManager.prototype.undo = function() {\r\n    var state;\r\n    if (this._index < 1 || this._stack.length < 2) {\r\n      return;\r\n    }\r\n    //this.editable.hidePopover();\r\n    this._index -= 1;\r\n    state = this._stack[this._index];\r\n    this.editable.body.get(0).innerHTML = state.html;\r\n    this.caretPosition(state.caret);\r\n    this.editable.body.find('.selected').removeClass('selected');\r\n    this.editable.sync();\r\n    return this.editable.trigger('valuechanged', ['undo']);\r\n  };\r\n\r\n  UndoManager.prototype.redo = function() {\r\n    var state;\r\n    if (this._index < 0 || this._stack.length < this._index + 2) {\r\n      return;\r\n    }\r\n    //this.editable.hidePopover();\r\n    this._index += 1;\r\n    state = this._stack[this._index];\r\n    this.editable.body.get(0).innerHTML = state.html;\r\n    this.caretPosition(state.caret);\r\n    this.editable.body.find('.selected').removeClass('selected');\r\n    this.editable.sync();\r\n    return this.editable.trigger('valuechanged', ['redo']);\r\n  };\r\n\r\n  UndoManager.prototype.update = function() {\r\n    var currentState;\r\n    currentState = this.currentState();\r\n    if (!currentState) {\r\n      return;\r\n    }\r\n    currentState.html = this.editable.body.html();\r\n    return currentState.caret = this.caretPosition();\r\n  };\r\n\r\n  UndoManager.prototype._getNodeOffset = function(node, index) {\r\n    var $parent, merging, offset;\r\n    if (langx.isNumber(index)) {\r\n      $parent = $(node);\r\n    } else {\r\n      $parent = $(node).parent();\r\n    }\r\n    offset = 0;\r\n    merging = false;\r\n    $parent.contents().each(function(i, child) {\r\n      if (node === child || (index === i && i === 0)) {\r\n        return false;\r\n      }\r\n      if (child.nodeType === Node.TEXT_NODE) {\r\n        if (!merging && child.nodeValue.length > 0) {\r\n          offset += 1;\r\n          merging = true;\r\n        }\r\n      } else {\r\n        offset += 1;\r\n        merging = false;\r\n      }\r\n      if (index - 1 === i) {\r\n        return false;\r\n      }\r\n      return null;\r\n    });\r\n    return offset;\r\n  };\r\n\r\n  UndoManager.prototype._getPosition = function(type) {\r\n    var $nodes, node, nodes, offset, position, prevNode, range;\r\n    if (type == null) {\r\n      type = 'start';\r\n    }\r\n    range = this.editable.selection.range();\r\n    offset = range[type + \"Offset\"];\r\n    $nodes = this.editable.selection[type + \"Nodes\"]();\r\n    node = $nodes.first()[0];\r\n    if (node.nodeType === Node.TEXT_NODE) {\r\n      prevNode = node.previousSibling;\r\n      while (prevNode && prevNode.nodeType === Node.TEXT_NODE) {\r\n        node = prevNode;\r\n        offset += this.editable.util.getNodeLength(prevNode);\r\n        prevNode = prevNode.previousSibling;\r\n      }\r\n      nodes = $nodes.get();\r\n      nodes[0] = node;\r\n      $nodes = $(nodes);\r\n    } else {\r\n      offset = this._getNodeOffset(node, offset);\r\n    }\r\n    position = [offset];\r\n    $nodes.each((function(_this) {\r\n      return function(i, node) {\r\n        return position.unshift(_this._getNodeOffset(node));\r\n      };\r\n    })(this));\r\n    return position;\r\n  };\r\n\r\n  UndoManager.prototype._getNodeByPosition = function(position) {\r\n    var child, childNodes, i, k, len, node, offset, ref;\r\n    node = this.editable.body[0];\r\n    ref = position.slice(0, position.length - 1);\r\n    for (i = k = 0, len = ref.length; k < len; i = ++k) {\r\n      offset = ref[i];\r\n      childNodes = node.childNodes;\r\n      if (offset > childNodes.length - 1) {\r\n        if (i === position.length - 2 && $(node).is(':empty')) {\r\n          child = document.createTextNode('');\r\n          node.appendChild(child);\r\n          childNodes = node.childNodes;\r\n        } else {\r\n          node = null;\r\n          break;\r\n        }\r\n      }\r\n      node = childNodes[offset];\r\n    }\r\n    return node;\r\n  };\r\n\r\n  UndoManager.prototype.caretPosition = function(caret) {\r\n    var endContainer, endOffset, range, startContainer, startOffset;\r\n    if (!caret) {\r\n      range = this.editable.selection.range();\r\n      caret = this.editable.inputManager.focused && (range != null) ? {\r\n        start: this.startPosition(),\r\n        end: this.endPosition(),\r\n        collapsed: range.collapsed\r\n      } : {};\r\n      return caret;\r\n    } else {\r\n      if (!caret.start) {\r\n        return;\r\n      }\r\n      startContainer = this._getNodeByPosition(caret.start);\r\n      startOffset = caret.start[caret.start.length - 1];\r\n      if (caret.collapsed) {\r\n        endContainer = startContainer;\r\n        endOffset = startOffset;\r\n      } else {\r\n        endContainer = this._getNodeByPosition(caret.end);\r\n        endOffset = caret.start[caret.start.length - 1];\r\n      }\r\n      if (!startContainer || !endContainer) {\r\n        if (typeof console !== \"undefined\" && console !== null) {\r\n          if (typeof console.warn === \"function\") {\r\n            console.warn('simditor: invalid caret state');\r\n          }\r\n        }\r\n        return;\r\n      }\r\n      range = document.createRange();\r\n      range.setStart(startContainer, startOffset);\r\n      range.setEnd(endContainer, endOffset);\r\n      return this.editable.selection.range(range);\r\n    }\r\n  };\r\n\r\n  return contents.UndoManager = UndoManager;\r\n\r\n});\ndefine('skylark-domx-contents/Keystroke',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n  var Keystroke = langx.Evented.inherit({\r\n    init : function(editable,opts) {\r\n      this.editable = editable; //this._module;\r\n      this.opts = langx.extend({}, this.opts, opts);\r\n\r\n      this._keystrokeHandlers = {};\r\n      this._initKeystrokeHandlers();\r\n    }\r\n  });\r\n\r\n\r\n  Keystroke.pluginName = 'Keystroke';\r\n\r\n\r\n  Keystroke.prototype.add = function(key, node, handler) {\r\n    key = key.toLowerCase();\r\n    key = this.editable.hotkeys.constructor.aliases[key] || key;\r\n    if (!this._keystrokeHandlers[key]) {\r\n      this._keystrokeHandlers[key] = {};\r\n    }\r\n    return this._keystrokeHandlers[key][node] = handler;\r\n  };\r\n\r\n  Keystroke.prototype.respondTo = function(e) {\r\n    var base, key, ref, result;\r\n    key = (ref = this.editable.hotkeys.constructor.keyNameMap[e.which]) != null ? ref.toLowerCase() : void 0;\r\n    if (!key) {\r\n      return;\r\n    }\r\n    if (key in this._keystrokeHandlers) {\r\n      result = typeof (base = this._keystrokeHandlers[key])['*'] === \"function\" ? base['*'](e) : void 0;\r\n      if (!result) {\r\n        this.editable.selection.startNodes().each((function(_this) {\r\n          return function(i, node) {\r\n            var handler, ref1;\r\n            if (node.nodeType !== Node.ELEMENT_NODE) {\r\n              return;\r\n            }\r\n            handler = (ref1 = _this._keystrokeHandlers[key]) != null ? ref1[node.tagName.toLowerCase()] : void 0;\r\n            result = typeof handler === \"function\" ? handler(e, $(node)) : void 0;\r\n            if (result === true || result === false) {\r\n              return false;\r\n            }\r\n          };\r\n        })(this));\r\n      }\r\n      if (result) {\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  Keystroke.prototype._initKeystrokeHandlers = function() {\r\n    var titleEnterHandler;\r\n    if (this.editable.util.browser.safari) {\r\n      this.add('enter', '*', (function(_this) {\r\n        return function(e) {\r\n          var $blockEl, $br;\r\n          if (!e.shiftKey) {\r\n            return;\r\n          }\r\n          $blockEl = _this.editable.selection.blockNodes().last();\r\n          if ($blockEl.is('pre')) {\r\n            return;\r\n          }\r\n          $br = $('<br/>');\r\n          if (_this.editable.selection.rangeAtEndOf($blockEl)) {\r\n            _this.editable.selection.insertNode($br);\r\n            _this.editable.selection.insertNode($('<br/>'));\r\n            _this.editable.selection.setRangeBefore($br);\r\n          } else {\r\n            _this.editable.selection.insertNode($br);\r\n          }\r\n          return true;\r\n        };\r\n      })(this));\r\n    }\r\n    if (this.editable.util.browser.webkit || this.editable.util.browser.msie) {\r\n      titleEnterHandler = (function(_this) {\r\n        return function(e, $node) {\r\n          var $p;\r\n          if (!_this.editable.selection.rangeAtEndOf($node)) {\r\n            return;\r\n          }\r\n          $p = $('<p/>').append(_this.editable.util.phBr).insertAfter($node);\r\n          _this.editable.selection.setRangeAtStartOf($p);\r\n          return true;\r\n        };\r\n      })(this);\r\n      this.add('enter', 'h1', titleEnterHandler);\r\n      this.add('enter', 'h2', titleEnterHandler);\r\n      this.add('enter', 'h3', titleEnterHandler);\r\n      this.add('enter', 'h4', titleEnterHandler);\r\n      this.add('enter', 'h5', titleEnterHandler);\r\n      this.add('enter', 'h6', titleEnterHandler);\r\n    }\r\n    this.add('backspace', '*', (function(_this) {\r\n      return function(e) {\r\n        var $blockEl, $prevBlockEl, $rootBlock, isWebkit;\r\n        $rootBlock = _this.editable.selection.rootNodes().first();\r\n        $prevBlockEl = $rootBlock.prev();\r\n        if ($prevBlockEl.is('hr') && _this.editable.selection.rangeAtStartOf($rootBlock)) {\r\n          _this.editable.selection.save();\r\n          $prevBlockEl.remove();\r\n          _this.editable.selection.restore();\r\n          return true;\r\n        }\r\n        $blockEl = _this.editable.selection.blockNodes().last();\r\n        if ($blockEl.is('.' + _this.opts.classPrefix + 'resize-handle') && $rootBlock.is('.' + _this.opts.classPrefix + 'table')) {\r\n          e.preventDefault();\r\n          $rootBlock.remove();\r\n          _this.editable.selection.setRangeAtEndOf($prevBlockEl);\r\n        }\r\n        if ($prevBlockEl.is('.' + _this.opts.classPrefix + 'table') && !$blockEl.is('table') && _this.editable.util.isEmptyNode($blockEl)) {\r\n          e.preventDefault();\r\n          $blockEl.remove();\r\n          _this.editable.selection.setRangeAtEndOf($prevBlockEl);\r\n        }\r\n        isWebkit = _this.editable.util.browser.webkit;\r\n        if (isWebkit && _this.editable.selection.rangeAtStartOf($blockEl)) {\r\n          _this.editable.selection.save();\r\n          _this.editable.formatter.cleanNode($blockEl, true);\r\n          _this.editable.selection.restore();\r\n          return null;\r\n        }\r\n      };\r\n    })(this));\r\n    this.add('enter', 'div', (function(_this) {\r\n      return function(e, $node) {\r\n        var $blockEl, $p;\r\n        if ($node.is('.' + _this.opts.classPrefix + 'table')) {\r\n          $blockEl = _this.editable.selection.blockNodes().last();\r\n          if ($blockEl.is('.' + _this.opts.classPrefix + 'resize-handle')) {\r\n            e.preventDefault();\r\n            $p = $('<p/>').append(_this.editable.util.phBr).insertAfter($node);\r\n            return _this.editable.selection.setRangeAtStartOf($p);\r\n          }\r\n        }\r\n      };\r\n    })(this));\r\n    this.add('enter', 'li', (function(_this) {\r\n      return function(e, $node) {\r\n        var $cloneNode, listEl, newBlockEl, newListEl;\r\n        $cloneNode = $node.clone();\r\n        $cloneNode.find('ul, ol').remove();\r\n        if (!(_this.editable.util.isEmptyNode($cloneNode) && $node.is(_this.editable.selection.blockNodes().last()))) {\r\n          return;\r\n        }\r\n        listEl = $node.parent();  \r\n        if ($node.next('li').length > 0) {\r\n          if (!_this.editable.util.isEmptyNode($node)) {\r\n            return;\r\n          }\r\n          if (listEl.parent('li').length > 0) {\r\n            newBlockEl = $('<li/>').append(_this.editable.util.phBr).insertAfter(listEl.parent('li'));\r\n            newListEl = $('<' + listEl[0].tagName + '/>').append($node.nextAll('li'));\r\n            newBlockEl.append(newListEl);\r\n          } else {\r\n            newBlockEl = $('<p/>').append(_this.editable.util.phBr).insertAfter(listEl);\r\n            newListEl = $('<' + listEl[0].tagName + '/>').append($node.nextAll('li'));\r\n            newBlockEl.after(newListEl);\r\n          }\r\n        } else {\r\n          if (listEl.parent('li').length > 0) {\r\n            newBlockEl = $('<li/>').insertAfter(listEl.parent('li'));\r\n            if ($node.contents().length > 0) {\r\n              newBlockEl.append($node.contents());\r\n            } else {\r\n              newBlockEl.append(_this.editable.util.phBr);\r\n            }\r\n          } else {\r\n            newBlockEl = $('<p/>').append(_this.editable.util.phBr).insertAfter(listEl);\r\n            if ($node.children('ul, ol').length > 0) {\r\n              newBlockEl.after($node.children('ul, ol'));\r\n            }\r\n          }\r\n        }\r\n        if ($node.prev('li').length) {\r\n          $node.remove();\r\n        } else {\r\n          if ($node.prev('ul').length || $node.prev('ol').length) {\r\n            $node.remove();\r\n          } else {\r\n            listEl.remove();\r\n          }\r\n        }\r\n        _this.editable.selection.setRangeAtStartOf(newBlockEl);\r\n        return true;\r\n      };\r\n    })(this));\r\n    this.add('enter', 'pre', (function(_this) {\r\n      return function(e, $node) {\r\n        var $p, breakNode, range;\r\n        e.preventDefault();\r\n        if (e.shiftKey) {\r\n          $p = $('<p/>').append(_this.editable.util.phBr).insertAfter($node);\r\n          _this.editable.selection.setRangeAtStartOf($p);\r\n          return true;\r\n        }\r\n        range = _this.editable.selection.range();\r\n        breakNode = null;\r\n        range.deleteContents();\r\n        if (!_this.editable.util.browser.msie && _this.editable.selection.rangeAtEndOf($node)) {\r\n          breakNode = document.createTextNode('\\n\\n');\r\n        } else {\r\n          breakNode = document.createTextNode('\\n');\r\n        }\r\n        range.insertNode(breakNode);\r\n        range.setEnd(breakNode, 1);\r\n        range.collapse(false);\r\n        _this.editable.selection.range(range);\r\n        return true;\r\n      };\r\n    })(this));\r\n    this.add('enter', 'blockquote', (function(_this) {\r\n      return function(e, $node) {\r\n        var $closestBlock, range;\r\n        $closestBlock = _this.editable.selection.blockNodes().last();\r\n        if (!($closestBlock.is('p') && !$closestBlock.next().length && _this.editable.util.isEmptyNode($closestBlock))) {\r\n          return;\r\n        }\r\n        $node.after($closestBlock);\r\n        range = document.createRange();\r\n        _this.editable.selection.setRangeAtStartOf($closestBlock, range);\r\n        return true;\r\n      };\r\n    })(this));\r\n    this.add('backspace', 'li', (function(_this) {\r\n      return function(e, $node) {\r\n        var $br, $childList, $newLi, $prevChildList, $prevNode, $textNode, isFF, range, text;\r\n        $childList = $node.children('ul, ol');\r\n        $prevNode = $node.prev('li');\r\n        if (!($childList.length > 0 && $prevNode.length > 0)) {\r\n          return false;\r\n        }\r\n        text = '';\r\n        $textNode = null;\r\n        $node.contents().each(function(i, n) {\r\n          if (n.nodeType === 1 && /UL|OL/.test(n.nodeName)) {\r\n            return false;\r\n          }\r\n          if (n.nodeType === 1 && /BR/.test(n.nodeName)) {\r\n            return;\r\n          }\r\n          if (n.nodeType === 3 && n.nodeValue) {\r\n            text += n.nodeValue;\r\n          } else if (n.nodeType === 1) {\r\n            text += $(n).text();\r\n          }\r\n          return $textNode = $(n);\r\n        });\r\n        isFF = _this.editable.util.browser.firefox && !$textNode.next('br').length;\r\n        if ($textNode && text.length === 1 && isFF) {\r\n          $br = $(_this.editable.util.phBr).insertAfter($textNode);\r\n          $textNode.remove();\r\n          _this.editable.selection.setRangeBefore($br);\r\n          return true;\r\n        } else if (text.length > 0) {\r\n          return false;\r\n        }\r\n        range = document.createRange();\r\n        $prevChildList = $prevNode.children('ul, ol');\r\n        if ($prevChildList.length > 0) {\r\n          $newLi = $('<li/>').append(_this.editable.util.phBr).appendTo($prevChildList);\r\n          $prevChildList.append($childList.children('li'));\r\n          $node.remove();\r\n          _this.editable.selection.setRangeAtEndOf($newLi, range);\r\n        } else {\r\n          _this.editable.selection.setRangeAtEndOf($prevNode, range);\r\n          $prevNode.append($childList);\r\n          $node.remove();\r\n          _this.editable.selection.range(range);\r\n        }\r\n        return true;\r\n      };\r\n    })(this));\r\n    this.add('backspace', 'pre', (function(_this) {\r\n      return function(e, $node) {\r\n        var $newNode, codeStr, range;\r\n        if (!_this.editable.selection.rangeAtStartOf($node)) {\r\n          return;\r\n        }\r\n        codeStr = $node.html().replace('\\n', '<br/>') || _this.editable.util.phBr;\r\n        $newNode = $('<p/>').append(codeStr).insertAfter($node);\r\n        $node.remove();\r\n        range = document.createRange();\r\n        _this.editable.selection.setRangeAtStartOf($newNode, range);\r\n        return true;\r\n      };\r\n    })(this));\r\n    return this.add('backspace', 'blockquote', (function(_this) {\r\n      return function(e, $node) {\r\n        var $firstChild, range;\r\n        if (!_this.editable.selection.rangeAtStartOf($node)) {\r\n          return;\r\n        }\r\n        $firstChild = $node.children().first().unwrap();\r\n        range = document.createRange();\r\n        _this.editable.selection.setRangeAtStartOf($firstChild, range);\r\n        return true;\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  return contents.Keystroke = Keystroke;\r\n\r\n});\r\n\ndefine('skylark-domx-contents/Formatter',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n\r\n  var indexOf = [].indexOf ;\r\n\r\n  var Formatter = langx.Evented.inherit({\r\n    opts : {\r\n      allowedTags: [],\r\n      allowedAttributes: {},\r\n      allowedStyles: {}\r\n    },\r\n\r\n    init : function(editable,opts) {\r\n      this.editable = editable; //this._module;\r\n      this.opts = langx.extend({}, this.opts, opts);\r\n\r\n      this._allowedTags = langx.merge(['br', 'span', 'a', 'img', 'b', 'strong', 'i', 'strike', 'u', 'font', 'p', 'ul', 'ol', 'li', 'blockquote', 'pre', 'code', 'h1', 'h2', 'h3', 'h4', 'hr'], this.opts.allowedTags);\r\n      this._allowedAttributes = langx.extend({\r\n        img: ['src', 'alt', 'width', 'height', 'data-non-image'],\r\n        a: ['href', 'target','download'],\r\n        font: ['color'],\r\n        code: ['class']\r\n      }, this.opts.allowedAttributes);\r\n      this._allowedStyles = langx.extend({\r\n        span: ['color', 'font-size','background-color','background'],\r\n        b: ['color', 'font-size','background-color','background'],\r\n        i: ['color', 'font-size','background-color','background'],\r\n        strong: ['color', 'font-size','background-color','background'],\r\n        strike: ['color', 'font-size','background-color','background'],\r\n        u: ['color', 'font-size','background-color','background'],\r\n        p: ['margin-left', 'text-align','background-color','background'],\r\n        h1: ['margin-left', 'text-align'],\r\n        h2: ['margin-left', 'text-align'],\r\n        h3: ['margin-left', 'text-align'],\r\n        h4: ['margin-left', 'text-align']\r\n      }, this.opts.allowedStyles);\r\n      this.editable.body.on('click', 'a', function(e) {\r\n        return false;\r\n      });\r\n    },\r\n\r\n    decorate : function($el) {\r\n      if ($el == null) {\r\n        $el = this.editable.body;\r\n      }\r\n      this.editable.trigger('decorate', [$el]);\r\n      return $el;\r\n    },\r\n\r\n    undecorate : function($el) {\r\n      if ($el == null) {\r\n        $el = this.editable.body.clone();\r\n      }\r\n      this.editable.trigger('undecorate', [$el]);\r\n      return $el;\r\n    },\r\n\r\n    autolink : function($el) {\r\n      var $link, $node, findLinkNode, k, lastIndex, len, linkNodes, match, re, replaceEls, subStr, text, uri;\r\n      if ($el == null) {\r\n        $el = this.editable.body;\r\n      }\r\n      linkNodes = [];\r\n      findLinkNode = function($parentNode) {\r\n        return $parentNode.contents().each(function(i, node) {\r\n          var $node, text;\r\n          $node = $(node);\r\n          if ($node.is('a') || $node.closest('a, pre', $el).length) {\r\n            return;\r\n          }\r\n          if (!$node.is('iframe') && $node.contents().length) {\r\n            return findLinkNode($node);\r\n          } else if ((text = $node.text()) && /https?:\\/\\/|www\\./ig.test(text)) {\r\n            return linkNodes.push($node);\r\n          }\r\n        });\r\n      };\r\n      findLinkNode($el);\r\n      re = /(https?:\\/\\/|www\\.)[\\w\\-\\.\\?&=\\/#%:,@\\!\\+]+/ig;\r\n      for (k = 0, len = linkNodes.length; k < len; k++) {\r\n        $node = linkNodes[k];\r\n        text = $node.text();\r\n        replaceEls = [];\r\n        match = null;\r\n        lastIndex = 0;\r\n        while ((match = re.exec(text)) !== null) {\r\n          subStr = text.substring(lastIndex, match.index);\r\n          replaceEls.push(document.createTextNode(subStr));\r\n          lastIndex = re.lastIndex;\r\n          uri = /^(http(s)?:\\/\\/|\\/)/.test(match[0]) ? match[0] : 'http://' + match[0];\r\n          $link = $(\"<a href=\\\"\" + uri + \"\\\" rel=\\\"nofollow\\\"></a>\").text(match[0]);\r\n          replaceEls.push($link[0]);\r\n        }\r\n        replaceEls.push(document.createTextNode(text.substring(lastIndex)));\r\n        $node.replaceWith($(replaceEls));\r\n      }\r\n      return $el;\r\n    },\r\n\r\n    format : function($el) {\r\n      var $node, blockNode, k, l, len, len1, n, node, ref, ref1;\r\n      if ($el == null) {\r\n        $el = this.editable.body;\r\n      }\r\n      if ($el.is(':empty')) {\r\n        //$el.append('<p>' + this.editable.util.phBr + '</p>'); // modified by lwf\r\n        $el.append('<p>' + '</p>'); // modified by lwf\r\n        return $el;\r\n      }\r\n      ref = $el.contents();\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        n = ref[k];\r\n        this.cleanNode(n, true);\r\n      }\r\n      ref1 = $el.contents();\r\n      for (l = 0, len1 = ref1.length; l < len1; l++) {\r\n        node = ref1[l];\r\n        $node = $(node);\r\n        if ($node.is('br')) {\r\n          if (typeof blockNode !== \"undefined\" && blockNode !== null) {\r\n            blockNode = null;\r\n          }\r\n          $node.remove();\r\n        } else if (this.editable.util.isBlockNode(node)) {\r\n          if ($node.is('li')) {\r\n            if (blockNode && blockNode.is('ul, ol')) {\r\n              blockNode.append(node);\r\n            } else {\r\n              blockNode = $('<ul/>').insertBefore(node);\r\n              blockNode.append(node);\r\n            }\r\n          } else {\r\n            blockNode = null;\r\n          }\r\n        } else {\r\n          if (!blockNode || blockNode.is('ul, ol')) {\r\n            blockNode = $('<p/>').insertBefore(node);\r\n          }\r\n          blockNode.append(node);\r\n          if (this.editable.util.isEmptyNode(blockNode)) {\r\n            blockNode.append(this.editable.util.phBr);\r\n          }\r\n        }\r\n      }\r\n      return $el;\r\n    },\r\n\r\n    cleanNode : function(node, recursive) {\r\n      var $blockEls, $childImg, $node, $p, $td, allowedAttributes, attr, contents, isDecoration, k, l, len, len1, n, ref, ref1, text, textNode;\r\n      $node = $(node);\r\n      if (!($node.length > 0)) {\r\n        return;\r\n      }\r\n      if ($node[0].nodeType === 3) {\r\n        text = $node.text().replace(/(\\r\\n|\\n|\\r)/gm, '');\r\n        if (text) {\r\n          textNode = document.createTextNode(text);\r\n          $node.replaceWith(textNode);\r\n        } else {\r\n          $node.remove();\r\n        }\r\n        return;\r\n      }\r\n      contents = $node.is('iframe') ? null : $node.contents();\r\n      isDecoration = this.editable.util.isDecoratedNode($node);\r\n      if ($node.is(this._allowedTags.join(',')) || isDecoration) {\r\n        if ($node.is('a') && ($childImg = $node.find('img')).length > 0) {\r\n          $node.replaceWith($childImg);\r\n          $node = $childImg;\r\n          contents = null;\r\n        }\r\n        if ($node.is('td') && ($blockEls = $node.find(this.editable.util.blockNodes.join(','))).length > 0) {\r\n          $blockEls.each((function(_this) {\r\n            return function(i, blockEl) {\r\n              return $(blockEl).contents().unwrap();\r\n            };\r\n          })(this));\r\n          contents = $node.contents();\r\n        }\r\n        if ($node.is('img') && $node.hasClass('uploading')) {\r\n          $node.remove();\r\n        }\r\n        if (!isDecoration) {\r\n          allowedAttributes = this._allowedAttributes[$node[0].tagName.toLowerCase()];\r\n          ref = langx.makeArray($node[0].attributes);\r\n          for (k = 0, len = ref.length; k < len; k++) {\r\n            attr = ref[k];\r\n            if (attr.name === 'style') {\r\n              continue;\r\n            }\r\n            if (!((allowedAttributes != null) && (ref1 = attr.name, indexOf.call(allowedAttributes, ref1) >= 0))) {\r\n              $node.removeAttr(attr.name);\r\n            }\r\n          }\r\n          this._cleanNodeStyles($node);\r\n          if ($node.is('span')) {\r\n            if ($node[0].attributes.length === 0) {\r\n              $node.contents().first().unwrap();\r\n            }\r\n            if ($node[0].style.length === 2 && $node[0].style.color === 'rgb(51, 51, 51)' && $node[0].style.fontSize === '16px') {\r\n              $node.contents().unwrap();\r\n            }\r\n          }\r\n        }\r\n      } else if ($node[0].nodeType === 1 && !$node.is(':empty')) {\r\n        if ($node.is('div, article, dl, header, footer, tr')) {\r\n          $node.append('<br/>');\r\n          contents.first().unwrap();\r\n        } else if ($node.is('table')) {\r\n          $p = $('<p/>');\r\n          $node.find('tr').each(function(i, tr) {\r\n            return $p.append($(tr).text() + '<br/>');\r\n          });\r\n          $node.replaceWith($p);\r\n          contents = null;\r\n        } else if ($node.is('thead, tfoot')) {\r\n          $node.remove();\r\n          contents = null;\r\n        } else if ($node.is('th')) {\r\n          $td = $('<td/>').append($node.contents());\r\n          $node.replaceWith($td);\r\n        } else {\r\n          contents.first().unwrap();\r\n        }\r\n      } else {\r\n        $node.remove();\r\n        contents = null;\r\n      }\r\n      if (recursive && (contents != null) && !$node.is('pre')) {\r\n        for (l = 0, len1 = contents.length; l < len1; l++) {\r\n          n = contents[l];\r\n          this.cleanNode(n, true);\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n\r\n    _cleanNodeStyles : function($node) {\r\n      var allowedStyles, k, len, pair, ref, ref1, style, styleStr, styles;\r\n      styleStr = $node.attr('style');\r\n      if (!styleStr) {\r\n        return;\r\n      }\r\n      $node.removeAttr('style');\r\n      allowedStyles = this._allowedStyles[$node[0].tagName.toLowerCase()];\r\n      if (!(allowedStyles && allowedStyles.length > 0)) {\r\n        return $node;\r\n      }\r\n      styles = {};\r\n      ref = styleStr.split(';');\r\n      for (k = 0, len = ref.length; k < len; k++) {\r\n        style = ref[k];\r\n        style = langx.trim(style);\r\n        pair = style.split(':');\r\n        if (pair.length !== 2) {\r\n          continue;\r\n        }\r\n        if (pair[0] === 'font-size' && pair[1].indexOf('px') > 0) {\r\n          if (parseInt(pair[1], 10) < 12) {\r\n            continue;\r\n          }\r\n        }\r\n        if (ref1 = pair[0], indexOf.call(allowedStyles, ref1) >= 0) {\r\n          styles[langx.trim(pair[0])] = langx.trim(pair[1]);\r\n        }\r\n      }\r\n      if (Object.keys(styles).length > 0) {\r\n        $node.css(styles);\r\n      }\r\n      return $node;\r\n    },\r\n\r\n    clearHtml : function(html, lineBreak) {\r\n      var container, contents, result;\r\n      if (lineBreak == null) {\r\n        lineBreak = true;\r\n      }\r\n      container = $('<div/>').append(html);\r\n      contents = container.contents();\r\n      result = '';\r\n      contents.each((function(_this) {\r\n        return function(i, node) {\r\n          var $node, children;\r\n          if (node.nodeType === 3) {\r\n            return result += node.nodeValue;\r\n          } else if (node.nodeType === 1) {\r\n            $node = $(node);\r\n            children = $node.is('iframe') ? null : $node.contents();\r\n            if (children && children.length > 0) {\r\n              result += _this.clearHtml(children);\r\n            }\r\n            if (lineBreak && i < contents.length - 1 && $node.is('br, p, div, li,tr, pre, address, artticle, aside, dl, figcaption, footer, h1, h2,h3, h4, header')) {\r\n              return result += '\\n';\r\n            }\r\n          }\r\n        };\r\n      })(this));\r\n      return result;\r\n    },\r\n\r\n    beautify : function($contents) {\r\n      var uselessP,\r\n          _this = this;\r\n      uselessP = function($el) {\r\n        return !!($el.is('p') && !$el.text() && $el.children(':not(br)').length < 1);\r\n      };\r\n      return $contents.each(function(i, el) {\r\n        var $el, invalid;\r\n        $el = $(el);\r\n        invalid = $el.is(':not(img, br, col, td, hr, [class^=\"' + _this.opts.classPrefix + '\"]):empty');\r\n        if (invalid || uselessP($el)) {\r\n          $el.remove();\r\n        }\r\n        return $el.find(':not(img, br, col, td, hr, [class^=\"' + _this.opts.classPrefix + '\"]):empty').remove();\r\n      });\r\n    }\r\n\r\n  });\r\n\r\n  Formatter.pluginName = 'Formatter';\r\n\r\n  return contents.Formatter = Formatter;\r\n\r\n});\ndefine('skylark-domx-contents/Indentation',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,noder,$,contents){ \r\n\r\n\r\n  var Indentation = langx.Evented.inherit({\r\n\r\n  });\r\n\r\n\r\n  Indentation.pluginName = 'Indentation';\r\n\r\n  Indentation.prototype.opts = {\r\n    tabIndent: true,\r\n    indentWidth: 40\r\n   \r\n  };\r\n\r\n  Indentation.prototype.init = function(editable,opts) {\r\n    this.editable = editable; // this._module;\r\n    this.opts = langx.extend({}, this.opts, opts);\r\n\r\n    this.editable.keystroke.add('tab', '*', (function(_this) {\r\n      return function(e) {\r\n        var codeButton;\r\n        codeButton = _this.editable.toolbar.findButton('code');\r\n        if (!(_this.opts.tabIndent || (codeButton && codeButton.active))) {\r\n          return;\r\n        }\r\n        return _this.indent(e.shiftKey);\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  Indentation.prototype.indent = function(isBackward) {\r\n    var $blockNodes, $endNodes, $startNodes, nodes, result;\r\n    $startNodes = this.editable.selection.startNodes();\r\n    $endNodes = this.editable.selection.endNodes();\r\n    $blockNodes = this.editable.selection.blockNodes();\r\n    nodes = [];\r\n    $blockNodes = $blockNodes.each(function(i, node) {\r\n      var include, j, k, len, n;\r\n      include = true;\r\n      for (j = k = 0, len = nodes.length; k < len; j = ++k) {\r\n        n = nodes[j];\r\n        if (noder.contains(node, n)) {\r\n          include = false;\r\n          break;\r\n        } else if (noder.contains(n, node)) {\r\n          nodes.splice(j, 1, node);\r\n          include = false;\r\n          break;\r\n        }\r\n      }\r\n      if (include) {\r\n        return nodes.push(node);\r\n      }\r\n    });\r\n    $blockNodes = $(nodes);\r\n    result = false;\r\n    $blockNodes.each((function(_this) {\r\n      return function(i, blockEl) {\r\n        var r;\r\n        r = isBackward ? _this.outdentBlock(blockEl) : _this.indentBlock(blockEl);\r\n        if (r) {\r\n          return result = r;\r\n        }\r\n      };\r\n    })(this));\r\n    return result;\r\n  };\r\n\r\n  Indentation.prototype.indentBlock = function(blockEl) {\r\n    var $blockEl, $childList, $nextTd, $nextTr, $parentLi, $pre, $td, $tr, marginLeft, tagName;\r\n    $blockEl = $(blockEl);\r\n    if (!$blockEl.length) {\r\n      return;\r\n    }\r\n    if ($blockEl.is('pre')) {\r\n      $pre = this.editable.selection.containerNode();\r\n      if (!($pre.is($blockEl) || $pre.closest('pre').is($blockEl))) {\r\n        return;\r\n      }\r\n      this.indentText(this.editable.selection.range());\r\n    } else if ($blockEl.is('li')) {\r\n      $parentLi = $blockEl.prev('li');\r\n      if ($parentLi.length < 1) {\r\n        return;\r\n      }\r\n      this.editable.selection.save();\r\n      tagName = $blockEl.parent()[0].tagName;\r\n      $childList = $parentLi.children('ul, ol');\r\n      if ($childList.length > 0) {\r\n        $childList.append($blockEl);\r\n      } else {\r\n        $('<' + tagName + '/>').append($blockEl).appendTo($parentLi);\r\n      }\r\n      this.editable.selection.restore();\r\n    } else if ($blockEl.is('p, h1, h2, h3, h4')) {\r\n      marginLeft = parseInt($blockEl.css('margin-left')) || 0;\r\n      marginLeft = (Math.round(marginLeft / this.opts.indentWidth) + 1) * this.opts.indentWidth;\r\n      $blockEl.css('margin-left', marginLeft);\r\n    } else if ($blockEl.is('table') || $blockEl.is('.' + this.opts.classPrefix +'table')) {\r\n      $td = this.editable.selection.containerNode().closest('td, th');\r\n      $nextTd = $td.next('td, th');\r\n      if (!($nextTd.length > 0)) {\r\n        $tr = $td.parent('tr');\r\n        $nextTr = $tr.next('tr');\r\n        if ($nextTr.length < 1 && $tr.parent().is('thead')) {\r\n          $nextTr = $tr.parent('thead').next('tbody').find('tr:first');\r\n        }\r\n        $nextTd = $nextTr.find('td:first, th:first');\r\n      }\r\n      if (!($td.length > 0 && $nextTd.length > 0)) {\r\n        return;\r\n      }\r\n      this.editable.selection.setRangeAtEndOf($nextTd);\r\n    } else {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  Indentation.prototype.indentText = function(range) {\r\n    var text, textNode;\r\n    text = range.toString().replace(/^(?=.+)/mg, '\\u00A0\\u00A0');\r\n    textNode = document.createTextNode(text || '\\u00A0\\u00A0');\r\n    range.deleteContents();\r\n    range.insertNode(textNode);\r\n    if (text) {\r\n      range.selectNode(textNode);\r\n      return this.editable.selection.range(range);\r\n    } else {\r\n      return this.editable.selection.setRangeAfter(textNode);\r\n    }\r\n  };\r\n\r\n  Indentation.prototype.outdentBlock = function(blockEl) {\r\n    var $blockEl, $parent, $parentLi, $pre, $prevTd, $prevTr, $td, $tr, marginLeft, range;\r\n    $blockEl = $(blockEl);\r\n    if (!($blockEl && $blockEl.length > 0)) {\r\n      return;\r\n    }\r\n    if ($blockEl.is('pre')) {\r\n      $pre = this.editable.selection.containerNode();\r\n      if (!($pre.is($blockEl) || $pre.closest('pre').is($blockEl))) {\r\n        return;\r\n      }\r\n      this.outdentText(range);\r\n    } else if ($blockEl.is('li')) {\r\n      $parent = $blockEl.parent();\r\n      $parentLi = $parent.parent('li');\r\n      this.editable.selection.save();\r\n      if ($parentLi.length < 1) {\r\n        range = document.createRange();\r\n        range.setStartBefore($parent[0]);\r\n        range.setEndBefore($blockEl[0]);\r\n        $parent.before(range.extractContents());\r\n        $('<p/>').insertBefore($parent).after($blockEl.children('ul, ol')).append($blockEl.contents());\r\n        $blockEl.remove();\r\n      } else {\r\n        if ($blockEl.next('li').length > 0) {\r\n          $('<' + $parent[0].tagName + '/>').append($blockEl.nextAll('li')).appendTo($blockEl);\r\n        }\r\n        $blockEl.insertAfter($parentLi);\r\n        if ($parent.children('li').length < 1) {\r\n          $parent.remove();\r\n        }\r\n      }\r\n      this.editable.selection.restore();\r\n    } else if ($blockEl.is('p, h1, h2, h3, h4')) {\r\n      marginLeft = parseInt($blockEl.css('margin-left')) || 0;\r\n      marginLeft = Math.max(Math.round(marginLeft / this.opts.indentWidth) - 1, 0) * this.opts.indentWidth;\r\n      $blockEl.css('margin-left', marginLeft === 0 ? '' : marginLeft);\r\n    } else if ($blockEl.is('table') || $blockEl.is('.' + this.opts.classPrefix + 'table')) {\r\n      $td = this.editable.selection.containerNode().closest('td, th');\r\n      $prevTd = $td.prev('td, th');\r\n      if (!($prevTd.length > 0)) {\r\n        $tr = $td.parent('tr');\r\n        $prevTr = $tr.prev('tr');\r\n        if ($prevTr.length < 1 && $tr.parent().is('tbody')) {\r\n          $prevTr = $tr.parent('tbody').prev('thead').find('tr:first');\r\n        }\r\n        $prevTd = $prevTr.find('td:last, th:last');\r\n      }\r\n      if (!($td.length > 0 && $prevTd.length > 0)) {\r\n        return;\r\n      }\r\n      this.editable.selection.setRangeAtEndOf($prevTd);\r\n    } else {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  Indentation.prototype.outdentText = function(range) {};\r\n\r\n  return contents.Indentation = Indentation;\r\n\r\n});\r\n\ndefine('skylark-domx-contents/Clipboard',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./contents\"\r\n],function(langx,$,contents){ \r\n\r\n  var Clipboard = langx.Evented.inherit({\r\n\r\n  });\r\n\r\n\r\n  Clipboard.pluginName = 'Clipboard';\r\n\r\n  Clipboard.prototype.opts = {\r\n    pasteImage: false,\r\n    cleanPaste: false\r\n  };\r\n\r\n  Clipboard.prototype.init = function(editable,opts) {\r\n    this.editable = editable; //this._module;\r\n    this.opts = langx.extend({}, this.opts, opts);\r\n    if (this.opts.pasteImage && typeof this.opts.pasteImage !== 'string') {\r\n      this.opts.pasteImage = 'inline';\r\n    }\r\n    this.editable.body.on('paste', (function(_this) {\r\n      return function(e) {\r\n        var range;\r\n        if (_this.pasting || _this._pasteBin) {\r\n          return;\r\n        }\r\n        if (_this.editable.trigger(e) === false) {\r\n          return false;\r\n        }\r\n        range = _this.editable.selection.deleteRangeContents();\r\n        if (_this.editable.body.html()) {\r\n          if (!range.collapsed) {\r\n            range.collapse(true);\r\n          }\r\n        } else {\r\n          _this.editable.formatter.format();\r\n          _this.editable.selection.setRangeAtStartOf(_this.editable.body.find('p:first'));\r\n        }\r\n        if (_this._processPasteByClipboardApi(e)) {\r\n          return false;\r\n        }\r\n        _this.editable.inputManager.throttledValueChanged.clear();\r\n        _this.editable.inputManager.throttledSelectionChanged.clear();\r\n        _this.editable.undoManager.throttledPushState.clear();\r\n        _this.editable.selection.reset();\r\n        _this.editable.undoManager.resetCaretPosition();\r\n        _this.pasting = true;\r\n        return _this._getPasteContent(function(pasteContent) {\r\n          _this._processPasteContent(pasteContent);\r\n          _this._pasteInBlockEl = null;\r\n          _this._pastePlainText = null;\r\n          return _this.pasting = false;\r\n        });\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  Clipboard.prototype._processPasteByClipboardApi = function(e) {\r\n    var imageFile, pasteItem, ref, uploadOpt;\r\n    if (this.editable.util.browser.edge) {\r\n      return;\r\n    }\r\n    if (e.originalEvent.clipboardData && e.originalEvent.clipboardData.items && e.originalEvent.clipboardData.items.length > 0) {\r\n      pasteItem = e.originalEvent.clipboardData.items[0];\r\n      if (/^image\\//.test(pasteItem.type)) {\r\n        imageFile = pasteItem.getAsFile();\r\n        if (!((imageFile != null) && this.opts.pasteImage)) {\r\n          return;\r\n        }\r\n        if (!imageFile.name) {\r\n          imageFile.name = \"Clipboard Image.png\";\r\n        }\r\n        if (this.editable.triggerHandler('pasting', [imageFile]) === false) {\r\n          return;\r\n        }\r\n        uploadOpt = {};\r\n        uploadOpt[this.opts.pasteImage] = true;\r\n        if ((ref = this.editable.uploader) != null) {\r\n          ref.upload(imageFile, uploadOpt);\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  Clipboard.prototype._getPasteContent = function(callback) {\r\n    var state;\r\n    this._pasteBin = $('<div contenteditable=\"true\" />').addClass('paste-bin').attr('tabIndex', '-1').appendTo(this.editable.$el);\r\n    state = {\r\n      html: this.editable.body.html(),\r\n      caret: this.editable.undoManager.caretPosition()\r\n    };\r\n    this._pasteBin.focus();\r\n    return setTimeout((function(_this) {\r\n      return function() {\r\n        var pasteContent;\r\n        //_this.editable.hidePopover();\r\n        _this.editable.body.get(0).innerHTML = state.html;\r\n        _this.editable.undoManager.caretPosition(state.caret);\r\n        _this.editable.body.focus();\r\n        _this.editable.selection.reset();\r\n        _this.editable.selection.range();\r\n        _this._pasteInBlockEl = _this.editable.selection.blockNodes().last();\r\n        _this._pastePlainText = _this.opts.cleanPaste || _this._pasteInBlockEl.is('pre, table');\r\n        if (_this._pastePlainText) {\r\n          pasteContent = _this.editable.formatter.clearHtml(_this._pasteBin.html(), true);\r\n        } else {\r\n          pasteContent = $('<div/>').append(_this._pasteBin.contents());\r\n          pasteContent.find('style').remove();\r\n          pasteContent.find('table colgroup').remove();\r\n          _this._cleanPasteFontSize(pasteContent);\r\n          _this.editable.formatter.format(pasteContent);\r\n          _this.editable.formatter.decorate(pasteContent);\r\n          _this.editable.formatter.beautify(pasteContent.children());\r\n          pasteContent = pasteContent.contents();\r\n        }\r\n        _this._pasteBin.remove();\r\n        _this._pasteBin = null;\r\n        return callback(pasteContent);\r\n      };\r\n    })(this), 0);\r\n  };\r\n\r\n  Clipboard.prototype._processPasteContent = function(pasteContent) {\r\n    var $blockEl, $img, blob, children, dataURLtoBlob, img, insertPosition, k, l, lastLine, len, len1, len2, len3, len4, line, lines, m, node, o, q, ref, ref1, ref2, uploadOpt, uploader;\r\n    if (this.editable.trigger('pasting', [pasteContent]) === false) {\r\n      return;\r\n    }\r\n    $blockEl = this._pasteInBlockEl;\r\n    if (!pasteContent) {\r\n      return;\r\n    }\r\n    if (this._pastePlainText) {\r\n      if ($blockEl.is('table')) {\r\n        lines = pasteContent.split('\\n');\r\n        lastLine = lines.pop();\r\n        for (k = 0, len = lines.length; k < len; k++) {\r\n          line = lines[k];\r\n          this.editable.selection.insertNode(document.createTextNode(line));\r\n          this.editable.selection.insertNode($('<br/>'));\r\n        }\r\n        this.editable.selection.insertNode(document.createTextNode(lastLine));\r\n      } else {\r\n        pasteContent = $('<div/>').text(pasteContent);\r\n        ref = pasteContent.contents();\r\n        for (l = 0, len1 = ref.length; l < len1; l++) {\r\n          node = ref[l];\r\n          this.editable.selection.insertNode($(node)[0]);\r\n        }\r\n      }\r\n    } else if ($blockEl.is(this.editable.body)) {\r\n      for (m = 0, len2 = pasteContent.length; m < len2; m++) {\r\n        node = pasteContent[m];\r\n        this.editable.selection.insertNode(node);\r\n      }\r\n    } else if (pasteContent.length < 1) {\r\n      return;\r\n    } else if (pasteContent.length === 1) {\r\n      if (pasteContent.is('p')) {\r\n        children = pasteContent.contents();\r\n        if ($blockEl.is('h1, h2, h3, h4, h5')) {\r\n          if (children.length) {\r\n            children.css('font-size', '');\r\n          }\r\n        }\r\n        if (children.length === 1 && children.is('img')) {\r\n          $img = children;\r\n          if (/^data:image/.test($img.attr('src'))) {\r\n            if (!this.opts.pasteImage) {\r\n              return;\r\n            }\r\n            blob = this.editable.util.dataURLtoBlob($img.attr(\"src\"));\r\n            blob.name = \"Clipboard Image.png\";\r\n            uploadOpt = {};\r\n            uploadOpt[this.opts.pasteImage] = true;\r\n            if ((ref1 = this.editable.uploader) != null) {\r\n              ref1.upload(blob, uploadOpt);\r\n            }\r\n            return;\r\n          } else if (new RegExp('^blob:' + location.origin + '/').test($img.attr('src'))) {\r\n            if (!this.opts.pasteImage) {\r\n              return;\r\n            }\r\n            uploadOpt = {};\r\n            uploadOpt[this.opts.pasteImage] = true;\r\n            dataURLtoBlob = this.editable.util.dataURLtoBlob;\r\n            uploader = this.editable.uploader;\r\n            img = new Image;\r\n            img.onload = function() {\r\n              var canvas;\r\n              canvas = document.createElement('canvas');\r\n              canvas.width = img.naturalWidth;\r\n              canvas.height = img.naturalHeight;\r\n              canvas.getContext('2d').drawImage(img, 0, 0);\r\n              blob = dataURLtoBlob(canvas.toDataURL('image/png'));\r\n              blob.name = 'Clipboard Image.png';\r\n              if (uploader !== null) {\r\n                uploader.upload(blob, uploadOpt);\r\n              }\r\n            };\r\n            img.src = $img.attr('src');\r\n            return;\r\n          } else if ($img.is('img[src^=\"webkit-fake-url://\"]')) {\r\n            return;\r\n          }\r\n        }\r\n        for (o = 0, len3 = children.length; o < len3; o++) {\r\n          node = children[o];\r\n          this.editable.selection.insertNode(node);\r\n        }\r\n      } else if ($blockEl.is('p') && this.editable.util.isEmptyNode($blockEl)) {\r\n        $blockEl.replaceWith(pasteContent);\r\n        this.editable.selection.setRangeAtEndOf(pasteContent);\r\n      } else if (pasteContent.is('ul, ol')) {\r\n        if (pasteContent.find('li').length === 1) {\r\n          pasteContent = $('<div/>').text(pasteContent.text());\r\n          ref2 = pasteContent.contents();\r\n          for (q = 0, len4 = ref2.length; q < len4; q++) {\r\n            node = ref2[q];\r\n            this.editable.selection.insertNode($(node)[0]);\r\n          }\r\n        } else if ($blockEl.is('li')) {\r\n          $blockEl.parent().after(pasteContent);\r\n          this.editable.selection.setRangeAtEndOf(pasteContent);\r\n        } else {\r\n          $blockEl.after(pasteContent);\r\n          this.editable.selection.setRangeAtEndOf(pasteContent);\r\n        }\r\n      } else {\r\n        $blockEl.after(pasteContent);\r\n        this.editable.selection.setRangeAtEndOf(pasteContent);\r\n      }\r\n    } else {\r\n      if ($blockEl.is('li')) {\r\n        $blockEl = $blockEl.parent();\r\n      }\r\n      if (this.editable.selection.rangeAtStartOf($blockEl)) {\r\n        insertPosition = 'before';\r\n      } else if (this.editable.selection.rangeAtEndOf($blockEl)) {\r\n        insertPosition = 'after';\r\n      } else {\r\n        this.editable.selection.breakBlockEl($blockEl);\r\n        insertPosition = 'before';\r\n      }\r\n      $blockEl[insertPosition](pasteContent);\r\n      this.editable.selection.setRangeAtEndOf(pasteContent.last());\r\n    }\r\n    return this.editable.inputManager.throttledValueChanged();\r\n  };\r\n\r\n  Clipboard.prototype._cleanPasteFontSize = function(node) {\r\n    var $node, sizeMap;\r\n    $node = $(node);\r\n    if (!($node.length > 0)) {\r\n      return;\r\n    }\r\n    sizeMap = ['1.5em', '1.25em', '0.75em', '0.5em'];\r\n    return $node.find('[style*=\"font-size\"]').map(function(i, el) {\r\n      var $el;\r\n      $el = $(el);\r\n      if (langx.inArray($el.css('font-size'), sizeMap) < 0) {\r\n        return $el.css('font-size', '');\r\n      }\r\n    });\r\n  };\r\n\r\n  return contents.Clipboard = Clipboard;\r\n\r\n});\r\n\r\n\ndefine('skylark-domx-contents/Editable',[\r\n\t\"skylark-langx/langx\",\r\n\t\"skylark-domx-noder\",\r\n\t\"skylark-domx-query\",\r\n\t\"./contents\",\r\n\t\"./Hotkeys\",\r\n\t\"./Util\",\r\n\t\"./InputManager\", \r\n\t\"./Selection\", \r\n\t\"./UndoManager\", \r\n\t\"./Keystroke\",\r\n\t\"./Formatter\", \r\n\t\"./Indentation\", \r\n\t\"./Clipboard\"\r\n],function(langx, noder, $, contents,Hotkeys,Util,InputManager,Selection,UndoManager,Keystroke,Formatter,Indentation,Clipboard){\r\n  var Editable = langx.Evented.inherit({\r\n    init : function(el,opts) {\r\n    \tthis.$el = $(el);\r\n    \tthis.textarea = $(opts.textarea);\r\n    \tthis.body = $(opts.body);\r\n\r\n    \tvar pluginOpts = {\r\n    \t\tclassPrefix : opts.classPrefix\r\n    \t};\r\n\r\n        this.util = new Util(this,pluginOpts);\r\n\r\n\t\tthis.hotkeys = new Hotkeys({\r\n\t\t  el: this.body\r\n\t\t});\r\n\r\n      this.inputManager = new InputManager(this,pluginOpts);\r\n      this.selection = new Selection(this,pluginOpts);\r\n      this.undoManager = new UndoManager(this,pluginOpts);\r\n      this.keystroke = new Keystroke(this,pluginOpts);\r\n      this.formatter = new Formatter(this,pluginOpts);\r\n      this.indentation = new Indentation(this,pluginOpts);\r\n      this.clipboard = new Clipboard(this,pluginOpts);\r\n\r\n\t\tif (this.util.os.mac) {\r\n\t\t  this.$el.addClass(opts.classPrefix + 'mac');\r\n\t\t} else if (this.util.os.linux) {\r\n\t\t  this.$el.addClass(opts.classPrefix + 'linux');\r\n\t\t}\r\n\t\tif (this.util.os.mobile) {\r\n\t\t  this.$el.addClass(opts.classPrefix + 'mobile');\r\n\t\t}\r\n\r\n      if (this.util.browser.mozilla) {\r\n        this.util.reflow();\r\n        try {\r\n          document.execCommand('enableObjectResizing', false, false);\r\n          return document.execCommand('enableInlineTableEditing', false, false);\r\n        } catch (_error) {\r\n          e = _error;\r\n        }\r\n      }\r\n\r\n    },\r\n\r\n\tsetValue : function(val) {\r\n\t\tthis.textarea.val(val);\r\n\t\tthis.body.get(0).innerHTML = val;\r\n\t\tthis.formatter.format();\r\n\t\tthis.formatter.decorate();\r\n\t\tthis.util.reflow(this.body);\r\n\t\tthis.inputManager.lastCaretPosition = null;\r\n\t},\r\n\r\n\tgetValue : function() {\r\n\t\treturn this.sync();\r\n\t},\r\n\r\n\tsync : function() {\r\n\t\tvar children, cloneBody, emptyP, firstP, lastP, val;\r\n\t\tcloneBody = this.body.clone();\r\n\t\tthis.formatter.undecorate(cloneBody);\r\n\t\tthis.formatter.format(cloneBody);\r\n\t\tthis.formatter.autolink(cloneBody);\r\n\t\tchildren = cloneBody.children();\r\n\t\tlastP = children.last('p');\r\n\t\tfirstP = children.first('p');\r\n\t\twhile (lastP.is('p') && this.util.isEmptyNode(lastP)) {\r\n\t\t  emptyP = lastP;\r\n\t\t  lastP = lastP.prev('p');\r\n\t\t  emptyP.remove();\r\n\t\t}\r\n\t\twhile (firstP.is('p') && this.util.isEmptyNode(firstP)) {\r\n\t\t  emptyP = firstP;\r\n\t\t  firstP = lastP.next('p');\r\n\t\t  emptyP.remove();\r\n\t\t}\r\n\t\tcloneBody.find('img.uploading').remove();\r\n\t\tval = langx.trim(cloneBody.html());\r\n\t\tthis.textarea.val(val);\r\n\t\treturn val;\r\n\t},\r\n\r\n\tfocus : function() {\r\n\t\tvar $blockEl, range;\r\n\t\tif (!(this.body.is(':visible') && this.body.is('[contenteditable]'))) {\r\n\t\t  this.$el.find('textarea:visible').focus();\r\n\t\t  return;\r\n\t\t}\r\n\t\tif (this.inputManager.lastCaretPosition) {\r\n\t\t  this.undoManager.caretPosition(this.inputManager.lastCaretPosition);\r\n\t\t  return this.inputManager.lastCaretPosition = null;\r\n\t\t} else {\r\n\t\t  $blockEl = this.body.children().last();\r\n\t\t  if (!$blockEl.is('p')) {\r\n\t\t    $blockEl = $('<p/>').append(this.util.phBr).appendTo(this.body);\r\n\t\t  }\r\n\t\t  range = document.createRange();\r\n\t\t  return this.selection.setRangeAtEndOf($blockEl, range);\r\n\t\t}\r\n\t},\r\n\r\n\tblur : function() {\r\n\t\tif (this.body.is(':visible') && this.body.is('[contenteditable]')) {\r\n\t\t  return this.body.blur();\r\n\t\t} else {\r\n\t\t  return this.body.find('textarea:visible').blur();\r\n\t\t}\r\n\t},\r\n\r\n\tisActive : function(state) {\r\n\t\treturn document.queryCommandState(state) === true; //'bold'\r\n\t},\r\n\r\n\tstatus : function(cmd,htmlTag) {\r\n\t\tif (cmd === \"alignment\") {\r\n\t\t    var nodes = this.selection.nodes().filter(htmlTag);\r\n\t\t    if (nodes.length < 1) {\r\n\t\t    \treturn null;\r\n\t\t    } else {\r\n\t\t      return nodes.first().css('text-align');\r\n\t\t    }\r\n\r\n\t\t}\r\n\t},\r\n\r\n\talignment : function(align,htmlTag) {\r\n\t    if (align !== 'left' && align !== 'center' && align !== 'right') {\r\n\t      throw new Error(\"simditor alignment button: invalid align \" + align);\r\n\t    }\r\n    \tvar nodes = this.selection.nodes().filter(htmlTag);\r\n\t    nodes.css({\r\n\t      'text-align': align === 'left' ? '' : align\r\n\t    });\r\n\t    this.trigger('valuechanged');\r\n\t    return this.inputManager.throttledSelectionChanged();\r\n\r\n\t},\r\n\r\n\tblockquote : function(disableTag) {\r\n\t    var $rootNodes, clearCache, nodeCache;\r\n\t    $rootNodes = this.selection.rootNodes();\r\n\t    $rootNodes = $rootNodes.filter(function(i, node) {\r\n\t      return !$(node).parent().is('blockquote');\r\n\t    });\r\n\t    this.selection.save();\r\n\t    nodeCache = [];\r\n\t    clearCache = function() {\r\n\t        if (nodeCache.length > 0) {\r\n\t          $(\"<blockquote/>\").insertBefore(nodeCache[0]).append(nodeCache);\r\n\t          return nodeCache.length = 0;\r\n\t        }\r\n\t    };\r\n\t    $rootNodes.each((function(_this) {\r\n\t      return function(i, node) {\r\n\t        var $node;\r\n\t        $node = $(node);\r\n\t        if (!$node.parent().is(_this.body)) {\r\n\t          return;\r\n\t        }\r\n\t        if ($node.is('blockquote')) {\r\n\t          clearCache();\r\n\t          return $node.children().unwrap();\r\n\t        } else if ($node.is(disableTag) || _this.util.isDecoratedNode($node)) {\r\n\t          return clearCache();\r\n\t        } else {\r\n\t          return nodeCache.push(node);\r\n\t        }\r\n\t      };\r\n\t    })(this));\r\n\t    clearCache();\r\n\t    this.selection.restore();\r\n\t    return this.trigger('valuechanged');\r\n\r\n\t},\r\n\r\n\tblockCode : function(htmlTag,disableTag) {\r\n\t    var $rootNodes, clearCache, nodeCache, resultNodes;\r\n\t    $rootNodes = this.selection.rootNodes();\r\n\t    nodeCache = [];\r\n\t    resultNodes = [];\r\n\t    clearCache = (function(_this) {\r\n\t      return function() {\r\n\t        var $pre;\r\n\t        if (!(nodeCache.length > 0)) {\r\n\t          return;\r\n\t        }\r\n\t        $pre = $(\"<\" + htmlTag + \"/>\").insertBefore(nodeCache[0]).text(_this.formatter.clearHtml(nodeCache));\r\n\t        resultNodes.push($pre[0]);\r\n\t        return nodeCache.length = 0;\r\n\t      };\r\n\t    })(this);\r\n\t    $rootNodes.each((function(_this) {\r\n\t      return function(i, node) {\r\n\t        var $node, $p;\r\n\t        $node = $(node);\r\n\t        if ($node.is(htmlTag)) {\r\n\t          clearCache();\r\n\t          $p = $('<p/>').append($node.html().replace('\\n', '<br/>')).replaceAll($node);\r\n\t          return resultNodes.push($p[0]);\r\n\t        } else if ($node.is(disableTag) || _this.util.isDecoratedNode($node) || $node.is('blockquote')) {\r\n\t          return clearCache();\r\n\t        } else {\r\n\t          return nodeCache.push(node);\r\n\t        }\r\n\t      };\r\n\t    })(this));\r\n\t    clearCache();\r\n\t    this.selection.setRangeAtEndOf($(resultNodes).last());\r\n\t    return this.trigger('valuechanged');\r\n\r\n\t},\r\n\r\n\tfontColor : function(hex,isDefault,coloredText) {\r\n        var range = this.selection.range();\r\n        if (!isDefault && range.collapsed) {\r\n          textNode = document.createTextNode(coloredText);\r\n          range.insertNode(textNode);\r\n          range.selectNodeContents(textNode);\r\n        }\r\n        this.selection.range(range);\r\n        document.execCommand('styleWithCSS', false, true);\r\n        document.execCommand('foreColor', false, hex);\r\n        document.execCommand('styleWithCSS', false, false);\r\n        if (!this.util.support.oninput) {\r\n          return this.trigger('valuechanged');\r\n        }\r\n\r\n\t},\r\n\r\n\tfontScale : function(param,sizeMap) {\r\n  \t\tif (!sizeMap){\r\n  \t\t\tsizeMap = {\r\n\t\t\t    'x-large': '1.5em',\r\n\t\t\t    'large': '1.25em',\r\n\t\t\t    'small': '.75em',\r\n\t\t\t    'x-small': '.5em'\r\n\t\t   };\r\n\t\t}\r\n\r\n\t    var $scales, containerNode, range;\r\n\t    range = this.selection.range();\r\n\t    if (range.collapsed) {\r\n\t      return;\r\n\t    }\r\n\t    this.selection.range(range);\r\n\t    document.execCommand('styleWithCSS', false, true);\r\n\t    document.execCommand('fontSize', false, param);\r\n\t    document.execCommand('styleWithCSS', false, false);\r\n\t    this.selection.reset();\r\n\t    this.selection.range();\r\n\t    containerNode = this.selection.containerNode();\r\n\t    if (containerNode[0].nodeType === Node.TEXT_NODE) {\r\n\t      $scales = containerNode.closest('span[style*=\"font-size\"]');\r\n\t    } else {\r\n\t      $scales = containerNode.find('span[style*=\"font-size\"]');\r\n\t    }\r\n\t    $scales.each((function(_this) {\r\n\t      return function(i, n) {\r\n\t        var $span, size;\r\n\t        $span = $(n);\r\n\t        size = n.style.fontSize;\r\n\t        if (/large|x-large|small|x-small/.test(size)) {\r\n\t          return $span.css('fontSize', sizeMap[size]);\r\n\t        } else if (size === 'medium') {\r\n\t          if ($span[0].style.length > 1) {\r\n\t            return $span.css('fontSize', '');\r\n\t          } else {\r\n\t            return $span.replaceWith($span.contents());\r\n\t          }\r\n\t        }\r\n\t      };\r\n\t    })(this));\r\n\t    return this.trigger('valuechanged');\r\n\t},\r\n\r\n\thr : function() {\r\n\t    var $hr, $newBlock, $nextBlock, $rootBlock;\r\n\t    $rootBlock = this.selection.rootNodes().first();\r\n\t    $nextBlock = $rootBlock.next();\r\n\t    if ($nextBlock.length > 0) {\r\n\t      this.selection.save();\r\n\t    } else {\r\n\t      $newBlock = $('<p/>').append(this.util.phBr);\r\n\t    }\r\n\t    $hr = $('<hr/>').insertAfter($rootBlock);\r\n\t    if ($newBlock) {\r\n\t      $newBlock.insertAfter($hr);\r\n\t      this.selection.setRangeAtStartOf($newBlock);\r\n\t    } else {\r\n\t      this.selection.restore();\r\n\t    }\r\n\t    return this.trigger('valuechanged');\r\n\t},\r\n\r\n\tinlineCode : function(active) {\r\n\t    var $code, $contents, range;\r\n\t    range = this.selection.range();\r\n\t    if (this.active) {\r\n\t      range.selectNodeContents(this.node[0]);\r\n\t      this.selection.save(range);\r\n\t      this.node.contents().unwrap();\r\n\t      this.selection.restore();\r\n\t    } else {\r\n\t      $contents = $(range.extractContents());\r\n\t      $code = $(\"<\" + this.htmlTag + \"/>\").append($contents.contents());\r\n\t      range.insertNode($code[0]);\r\n\t      range.selectNodeContents($code[0]);\r\n\t      this.selection.range(range);\r\n\t    }\r\n\t    return this.trigger('valuechanged');\r\n\r\n\t},\r\n\r\n\tindent : function() {\r\n\t    return this.indentation.indent();\r\n\t},\r\n\r\n\tlink : function(active,defaultLinkText) {\r\n\t    var $contents, $link, $newBlock, linkText, range, txtNode;\r\n\t    range = this.selection.range();\r\n\t    if (active) {\r\n\t\t  var node = this.selection.startNodes();\r\n\t      txtNode = document.createTextNode(node.text());\r\n\t      node.replaceWith(txtNode);\r\n\t      range.selectNode(txtNode);\r\n\t    } else {\r\n\t      $contents = $(range.extractContents());\r\n\t      linkText = this.formatter.clearHtml($contents.contents(), false);\r\n\t      $link = $('<a/>', {\r\n\t        href: '',\r\n\t        target: '_blank',\r\n\t        text: linkText || defaultLinkText\r\n\t      });\r\n\t      if (this.selection.blockNodes().length > 0) {\r\n\t        range.insertNode($link[0]);\r\n\t      } else {\r\n\t        $newBlock = $('<p/>').append($link);\r\n\t        range.insertNode($newBlock[0]);\r\n\t      }\r\n\t      range.selectNodeContents($link[0]);\r\n\t    }\r\n\t    this.selection.range(range);\r\n\t    return this.trigger('valuechanged');\r\n\r\n\t},\r\n\r\n\tlist : function(type,param,disableTag) {\r\n      var $list, $rootNodes, anotherType;\r\n      $rootNodes = this.selection.blockNodes();\r\n      anotherType = type === 'ul' ? 'ol' : 'ul';\r\n      this.selection.save();\r\n      $list = null;\r\n      $rootNodes.each((function(_this) {\r\n        return function(i, node) {\r\n          var $node;\r\n          $node = $(node);\r\n          if ($node.is('blockquote, li') || $node.is(disableTag) || _this.util.isDecoratedNode($node) || !noder.contains(document, node)) {\r\n            return;\r\n          }\r\n          if ($node.is(type)) {\r\n            $node.children('li').each(function(i, li) {\r\n              var $childList, $li;\r\n              $li = $(li);\r\n              $childList = $li.children('ul, ol').insertAfter($node);\r\n              return $('<p/>').append($(li).html() || _this.util.phBr).insertBefore($node);\r\n            });\r\n            return $node.remove();\r\n          } else if ($node.is(anotherType)) {\r\n            return $('<' + type + '/>').append($node.contents()).replaceAll($node);\r\n          } else if ($list && $node.prev().is($list)) {\r\n            $('<li/>').append($node.html() || _this.util.phBr).appendTo($list);\r\n            return $node.remove();\r\n          } else {\r\n            $list = $(\"<\" + type + \"><li></li></\" + type + \">\");\r\n            $list.find('li').append($node.html() || _this.util.phBr);\r\n            return $list.replaceAll($node);\r\n          }\r\n        };\r\n      })(this));\r\n      this.selection.restore();\r\n      return this.trigger('valuechanged');\r\n\r\n\t},\r\n\r\n\toutdent : function() {\r\n\t    return this.indentation.indent(true);\r\n\t},\r\n\r\n\t// toggle\r\n\ttitle : function(param,disableTag) {\r\n\t\tdocument.execCommand('formatBlock', false, param);\r\n\r\n\t\t/*\r\n\t    var $rootNodes;\r\n\t    $rootNodes = this.selection.rootNodes();\r\n\t    this.selection.save();\r\n\t    $rootNodes.each((function(_this) {\r\n\t      return function(i, node) {\r\n\t        var $node;\r\n\t        $node = $(node);\r\n\t        if ($node.is('blockquote') || $node.is(param) || $node.is(disableTag) || _this.util.isDecoratedNode($node)) {\r\n\t          return;\r\n\t        }\r\n\t        return $('<' + param + '/>').append($node.contents()).replaceAll($node);\r\n\t      };\r\n\t    })(this));\r\n\t    this.selection.restore();\r\n\t    */\r\n\t    return this.trigger('valuechanged');\r\n\r\n\t}\r\n\r\n\r\n\r\n  });\r\n\r\n\tvar commands =  [\r\n\t\t\"bold\", // toggle \r\n\t\t\"insertImage\",\r\n\t\t\"insertorderedlist\",\r\n\t\t\"insertunorderedlist\",\r\n\t\t\"italic\", // toggle\r\n\t\t\"justifyLeft\",\r\n\t\t\"justifyCenter\",\r\n\t\t\"justifyFull\",\r\n\t\t\"justifyRight\",\r\n\t\t\"strikethrough\",\r\n\t\t\"underline\",\r\n\t\t\"undo\"\r\n\t];\r\n\r\n\tcommands.forEach(function(cmd){\r\n\t\tEditable.prototype[cmd] = function() {\r\n\t      document.execCommand(cmd,false,null);\r\n\t      if (!this.util.support.oninput) {\r\n\t        this.trigger('valuechanged');\r\n\t      }\r\n\t      return $(document).trigger('selectionchange');\t\t\t\t\t\r\n\t\t};\r\n\t});\r\n\r\n\r\n\tfunction editable(el,opts) {\r\n\r\n\t\t/*\t\r\n\t\tif (value === undefined) {\r\n   \t\t\treturn node.contentEditable == \"true\"\r\n\t\t} else {\r\n\t\t\tif (!value) {\r\n\t\t\t\tvalue = null;\r\n\t\t\t} else {\r\n\t\t\t\tvalue = \"true\";\r\n\t\t\t}\r\n\t\t\tdatax.attr(node,\"contentEditable\",value);\r\n\t\t}\r\n\t\t*/\r\n\t\treturn new Editable(el,opts);\r\n\t\t\r\n\t};\r\n\r\n\r\n\treturn contents.Editable  = Editable;\r\n\t\r\n});\ndefine('skylark-domx-contents/main',[\r\n\t\"./contents\",\r\n\t\"./Editable\"\r\n],function(contents){\r\n\r\n\treturn contents;\r\n});\ndefine('skylark-domx-contents', ['skylark-domx-contents/main'], function (main) { return main; });\n\n"]}