{"version":3,"sources":["skylark-domx-css.js"],"names":["define","skylark","langx","noder","insertRuleFunc","head","document","getElementsByTagName","count","sheetsByUrl","sheetsById","defaultSheetId","_createStyleSheet","defaultSheet","rulesPropName","deleteRuleFunc","deleteRule","removeRule","insertRule","_insertRule","selector","css","index","call","this","addRule","external","options","node","props","type","id","media","create","mixin","rel","async","createElement","append","deleteSheetRule","sheetId","rule","sheet","isNumber","each","i","_rule","addSheetRules","rules","isString","toString","createTextNode","isAtRule","str","startsWith","json","adjust","parentName","name","depth","strNode","values","atFlg","SPACE","repeat","trim","isArray","n","length","value","adjusted","addRules","createStyleSheet","insertSheetRule","loadStyleSheet","url","loadedCallback","errorCallback","isFunction","state","deferred","Deferred","startTime","Date","getTime","onload","resolve","onerror","e","reject","href","promise","then","removeStyleSheet","Error","remove","attach","main"],"mappings":"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","file":"../skylark-domx-css.js","sourcesContent":["define('skylark-domx-css/css',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\"\r\n], function(skylark, langx, noder) {\r\n    \"use strict\";\r\n\r\n    var head = document.getElementsByTagName(\"head\")[0],\r\n        count = 0,\r\n        sheetsByUrl = {},\r\n        sheetsById = {},\r\n        defaultSheetId = _createStyleSheet(),\r\n        defaultSheet = sheetsById[defaultSheetId],\r\n        rulesPropName = (\"cssRules\" in defaultSheet) ? \"cssRules\" : \"rules\",\r\n        insertRuleFunc,\r\n        deleteRuleFunc = defaultSheet.deleteRule || defaultSheet.removeRule;\r\n\r\n    if (defaultSheet.insertRule) {\r\n        var _insertRule = defaultSheet.insertRule;\r\n        insertRuleFunc = function(selector, css, index) {\r\n            _insertRule.call(this, selector + \"{\" + css + \"}\", index);\r\n        };\r\n    } else {\r\n        insertRuleFunc = defaultSheet.addRule;\r\n    }\r\n\r\n    function normalizeSelector(selectorText) {\r\n        var selector = [],\r\n            last, len;\r\n        last = defaultSheet[rulesPropName].length;\r\n        insertRuleFunc.call(defaultSheet, selectorText, ';');\r\n        len = defaultSheet[rulesPropName].length;\r\n        for (var i = len - 1; i >= last; i--) {\r\n            selector.push(_sheet[_rules][i].selectorText);\r\n            deleteRuleFunc.call(defaultSheet, i);\r\n        }\r\n        return selector.reverse().join(', ');\r\n    }\r\n\r\n    /*\r\n     * create a stylesheet element.\r\n     * @param {Boolean} external\r\n     * @param {Object} options\r\n     * @param {String} [options.media = null]\r\n     */\r\n    function _createStyleSheet(external,options ) {\r\n        var node,\r\n            props = {\r\n                type : \"text/css\"\r\n            },\r\n            id = (count++);\r\n\r\n        options = options || {};\r\n        if (options.media) {\r\n            props.media = options.media;\r\n        }\r\n\r\n        if (external) {\r\n            node = noder.create(\"link\",langx.mixin(props,{\r\n                rel  : \"stylesheet\",\r\n                async : false\r\n            }));\r\n        } else {\r\n            node = noder.createElement(\"style\",props);\r\n        }\r\n\r\n        noder.append(head,node);\r\n        sheetsById[id] = {\r\n            id : id,\r\n            node :node\r\n        };\r\n\r\n        return id;\r\n    }\r\n\r\n    function createStyleSheet(css,options) {\r\n        if (!options) {\r\n            options = {};\r\n        }\r\n        var sheetId = _createStyleSheet(false,options);\r\n        if (css) {\r\n            addSheetRules(sheetId,css);\r\n        }\r\n\r\n        return sheetId;\r\n    }\r\n\r\n    function loadStyleSheet(url, options,loadedCallback, errorCallback) {\r\n        if (langx.isFunction(options)) {\r\n            errorCallback = loadedCallback;\r\n            loadedCallback = options;\r\n            options = {};\r\n        }\r\n        var sheet = sheetsByUrl[url];\r\n        if (!sheet) {\r\n            var sheetId = _createStyleSheet(true,options);\r\n\r\n            sheet = sheetsByUrl[url] = sheetsById[sheetId];\r\n            langx.mixin(sheet,{\r\n                state: 0, //0:unload,1:loaded,-1:loaderror\r\n                url : url,\r\n                deferred : new langx.Deferred()\r\n            });\r\n\r\n            var node = sheet.node;\r\n\r\n            startTime = new Date().getTime();\r\n\r\n            node.onload = function() {\r\n                sheet.state = 1;\r\n                sheet.deferred.resolve(sheet.id);\r\n            },\r\n            node.onerror = function(e) {\r\n                sheet.state = -1;\r\n                sheet.deferred.reject(e);\r\n            };\r\n\r\n            node.href = sheet.url;\r\n        }\r\n        if (loadedCallback || errorCallback) {\r\n            sheet.deferred.promise.then(loadedCallback,errorCallback);\r\n        }\r\n        return sheet.id;\r\n    }\r\n\r\n    function deleteSheetRule(sheetId, rule) {\r\n        var sheet = sheetsById[sheetId];\r\n        if (langx.isNumber(rule)) {\r\n            deleteRuleFunc.call(sheet, rule);\r\n        } else {\r\n            langx.each(sheet[rulesPropName], function(i, _rule) {\r\n                if (rule === _rule) {\r\n                    deleteRuleFunc.call(sheet, i);\r\n                    return false;\r\n                }\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function deleteRule(rule) {\r\n        deleteSheetRule(defaultSheetId, rule);\r\n        return this;\r\n    }\r\n\r\n    function removeStyleSheet(sheetId) {\r\n        if (sheetId === defaultSheetId) {\r\n            throw new Error(\"The default stylesheet can not be deleted\");\r\n        }\r\n        var sheet = sheetsById[sheetId];\r\n        delete sheetsById[sheetId];\r\n\r\n        noder.remove(sheet.node);\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the default stylesheet.\r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertRule(selector, css, index) {\r\n        return this.insertSheetRule(defaultSheetId, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add rules to the default stylesheet.\r\n     * @param {Object} rules\r\n     */\r\n    function addRules(rules) {\r\n        return this.addRules(defaultSheetId,rules);\r\n    }\r\n\r\n    /*\r\n     * insert a rule to the stylesheet specified by sheetId.\r\n     * @param {Number} sheetId  \r\n     * @param {String} selector\r\n     * @param {String} css\r\n     * @param {Number} index \r\n     */\r\n    function insertSheetRule(sheetId, selector, css, index) {\r\n        if (!selector || !css) {\r\n            return -1;\r\n        }\r\n\r\n        var sheet = sheetsById[sheetId];\r\n        index = index || sheet[rulesPropName].length;\r\n\r\n        return insertRuleFunc.call(sheet, selector, css, index);\r\n    }\r\n\r\n    /*\r\n     * Add  rules to stylesheet.\r\n     * @param {Number} sheetId  \r\n     * @param {Object|String} rules\r\n     * @return this\r\n     * @example insertSheetRules(sheetId,{\r\n     * \r\n     * });\r\n     */\r\n    function addSheetRules(sheetId,rules) {\r\n        var sheet = sheetsById[sheetId],\r\n            css;\r\n        if (langx.isString(rules)) {\r\n            css = rules;\r\n        } else {\r\n            css = toString(rules);\r\n        }\r\n\r\n        noder.append(sheet.node,noder.createTextNode(css));\r\n        \r\n        return this;\r\n    }\r\n\r\n    function isAtRule(str) {\r\n        return str.startsWith(\"@\");\r\n    }\r\n\r\n    function toString(json){\r\n        var adjust = function(parentName,name,depth) {\r\n            if (parentName) {\r\n                if (isAtRule(parentName)) {\r\n                    depth += 1;\r\n                } else {\r\n                    name =  parentName + \" \" + name;\r\n                }                \r\n            }\r\n            return {\r\n                name : name,\r\n                depth : depth\r\n            }\r\n        };\r\n\r\n        var strNode = function (name, values, depth) {\r\n            var str = \"\",\r\n                atFlg = isAtRule(name);\r\n\r\n\r\n            if (isAtRule(name)) {\r\n                // at rule\r\n                if (langx.isString(values)) {\r\n                    // an at rule without block\r\n                    // ex: (1) @charset 'utf8';\r\n                    str = css.SPACE.repeat(depth) + name.trim() + \" \\\"\" + values.trim() + \" \\\";\\n\";\r\n                } else {\r\n                    // an at rule with block, ex :\r\n                    //  @media 'screen' {\r\n                    //  }\r\n                    str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n                    str += strNode(\"\",values,depth+1);\r\n                    str += css.SPACE.repeat(depth) + \" }\\n\";\r\n                }\r\n            } else {\r\n                // a selector or a property\r\n                if (langx.isString(values)) {\r\n                    // a css property \r\n                    // ex : (1) font-color : red;\r\n                    str = css.SPACE.repeat(depth) + name.trim() ;\r\n                    if (atFlg) {\r\n                        str = str +  \" \\\"\" + values.trim() + \" \\\";\\n\";\r\n                    } else {\r\n                        str = str + ': ' + values.trim() + \";\\n\";\r\n                    }\r\n\r\n                } else {\r\n                    // a selector rule \r\n                    // ex : (1) .class1 : {\r\n                    //            font-color : red;\r\n                    //          }\r\n                    if (langx.isArray(values)) {\r\n                        // array for ordering\r\n                        for (var n =0; n<values.length; n ++) {\r\n                           str +=  strNode(name,values[n],depth);\r\n                        }\r\n                    } else {\r\n                        // plain object\r\n\r\n                        if (name) {\r\n                            str += css.SPACE.repeat(depth) + name.trim() + \" {\\n\";\r\n\r\n                            for (var n in values) {\r\n                                var value =values[n];\r\n                                if (langx.isString(value)) {\r\n                                    // css property\r\n                                    str += strNode(n,value,depth+1)\r\n                                }\r\n                            }\r\n\r\n                            str += css.SPACE.repeat(depth) + \"}\\n\";\r\n                        }\r\n\r\n                        for (var n in values) {\r\n                            var value =values[n];\r\n                            if (!langx.isString(value)) {\r\n                                var adjusted = adjust(name,n,depth);\r\n                                str +=  strNode(adjusted.name,value,adjusted.depth);\r\n                            } \r\n                        }\r\n\r\n                    }\r\n                }\r\n            }   \r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        return strNode(\"\",json,0);\r\n    }\r\n \r\n\r\n    function css() {\r\n        return css;\r\n    }\r\n\r\n    langx.mixin(css, {\r\n        SPACE : \"\\t\",\r\n\r\n        addRules : addRules,\r\n\r\n        addSheetRules : addSheetRules,\r\n\r\n        createStyleSheet: createStyleSheet,\r\n\r\n        deleteSheetRule : deleteSheetRule,\r\n\r\n        deleteRule : deleteRule,\r\n\r\n        insertRule : insertRule,\r\n\r\n        insertSheetRule : insertSheetRule,\r\n\r\n        loadStyleSheet : loadStyleSheet,\r\n\r\n        removeStyleSheet : removeStyleSheet,\r\n\r\n        toString : toString\r\n    });\r\n\r\n    return skylark.attach(\"domx.css\", css);\r\n});\r\n\ndefine('skylark-domx-css/main',[\r\n\t\"./css\"\r\n],function(css){\r\n\treturn css;\r\n});\ndefine('skylark-domx-css', ['skylark-domx-css/main'], function (main) { return main; });\n\n"]}