{"version":3,"sources":["skylark-domx-eventer.js"],"names":["define","skylark","langx","browser","finder","noder","datax","mixin","each","uid","Array","prototype","slice","ignoreProperties","eventMethods","preventDefault","stopImmediatePropagation","stopPropagation","readyRE","compatible","event","source","isDefaultPrevented","name","predicate","sourceMethod","this","returnTrue","apply","arguments","returnFalse","parse","segs","split","type","ns","sort","join","isHandler","callback","isFunction","handleEvent","NativeEventCtors","window","NativeEvents","compositionstart","compositionend","compositionupdate","beforecopy","beforecut","beforepaste","copy","cut","paste","drag","dragend","dragenter","dragexit","dragleave","dragover","dragstart","drop","abort","change","error","selectionchange","submit","reset","fullscreenchange","fullscreenerror","focus","blur","focusin","focusout","keydown","keypress","keyup","message","click","contextmenu","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave","progress","textInput","tap","touchstart","touchmove","touchend","load","resize","select","scroll","unload","wheel","createEvent","props","isString","parsed","bubbles","cancelable","namespace","ctor","idx","getEventCtor","e","safeMixin","createProxy","src","key","proxy","originalEvent","test","undefined","specialEvents","focusinSupported","hover","realEvent","handlers","EventBindings","klass","init","target","_target","_event","_bindings","add","fn","options","bindings","binding","push","self","_listener","domEvt","elm","args","_args","isDefined","concat","match","isImmediatePropagationStopped","selector","one","data","indexOf","closest","currentTarget","liveFired","related","relatedTarget","contains","remove","ctx","addEventListener","console","warn","matcher","RegExp","replace","filter","removing","length","removeEventListener","EventsHandler","_handler","register","specialEvent","bindingEvent","bindType","bindEventName","events","unregister","listener","findHandler","id","handler","focusedQueue","focuser","loop","i","trigger","on","isPlainObject","isBoolean","forEach","ready","evented","Event","dispatchEvent","call","document","readyState","body","defer","start","resizedQueue","resizer","keyCodeLookup","backspace","comma","delete","down","end","enter","escape","home","left","page_down","page_up","period","right","space","tab","up","eventer","support","transition","transitionEnd","delegateType","clear","create","focused","includes","keys","isNativeEvent","isArray","off","resized","shortcuts","registry","run","shortcut","n","metaKey","ctrlKey","ctrl","alt","altKey","shift","shiftKey","keyCode","charCode","nodeName","pattern","toLowerCase","shortcutKey","setting","charCodeAt","toUpperCase","regKey","special","stop","all","attach","velm","$","delegateMethodNames","delegate","wraps","wrapper_every_act","main"],"mappings":"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","file":"../skylark-domx-eventer.js","sourcesContent":["define('skylark-domx-eventer/eventer',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\"\r\n], function(skylark, langx, browser, finder, noder, datax) {\r\n    var mixin = langx.mixin,\r\n        each = langx.each,\r\n        slice = Array.prototype.slice,\r\n        uid = langx.uid,\r\n        ignoreProperties = /^([A-Z]|returnValue$|layer[XY]$)/,\r\n        eventMethods = {\r\n            preventDefault: \"isDefaultPrevented\",\r\n            stopImmediatePropagation: \"isImmediatePropagationStopped\",\r\n            stopPropagation: \"isPropagationStopped\"\r\n        },\r\n        readyRE = /complete|loaded|interactive/;\r\n\r\n    function compatible(event, source) {\r\n        if (source || !event.isDefaultPrevented) {\r\n            if (!source) {\r\n                source = event;\r\n            }\r\n\r\n            langx.each(eventMethods, function(name, predicate) {\r\n                var sourceMethod = source[name];\r\n                event[name] = function() {\r\n                    this[predicate] = langx.returnTrue;\r\n                    return sourceMethod && sourceMethod.apply(source, arguments);\r\n                }\r\n                event[predicate] = langx.returnFalse;\r\n            });\r\n        }\r\n        return event;\r\n    }\r\n\r\n    function parse(event) {\r\n        if (event) {\r\n            var segs = (\"\" + event).split(\".\");\r\n            return {\r\n                type: segs[0],\r\n                ns: segs.slice(1).sort().join(\" \")\r\n            };\r\n        } else {\r\n            return {\r\n                type : null,\r\n                ns : null\r\n            }\r\n        }\r\n    }\r\n\r\n    function isHandler(callback) {\r\n        return callback && (langx.isFunction(callback) || langx.isFunction(callback.handleEvent));\r\n    }\r\n\r\n    var NativeEventCtors = [\r\n            window[\"CustomEvent\"], // 0 default\r\n            window[\"CompositionEvent\"], // 1\r\n            window[\"DragEvent\"], // 2\r\n            window[\"Event\"], // 3\r\n            window[\"FocusEvent\"], // 4\r\n            window[\"KeyboardEvent\"], // 5\r\n            window[\"MessageEvent\"], // 6\r\n            window[\"MouseEvent\"], // 7\r\n            window[\"MouseScrollEvent\"], // 8\r\n            window[\"MouseWheelEvent\"], // 9\r\n            window[\"MutationEvent\"], // 10\r\n            window[\"ProgressEvent\"], // 11\r\n            window[\"TextEvent\"], // 12\r\n            window[\"TouchEvent\"], // 13\r\n            window[\"UIEvent\"], // 14\r\n            window[\"WheelEvent\"], // 15\r\n            window[\"ClipboardEvent\"] // 16\r\n        ],\r\n        NativeEvents = {\r\n            \"compositionstart\": 1, // CompositionEvent\r\n            \"compositionend\": 1, // CompositionEvent\r\n            \"compositionupdate\": 1, // CompositionEvent\r\n\r\n            \"beforecopy\": 16, // ClipboardEvent\r\n            \"beforecut\": 16, // ClipboardEvent\r\n            \"beforepaste\": 16, // ClipboardEvent\r\n            \"copy\": 16, // ClipboardEvent\r\n            \"cut\": 16, // ClipboardEvent\r\n            \"paste\": 16, // ClipboardEvent\r\n\r\n            \"drag\": 2, // DragEvent\r\n            \"dragend\": 2, // DragEvent\r\n            \"dragenter\": 2, // DragEvent\r\n            \"dragexit\": 2, // DragEvent\r\n            \"dragleave\": 2, // DragEvent\r\n            \"dragover\": 2, // DragEvent\r\n            \"dragstart\": 2, // DragEvent\r\n            \"drop\": 2, // DragEvent\r\n\r\n            \"abort\": 3, // Event\r\n            \"change\": 3, // Event\r\n            \"error\": 3, // Event\r\n            \"selectionchange\": 3, // Event\r\n            \"submit\": 3, // Event\r\n            \"reset\": 3, // Event\r\n            'fullscreenchange':3,\r\n            'fullscreenerror':3,\r\n\r\n/*\r\n            'disablepictureinpicturechanged':3,\r\n            'ended':3,\r\n            'enterpictureinpicture':3,\r\n            'durationchange':3,\r\n            'leavepictureinpicture':3,\r\n            'loadstart' : 3,\r\n            'loadedmetadata':3,\r\n            'pause' : 3,\r\n            'play':3,\r\n            'posterchange':3,\r\n            'ratechange':3,\r\n            'seeking' : 3,\r\n            'sourceset':3,\r\n            'suspend':3,\r\n            'textdata':3,\r\n            'texttrackchange':3,\r\n            'timeupdate':3,\r\n            'volumechange':3,\r\n            'waiting' : 3,\r\n*/\r\n\r\n\r\n            \"focus\": 4, // FocusEvent\r\n            \"blur\": 4, // FocusEvent\r\n            \"focusin\": 4, // FocusEvent\r\n            \"focusout\": 4, // FocusEvent\r\n\r\n            \"keydown\": 5, // KeyboardEvent\r\n            \"keypress\": 5, // KeyboardEvent\r\n            \"keyup\": 5, // KeyboardEvent\r\n\r\n            \"message\": 6, // MessageEvent\r\n\r\n            \"click\": 7, // MouseEvent\r\n            \"contextmenu\": 7, // MouseEvent\r\n            \"dblclick\": 7, // MouseEvent\r\n            \"mousedown\": 7, // MouseEvent\r\n            \"mouseup\": 7, // MouseEvent\r\n            \"mousemove\": 7, // MouseEvent\r\n            \"mouseover\": 7, // MouseEvent\r\n            \"mouseout\": 7, // MouseEvent\r\n            \"mouseenter\": 7, // MouseEvent\r\n            \"mouseleave\": 7, // MouseEvent\r\n\r\n\r\n            \"progress\" : 11, //ProgressEvent\r\n\r\n            \"textInput\": 12, // TextEvent\r\n\r\n            \"tap\": 13,\r\n            \"touchstart\": 13, // TouchEvent\r\n            \"touchmove\": 13, // TouchEvent\r\n            \"touchend\": 13, // TouchEvent\r\n\r\n            \"load\": 14, // UIEvent\r\n            \"resize\": 14, // UIEvent\r\n            \"select\": 14, // UIEvent\r\n            \"scroll\": 14, // UIEvent\r\n            \"unload\": 14, // UIEvent,\r\n\r\n            \"wheel\": 15, // WheelEvent\r\n\r\n\r\n\r\n        };\r\n\r\n    //create a custom dom event\r\n    var createEvent = (function() {\r\n\r\n        function getEventCtor(type) {\r\n            var idx = NativeEvents[type];\r\n            if (!idx) {\r\n                idx = 0;\r\n            }\r\n            return NativeEventCtors[idx];\r\n        }\r\n\r\n        return function(type, props) {\r\n            //create a custom dom event\r\n\r\n            if (langx.isString(type)) {\r\n                props = props || {};\r\n            } else {\r\n                props = type || {};\r\n                type = props.type || \"\";\r\n            }\r\n            var parsed = parse(type);\r\n            type = parsed.type;\r\n\r\n            props = langx.mixin({\r\n                bubbles: true,\r\n                cancelable: true\r\n            }, props);\r\n\r\n            if (parsed.ns) {\r\n                props.namespace = parsed.ns;\r\n            }\r\n\r\n            var ctor = getEventCtor(type),\r\n                e = new ctor(type, props);\r\n\r\n            langx.safeMixin(e, props);\r\n\r\n            return compatible(e);\r\n        };\r\n    })();\r\n\r\n    function createProxy(src, props) {\r\n        var key,\r\n            proxy = {\r\n                originalEvent: src\r\n            };\r\n        for (key in src) {\r\n            if (key !== \"keyIdentifier\" && !ignoreProperties.test(key) && src[key] !== undefined) {\r\n                proxy[key] = src[key];\r\n            }\r\n        }\r\n        if (props) {\r\n            langx.mixin(proxy, props);\r\n        }\r\n        return compatible(proxy, src);\r\n    }\r\n\r\n    var\r\n        specialEvents = {},\r\n        focusinSupported = \"onfocusin\" in window,\r\n        focus = { focus: \"focusin\", blur: \"focusout\" },\r\n        hover = { mouseenter: \"mouseover\", mouseleave: \"mouseout\" },\r\n        realEvent = function(type) {\r\n            return hover[type] || (focusinSupported && focus[type]) || type;\r\n        },\r\n        handlers = {},\r\n        EventBindings = langx.klass({\r\n            init: function(target, event) {\r\n                this._target = target;\r\n                this._event = event;\r\n                this._bindings = [];\r\n            },\r\n\r\n            add: function(fn, options) {\r\n                var bindings = this._bindings,\r\n                    binding = {\r\n                        fn: fn,\r\n                        options: langx.mixin({}, options)\r\n                    };\r\n\r\n                bindings.push(binding);\r\n\r\n                var self = this;\r\n                if (!self._listener) {\r\n                    self._listener = function(domEvt) {\r\n                        var elm = this,\r\n                            e = createProxy(domEvt),\r\n                            args = domEvt._args,\r\n                            bindings = self._bindings,\r\n                            ns = e.namespace;\r\n\r\n                        if (langx.isDefined(args)) {\r\n                            args = [e].concat(args);\r\n                        } else {\r\n                            args = [e];\r\n                        }\r\n\r\n                        e.type = self._event; // convert realEvent to listened event\r\n\r\n                        langx.each(bindings, function(idx, binding) {\r\n                            var match = elm;\r\n                            if (e.isImmediatePropagationStopped && e.isImmediatePropagationStopped()) {\r\n                                return false;\r\n                            }\r\n                            var fn = binding.fn,\r\n                                options = binding.options || {},\r\n                                selector = options.selector,\r\n                                one = options.one,\r\n                                data = options.data;\r\n\r\n                            if (ns && ns != options.ns && options.ns.indexOf(ns) === -1) {\r\n                                return;\r\n                            }\r\n                            if (selector) {\r\n                                match = finder.closest(e.target, selector);\r\n                                if (match && match !== elm) {\r\n                                    langx.mixin(e, {\r\n                                        currentTarget: match,\r\n                                        liveFired: elm\r\n                                    });\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            var originalEvent = self._event;\r\n                            if (originalEvent in hover) {\r\n                                var related = e.relatedTarget;\r\n                                if (related && (related === match || noder.contains(match, related))) {\r\n                                    return;\r\n                                }\r\n                            }\r\n\r\n                            if (langx.isDefined(data)) {\r\n                                e.data = data;\r\n                            }\r\n\r\n                            if (one) {\r\n                                self.remove(fn, options);\r\n                            }\r\n\r\n                            var result ;\r\n                            if (fn.handleEvent) {\r\n                                result = fn.handleEvent.apply(fn,args);\r\n                            } else {\r\n                                if (options.ctx) {\r\n                                    result = fn.apply(options.ctx, args);                                   \r\n                                } else {\r\n                                    result = fn.apply(match, args);                                   \r\n                                }\r\n                            }\r\n\r\n                            if (result === false) {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                            }\r\n                        });;\r\n                    };\r\n\r\n                    var event = self._event;\r\n                    /*\r\n                                        if (event in hover) {\r\n                                            var l = self._listener;\r\n                                            self._listener = function(e) {\r\n                                                var related = e.relatedTarget;\r\n                                                if (!related || (related !== this && !noder.contains(this, related))) {\r\n                                                    return l.apply(this, arguments);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                    */\r\n\r\n                    if (self._target.addEventListener) {\r\n                        self._target.addEventListener(realEvent(event), self._listener, false);\r\n                    } else {\r\n                        console.warn(\"invalid eventer object\", self._target);\r\n                    }\r\n                }\r\n\r\n            },\r\n            remove: function(fn, options) {\r\n                options = langx.mixin({}, options);\r\n\r\n                function matcherFor(ns) {\r\n                    return new RegExp(\"(?:^| )\" + ns.replace(\" \", \" .* ?\") + \"(?: |$)\");\r\n                }\r\n                var matcher;\r\n                if (options.ns) {\r\n                    matcher = matcherFor(options.ns);\r\n                }\r\n\r\n                this._bindings = this._bindings.filter(function(binding) {\r\n                    var removing = (!fn || fn === binding.fn) &&\r\n                        (!matcher || matcher.test(binding.options.ns)) &&\r\n                        (!options.selector || options.selector == binding.options.selector);\r\n\r\n                    return !removing;\r\n                });\r\n                if (this._bindings.length == 0) {\r\n                    if (this._target.removeEventListener) {\r\n                        this._target.removeEventListener(realEvent(this._event), this._listener, false);\r\n                    }\r\n                    this._listener = null;\r\n                }\r\n            }\r\n        }),\r\n        EventsHandler = langx.klass({\r\n            init: function(elm) {\r\n                this._target = elm;\r\n                this._handler = {};\r\n            },\r\n\r\n            // add a event listener\r\n            // selector Optional\r\n            register: function(event, callback, options) {\r\n                // Seperate the event from the namespace\r\n                var parsed = parse(event),\r\n                    event = parsed.type,\r\n                    specialEvent = specialEvents[event],\r\n                    bindingEvent = specialEvent && (specialEvent.bindType || specialEvent.bindEventName);\r\n\r\n                var events = this._handler;\r\n\r\n                // Check if there is already a handler for this event\r\n                if (events[event] === undefined) {\r\n                    events[event] = new EventBindings(this._target, bindingEvent || event);\r\n                }\r\n\r\n                // Register the new callback function\r\n                events[event].add(callback, langx.mixin({\r\n                    ns: parsed.ns\r\n                }, options)); // options:{selector:xxx}\r\n            },\r\n\r\n            // remove a event listener\r\n            unregister: function(event, fn, options) {\r\n                // Check for parameter validtiy\r\n                var events = this._handler,\r\n                    parsed = parse(event);\r\n                event = parsed.type;\r\n\r\n                if (event) {\r\n                    var listener = events[event];\r\n\r\n                    if (listener) {\r\n                        listener.remove(fn, langx.mixin({\r\n                            ns: parsed.ns\r\n                        }, options));\r\n                    }\r\n                } else {\r\n                    //remove all events\r\n                    for (event in events) {\r\n                        var listener = events[event];\r\n                        listener.remove(fn, langx.mixin({\r\n                            ns: parsed.ns\r\n                        }, options));\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n\r\n        findHandler = function(elm) {\r\n            var id = uid(elm),\r\n                handler = handlers[id];\r\n            if (!handler) {\r\n                handler = handlers[id] = new EventsHandler(elm);\r\n            }\r\n            return handler;\r\n        };\r\n\r\n\r\n    /*   \r\n     * Remove all event handlers from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     */\r\n    function clear(elm) {\r\n        var handler = findHandler(elm);\r\n\r\n        handler.unregister();\r\n\r\n        return this;\r\n    }\r\n\r\n    var focusedQueue = [],\r\n        focuser = langx.loop(function(){\r\n            for (var i = 0; i<focusedQueue.length; i++) {\r\n                trigger(focusedQueue[i],\"focused\");\r\n            }\r\n            focusedQueue = [];\r\n        });\r\n\r\n    focuser.start();\r\n\r\n\r\n    function focused(elm) {\r\n        if (!focusedQueue.includes(elm)) {\r\n            focusedQueue.push(elm)\r\n        }\r\n    }\r\n\r\n    /*   \r\n     * Remove an event handler for one or more events from the specified element.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional } selector\r\n     * @param {Function} callback\r\n     */\r\n    function off(elm, events, selector, callback) {\r\n        var $this = this\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                off(elm, type, selector, fn);\r\n            })\r\n            return $this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !isHandler(callback) && callback !== false) {\r\n            callback = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        if (events) events.forEach(function(event) {\r\n\r\n            handler.unregister(event, callback, {\r\n                selector: selector,\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Attach an event handler function for one or more events to the selected elements.\r\n     * @param {HTMLElement} elm  \r\n     * @param {String} events\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     * @param {Boolean　Optional} one\r\n     */\r\n    function on(elm, events, selector, data, callback, ctx,one) {\r\n\r\n        var autoRemove, delegator;\r\n        if (langx.isPlainObject(events)) {\r\n            langx.each(events, function(type, fn) {\r\n                on(elm, type, selector, data, fn, one);\r\n            });\r\n            return this;\r\n        }\r\n\r\n        if (!langx.isString(selector) && !isHandler(callback)) {\r\n            one = ctx;\r\n            ctx = callback;\r\n            callback = data;\r\n            data = selector;\r\n            selector = undefined;\r\n        }\r\n\r\n        if (isHandler(data)) {\r\n            one = ctx;\r\n            ctx = callback;\r\n            callback = data;\r\n            data = undefined;\r\n        }\r\n\r\n        if (langx.isBoolean(ctx)) {\r\n            one = ctx;\r\n            ctx = undefined;\r\n        }\r\n        if (callback === false) {\r\n            callback = langx.returnFalse;\r\n        }\r\n\r\n        if (typeof events == \"string\") {\r\n            if (events.indexOf(\",\") > -1) {\r\n                events = events.split(\",\");\r\n            } else {\r\n                events = events.split(/\\s/);\r\n            }\r\n        }\r\n\r\n        var handler = findHandler(elm);\r\n\r\n        events.forEach(function(event) {\r\n            if (event == \"ready\") {\r\n                return ready(callback);\r\n            }\r\n            handler.register(event, callback, {\r\n                data: data,\r\n                selector: selector,\r\n                ctx : ctx,\r\n                one: !!one\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Attach a handler to an event for the elements. The handler is executed at most once per \r\n     * @param {HTMLElement} elm  \r\n     * @param {String} event\r\n     * @param {String　Optional} selector\r\n     * @param {Anything Optional} data\r\n     * @param {Function} callback\r\n     */\r\n    function one(...args) {\r\n        on(...args, true);\r\n\r\n        return this;\r\n    }\r\n\r\n    /*   \r\n     * Prevents propagation and clobbers the default action of the passed event. The same as calling event.preventDefault() and event.stopPropagation(). \r\n     * @param {String} event\r\n     */\r\n    function stop(event) {\r\n        if (window.document.all) {\r\n            event.keyCode = 0;\r\n        }\r\n        if (event.preventDefault) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n        }\r\n        return this;\r\n    }\r\n    /*   \r\n     * Execute all handlers and behaviors attached to the matched elements for the given event  \r\n     * @param {String} evented\r\n     * @param {String} type\r\n     * @param {Array or PlainObject } args\r\n     */\r\n    function trigger(evented, type, args) {\r\n        var e;\r\n        if (type instanceof Event) {\r\n            e = type;\r\n        } else {\r\n            e = createEvent(type, args);\r\n        }\r\n        e._args = args;\r\n\r\n        var fn = (evented.dispatchEvent || evented.trigger);\r\n        if (fn) {\r\n            fn.call(evented, e);\r\n        } else {\r\n            console.warn(\"The evented parameter is not a eventable object\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n    /*   \r\n     * Specify a function to execute when the DOM is fully loaded.  \r\n     * @param {Function} callback\r\n     */\r\n    function ready(callback) {\r\n        // need to check if document.body exists for IE as that browser reports\r\n        // document ready when it hasn't yet created the body elm\r\n        if (readyRE.test(document.readyState) && document.body) {\r\n            langx.defer(callback);\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', callback, false);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    var resizedQueue = [],\r\n        resizer = langx.loop(function(){\r\n            for (var i = 0; i<resizedQueue.length; i++) {\r\n                trigger(resizedQueue[i],\"resized\");\r\n            }\r\n            resizedQueue = [];\r\n        });\r\n\r\n    resizer.start();\r\n\r\n\r\n    function resized(elm) {\r\n        if (!resizedQueue.includes(elm)) {\r\n            resizedQueue.push(elm)\r\n        }\r\n    }\r\n\r\n\r\n    var keyCodeLookup = {\r\n        \"backspace\": 8,\r\n        \"comma\": 188,\r\n        \"delete\": 46,\r\n        \"down\": 40,\r\n        \"end\": 35,\r\n        \"enter\": 13,\r\n        \"escape\": 27,\r\n        \"home\": 36,\r\n        \"left\": 37,\r\n        \"page_down\": 34,\r\n        \"page_up\": 33,\r\n        \"period\": 190,\r\n        \"right\": 39,\r\n        \"space\": 32,\r\n        \"tab\": 9,\r\n        \"up\": 38\r\n    };\r\n    //example:\r\n    //shortcuts(elm).add(\"CTRL+ALT+SHIFT+X\",function(){console.log(\"test!\")});\r\n    function shortcuts(elm) {\r\n\r\n        var registry = datax.data(elm, \"shortcuts\");\r\n        if (!registry) {\r\n            registry = {};\r\n            datax.data(elm, \"shortcuts\", registry);\r\n            var run = function(shortcut, event) {\r\n                var n = event.metaKey || event.ctrlKey;\r\n                if (shortcut.ctrl == n && shortcut.alt == event.altKey && shortcut.shift == event.shiftKey) {\r\n                    if (event.keyCode == shortcut.keyCode || event.charCode && event.charCode == shortcut.charCode) {\r\n                        event.preventDefault();\r\n                        if (\"keydown\" == event.type) {\r\n                            shortcut.fn(event);\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            };\r\n            on(elm, \"keyup keypress keydown\", function(event) {\r\n                if (!(/INPUT|TEXTAREA/.test(event.target.nodeName))) {\r\n                    for (var key in registry) {\r\n                        run(registry[key], event);\r\n                    }\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n        return {\r\n            add: function(pattern, fn) {\r\n                var shortcutKeys;\r\n                if (pattern.indexOf(\",\") > -1) {\r\n                    shortcutKeys = pattern.toLowerCase().split(\",\");\r\n                } else {\r\n                    shortcutKeys = pattern.toLowerCase().split(\" \");\r\n                }\r\n                shortcutKeys.forEach(function(shortcutKey) {\r\n                    var setting = {\r\n                        fn: fn,\r\n                        alt: false,\r\n                        ctrl: false,\r\n                        shift: false\r\n                    };\r\n                    shortcutKey.split(\"+\").forEach(function(key) {\r\n                        switch (key) {\r\n                            case \"alt\":\r\n                            case \"ctrl\":\r\n                            case \"shift\":\r\n                                setting[key] = true;\r\n                                break;\r\n                            default:\r\n                                setting.charCode = key.charCodeAt(0);\r\n                                setting.keyCode = keyCodeLookup[key] || key.toUpperCase().charCodeAt(0);\r\n                        }\r\n                    });\r\n                    var regKey = (setting.ctrl ? \"ctrl\" : \"\") + \",\" + (setting.alt ? \"alt\" : \"\") + \",\" + (setting.shift ? \"shift\" : \"\") + \",\" + setting.keyCode;\r\n                    registry[regKey] = setting;\r\n                })\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n    if (browser.support.transition) {\r\n        specialEvents.transitionEnd = {\r\n//          handle: function (e) {\r\n//            if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)\r\n//          },\r\n          bindType: browser.support.transition.end,\r\n          delegateType: browser.support.transition.end\r\n        }        \r\n    }\r\n\r\n    function isNativeEvent(events) {\r\n        if (langx.isString(events)) {\r\n            return !!NativeEvents[events];\r\n        } else if (langx.isArray(events)) {\r\n            for (var i=0; i<events.length; i++) {\r\n                if (NativeEvents[events]) {\r\n                    return false;\r\n                }\r\n            }\r\n            return events.length > 0;\r\n        }\r\n    }\r\n\r\n\r\n    function eventer() {\r\n        return eventer;\r\n    }\r\n\r\n    langx.mixin(eventer, {\r\n        NativeEvents : NativeEvents,\r\n        \r\n        clear,\r\n        \r\n        create: createEvent,\r\n\r\n        focused,\r\n\r\n        keys: keyCodeLookup,\r\n\r\n        isNativeEvent,\r\n\r\n        off: off,\r\n\r\n        on: on,\r\n\r\n        one: one,\r\n\r\n        proxy: createProxy,\r\n\r\n        ready: ready,\r\n\r\n        resized,\r\n        \r\n        shortcuts: shortcuts,\r\n\r\n        special: specialEvents,\r\n\r\n        stop: stop,\r\n\r\n        trigger: trigger\r\n\r\n    });\r\n\r\n    each(NativeEvents,function(name){\r\n        eventer[name] = function(elm,selector,data,callback) {\r\n            if (arguments.length>1) {\r\n                return this.on(elm,name,selector,data,callback);\r\n            } else {\r\n                if (name == \"focus\") {\r\n                    if (elm.focus) {\r\n                        elm.focus();\r\n                    }\r\n                } else if (name == \"blur\") {\r\n                    if (elm.blur) {\r\n                        elm.blur();\r\n                    }\r\n                } else if (name == \"click\") {\r\n                    if (elm.click) {\r\n                        elm.click();\r\n                    }\r\n                } else {\r\n                    this.trigger(elm,name);\r\n                }\r\n\r\n                return this;\r\n            }\r\n        };\r\n    });\r\n\r\n    return skylark.attach(\"domx.eventer\",eventer);\r\n});\ndefine('skylark-domx-eventer/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./eventer\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\"        \r\n],function(langx,eventer,velm,$){\r\n\r\n    var delegateMethodNames = [\r\n        \"off\",\r\n        \"on\",\r\n        \"one\",\r\n        \"trigger\"\r\n    ];\r\n\r\n    langx.each(eventer.NativeEvents,function(name){\r\n        delegateMethodNames.push(name);\r\n    });\r\n\r\n    // from ./eventer\r\n    velm.delegate(delegateMethodNames, eventer);\r\n\r\n    langx.each(delegateMethodNames,function(i,name){\r\n        $.fn[name] = $.wraps.wrapper_every_act(eventer[name],eventer);\r\n    });\r\n\r\n\r\n    /*\r\n    $.fn.on = $.wraps.wrapper_every_act(eventer.on, eventer);\r\n\r\n    $.fn.off = $.wraps.wrapper_every_act(eventer.off, eventer);\r\n\r\n    $.fn.trigger = $.wraps.wrapper_every_act(eventer.trigger, eventer);\r\n\r\n    ('focusin focusout focus blur load resize scroll unload click dblclick ' +\r\n        'mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave ' +\r\n        'change select keydown keypress keyup error transitionEnd').split(' ').forEach(function(event) {\r\n        $.fn[event] = $.wraps.wrapper_every_act(eventer[event],eventer);\r\n    });\r\n\r\n    $.fn.one = function(event, selector, data, callback) {\r\n        if (!langx.isString(selector) && !langx.isFunction(callback)) {\r\n            callback = data;\r\n            data = selector;\r\n            selector = null;\r\n        }\r\n\r\n        if (langx.isFunction(data)) {\r\n            callback = data;\r\n            data = null;\r\n        }\r\n\r\n        return this.on(event, selector, data, callback, 1)\r\n    }; \r\n    */\r\n\r\n    $.ready = eventer.ready;\r\n\r\n    return eventer;\r\n});\ndefine('skylark-domx-eventer', ['skylark-domx-eventer/main'], function (main) { return main; });\n\n"]}