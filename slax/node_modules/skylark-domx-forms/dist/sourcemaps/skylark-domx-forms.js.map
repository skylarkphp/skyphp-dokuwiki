{"version":3,"sources":["skylark-domx-forms.js"],"names":["define","skylark","attach","langx","$","forms","updateKeyValueArray","prop","value","obj","current","undefined","push","updateTypes","checked","selected","update","element","elementIndex","valueIndex","callback","property","type","nodeName","toLowerCase","getElementType","elementProperty","each","types","inArray","getPropertyToUpdate","call","fields","options","index","option","multiple","selectedIndex","field","defaultOptions","change","noop","complete","deserialize","formElm","data","isFunction","extend","normalized","rPlus","isPlainObject","name","isArray","split","decodeURIComponent","replace","normalizeData","elementsByName","filter","map","this","elements","makeArray","get","getFieldsByName","values","datax","serializeArray","result","add","forEach","_","disabled","val","serializeObject","i","o","n","v","concat","serialize","elm","encodeURIComponent","join","velm","delegate","fn","wraps","wrapper_value","main"],"mappings":"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","file":"../skylark-domx-forms.js","sourcesContent":["define('skylark-domx-forms/forms',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.forms\",{});\r\n});\ndefine('skylark-domx-forms/deserialize',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"./forms\"\r\n],function(langx,$,forms){\r\n  /**\r\n   * Updates a key/valueArray with the given property and value. Values will always be stored as arrays.\r\n   *\r\n   * @param prop The property to add the value to.\r\n   * @param value The value to add.\r\n   * @param obj The object to update.\r\n   * @returns {object} Updated object.\r\n   */\r\n  function updateKeyValueArray( prop, value, obj ) {\r\n    var current = obj[ prop ];\r\n\r\n    if ( current === undefined ) {\r\n      obj[ prop ] = [ value ];\r\n    } else {\r\n      current.push( value );\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * Get all of the fields contained within the given elements by name.\r\n   *\r\n   * @param formElm The form element.\r\n   * @param filter Custom filter to apply to the list of fields.\r\n   * @returns {object} All of the fields contained within the given elements, keyed by name.\r\n   */\r\n  function getFieldsByName(formElm, filter ) {\r\n    var elementsByName = {};\r\n\r\n    // Extract fields from elements\r\n    var fields = $(formElm)\r\n      .map(function convertFormToElements() {\r\n        return this.elements ? langx.makeArray( this.elements ) : this;\r\n      })\r\n      .filter( filter || \":input:not(:disabled)\" )\r\n      .get();\r\n\r\n    langx.each( fields, function( index, field ) {\r\n      updateKeyValueArray( field.name, field, elementsByName );\r\n    });\r\n\r\n    return elementsByName;\r\n  }\r\n\r\n  /**\r\n   * Figure out the type of an element. Input type will be used first, falling back to nodeName.\r\n   *\r\n   * @param element DOM element to check type of.\r\n   * @returns {string} The element's type.\r\n   */\r\n  function getElementType( element ) {\r\n    return ( element.type || element.nodeName ).toLowerCase();\r\n  }\r\n\r\n  /**\r\n   * Normalize the provided data into a key/valueArray store.\r\n   *\r\n   * @param data The data provided by the user to the plugin.\r\n   * @returns {object} The data normalized into a key/valueArray store.\r\n   */\r\n  function normalizeData( data ) {\r\n    var normalized = {};\r\n    var rPlus = /\\+/g;\r\n\r\n    // Convert data from .serializeObject() notation\r\n    if ( langx.isPlainObject( data ) ) {\r\n      langx.extend( normalized, data );\r\n\r\n      // Convert non-array values into an array\r\n      langx.each( normalized, function( name, value ) {\r\n        if ( !langx.isArray( value ) ) {\r\n          normalized[ name ] = [ value ];\r\n        }\r\n      });\r\n\r\n    // Convert data from .serializeArray() notation\r\n    } else if ( langx.isArray( data ) ) {\r\n      langx.each( data, function( index, field ) {\r\n        updateKeyValueArray( field.name, field.value, normalized );\r\n      });\r\n\r\n    // Convert data from .serialize() notation\r\n    } else if ( typeof data === \"string\" ) {\r\n      langx.each( data.split( \"&\" ), function( index, field ) {\r\n        var current = field.split( \"=\" );\r\n        var name = decodeURIComponent( current[ 0 ].replace( rPlus, \"%20\" ) );\r\n        var value = decodeURIComponent( current[ 1 ].replace( rPlus, \"%20\" ) );\r\n        updateKeyValueArray( name, value, normalized );\r\n      });\r\n    }\r\n\r\n    return normalized;\r\n  }\r\n\r\n  /**\r\n   * Map of property name -> element types.\r\n   *\r\n   * @type {object}\r\n   */\r\n  var updateTypes = {\r\n    checked: [\r\n      \"radio\",\r\n      \"checkbox\"\r\n    ],\r\n    selected: [\r\n      \"option\",\r\n      \"select-one\",\r\n      \"select-multiple\"\r\n    ],\r\n    value: [\r\n      \"button\",\r\n      \"color\",\r\n      \"date\",\r\n      \"datetime\",\r\n      \"datetime-local\",\r\n      \"email\",\r\n      \"hidden\",\r\n      \"month\",\r\n      \"number\",\r\n      \"password\",\r\n      \"range\",\r\n      \"reset\",\r\n      \"search\",\r\n      \"submit\",\r\n      \"tel\",\r\n      \"text\",\r\n      \"textarea\",\r\n      \"time\",\r\n      \"url\",\r\n      \"week\"\r\n    ]\r\n  };\r\n\r\n  /**\r\n   * Get the property to update on an element being updated.\r\n   *\r\n   * @param element The DOM element to get the property for.\r\n   * @returns The name of the property to update if element is supported, otherwise `undefined`.\r\n   */\r\n  function getPropertyToUpdate( element ) {\r\n    var type = getElementType( element );\r\n    var elementProperty = undefined;\r\n\r\n    langx.each( updateTypes, function( property, types ) {\r\n      if ( langx.inArray( type, types ) > -1 ) {\r\n        elementProperty = property;\r\n        return false;\r\n      }\r\n    });\r\n\r\n    return elementProperty;\r\n  }\r\n\r\n  /**\r\n   * Update the element based on the provided data.\r\n   *\r\n   * @param element The DOM element to update.\r\n   * @param elementIndex The index of this element in the list of elements with the same name.\r\n   * @param value The serialized element value.\r\n   * @param valueIndex The index of the value in the list of values for elements with the same name.\r\n   * @param callback A function to call if the value of an element was updated.\r\n   */\r\n  function update( element, elementIndex, value, valueIndex, callback ) {\r\n    var property = getPropertyToUpdate( element );\r\n\r\n    // Handle value inputs\r\n    // If there are multiple value inputs with the same name, they will be populated by matching indexes.\r\n    if ( property == \"value\" && elementIndex == valueIndex ) {\r\n      element.value = value;\r\n      callback.call( element, value );\r\n\r\n    // Handle select menus, checkboxes and radio buttons\r\n    } else if ( property == \"checked\" || property == \"selected\" ) {\r\n      var fields = [];\r\n\r\n      // Extract option fields from select menus\r\n      if ( element.options ) {\r\n        langx.each( element.options, function( index, option ) {\r\n          fields.push( option );\r\n        });\r\n\r\n      } else {\r\n        fields.push( element );\r\n      }\r\n\r\n      // #37: Remove selection from multiple select menus before deserialization\r\n      if ( element.multiple && valueIndex == 0 ) {\r\n        element.selectedIndex = -1;\r\n      }\r\n\r\n      langx.each( fields, function( index, field ) {\r\n        if ( field.value == value ) {\r\n          field[ property ] = true;\r\n          callback.call( field, value );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default plugin options.\r\n   *\r\n   * @type {object}\r\n   */\r\n  var defaultOptions = {\r\n    change: langx.noop,\r\n    complete: langx.noop\r\n  };\r\n\r\n  /**\r\n   * The $.deserialize function.\r\n   *\r\n   * @param data The data to deserialize.\r\n   * @param options Additional options.\r\n   * @returns {jQuery} The jQuery object that was provided to the plugin.\r\n   */\r\n  function deserialize(formElm,data, options ) {\r\n\r\n    // Backwards compatible with old arguments: data, callback\r\n    if ( langx.isFunction( options ) ) {\r\n      options = { complete: options };\r\n    }\r\n\r\n    options = langx.extend( defaultOptions, options || {} );\r\n    data = normalizeData( data );\r\n\r\n    var elementsByName = getFieldsByName( formElm, options.filter );\r\n\r\n    langx.each( data, function( name, values ) {\r\n      langx.each( elementsByName[ name ], function( elementIndex, element ) {\r\n        langx.each( values, function( valueIndex, value ) {\r\n          update( element, elementIndex, value, valueIndex, options.change );\r\n        });\r\n      });\r\n    });\r\n\r\n    options.complete.call( formElm );\r\n\r\n    return this;\r\n  };\r\n\r\n  return forms.deserialize = deserialize;\r\n});\ndefine('skylark-domx-forms/serialize-array',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-data\",\r\n  \"./forms\"\r\n],function(langx,datax,forms){\r\n    function serializeArray(formElm) {\r\n        var name, type, result = [],\r\n            add = function(value) {\r\n                if (value.forEach) return value.forEach(add)\r\n                result.push({ name: name, value: value })\r\n            }\r\n        langx.each(formElm.elements, function(_, field) {\r\n            type = field.type, name = field.name\r\n            if (name && field.nodeName.toLowerCase() != 'fieldset' &&\r\n                !field.disabled && type != 'submit' && type != 'reset' && type != 'button' && type != 'file' &&\r\n                ((type != 'radio' && type != 'checkbox') || field.checked))\r\n                add(datax.val(field))\r\n        })\r\n        return result\r\n    };\r\n\r\n    return forms.serializeArray = serializeArray;\r\n});\r\n\ndefine('skylark-domx-forms/serialize-object',[\r\n  \"skylark-langx/langx\",\r\n  \"./forms\",\r\n  \"./serialize-array\"\r\n],function(langx,forms,serializeArray){\r\n\r\n  function serializeObject(formElm){\r\n    var obj = {};\r\n    \r\n    langx.each(serializeArray(formElm), function(i,o){\r\n      var n = o.name,\r\n        v = o.value;\r\n        \r\n        obj[n] = obj[n] === undefined ? v\r\n          : langx.isArray( obj[n] ) ? obj[n].concat( v )\r\n          : [ obj[n], v ];\r\n    });\r\n    \r\n    return obj;\r\n  }\r\n\r\n  return forms.serializeObject = serializeObject;\r\n});  \ndefine('skylark-domx-forms/serialize',[\r\n  \"skylark-langx/langx\",\r\n  \"./forms\",\r\n  \"./serialize-array\"\r\n],function(langx,forms,serializeArray){\r\n    function serialize(formElm) {\r\n        var result = []\r\n        serializeArray(formElm).forEach(function(elm) {\r\n            result.push(encodeURIComponent(elm.name) + '=' + encodeURIComponent(elm.value))\r\n        })\r\n        return result.join('&')\r\n    }\r\n\r\n    return forms.serialize = serialize;\r\n});\ndefine('skylark-domx-forms/main',[\r\n\t\"./forms\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",\r\n    \"./deserialize\",\r\n    \"./serialize-array\",\r\n    \"./serialize-object\",\r\n    \"./serialize\"\r\n],function(forms,velm,$){\r\n\r\n    // from ./data\r\n    velm.delegate([\r\n        \"deserialize\",\r\n        \"serializeArray\",\r\n        \"serializeObject\",\r\n        \"serialize\"\r\n    ], forms);\r\n\r\n    $.fn.deserialize = $.wraps.wrapper_value(forms.deserialize, forms, forms.deserialize);\r\n    $.fn.serializeArray = $.wraps.wrapper_value(forms.serializeArray, forms, forms.serializeArray);\r\n    $.fn.serializeObject = $.wraps.wrapper_value(forms.serializeObject, forms, forms.serializeObject);\r\n    $.fn.serialize = $.wraps.wrapper_value(forms.serialize, forms, forms.serialize);\r\n\r\n\r\n\treturn forms;\r\n});\ndefine('skylark-domx-forms', ['skylark-domx-forms/main'], function (main) { return main; });\n\n"]}