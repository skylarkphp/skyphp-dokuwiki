{"version":3,"sources":["geom.js"],"names":["define","skylark","langx","noder","styler","cachedScrollbarWidth","rootNodeRE","px","toPixel","offsetParent","borderExtents","elm","isWindow","left","top","right","bottom","s","getComputedStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","undefined","test","nodeName","getBoundingClientRect","parent","parentOffset","mex","marginExtents","pbex","relativePosition","scrollTop","scrollLeft","this","boundingRect","size","window","document","documentElement","body","innerHeight","innerWidth","height","width","clientSize","dimension","clientWidth","clientHeight","isBorderBox","css","props","bex","pex","paddingExtents","getDocumentSize","doc","max","Math","scrollWidth","offsetWidth","scrollHeight","offsetHeight","marginLeft","marginTop","marginRight","marginBottom","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","obj","w","ownerDocument","defaultView","pageXOffset","pageYOffset","offset","relativeRect","value","nodeType","scrollingElement","hasScrollLeft","scrollTo","scrollY","hasScrollTop","scrollX","isDocument","viewportSize","win","geom","mixin","contentRect","cs","hasScrollbar","inview","cushion","r","o","calibrate","vsize","marginRect","me","marginSize","pageRect","round","scrollbarWidth","w1","w2","div","createFragment","innerDiv","childNodes","append","remove","scrollIntoView","align","x","y","parentWidth","parentHeight","parentElm","parentNode","pos","rootElm","offsetLeft","offsetTop","getOffset","scrollBy","testAxis","result","attach"],"mappings":"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","file":"../geom.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n  'use strict'\r\n\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n\r\n\r\n    function hasScrollbar() {\r\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n    //viewport coordinate\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top + (scrollTop(parent) || 0),\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left + (scrollLeft(parent) || 0)\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            if (elm == window || elm == document.documentElement || elm == document.body){\r\n                return {\r\n                    top : 0,\r\n                    left : 0,\r\n                    bottom : window.innerHeight,\r\n                    right : window.innerWidth,\r\n                    height : window.innerHeight,\r\n                    width : window.innerWidth\r\n                };\r\n            } else if (elm.getBoundingClientRect) {\r\n                return elm.getBoundingClientRect();\r\n            }\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth,\r\n                height: elm.clientHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function height(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).height;\r\n        } else {\r\n            size(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function inview(elm, cushion) {\r\n        function calibrate(coords, cushion) {\r\n            var o = {};\r\n            cushion = +cushion || 0;\r\n            o.width = (o.right = coords.right + cushion) - (o.left = coords.left - cushion);\r\n            o.height = (o.bottom = coords.bottom + cushion) - (o.top = coords.top - cushion);\r\n            return o;\r\n        }\r\n\r\n        var r = calibrate(boundingRect(elm), cushion),\r\n            vsize = viewportSize();\r\n\r\n        return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= vsize.height && r.left <= vsize.width;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = size(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left - mex.left\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm);\r\n\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            };\r\n\r\n            /*\r\n            if (langx.isDefined(props.top)) {\r\n                props.top = props.top + (scrollTop(parent) || 0);\r\n            }\r\n\r\n            if (langx.isDefined(props.left)) {\r\n                props.left = props.left + (scrollLeft(parent) || 0);\r\n            } \r\n            */ \r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n\r\n\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function scrollBy(elm, x, y) {\r\n        elm.scrollLeft += x;\r\n        elm.scrollTop += y;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function size(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    function viewportSize(win) {\r\n        win = win || window;\r\n\r\n        return boundingRect(win);\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function width(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).width;\r\n        } else {\r\n            size(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function testAxis(elm) {\r\n       \r\n        var top = elm.offsetTop;\r\n        var left = elm.offsetLeft;\r\n        var width = elm.offsetWidth;\r\n        var height = elm.offsetHeight;\r\n\r\n        while(elm.offsetParent) {\r\n            elm = elm.offsetParent;\r\n            top += elm.offsetTop;\r\n            left += elm.offsetLeft;\r\n        }\r\n\r\n        var result = {x: 0, y: 0};\r\n\r\n        //Over the top of the window\r\n        if(top < window.pageYOffset) {\r\n            result.y = top - window.pageYOffset;\r\n        }\r\n        //Bellow the window\r\n        else if((top + height) > (window.pageYOffset + window.innerHeight))\r\n        {\r\n            result.y = (top + height) - (window.pageYOffset + window.innerHeight);\r\n        }\r\n\r\n        //Left to the window\r\n        if(left < window.pageXOffset) {\r\n            result.x = left - window.pageXOffset;\r\n        }\r\n        //Right to the window\r\n        else if((left + width) > (window.pageXOffset + window.innerWidth))\r\n        {\r\n            result.x = (left + width) - (window.pageXOffset + window.innerWidth);\r\n        }\r\n\r\n        return result;\r\n    };    \r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n        //viewport coordinate\r\n        boundingPosition: boundingPosition,\r\n\r\n        boundingRect: boundingRect,\r\n\r\n        clientHeight: clientHeight,\r\n\r\n        clientSize: clientSize,\r\n\r\n        clientWidth: clientWidth,\r\n\r\n        contentRect: contentRect,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        hasScrollbar,\r\n\r\n        height: height,\r\n\r\n        inview,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect: marginRect,\r\n\r\n        marginSize: marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        scrollBy,\r\n            \r\n        size: size,\r\n\r\n        testAxis,\r\n\r\n        viewportSize,\r\n\r\n        width: width\r\n    });\r\n\r\n\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});"]}