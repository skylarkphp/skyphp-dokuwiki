{"version":3,"sources":["skylark-domx-geom.js"],"names":["define","skylark","langx","noder","styler","cachedScrollbarWidth","rootNodeRE","px","toPixel","offsetParent","borderExtents","elm","isWindow","left","top","right","bottom","s","getComputedStyle","borderLeftWidth","borderTopWidth","borderRightWidth","borderBottomWidth","boundingPosition","coords","undefined","test","nodeName","getBoundingClientRect","parent","parentOffset","mex","marginExtents","pbex","relativePosition","scrollTop","scrollLeft","this","boundingRect","size","window","document","documentElement","body","innerHeight","innerWidth","height","width","clientSize","dimension","clientWidth","clientHeight","isBorderBox","css","props","bex","pex","paddingExtents","getDocumentSize","doc","max","Math","scrollWidth","offsetWidth","scrollHeight","offsetHeight","marginLeft","marginTop","marginRight","marginBottom","paddingLeft","paddingTop","paddingRight","paddingBottom","pagePosition","obj","w","ownerDocument","defaultView","pageXOffset","pageYOffset","offset","relativeRect","value","nodeType","scrollingElement","hasScrollLeft","scrollTo","scrollY","hasScrollTop","scrollX","isDocument","viewportSize","win","geom","mixin","contentRect","cs","hasScrollbar","inview","cushion","r","o","calibrate","vsize","marginRect","me","marginSize","pageRect","round","scrollbarWidth","w1","w2","div","createFragment","innerDiv","childNodes","append","remove","scrollIntoView","align","x","y","parentWidth","parentHeight","parentElm","parentNode","pos","rootElm","offsetLeft","offsetTop","getOffset","scrollBy","testAxis","result","attach","abs","rhorizontal","rvertical","roffset","rposition","rpercent","getOffsets","offsets","parseFloat","parseCss","element","property","parseInt","positions","fit","position","data","newOverRight","within","withinOffset","outerWidth","collisionPosLeft","collisionPosition","overLeft","overRight","collisionWidth","newOverBottom","outerHeight","collisionPosTop","overTop","overBottom","collisionHeight","flip","newOverLeft","myOffset","my","elemWidth","atOffset","at","targetWidth","newOverTop","elemHeight","targetHeight","flipfit","apply","arguments","posit","options","targetOffset","basePosition","dimensions","target","extend","of","withinElement","hasOffset","msize","scrollInfo","overflowX","overflowY","hasOverflowX","getScrollInfo","collision","split","raw","preventDefault","pageY","pageX","each","horizontalOffset","verticalOffset","length","concat","exec","elem","using","i","dir","feedback","horizontal","vertical","important","call","scrollToTop","speed","callback","scrollFrom","freq","interval","setInterval","clearInterval","debounce","velm","$","delegate","pageSize","fn","wraps","wrapper_value","clone","wrapper_map","forEach","Dimension","replace","m","toUpperCase","margin","el","cb","idx","mb","main"],"mappings":";;;;;;;g4BAAAA,EAAA,0BACA,wBACA,sBACA,qBACA,uBACA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,aAEA,IAGAC,EAHAC,EAAA,mBACAC,EAAAL,EAAAM,QACAC,EAAAN,EAAAM,aAsCA,SAAAC,EAAAC,GACA,GAAAR,EAAAS,SAAAD,GACA,OACAE,KAAA,EACAC,IAAA,EACAC,MAAA,EACAC,OAAA,GAEA,IAAAC,EAAAC,iBAAAP,GACA,OACAE,KAAAN,EAAAU,EAAAE,gBAAAR,GACAG,IAAAP,EAAAU,EAAAG,eAAAT,GACAI,MAAAR,EAAAU,EAAAI,iBAAAV,GACAK,OAAAT,EAAAU,EAAAK,kBAAAX,IAUA,SAAAY,EAAAZ,EAAAa,GACA,QAAAC,IAAAD,EACA,OAAAlB,EAAAoB,KAAAf,EAAAgB,WAAAb,IAAA,EAAAD,KAAA,GAAAF,EAAAiB,wBAEA,IACAC,EAAApB,EAAAE,GAEAmB,EAAAP,EAAAM,GACAE,EAAAC,EAAArB,GACAsB,EAAAvB,EAAAmB,GA3EA,OAJAK,EAAAvB,GACAG,IAAAU,EAAAV,IAAAgB,EAAAhB,IAAAiB,EAAAjB,IAAAmB,EAAAnB,KAAAqB,EAAAN,IAAA,GACAhB,KAAAW,EAAAX,KAAAiB,EAAAjB,KAAAkB,EAAAlB,KAAAoB,EAAApB,MAAAuB,EAAAP,IAAA,KAEAQ,KASA,SAAAC,EAAA3B,EAAAa,GACA,YAAAC,IAAAD,GAcAD,EAAAZ,EAAAa,GACAe,EAAA5B,EAAAa,GACAa,MAfA1B,GAAA6B,QAAA7B,GAAA8B,SAAAC,iBAAA/B,GAAA8B,SAAAE,MAEA7B,IAAA,EACAD,KAAA,EACAG,OAAAwB,OAAAI,YACA7B,MAAAyB,OAAAK,WACAC,OAAAN,OAAAI,YACAG,MAAAP,OAAAK,YAEAlC,EAAAiB,sBACAjB,EAAAiB,6BADA,EA8BA,SAAAoB,EAAArC,EAAAsC,GACA,QAAAxB,GAAAwB,EACA,OACAF,MAAApC,EAAAuC,YACAJ,OAAAnC,EAAAwC,cAGA,IAAAC,EAAA,eAAAhD,EAAAiD,IAAA1C,EAAA,cACA2C,GACAP,MAAAE,EAAAF,MACAD,OAAAG,EAAAH,QAEA,GAAAM,EAUA,CACA,IAAAG,EAAA7C,EAAAC,QAEAc,IAAA6B,EAAAP,QACAO,EAAAP,MAAAO,EAAAP,MAAAQ,EAAA1C,KAAA0C,EAAAxC,YAGAU,IAAA6B,EAAAR,SACAQ,EAAAR,OAAAQ,EAAAR,OAAAS,EAAAzC,IAAAyC,EAAAvC,YAlBA,CACA,IAAAwC,EAAAC,EAAA9C,QAEAc,IAAA6B,EAAAP,QACAO,EAAAP,MAAAO,EAAAP,MAAAS,EAAA3C,KAAA2C,EAAAzC,YAGAU,IAAA6B,EAAAR,SACAQ,EAAAR,OAAAQ,EAAAR,OAAAU,EAAA1C,IAAA0C,EAAAxC,QAeA,OADAZ,EAAAiD,IAAA1C,EAAA2C,GACAjB,KAkDA,SAAAqB,EAAAC,GACA,IAAAjB,EAAAiB,EAAAjB,gBACAC,EAAAgB,EAAAhB,KACAiB,EAAAC,KAAAD,IACAE,EAAAF,EAAAlB,EAAAoB,YAAAnB,EAAAmB,aACAZ,EAAAU,EAAAlB,EAAAQ,YAAAP,EAAAO,aACAa,EAAAH,EAAAlB,EAAAqB,YAAApB,EAAAoB,aACAC,EAAAJ,EAAAlB,EAAAsB,aAAArB,EAAAqB,cACAb,EAAAS,EAAAlB,EAAAS,aAAAR,EAAAQ,cACAc,EAAAL,EAAAlB,EAAAuB,aAAAtB,EAAAsB,cAEA,OACAlB,MAAAe,EAAAC,EAAAb,EAAAY,EACAhB,OAAAkB,EAAAC,EAAAd,EAAAa,GA0CA,SAAAhC,EAAArB,GACA,GAAAR,EAAAS,SAAAD,GACA,OACAE,KAAA,EACAC,IAAA,EACAC,MAAA,EACAC,OAAA,GAGA,IAAAC,EAAAC,iBAAAP,GACA,OACAE,KAAAN,EAAAU,EAAAiD,YACApD,IAAAP,EAAAU,EAAAkD,WACApD,MAAAR,EAAAU,EAAAmD,aACApD,OAAAT,EAAAU,EAAAoD,eAgCA,SAAAZ,EAAA9C,GACA,GAAAR,EAAAS,SAAAD,GACA,OACAE,KAAA,EACAC,IAAA,EACAC,MAAA,EACAC,OAAA,GAGA,IAAAC,EAAAC,iBAAAP,GACA,OACAE,KAAAN,EAAAU,EAAAqD,aACAxD,IAAAP,EAAAU,EAAAsD,YACAxD,MAAAR,EAAAU,EAAAuD,cACAxD,OAAAT,EAAAU,EAAAwD,gBAUA,SAAAC,EAAA/D,EAAAa,GACA,QAAAC,IAAAD,EAAA,CACA,IAAAmD,EAAAhE,EAAAiB,wBACAgD,EAAAjE,EAAAkE,cAAAC,YACA,OACAjE,KAAA8D,EAAA9D,KAAA+D,EAAAG,YACAjE,IAAA6D,EAAA7D,IAAA8D,EAAAI,aAGA,IACAnD,EAAApB,EAAAE,GAEAmB,EAAA4C,EAAA7C,GACAE,EAAAC,EAAArB,GACAsB,EAAAvB,EAAAmB,GAMA,OAJAK,EAAAvB,GACAG,IAAAU,EAAAV,IAAAgB,EAAAhB,IAAAiB,EAAAjB,IAAAmB,EAAAnB,IACAD,KAAAW,EAAAX,KAAAiB,EAAAjB,KAAAkB,EAAAlB,KAAAoB,EAAApB,OAEAwB,KAgCA,SAAAH,EAAAvB,EAAAa,GACA,QAAAC,GAAAD,EAAA,CACA,IACAK,EAAApB,EAAAE,GAEAsE,EAAA1D,EAAAZ,GACAmB,EAAAP,EAAAM,GACAE,EAAAC,EAAArB,GACAsB,EAAAvB,EAAAmB,GAGA,OACAf,IAAAmE,EAAAnE,IAAAgB,EAAAhB,IAAAmB,EAAAnB,IAAAiB,EAAAjB,IACAD,KAAAoE,EAAApE,KAAAiB,EAAAjB,KAAAoB,EAAApB,KAAAkB,EAAAlB,MAGA,IACAgB,EAAApB,EAAAE,GAEA2C,GACAxC,IAAAU,EAAAV,IACAD,KAAAW,EAAAX,MAmBA,MANA,UAAAT,EAAAiD,IAAA1C,EAAA,cACA2C,EAAA,SAAA,YAIAlD,EAAAiD,IAAA1C,EAAA2C,GACAjB,KASA,SAAA6C,EAAAvE,EAAAa,GACA,QAAAC,IAAAD,EAAA,CACA,IACAK,EAAApB,EAAAE,GAEAsE,EAAA3C,EAAA3B,GACAmB,EAAAP,EAAAM,GAEAI,GADAD,EAAArB,GACAD,EAAAmB,IAGA,OACAf,IAAAmE,EAAAnE,IAAAgB,EAAAhB,IAAAmB,EAAAnB,IACAD,KAAAoE,EAAApE,KAAAiB,EAAAjB,KAAAoB,EAAApB,KACAkC,MAAAkC,EAAAlC,MACAD,OAAAmC,EAAAnC,QAKA,OAFAZ,EAAAvB,EAAAa,GACAe,EAAA5B,EAAAa,GACAa,KAmDA,SAAAD,EAAAzB,EAAAwE,GACA,IAAAxE,EAAAyE,SACAzE,EAAAA,EAAAmE,YACAnE,GAAA8B,SAAAE,OACAhC,EAAA8B,SAAA4C,kBAAA5C,SAAAC,iBAEA,IAAA4C,EAAA,eAAA3E,EACA,YAAAc,IAAA0D,EACAG,EAAA3E,EAAAyB,WAAAzB,EAAAoE,aAEAO,EACA3E,EAAAyB,WAAA+C,EAEAxE,EAAA4E,SAAAJ,EAAAxE,EAAA6E,SAEAnD,MAQA,SAAAF,EAAAxB,EAAAwE,GACA,IAAAxE,EAAAyE,SACAzE,EAAAA,EAAAmE,YACAnE,GAAA8B,SAAAE,OACAhC,EAAA8B,SAAA4C,kBAAA5C,SAAAC,iBAGA,IAAA+C,EAAA,cAAA9E,EAEA,YAAAc,IAAA0D,EACAM,EAAA9E,EAAAwB,UAAAxB,EAAAqE,aAEAS,EACA9E,EAAAwB,UAAAgD,EAEAxE,EAAA4E,SAAA5E,EAAA+E,QAAAP,GAEA9C,MAeA,SAAAE,EAAA5B,EAAAsC,GACA,QAAAxB,GAAAwB,EACA,OAAA/C,EAAAU,SAAAD,IAEAoC,MAAApC,EAAAkC,WACAC,OAAAnC,EAAAiC,aAGA1C,EAAAyF,WAAAhF,GACA+C,EAAAjB,WAGAM,MAAApC,EAAAoD,YACAjB,OAAAnC,EAAAsD,cAIA,IAAAb,EAAA,eAAAhD,EAAAiD,IAAA1C,EAAA,cACA2C,GACAP,MAAAE,EAAAF,MACAD,OAAAG,EAAAH,QAEA,IAAAM,EAAA,CACA,IAAAI,EAAAC,EAAA9C,GACA4C,EAAA7C,EAAAC,QAEAc,IAAA6B,EAAAP,OAAA,KAAAO,EAAAP,OAAA,OAAAO,EAAAP,QACAO,EAAAP,MAAAO,EAAAP,MAAAS,EAAA3C,KAAA2C,EAAAzC,MAAAwC,EAAA1C,KAAA0C,EAAAxC,YAGAU,IAAA6B,EAAAR,QAAA,KAAAQ,EAAAR,QAAA,OAAAQ,EAAAR,SACAQ,EAAAR,OAAAQ,EAAAR,OAAAU,EAAA1C,IAAA0C,EAAAxC,OAAAuC,EAAAzC,IAAAyC,EAAAvC,QAIA,OADAZ,EAAAiD,IAAA1C,EAAA2C,GACAjB,KAKA,SAAAuD,EAAAC,GAGA,OAAAvD,EAFAuD,EAAAA,GAAArD,QA2DA,SAAAsD,IACA,OAAAA,EAmEA,OAhEA5F,EAAA6F,MAAAD,GACApF,cAAAA,EAEAa,iBAAAA,EAEAe,aAAAA,EAEAa,aAnjBA,SAAAxC,EAAAwE,GACA,YAAA1D,GAAA0D,EACAnC,EAAArC,GAAAmC,OAEAE,EAAArC,GACAmC,OAAAqC,KAgjBAnC,WAAAA,EAEAE,YAxfA,SAAAvC,EAAAwE,GACA,YAAA1D,GAAA0D,EACAnC,EAAArC,GAAAoC,OAEAC,EAAArC,GACAoC,MAAAoC,IAEA9C,OAmfA2D,YA3eA,SAAArF,GACA,IAAAsF,EAAAjD,EAAArC,GACA6C,EAAAC,EAAA9C,GAQA,OACAE,KAAA2C,EAAA3C,KACAC,IAAA0C,EAAA1C,IACAiC,MAAAkD,EAAAlD,MAAAS,EAAA3C,KAAA2C,EAAAzC,MACA+B,OAAAmD,EAAAnD,OAAAU,EAAA1C,IAAA0C,EAAAxC,SA+dA0C,gBAAAA,EAEAwC,aA7jBA,WACA,OAAAzD,SAAAE,KAAAqB,cAAAxB,OAAAI,aAAAH,SAAAC,gBAAAS,eA8jBAL,OArcA,SAAAnC,EAAAwE,GACA,YAAA1D,GAAA0D,EACA5C,EAAA5B,GAAAmC,QAEAP,EAAA5B,GACAmC,OAAAqC,IAEA9C,OAgcA8D,OA1bA,SAAAxF,EAAAyF,GASA,IAAAC,EARA,SAAA7E,EAAA4E,GACA,IAAAE,KAIA,OAHAF,GAAAA,GAAA,EACAE,EAAAvD,OAAAuD,EAAAvF,MAAAS,EAAAT,MAAAqF,IAAAE,EAAAzF,KAAAW,EAAAX,KAAAuF,GACAE,EAAAxD,QAAAwD,EAAAtF,OAAAQ,EAAAR,OAAAoF,IAAAE,EAAAxF,IAAAU,EAAAV,IAAAsF,GACAE,EAGAC,CAAAjE,EAAA3B,GAAAyF,GACAI,EAAAZ,IAEA,QAAAS,GAAAA,EAAArF,QAAA,GAAAqF,EAAAtF,OAAA,GAAAsF,EAAAvF,KAAA0F,EAAA1D,QAAAuD,EAAAxF,MAAA2F,EAAAzD,OAgbAf,cAAAA,EAEAyE,WAvZA,SAAA9F,GACA,IAAAgE,EAAAO,EAAAvE,GACA+F,EAAA1E,EAAArB,GAEA,OACAE,KAAA8D,EAAA9D,KACAC,IAAA6D,EAAA7D,IACAiC,MAAA4B,EAAA5B,MAAA2D,EAAA7F,KAAA6F,EAAA3F,MACA+B,OAAA6B,EAAA7B,OAAA4D,EAAA5F,IAAA4F,EAAA1F,SAiZA2F,WA5YA,SAAAhG,GACA,IAAAgE,EAAApC,EAAA5B,GACA+F,EAAA1E,EAAArB,GAEA,OACAoC,MAAA4B,EAAA5B,MAAA2D,EAAA7F,KAAA6F,EAAA3F,MACA+B,OAAA6B,EAAA7B,OAAA4D,EAAA5F,IAAA4F,EAAA1F,SAwYAP,aAAAA,EAEAgD,eAAAA,EAGAiB,aAAAA,EAEAkC,SAlVA,SAAAjG,EAAAa,GACA,QAAAC,IAAAD,EAAA,CACA,IAAAmD,EAAAhE,EAAAiB,wBACAgD,EAAAjE,EAAAkE,cAAAC,YACA,OACAjE,KAAA8D,EAAA9D,KAAA+D,EAAAG,YACAjE,IAAA6D,EAAA7D,IAAA8D,EAAAI,YACAjC,MAAAc,KAAAgD,MAAAlC,EAAA5B,OACAD,OAAAe,KAAAgD,MAAAlC,EAAA7B,SAKA,OAFA4B,EAAA/D,EAAAa,GACAe,EAAA5B,EAAAa,GACAa,MAwUAH,iBAAAA,EAEAgD,aAAAA,EAEA4B,eAlnBA,WACA,QAAArF,IAAApB,EACA,OAAAA,EAEA,IAAA0G,EAAAC,EACAC,EAAA9G,EAAA+G,eAAA,6IAEA,GACAC,EAAAF,EAAAG,WAAA,GAEAjH,EAAAkH,OAAA5E,SAAAE,KAAAsE,GAEAF,EAAAI,EAAApD,YACA3D,EAAAiD,IAAA4D,EAAA,WAAA,UAEAD,EAAAG,EAAApD,YAEAgD,IAAAC,IACAA,EAAAC,EAAA,GAAA/D,aAKA,OAFA/C,EAAAmH,OAAAL,GAEA5G,EAAA0G,EAAAC,GA6lBAO,eAvPA,SAAA5G,EAAA6G,GAcA,IACAC,EAAAC,EAAA3E,EAAAD,EAAA6E,EAAAC,EADAC,EAAAlH,EAAAmH,WAEAC,EAfA,SAAApH,EAAAqH,GACA,IAAAP,EAAAC,EAAA7F,EAAAlB,EAEA8G,EAAAC,EAAA,EACA,KAAA7F,GAAAA,GAAAmG,GAAAnG,EAAAuD,UACAqC,GAAA5F,EAAAoG,YAAA,EACAP,GAAA7F,EAAAqG,WAAA,EACArG,EAAAA,EAAApB,aAGA,OAAAgH,EAAAA,EAAAC,EAAAA,GAKAS,CAAAxH,EAAAkH,GAEAJ,EAAAM,EAAAN,EACAC,EAAAK,EAAAL,EACA3E,EAAApC,EAAAoD,YACAjB,EAAAnC,EAAAsD,aACA0D,EAAAE,EAAA3E,YACA0E,EAAAC,EAAA1E,aAEA,OAAAqE,GACAC,GAAAE,EAAA5E,EACA2E,GAAAE,EAAA9E,GACA,UAAA0E,IACAC,GAAAE,EAAA,EAAA5E,EAAA,EACA2E,GAAAE,EAAA,EAAA9E,EAAA,GAMA,OAHA+E,EAAAzF,WAAAqF,EACAI,EAAA1F,UAAAuF,EAEArF,MAqNAD,WAAAA,EAEAD,UAAAA,EAEAiG,SAtKA,SAAAzH,EAAA8G,EAAAC,GACA/G,EAAAyB,YAAAqF,EACA9G,EAAAwB,WAAAuF,GAsKAnF,KAAAA,EAEA8F,SAjGA,SAAA1H,GAEA,IAAAG,EAAAH,EAAAuH,UACArH,EAAAF,EAAAsH,WACAlF,EAAApC,EAAAoD,YACAjB,EAAAnC,EAAAsD,aAEA,KAAAtD,EAAAF,cACAE,EAAAA,EAAAF,aACAK,GAAAH,EAAAuH,UACArH,GAAAF,EAAAsH,WAGA,IAAAK,GAAAb,EAAA,EAAAC,EAAA,GAGA5G,EAAA0B,OAAAwC,YACAsD,EAAAZ,EAAA5G,EAAA0B,OAAAwC,YAGAlE,EAAAgC,EAAAN,OAAAwC,YAAAxC,OAAAI,cAEA0F,EAAAZ,EAAA5G,EAAAgC,GAAAN,OAAAwC,YAAAxC,OAAAI,cAIA/B,EAAA2B,OAAAuC,YACAuD,EAAAb,EAAA5G,EAAA2B,OAAAuC,YAGAlE,EAAAkC,EAAAP,OAAAuC,YAAAvC,OAAAK,aAEAyF,EAAAb,EAAA5G,EAAAkC,GAAAP,OAAAuC,YAAAvC,OAAAK,aAGA,OAAAyF,GAgEA1C,aAAAA,EAEA7C,MAhHA,SAAApC,EAAAwE,GACA,YAAA1D,GAAA0D,EACA5C,EAAA5B,GAAAoC,OAEAR,EAAA5B,GACAoC,MAAAoC,IAEA9C,SA8GApC,EAAAsI,OAAA,YAAAzC,KAEA9F,EAAA,2BACA,sBACA,qBACA,sBACA,UACA,SAAAE,EAAAC,EAAAC,EAAA0F,GACA,aAEA,IAAAlC,EAAAC,KAAAD,IACA4E,EAAA3E,KAAA2E,IACAC,EAAA,oBACAC,EAAA,oBACAC,EAAA,wBACAC,EAAA,OACAC,EAAA,KAEA,SAAAC,EAAAC,EAAAhG,EAAAD,GACA,OACAkG,WAAAD,EAAA,KAAAF,EAAAnH,KAAAqH,EAAA,IAAAhG,EAAA,IAAA,GACAiG,WAAAD,EAAA,KAAAF,EAAAnH,KAAAqH,EAAA,IAAAjG,EAAA,IAAA,IAIA,SAAAmG,EAAAC,EAAAC,GACA,OAAAC,SAAAhJ,EAAAiD,IAAA6F,EAAAC,GAAA,KAAA,EAqPA,IAAAE,GACAC,KACAzI,KAAA,SAAA0I,EAAAC,GACA,IAMAC,EANAC,EAAAF,EAAAE,OACAC,EAAAD,EAAA9I,SAAA8I,EAAAtH,WAAAsH,EAAAzE,OAAApE,KACA+I,EAAAF,EAAA3G,MACA8G,EAAAN,EAAA1I,KAAA2I,EAAAM,kBAAA5F,WACA6F,EAAAJ,EAAAE,EACAG,EAAAH,EAAAL,EAAAS,eAAAL,EAAAD,EAIAH,EAAAS,eAAAL,EAGAG,EAAA,GAAAC,GAAA,GACAP,EAAAF,EAAA1I,KAAAkJ,EAAAP,EAAAS,eAAAL,EACAD,EACAJ,EAAA1I,MAAAkJ,EAAAN,GAIAF,EAAA1I,KADAmJ,EAAA,GAAAD,GAAA,EACAJ,EAIAI,EAAAC,EACAL,EAAAC,EAAAJ,EAAAS,eAEAN,EAKAI,EAAA,EACAR,EAAA1I,MAAAkJ,EAGAC,EAAA,EACAT,EAAA1I,MAAAmJ,EAIAT,EAAA1I,KAAA+C,EAAA2F,EAAA1I,KAAAgJ,EAAAN,EAAA1I,OAGAC,IAAA,SAAAyI,EAAAC,GACA,IAMAU,EANAR,EAAAF,EAAAE,OACAC,EAAAD,EAAA9I,SAAA8I,EAAAvH,UAAAuH,EAAAzE,OAAAnE,IACAqJ,EAAAX,EAAAE,OAAA5G,OACAsH,EAAAb,EAAAzI,IAAA0I,EAAAM,kBAAA3F,UACAkG,EAAAV,EAAAS,EACAE,EAAAF,EAAAZ,EAAAe,gBAAAJ,EAAAR,EAIAH,EAAAe,gBAAAJ,EAGAE,EAAA,GAAAC,GAAA,GACAJ,EAAAX,EAAAzI,IAAAuJ,EAAAb,EAAAe,gBAAAJ,EACAR,EACAJ,EAAAzI,KAAAuJ,EAAAH,GAIAX,EAAAzI,IADAwJ,EAAA,GAAAD,GAAA,EACAV,EAIAU,EAAAC,EACAX,EAAAQ,EAAAX,EAAAe,gBAEAZ,EAKAU,EAAA,EACAd,EAAAzI,KAAAuJ,EAGAC,EAAA,EACAf,EAAAzI,KAAAwJ,EAIAf,EAAAzI,IAAA8C,EAAA2F,EAAAzI,IAAAsJ,EAAAb,EAAAzI,OAIA0J,MACA3J,KAAA,SAAA0I,EAAAC,GACA,IAkBAC,EACAgB,EAnBAf,EAAAF,EAAAE,OACAC,EAAAD,EAAAzE,OAAApE,KAAA6I,EAAAtH,WACAwH,EAAAF,EAAA3G,MACAkF,EAAAyB,EAAA9I,SAAA8I,EAAAtH,WAAAsH,EAAAzE,OAAApE,KACAgJ,EAAAN,EAAA1I,KAAA2I,EAAAM,kBAAA5F,WACA6F,EAAAF,EAAA5B,EACA+B,EAAAH,EAAAL,EAAAS,eAAAL,EAAA3B,EACAyC,EAAA,SAAAlB,EAAAmB,GAAA,IACAnB,EAAAoB,UACA,UAAApB,EAAAmB,GAAA,GACAnB,EAAAoB,UACA,EACAC,EAAA,SAAArB,EAAAsB,GAAA,GACAtB,EAAAuB,YACA,UAAAvB,EAAAsB,GAAA,IACAtB,EAAAuB,YACA,EACA9F,GAAA,EAAAuE,EAAAvE,OAAA,GAIA8E,EAAA,IACAN,EAAAF,EAAA1I,KAAA6J,EAAAG,EAAA5F,EAAAuE,EAAAS,eACAL,EAAAD,GACA,GAAAF,EAAAjB,EAAAuB,MACAR,EAAA1I,MAAA6J,EAAAG,EAAA5F,GAEA+E,EAAA,KACAS,EAAAlB,EAAA1I,KAAA2I,EAAAM,kBAAA5F,WAAAwG,EACAG,EAAA5F,EAAAgD,GACA,GAAAO,EAAAiC,GAAAT,KACAT,EAAA1I,MAAA6J,EAAAG,EAAA5F,IAIAnE,IAAA,SAAAyI,EAAAC,GACA,IAmBAwB,EACAd,EApBAR,EAAAF,EAAAE,OACAC,EAAAD,EAAAzE,OAAAnE,IAAA4I,EAAAvH,UACAgI,EAAAT,EAAA5G,OACAoF,EAAAwB,EAAA9I,SAAA8I,EAAAvH,UAAAuH,EAAAzE,OAAAnE,IACAsJ,EAAAb,EAAAzI,IAAA0I,EAAAM,kBAAA3F,UACAkG,EAAAD,EAAAlC,EACAoC,EAAAF,EAAAZ,EAAAe,gBAAAJ,EAAAjC,EACApH,EAAA,QAAA0I,EAAAmB,GAAA,GACAD,EAAA5J,GACA0I,EAAAyB,WACA,WAAAzB,EAAAmB,GAAA,GACAnB,EAAAyB,WACA,EACAJ,EAAA,QAAArB,EAAAsB,GAAA,GACAtB,EAAA0B,aACA,WAAA1B,EAAAsB,GAAA,IACAtB,EAAA0B,aACA,EACAjG,GAAA,EAAAuE,EAAAvE,OAAA,GAGAoF,EAAA,IACAH,EAAAX,EAAAzI,IAAA4J,EAAAG,EAAA5F,EAAAuE,EAAAe,gBACAJ,EAAAR,GACA,GAAAO,EAAA1B,EAAA6B,MACAd,EAAAzI,KAAA4J,EAAAG,EAAA5F,GAEAqF,EAAA,KACAU,EAAAzB,EAAAzI,IAAA0I,EAAAM,kBAAA3F,UAAAuG,EAAAG,EACA5F,EAAAiD,GACA,GAAAM,EAAAwC,GAAAV,KACAf,EAAAzI,KAAA4J,EAAAG,EAAA5F,KAKAkG,SACAtK,KAAA,WACAwI,EAAAmB,KAAA3J,KAAAuK,MAAA/I,KAAAgJ,WACAhC,EAAAC,IAAAzI,KAAAuK,MAAA/I,KAAAgJ,YAEAvK,IAAA,WACAuI,EAAAmB,KAAA1J,IAAAsK,MAAA/I,KAAAgJ,WACAhC,EAAAC,IAAAxI,IAAAsK,MAAA/I,KAAAgJ,cAKA,OAAAvF,EAAAwF,MAhWA,SAAA3K,EAAA4K,GAIA,IAAAV,EAAAE,EAAAG,EAAAM,EAAAC,EAAAC,EACAC,GAHAJ,EAAArL,EAAA0L,UAAAL,IAGAM,GACAnC,GAxBAR,EAwBAqC,EAAA7B,OAvBAoC,EAAA5C,GAAA1G,OACA5B,EAAAT,EAAAS,SAAAkL,GACAnG,IAAAmG,GAAA,IAAAA,EAAA1G,SACA2G,GAAAnL,IAAA+E,EACAqG,EAAAlG,EAAAa,WAAAmF,IAEA5C,QAAA4C,EACAlL,SAAAA,EACA+E,WAAAA,EACAV,OAAA8G,EAAAjG,EAAApB,aAAAwE,IAAArI,KAAA,EAAAC,IAAA,GACAsB,WAAA0D,EAAA1D,WAAA0J,GACA3J,UAAA2D,EAAA3D,UAAA2J,GACA/I,MAAAiJ,EAAAjJ,MACAD,OAAAkJ,EAAAlJ,SAWAmJ,EAxCA,SAAAvC,GACA,IAAAwC,EAAAxC,EAAA9I,UAAA8I,EAAA/D,WAAA,GACAvF,EAAAiD,IAAAqG,EAAAR,QAAA,cACAiD,EAAAzC,EAAA9I,UAAA8I,EAAA/D,WAAA,GACAvF,EAAAiD,IAAAqG,EAAAR,QAAA,cACAkD,EAAA,WAAAF,GACA,SAAAA,GAAAxC,EAAA3G,MAAA+C,EAAAhC,YAAA4F,EAAAR,SAGA,OACAnG,MAHA,WAAAoJ,GACA,SAAAA,GAAAzC,EAAA5G,OAAAgD,EAAA9B,aAAA0F,EAAAR,SAEApD,EAAAgB,iBAAA,EACAhE,OAAAsJ,EAAAtG,EAAAgB,iBAAA,GA6BAuF,CAAA3C,GACA4C,GAAAf,EAAAe,WAAA,QAAAC,MAAA,KACAxD,KA3BA,IAAAG,EACA4C,EACAlL,EACA+E,EACAoG,EACAC,EAtDAQ,EA8EAb,EAAAD,EA7EA,IAAAc,EAAApH,UAEA7C,KAAAA,KAAAiK,GACAvH,QAAAnE,IAAA,EAAAD,KAAA,IAGAV,EAAAS,SAAA4L,IAEAjK,KAAAuD,EAAAvD,KAAAiK,GACAvH,QACAnE,IAAAgF,EAAA3D,UAAAqK,GACA3L,KAAAiF,EAAA1D,WAAAoK,KAIAA,EAAAC,gBAEAlK,MACAQ,MAAA,EACAD,OAAA,GAEAmC,QACAnE,IAAA0L,EAAAE,MACA7L,KAAA2L,EAAAG,SAKApK,KAAAuD,EAAAvD,KAAAiK,GACAvH,OAAAa,EAAApB,aAAA8H,IAiDAb,EAAAc,iBAGAlB,EAAAT,GAAA,YAlFA,IAAA0B,EAoFAzB,EAAAW,EAAAnJ,KAAAQ,MACAmI,EAAAQ,EAAAnJ,KAAAO,OACA0I,EAAAE,EAAAzG,OAGAwG,EAAAvL,EAAA0L,UAAAJ,GAIAtL,EAAA0M,MAAA,KAAA,MAAA,WACA,IACAC,EACAC,EAFA/E,GAAAwD,EAAAlJ,OAAA,IAAAkK,MAAA,KAIA,IAAAxE,EAAAgF,SACAhF,EAAAU,EAAA/G,KAAAqG,EAAA,IACAA,EAAAiF,QAAA,WACAtE,EAAAhH,KAAAqG,EAAA,KACA,UAAAiF,OAAAjF,IACA,SAAA,WAEAA,EAAA,GAAAU,EAAA/G,KAAAqG,EAAA,IAAAA,EAAA,GAAA,SACAA,EAAA,GAAAW,EAAAhH,KAAAqG,EAAA,IAAAA,EAAA,GAAA,SAGA8E,EAAAlE,EAAAsE,KAAAlF,EAAA,IACA+E,EAAAnE,EAAAsE,KAAAlF,EAAA,IACAgB,EAAA1G,OACAwK,EAAAA,EAAA,GAAA,EACAC,EAAAA,EAAA,GAAA,GAIAvB,EAAAlJ,OACAuG,EAAAqE,KAAAlF,EAAA,IAAA,GACAa,EAAAqE,KAAAlF,EAAA,IAAA,MAKA,IAAAuE,EAAAS,SACAT,EAAA,GAAAA,EAAA,IAGA,UAAAf,EAAAT,GAAA,GACAW,EAAA5K,MAAAkK,EACA,WAAAQ,EAAAT,GAAA,KACAW,EAAA5K,MAAAkK,EAAA,GAGA,WAAAQ,EAAAT,GAAA,GACAW,EAAA3K,KAAAoK,EACA,WAAAK,EAAAT,GAAA,KACAW,EAAA3K,KAAAoK,EAAA,GAOA,OAJAL,EAAA/B,EAAAC,EAAA+B,GAAAC,EAAAG,GACAO,EAAA5K,MAAAgK,EAAA,GACAY,EAAA3K,KAAA+J,EAAA,GAEA,SAAAqC,GACA,IAAApD,EAAAqD,EACAnB,EAAAlG,EAAAa,WAAAuG,GACAtC,EAAAoB,EAAAjJ,MACAkI,EAAAe,EAAAlJ,OACAoB,EAAA+E,EAAAiE,EAAA,cACA/I,EAAA8E,EAAAiE,EAAA,aACAjD,EAAAW,EAAA1G,EAAA+E,EAAAiE,EAAA,eACAjB,EAAAlJ,MACAwH,EAAAU,EAAA9G,EAAA8E,EAAAiE,EAAA,gBACAjB,EAAAnJ,OACAyG,EAAArJ,EAAA0L,UAAAH,GACAf,EAAA5B,EAAAC,EAAA4B,GAAAqB,EAAAjJ,MAAAiJ,EAAAlJ,QAEA,UAAAyI,EAAAZ,GAAA,GACApB,EAAA1I,MAAA+J,EACA,WAAAW,EAAAZ,GAAA,KACApB,EAAA1I,MAAA+J,EAAA,GAGA,WAAAW,EAAAZ,GAAA,GACApB,EAAAzI,KAAAmK,EACA,WAAAM,EAAAZ,GAAA,KACApB,EAAAzI,KAAAmK,EAAA,GAGA1B,EAAA1I,MAAA6J,EAAA,GACAnB,EAAAzI,KAAA4J,EAAA,GAEAZ,GACA5F,WAAAA,EACAC,UAAAA,GAGAjE,EAAA0M,MAAA,OAAA,OAAA,SAAAQ,EAAAC,GACAhE,EAAAiD,EAAAc,KACA/D,EAAAiD,EAAAc,IAAAC,GAAA9D,GACAwB,YAAAA,EACAG,aAAAA,EACAN,UAAAA,EACAK,WAAAA,EACAnB,kBAAAA,EACAG,eAAAA,EACAM,gBAAAA,EACAtF,QAAA4F,EAAA,GAAAH,EAAA,GAAAG,EAAA,GAAAH,EAAA,IACAC,GAAAY,EAAAZ,GACAG,GAAAS,EAAAT,GACApB,OAAAA,EACAwD,KAAAA,MAKA3B,EAAA4B,QAGAA,EAAA,SAAA7J,GACA,IAAAzC,EAAA2K,EAAA3K,KAAA0I,EAAA1I,KACAE,EAAAF,EAAAkK,EAAAH,EACA9J,EAAA0K,EAAA1K,IAAAyI,EAAAzI,IACAE,EAAAF,EAAAoK,EAAAD,EACAqC,GACA3B,QACAzC,QAAAyC,EACA9K,KAAA2K,EAAA3K,KACAC,IAAA0K,EAAA1K,IACAiC,MAAAgI,EACAjI,OAAAoI,GAEAhC,SACAA,QAAAgE,EACArM,KAAA0I,EAAA1I,KACAC,IAAAyI,EAAAzI,IACAiC,MAAA6H,EACA9H,OAAAmI,GAEAsC,WAAAxM,EAAA,EAAA,OAAAF,EAAA,EAAA,QAAA,SACA2M,SAAAxM,EAAA,EAAA,MAAAF,EAAA,EAAA,SAAA,UAEAiK,EAAAH,GAAApC,EAAA3H,EAAAE,GAAAgK,IACAuC,EAAAC,WAAA,UAEArC,EAAAD,GAAAzC,EAAA1H,EAAAE,GAAAkK,IACAoC,EAAAE,SAAA,UAEA5J,EAAA4E,EAAA3H,GAAA2H,EAAAzH,IAAA6C,EAAA4E,EAAA1H,GAAA0H,EAAAxH,IACAsM,EAAAG,UAAA,aAEAH,EAAAG,UAAA,WAEAlC,EAAA4B,MAAAO,KAAArL,KAAAiB,EAAAgK,KAIAxH,EAAApB,aAAAwI,EAAAhN,EAAA0L,OAAArC,GAAA4D,MAAAA,KA9FA,CA+FAxM,MAsLAX,EAAA,iCACA,sBACA,sBACA,UACA,SAAAE,EAAAE,EAAA0F,GA6BA,OAAAA,EAAA6H,YArBA,SAAAhN,EAAAoH,EAAA6F,EAAAC,GACA,IAAAC,EAAA1E,SAAAzI,EAAAwB,WACAiL,EAAA,EAEAW,EAAA,IAAAH,EADA,EAEArI,EAAA6D,SAAArB,GAEAiG,EAAAC,YAAA,aACAb,GAEAW,IAAApN,EAAAwB,WAAAoD,EAAAuI,GAAAC,EAAAX,EAAAU,GAEAV,GAAAW,EAAA,IACAG,cAAAF,GACAH,GAAA3N,EAAAiO,SAAAN,EAAA,IAAA3N,KAXA,GAeA,OAAAmC,QAKArC,EAAA,0BACA,sBACA,SACA,oBACA,qBACA,UACA,iBACA,SAAAE,EAAA4F,EAAAsI,EAAAC,GAyHA,OAvHAD,EAAAE,UACA,gBACA,mBACA,eACA,eACA,aACA,cACA,cACA,SACA,gBACA,aACA,aACA,eACA,iBACA,eACA,WACA,mBACA,eACA,iBACA,aACA,YACA,WACA,SACAxI,GACAyI,SAAA,SAGAF,EAAAG,GAAAvJ,OAAAoJ,EAAAI,MAAAC,cAAA5I,EAAApB,aAAAoB,EAAAA,EAAApB,cAEA2J,EAAAG,GAAArM,UAAAkM,EAAAI,MAAAC,cAAA5I,EAAA3D,UAAA2D,GAEAuI,EAAAG,GAAApM,WAAAiM,EAAAI,MAAAC,cAAA5I,EAAA1D,WAAA0D,GAEAuI,EAAAG,GAAAjF,SAAA,SAAAgC,GACA,IAAAlJ,KAAA0K,OACA,OAAA1K,KAGA,GAAAkJ,EAKA,OAJAA,EAAAM,IAAAN,EAAAM,GAAAkB,UACAxB,EAAArL,EAAAyO,MAAApD,IACAM,GAAAN,EAAAM,GAAA,IAEAxJ,KAAAuK,KAAA,WACA9G,EAAAwF,MAAAjJ,KAAAkJ,KAGA,IAAA2B,EAAA7K,KAAA,GAEA,OAAAyD,EAAA5D,iBAAAgL,IAKAmB,EAAAG,GAAA/N,aAAA4N,EAAAI,MAAAG,YAAA9I,EAAArF,aAAAqF,GAGAuI,EAAAG,GAAAD,SAAAF,EAAAI,MAAAC,cAAA5I,EAAAvD,KAAAuD,GAEAuI,EAAAG,GAAAzL,MAAAsL,EAAAI,MAAAC,cAAA5I,EAAA/C,MAAA+C,EAAAA,EAAA/C,OAEAsL,EAAAG,GAAA1L,OAAAuL,EAAAI,MAAAC,cAAA5I,EAAAhD,OAAAgD,EAAAA,EAAAhD,QAEAuL,EAAAG,GAAAxL,WAAAqL,EAAAI,MAAAC,cAAA5I,EAAA9C,WAAA8C,EAAA9C,aAEA,QAAA,UAAA6L,QAAA,SAAA5L,GACA,IAAA6L,EAAA7L,EAAA8L,QAAA,IAAA,SAAAC,GACA,OAAAA,EAAA,GAAAC,gBAGAZ,EAAAG,GAAA,QAAAM,GAAA,SAAAI,EAAA/J,GAWA,GAVAkG,UAAA0B,OACA,kBAAAmC,IACA/J,EAAA+J,EACAA,GAAA,IAGAA,GAAA,EACA/J,OAAA1D,QAGAA,IAAA0D,EAAA,CACA,IAAAgK,EAAA9M,KAAA,GACA,IAAA8M,EACA,OAEA,IAAAC,EAAAtJ,EAAAvD,KAAA4M,GACA,GAAAD,EAAA,CACA,IAAAxI,EAAAZ,EAAA9D,cAAAmN,GACAC,EAAArM,MAAAqM,EAAArM,MAAA2D,EAAA7F,KAAA6F,EAAA3F,MACAqO,EAAAtM,OAAAsM,EAAAtM,OAAA4D,EAAA5F,IAAA4F,EAAA1F,OAEA,MAAA,UAAAiC,EAAAmM,EAAArM,MAAAqM,EAAAtM,OAEA,OAAAT,KAAAuK,KAAA,SAAAyC,EAAAF,GACA,IAAAG,KACA5I,EAAAZ,EAAA9D,cAAAmN,GACA,UAAAlM,GACAqM,EAAAvM,MAAAoC,EACA+J,IACAI,EAAAvM,MAAAuM,EAAAvM,MAAA2D,EAAA7F,KAAA6F,EAAA3F,SAGAuO,EAAAxM,OAAAqC,EACA+J,IACAI,EAAAxM,OAAAwM,EAAAxM,OAAA4D,EAAA5F,IAAA4F,EAAA1F,SAGA8E,EAAAvD,KAAA4M,EAAAG,QAOAjB,EAAAG,GAAA3L,WAAAwL,EAAAI,MAAAC,cAAA5I,EAAA5C,YAAA4C,EAAAA,EAAA5C,aAEAmL,EAAAG,GAAA5L,YAAAyL,EAAAI,MAAAC,cAAA5I,EAAA3C,aAAA2C,EAAAA,EAAA3C,cAEA2C,IAEA9F,EAAA,qBAAA,0BAAA,SAAAuP,GAAA,OAAAA","file":"../skylark-domx-geom.js","sourcesContent":["define('skylark-domx-geom/geom',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\"\r\n], function(skylark, langx, noder, styler) {\r\n  'use strict'\r\n\r\n    var rootNodeRE = /^(?:body|html)$/i,\r\n        px = langx.toPixel,\r\n        offsetParent = noder.offsetParent,\r\n        cachedScrollbarWidth;\r\n\r\n    function scrollbarWidth() {\r\n        if (cachedScrollbarWidth !== undefined) {\r\n            return cachedScrollbarWidth;\r\n        }\r\n        var w1, w2,\r\n            div = noder.createFragment(\"<div style=\" +\r\n                \"'display:block;position:absolute;width:200px;height:200px;overflow:hidden;'>\" +\r\n                \"<div style='height:300px;width:auto;'></div></div>\")[0],\r\n            innerDiv = div.childNodes[0];\r\n\r\n        noder.append(document.body, div);\r\n\r\n        w1 = innerDiv.offsetWidth;\r\n        styler.css(div, \"overflow\", \"scroll\");\r\n\r\n        w2 = innerDiv.offsetWidth;\r\n\r\n        if (w1 === w2) {\r\n            w2 = div[0].clientWidth;\r\n        }\r\n\r\n        noder.remove(div);\r\n\r\n        return (cachedScrollbarWidth = w1 - w2);\r\n    }\r\n\r\n\r\n    function hasScrollbar() {\r\n        return document.body.scrollHeight > (window.innerHeight || document.documentElement.clientHeight);\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each border of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function borderExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.borderLeftWidth, elm),\r\n            top: px(s.borderTopWidth, elm),\r\n            right: px(s.borderRightWidth, elm),\r\n            bottom: px(s.borderBottomWidth, elm)\r\n        }\r\n    }\r\n\r\n    //viewport coordinate\r\n    /*\r\n     * Get or set the viewport position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingPosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            return rootNodeRE.test(elm.nodeName) ? { top: 0, left: 0 } : elm.getBoundingClientRect();\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top + (scrollTop(parent) || 0),\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left + (scrollLeft(parent) || 0)\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the viewport rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function boundingRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            if (elm == window || elm == document.documentElement || elm == document.body){\r\n                return {\r\n                    top : 0,\r\n                    left : 0,\r\n                    bottom : window.innerHeight,\r\n                    right : window.innerWidth,\r\n                    height : window.innerHeight,\r\n                    width : window.innerWidth\r\n                };\r\n            } else if (elm.getBoundingClientRect) {\r\n                return elm.getBoundingClientRect();\r\n            }\r\n        } else {\r\n            boundingPosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the height of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function clientHeight(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).height;\r\n        } else {\r\n            return clientSize(elm, {\r\n                height: value\r\n            });\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientSize(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            return {\r\n                width: elm.clientWidth,\r\n                height: elm.clientHeight\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width - pex.left - pex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height - pex.top - pex.bottom;\r\n                }\r\n            } else {\r\n                var bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined) {\r\n                    props.width = props.width + bex.left + bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined) {\r\n                    props.height = props.height + bex.top + bex.bottom;\r\n                }\r\n\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n        return {\r\n            width: elm.clientWidth,\r\n            height: elm.clientHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get or set the width of the specified element client box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} dimension\r\n     */\r\n    function clientWidth(elm, value) {\r\n        if (value == undefined) {\r\n            return clientSize(elm).width;\r\n        } else {\r\n            clientSize(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get the rect of the specified element content box.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function contentRect(elm) {\r\n        var cs = clientSize(elm),\r\n            pex = paddingExtents(elm);\r\n\r\n\r\n        //// On Opera, offsetLeft includes the parent's border\r\n        //if(has(\"opera\")){\r\n        //    pe.l += be.l;\r\n        //    pe.t += be.t;\r\n        //}\r\n        return {\r\n            left: pex.left,\r\n            top: pex.top,\r\n            width: cs.width - pex.left - pex.right,\r\n            height: cs.height - pex.top - pex.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLDocument} doc\r\n     */\r\n    function getDocumentSize(doc) {\r\n        var documentElement = doc.documentElement,\r\n            body = doc.body,\r\n            max = Math.max,\r\n            scrollWidth = max(documentElement.scrollWidth, body.scrollWidth),\r\n            clientWidth = max(documentElement.clientWidth, body.clientWidth),\r\n            offsetWidth = max(documentElement.offsetWidth, body.offsetWidth),\r\n            scrollHeight = max(documentElement.scrollHeight, body.scrollHeight),\r\n            clientHeight = max(documentElement.clientHeight, body.clientHeight),\r\n            offsetHeight = max(documentElement.offsetHeight, body.offsetHeight);\r\n\r\n        return {\r\n            width: scrollWidth < offsetWidth ? clientWidth : scrollWidth,\r\n            height: scrollHeight < offsetHeight ? clientHeight : scrollHeight\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the document size.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function height(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).height;\r\n        } else {\r\n            size(elm, {\r\n                height: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    function inview(elm, cushion) {\r\n        function calibrate(coords, cushion) {\r\n            var o = {};\r\n            cushion = +cushion || 0;\r\n            o.width = (o.right = coords.right + cushion) - (o.left = coords.left - cushion);\r\n            o.height = (o.bottom = coords.bottom + cushion) - (o.top = coords.top - cushion);\r\n            return o;\r\n        }\r\n\r\n        var r = calibrate(boundingRect(elm), cushion),\r\n            vsize = viewportSize();\r\n\r\n        return !!r && r.bottom >= 0 && r.right >= 0 && r.top <= vsize.height && r.left <= vsize.width;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the widths of each margin of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function marginExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.marginLeft),\r\n            top: px(s.marginTop),\r\n            right: px(s.marginRight),\r\n            bottom: px(s.marginBottom),\r\n        }\r\n    }\r\n\r\n\r\n    function marginRect(elm) {\r\n        var obj = relativeRect(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            left: obj.left,\r\n            top: obj.top,\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n\r\n    function marginSize(elm) {\r\n        var obj = size(elm),\r\n            me = marginExtents(elm);\r\n\r\n        return {\r\n            width: obj.width + me.left + me.right,\r\n            height: obj.height + me.top + me.bottom\r\n        };\r\n    }\r\n\r\n    /*\r\n     * Get the widths of each padding of the specified element.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function paddingExtents(elm) {\r\n        if (noder.isWindow(elm)) {\r\n            return {\r\n                left : 0,\r\n                top : 0,\r\n                right : 0,\r\n                bottom : 0\r\n            }\r\n        }\r\n        var s = getComputedStyle(elm);\r\n        return {\r\n            left: px(s.paddingLeft),\r\n            top: px(s.paddingTop),\r\n            right: px(s.paddingRight),\r\n            bottom: px(s.paddingBottom),\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document position of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    //coordinate to the document\r\n    function pagePosition(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                parentOffset = pagePosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            relativePosition(elm, {\r\n                top: coords.top - parentOffset.top - mex.top - pbex.top,\r\n                left: coords.left - parentOffset.left - mex.left - pbex.left\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the document rect of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function pageRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var obj = elm.getBoundingClientRect(),\r\n                w = elm.ownerDocument.defaultView;\r\n            return {\r\n                left: obj.left + w.pageXOffset,\r\n                top: obj.top + w.pageYOffset,\r\n                width: Math.round(obj.width),\r\n                height: Math.round(obj.height)\r\n            }\r\n        } else {\r\n            pagePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the position of the specified element border box , relative to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    // coordinate relative to it's parent\r\n    function relativePosition(elm, coords) {\r\n        if (coords == undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingPosition(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left - mex.left\r\n            }\r\n        } else {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm);\r\n\r\n            var props = {\r\n                top: coords.top,\r\n                left: coords.left\r\n            };\r\n\r\n            /*\r\n            if (langx.isDefined(props.top)) {\r\n                props.top = props.top + (scrollTop(parent) || 0);\r\n            }\r\n\r\n            if (langx.isDefined(props.left)) {\r\n                props.left = props.left + (scrollLeft(parent) || 0);\r\n            } \r\n            */ \r\n\r\n            if (styler.css(elm, \"position\") == \"static\") {\r\n                props['position'] = \"relative\";\r\n            }\r\n\r\n\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Get or set the rect of the specified element border box , relatived to parent element.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject} coords\r\n     */\r\n    function relativeRect(elm, coords) {\r\n        if (coords === undefined) {\r\n            var // Get *real* offsetParent\r\n                parent = offsetParent(elm),\r\n                // Get correct offsets\r\n                offset = boundingRect(elm),\r\n                parentOffset = boundingPosition(parent),\r\n                mex = marginExtents(elm),\r\n                pbex = borderExtents(parent);\r\n\r\n            // Subtract parent offsets and element margins\r\n            return {\r\n                top: offset.top - parentOffset.top - pbex.top, // - mex.top,\r\n                left: offset.left - parentOffset.left - pbex.left, // - mex.left,\r\n                width: offset.width,\r\n                height: offset.height\r\n            }\r\n        } else {\r\n            relativePosition(elm, coords);\r\n            size(elm, coords);\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Scroll the specified element into view.\r\n     * @param {HTMLElement} elm\r\n     * @param {} align\r\n     */\r\n    function scrollIntoView(elm, align) {\r\n        function getOffset(elm, rootElm) {\r\n            var x, y, parent = elm;\r\n\r\n            x = y = 0;\r\n            while (parent && parent != rootElm && parent.nodeType) {\r\n                x += parent.offsetLeft || 0;\r\n                y += parent.offsetTop || 0;\r\n                parent = parent.offsetParent;\r\n            }\r\n\r\n            return { x: x, y: y };\r\n        }\r\n\r\n        var parentElm = elm.parentNode;\r\n        var x, y, width, height, parentWidth, parentHeight;\r\n        var pos = getOffset(elm, parentElm);\r\n\r\n        x = pos.x;\r\n        y = pos.y;\r\n        width = elm.offsetWidth;\r\n        height = elm.offsetHeight;\r\n        parentWidth = parentElm.clientWidth;\r\n        parentHeight = parentElm.clientHeight;\r\n\r\n        if (align == \"end\") {\r\n            x -= parentWidth - width;\r\n            y -= parentHeight - height;\r\n        } else if (align == \"center\") {\r\n            x -= (parentWidth / 2) - (width / 2);\r\n            y -= (parentHeight / 2) - (height / 2);\r\n        }\r\n\r\n        parentElm.scrollLeft = x;\r\n        parentElm.scrollTop = y;\r\n\r\n        return this;\r\n    }\r\n    /*\r\n     * Get or set the current horizontal position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollLeft(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n        var hasScrollLeft = \"scrollLeft\" in elm;\r\n        if (value === undefined) {\r\n            return hasScrollLeft ? elm.scrollLeft : elm.pageXOffset\r\n        } else {\r\n            if (hasScrollLeft) {\r\n                elm.scrollLeft = value;\r\n            } else {\r\n                elm.scrollTo(value, elm.scrollY);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n    /*\r\n     * Get or the current vertical position of the scroll bar for the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function scrollTop(elm, value) {\r\n        if (elm.nodeType === 9) {\r\n            elm = elm.defaultView;\r\n        } else if (elm == document.body) {\r\n            elm = document.scrollingElement  || document.documentElement;\r\n        }\r\n\r\n        var hasScrollTop = \"scrollTop\" in elm;\r\n\r\n        if (value === undefined) {\r\n            return hasScrollTop ? elm.scrollTop : elm.pageYOffset\r\n        } else {\r\n            if (hasScrollTop) {\r\n                elm.scrollTop = value;\r\n            } else {\r\n                elm.scrollTo(elm.scrollX, value);\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function scrollBy(elm, x, y) {\r\n        elm.scrollLeft += x;\r\n        elm.scrollTop += y;\r\n    }\r\n\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {PlainObject}dimension\r\n     */\r\n    function size(elm, dimension) {\r\n        if (dimension == undefined) {\r\n            if (langx.isWindow(elm)) {\r\n                return {\r\n                    width: elm.innerWidth,\r\n                    height: elm.innerHeight\r\n                }\r\n\r\n            } else if (langx.isDocument(elm)) {\r\n                return getDocumentSize(document);\r\n            } else {\r\n                return {\r\n                    width: elm.offsetWidth,\r\n                    height: elm.offsetHeight\r\n                }\r\n            }\r\n        } else {\r\n            var isBorderBox = (styler.css(elm, \"box-sizing\") === \"border-box\"),\r\n                props = {\r\n                    width: dimension.width,\r\n                    height: dimension.height\r\n                };\r\n            if (!isBorderBox) {\r\n                var pex = paddingExtents(elm),\r\n                    bex = borderExtents(elm);\r\n\r\n                if (props.width !== undefined && props.width !== \"\" && props.width !== null) {\r\n                    props.width = props.width - pex.left - pex.right - bex.left - bex.right;\r\n                }\r\n\r\n                if (props.height !== undefined && props.height !== \"\" && props.height !== null) {\r\n                    props.height = props.height - pex.top - pex.bottom - bex.top - bex.bottom;\r\n                }\r\n            }\r\n            styler.css(elm, props);\r\n            return this;\r\n        }\r\n    }\r\n\r\n\r\n    function viewportSize(win) {\r\n        win = win || window;\r\n\r\n        return boundingRect(win);\r\n    }\r\n\r\n    /*\r\n     * Get or set the size of the specified element border box.\r\n     * @param {HTMLElement} elm\r\n     * @param {Number} value\r\n     */\r\n    function width(elm, value) {\r\n        if (value == undefined) {\r\n            return size(elm).width;\r\n        } else {\r\n            size(elm, {\r\n                width: value\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function testAxis(elm) {\r\n       \r\n        var top = elm.offsetTop;\r\n        var left = elm.offsetLeft;\r\n        var width = elm.offsetWidth;\r\n        var height = elm.offsetHeight;\r\n\r\n        while(elm.offsetParent) {\r\n            elm = elm.offsetParent;\r\n            top += elm.offsetTop;\r\n            left += elm.offsetLeft;\r\n        }\r\n\r\n        var result = {x: 0, y: 0};\r\n\r\n        //Over the top of the window\r\n        if(top < window.pageYOffset) {\r\n            result.y = top - window.pageYOffset;\r\n        }\r\n        //Bellow the window\r\n        else if((top + height) > (window.pageYOffset + window.innerHeight))\r\n        {\r\n            result.y = (top + height) - (window.pageYOffset + window.innerHeight);\r\n        }\r\n\r\n        //Left to the window\r\n        if(left < window.pageXOffset) {\r\n            result.x = left - window.pageXOffset;\r\n        }\r\n        //Right to the window\r\n        else if((left + width) > (window.pageXOffset + window.innerWidth))\r\n        {\r\n            result.x = (left + width) - (window.pageXOffset + window.innerWidth);\r\n        }\r\n\r\n        return result;\r\n    };    \r\n\r\n    function geom() {\r\n        return geom;\r\n    }\r\n\r\n    langx.mixin(geom, {\r\n        borderExtents: borderExtents,\r\n        //viewport coordinate\r\n        boundingPosition: boundingPosition,\r\n\r\n        boundingRect: boundingRect,\r\n\r\n        clientHeight: clientHeight,\r\n\r\n        clientSize: clientSize,\r\n\r\n        clientWidth: clientWidth,\r\n\r\n        contentRect: contentRect,\r\n\r\n        getDocumentSize: getDocumentSize,\r\n\r\n        hasScrollbar,\r\n\r\n        height: height,\r\n\r\n        inview,\r\n\r\n        marginExtents: marginExtents,\r\n\r\n        marginRect: marginRect,\r\n\r\n        marginSize: marginSize,\r\n\r\n        offsetParent: offsetParent,\r\n\r\n        paddingExtents: paddingExtents,\r\n\r\n        //coordinate to the document\r\n        pagePosition: pagePosition,\r\n\r\n        pageRect: pageRect,\r\n\r\n        // coordinate relative to it's parent\r\n        relativePosition: relativePosition,\r\n\r\n        relativeRect: relativeRect,\r\n\r\n        scrollbarWidth: scrollbarWidth,\r\n\r\n        scrollIntoView: scrollIntoView,\r\n\r\n        scrollLeft: scrollLeft,\r\n\r\n        scrollTop: scrollTop,\r\n\r\n        scrollBy,\r\n            \r\n        size: size,\r\n\r\n        testAxis,\r\n\r\n        viewportSize,\r\n\r\n        width: width\r\n    });\r\n\r\n\r\n\r\n    return skylark.attach(\"domx.geom\", geom);\r\n});\ndefine('skylark-domx-geom/posit',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-styler\",\r\n    \"./geom\"\r\n],function(langx,noder,styler,geom){\r\n  'use strict'\r\n\r\n    var max = Math.max,\r\n        abs = Math.abs,\r\n        rhorizontal = /left|center|right/,\r\n        rvertical = /top|center|bottom/,\r\n        roffset = /[\\+\\-]\\d+(\\.[\\d]+)?%?/,\r\n        rposition = /^\\w+/,\r\n        rpercent = /%$/;\r\n\r\n    function getOffsets( offsets, width, height ) {\r\n        return [\r\n            parseFloat( offsets[ 0 ] ) * ( rpercent.test( offsets[ 0 ] ) ? width / 100 : 1 ),\r\n            parseFloat( offsets[ 1 ] ) * ( rpercent.test( offsets[ 1 ] ) ? height / 100 : 1 )\r\n        ];\r\n    }\r\n\r\n    function parseCss( element, property ) {\r\n        return parseInt( styler.css( element, property ), 10 ) || 0;\r\n    }\r\n\r\n    function getDimensions( raw ) {\r\n        if ( raw.nodeType === 9 ) {\r\n            return {\r\n                size: size(raw),\r\n                offset: { top: 0, left: 0 }\r\n            };\r\n        }\r\n        if ( noder.isWindow( raw ) ) {\r\n            return {\r\n                size: geom.size(raw),\r\n                offset: { \r\n                    top: geom.scrollTop(raw), \r\n                    left: geom.scrollLeft(raw) \r\n                }\r\n            };\r\n        }\r\n        if ( raw.preventDefault ) {\r\n            return {\r\n                size : {\r\n                    width: 0,\r\n                    height: 0\r\n                },\r\n                offset: { \r\n                    top: raw.pageY, \r\n                    left: raw.pageX \r\n                }\r\n            };\r\n        }\r\n        return {\r\n            size: geom.size(raw),\r\n            offset: geom.pagePosition(raw)\r\n        };\r\n    }\r\n\r\n    function getScrollInfo( within ) {\r\n        var overflowX = within.isWindow || within.isDocument ? \"\" :\r\n                styler.css(within.element,\"overflow-x\" ),\r\n            overflowY = within.isWindow || within.isDocument ? \"\" :\r\n                styler.css(within.element,\"overflow-y\" ),\r\n            hasOverflowX = overflowX === \"scroll\" ||\r\n                ( overflowX === \"auto\" && within.width < geom.scrollWidth(within.element) ),\r\n            hasOverflowY = overflowY === \"scroll\" ||\r\n                ( overflowY === \"auto\" && within.height < geom.scrollHeight(within.element));\r\n        return {\r\n            width: hasOverflowY ? geom.scrollbarWidth() : 0,\r\n            height: hasOverflowX ? geom.scrollbarWidth() : 0\r\n        };\r\n    }\r\n\r\n    function getWithinInfo( element ) {\r\n        var withinElement = element || window,\r\n            isWindow = noder.isWindow( withinElement),\r\n            isDocument = !!withinElement && withinElement.nodeType === 9,\r\n            hasOffset = !isWindow && !isDocument,\r\n            msize = geom.marginSize(withinElement);\r\n        return {\r\n            element: withinElement,\r\n            isWindow: isWindow,\r\n            isDocument: isDocument,\r\n            offset: hasOffset ? geom.pagePosition(element) : { left: 0, top: 0 },\r\n            scrollLeft: geom.scrollLeft(withinElement),\r\n            scrollTop: geom.scrollTop(withinElement),\r\n            width: msize.width,\r\n            height: msize.height\r\n        };\r\n    }\r\n\r\n    function posit(elm,options ) {\r\n        // Make a copy, we don't want to modify arguments\r\n        options = langx.extend( {}, options );\r\n\r\n        var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions,\r\n            target = options.of,\r\n            within = getWithinInfo( options.within ),\r\n            scrollInfo = getScrollInfo( within ),\r\n            collision = ( options.collision || \"flip\" ).split( \" \" ),\r\n            offsets = {};\r\n\r\n        dimensions = getDimensions( target );\r\n        if ( target.preventDefault ) {\r\n\r\n            // Force left top to allow flipping\r\n            options.at = \"left top\";\r\n        }\r\n        targetWidth = dimensions.size.width;\r\n        targetHeight = dimensions.size.height;\r\n        targetOffset = dimensions.offset;\r\n\r\n        // Clone to reuse original targetOffset later\r\n        basePosition = langx.extend( {}, targetOffset );\r\n\r\n        // Force my and at to have valid horizontal and vertical positions\r\n        // if a value is missing or invalid, it will be converted to center\r\n        langx.each( [ \"my\", \"at\" ], function() {\r\n            var pos = ( options[ this ] || \"\" ).split( \" \" ),\r\n                horizontalOffset,\r\n                verticalOffset;\r\n\r\n            if ( pos.length === 1 ) {\r\n                pos = rhorizontal.test( pos[ 0 ] ) ?\r\n                    pos.concat( [ \"center\" ] ) :\r\n                    rvertical.test( pos[ 0 ] ) ?\r\n                        [ \"center\" ].concat( pos ) :\r\n                        [ \"center\", \"center\" ];\r\n            }\r\n            pos[ 0 ] = rhorizontal.test( pos[ 0 ] ) ? pos[ 0 ] : \"center\";\r\n            pos[ 1 ] = rvertical.test( pos[ 1 ] ) ? pos[ 1 ] : \"center\";\r\n\r\n            // Calculate offsets\r\n            horizontalOffset = roffset.exec( pos[ 0 ] );\r\n            verticalOffset = roffset.exec( pos[ 1 ] );\r\n            offsets[ this ] = [\r\n                horizontalOffset ? horizontalOffset[ 0 ] : 0,\r\n                verticalOffset ? verticalOffset[ 0 ] : 0\r\n            ];\r\n\r\n            // Reduce to just the positions without the offsets\r\n            options[ this ] = [\r\n                rposition.exec( pos[ 0 ] )[ 0 ],\r\n                rposition.exec( pos[ 1 ] )[ 0 ]\r\n            ];\r\n        } );\r\n\r\n        // Normalize collision option\r\n        if ( collision.length === 1 ) {\r\n            collision[ 1 ] = collision[ 0 ];\r\n        }\r\n\r\n        if ( options.at[ 0 ] === \"right\" ) {\r\n            basePosition.left += targetWidth;\r\n        } else if ( options.at[ 0 ] === \"center\" ) {\r\n            basePosition.left += targetWidth / 2;\r\n        }\r\n\r\n        if ( options.at[ 1 ] === \"bottom\" ) {\r\n            basePosition.top += targetHeight;\r\n        } else if ( options.at[ 1 ] === \"center\" ) {\r\n            basePosition.top += targetHeight / 2;\r\n        }\r\n\r\n        atOffset = getOffsets( offsets.at, targetWidth, targetHeight );\r\n        basePosition.left += atOffset[ 0 ];\r\n        basePosition.top += atOffset[ 1 ];\r\n\r\n        return ( function(elem) {\r\n            var collisionPosition, using,\r\n                msize = geom.marginSize(elem),\r\n                elemWidth = msize.width,\r\n                elemHeight = msize.height,\r\n                marginLeft = parseCss( elem, \"marginLeft\" ),\r\n                marginTop = parseCss( elem, \"marginTop\" ),\r\n                collisionWidth = elemWidth + marginLeft + parseCss( elem, \"marginRight\" ) +\r\n                    scrollInfo.width,\r\n                collisionHeight = elemHeight + marginTop + parseCss( elem, \"marginBottom\" ) +\r\n                    scrollInfo.height,\r\n                position = langx.extend( {}, basePosition ),\r\n                myOffset = getOffsets( offsets.my, msize.width, msize.height);\r\n\r\n            if ( options.my[ 0 ] === \"right\" ) {\r\n                position.left -= elemWidth;\r\n            } else if ( options.my[ 0 ] === \"center\" ) {\r\n                position.left -= elemWidth / 2;\r\n            }\r\n\r\n            if ( options.my[ 1 ] === \"bottom\" ) {\r\n                position.top -= elemHeight;\r\n            } else if ( options.my[ 1 ] === \"center\" ) {\r\n                position.top -= elemHeight / 2;\r\n            }\r\n\r\n            position.left += myOffset[ 0 ];\r\n            position.top += myOffset[ 1 ];\r\n\r\n            collisionPosition = {\r\n                marginLeft: marginLeft,\r\n                marginTop: marginTop\r\n            };\r\n\r\n            langx.each( [ \"left\", \"top\" ], function( i, dir ) {\r\n                if ( positions[ collision[ i ] ] ) {\r\n                    positions[ collision[ i ] ][ dir ]( position, {\r\n                        targetWidth: targetWidth,\r\n                        targetHeight: targetHeight,\r\n                        elemWidth: elemWidth,\r\n                        elemHeight: elemHeight,\r\n                        collisionPosition: collisionPosition,\r\n                        collisionWidth: collisionWidth,\r\n                        collisionHeight: collisionHeight,\r\n                        offset: [ atOffset[ 0 ] + myOffset[ 0 ], atOffset [ 1 ] + myOffset[ 1 ] ],\r\n                        my: options.my,\r\n                        at: options.at,\r\n                        within: within,\r\n                        elem: elem\r\n                    } );\r\n                }\r\n            } );\r\n\r\n            if ( options.using ) {\r\n\r\n                // Adds feedback as second argument to using callback, if present\r\n                using = function( props ) {\r\n                    var left = targetOffset.left - position.left,\r\n                        right = left + targetWidth - elemWidth,\r\n                        top = targetOffset.top - position.top,\r\n                        bottom = top + targetHeight - elemHeight,\r\n                        feedback = {\r\n                            target: {\r\n                                element: target,\r\n                                left: targetOffset.left,\r\n                                top: targetOffset.top,\r\n                                width: targetWidth,\r\n                                height: targetHeight\r\n                            },\r\n                            element: {\r\n                                element: elem,\r\n                                left: position.left,\r\n                                top: position.top,\r\n                                width: elemWidth,\r\n                                height: elemHeight\r\n                            },\r\n                            horizontal: right < 0 ? \"left\" : left > 0 ? \"right\" : \"center\",\r\n                            vertical: bottom < 0 ? \"top\" : top > 0 ? \"bottom\" : \"middle\"\r\n                        };\r\n                    if ( targetWidth < elemWidth && abs( left + right ) < targetWidth ) {\r\n                        feedback.horizontal = \"center\";\r\n                    }\r\n                    if ( targetHeight < elemHeight && abs( top + bottom ) < targetHeight ) {\r\n                        feedback.vertical = \"middle\";\r\n                    }\r\n                    if ( max( abs( left ), abs( right ) ) > max( abs( top ), abs( bottom ) ) ) {\r\n                        feedback.important = \"horizontal\";\r\n                    } else {\r\n                        feedback.important = \"vertical\";\r\n                    }\r\n                    options.using.call( this, props, feedback );\r\n                };\r\n            }\r\n\r\n            geom.pagePosition(elem, langx.extend( position, { using: using } ));\r\n        })(elm);\r\n    }\r\n\r\n    var positions = {\r\n        fit: {\r\n            left: function( position, data ) {\r\n                var within = data.within,\r\n                    withinOffset = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                    outerWidth = within.width,\r\n                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                    overLeft = withinOffset - collisionPosLeft,\r\n                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset,\r\n                    newOverRight;\r\n\r\n                // Element is wider than within\r\n                if ( data.collisionWidth > outerWidth ) {\r\n\r\n                    // Element is initially over the left side of within\r\n                    if ( overLeft > 0 && overRight <= 0 ) {\r\n                        newOverRight = position.left + overLeft + data.collisionWidth - outerWidth -\r\n                            withinOffset;\r\n                        position.left += overLeft - newOverRight;\r\n\r\n                    // Element is initially over right side of within\r\n                    } else if ( overRight > 0 && overLeft <= 0 ) {\r\n                        position.left = withinOffset;\r\n\r\n                    // Element is initially over both left and right sides of within\r\n                    } else {\r\n                        if ( overLeft > overRight ) {\r\n                            position.left = withinOffset + outerWidth - data.collisionWidth;\r\n                        } else {\r\n                            position.left = withinOffset;\r\n                        }\r\n                    }\r\n\r\n                // Too far left -> align with left edge\r\n                } else if ( overLeft > 0 ) {\r\n                    position.left += overLeft;\r\n\r\n                // Too far right -> align with right edge\r\n                } else if ( overRight > 0 ) {\r\n                    position.left -= overRight;\r\n\r\n                // Adjust based on position and margin\r\n                } else {\r\n                    position.left = max( position.left - collisionPosLeft, position.left );\r\n                }\r\n            },\r\n            top: function( position, data ) {\r\n                var within = data.within,\r\n                    withinOffset = within.isWindow ? within.scrollTop : within.offset.top,\r\n                    outerHeight = data.within.height,\r\n                    collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                    overTop = withinOffset - collisionPosTop,\r\n                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset,\r\n                    newOverBottom;\r\n\r\n                // Element is taller than within\r\n                if ( data.collisionHeight > outerHeight ) {\r\n\r\n                    // Element is initially over the top of within\r\n                    if ( overTop > 0 && overBottom <= 0 ) {\r\n                        newOverBottom = position.top + overTop + data.collisionHeight - outerHeight -\r\n                            withinOffset;\r\n                        position.top += overTop - newOverBottom;\r\n\r\n                    // Element is initially over bottom of within\r\n                    } else if ( overBottom > 0 && overTop <= 0 ) {\r\n                        position.top = withinOffset;\r\n\r\n                    // Element is initially over both top and bottom of within\r\n                    } else {\r\n                        if ( overTop > overBottom ) {\r\n                            position.top = withinOffset + outerHeight - data.collisionHeight;\r\n                        } else {\r\n                            position.top = withinOffset;\r\n                        }\r\n                    }\r\n\r\n                // Too far up -> align with top\r\n                } else if ( overTop > 0 ) {\r\n                    position.top += overTop;\r\n\r\n                // Too far down -> align with bottom edge\r\n                } else if ( overBottom > 0 ) {\r\n                    position.top -= overBottom;\r\n\r\n                // Adjust based on position and margin\r\n                } else {\r\n                    position.top = max( position.top - collisionPosTop, position.top );\r\n                }\r\n            }\r\n        },\r\n        flip: {\r\n            left: function( position, data ) {\r\n                var within = data.within,\r\n                    withinOffset = within.offset.left + within.scrollLeft,\r\n                    outerWidth = within.width,\r\n                    offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left,\r\n                    collisionPosLeft = position.left - data.collisionPosition.marginLeft,\r\n                    overLeft = collisionPosLeft - offsetLeft,\r\n                    overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft,\r\n                    myOffset = data.my[ 0 ] === \"left\" ?\r\n                        -data.elemWidth :\r\n                        data.my[ 0 ] === \"right\" ?\r\n                            data.elemWidth :\r\n                            0,\r\n                    atOffset = data.at[ 0 ] === \"left\" ?\r\n                        data.targetWidth :\r\n                        data.at[ 0 ] === \"right\" ?\r\n                            -data.targetWidth :\r\n                            0,\r\n                    offset = -2 * data.offset[ 0 ],\r\n                    newOverRight,\r\n                    newOverLeft;\r\n\r\n                if ( overLeft < 0 ) {\r\n                    newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth -\r\n                        outerWidth - withinOffset;\r\n                    if ( newOverRight < 0 || newOverRight < abs( overLeft ) ) {\r\n                        position.left += myOffset + atOffset + offset;\r\n                    }\r\n                } else if ( overRight > 0 ) {\r\n                    newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset +\r\n                        atOffset + offset - offsetLeft;\r\n                    if ( newOverLeft > 0 || abs( newOverLeft ) < overRight ) {\r\n                        position.left += myOffset + atOffset + offset;\r\n                    }\r\n                }\r\n            },\r\n            top: function( position, data ) {\r\n                var within = data.within,\r\n                    withinOffset = within.offset.top + within.scrollTop,\r\n                    outerHeight = within.height,\r\n                    offsetTop = within.isWindow ? within.scrollTop : within.offset.top,\r\n                    collisionPosTop = position.top - data.collisionPosition.marginTop,\r\n                    overTop = collisionPosTop - offsetTop,\r\n                    overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop,\r\n                    top = data.my[ 1 ] === \"top\",\r\n                    myOffset = top ?\r\n                        -data.elemHeight :\r\n                        data.my[ 1 ] === \"bottom\" ?\r\n                            data.elemHeight :\r\n                            0,\r\n                    atOffset = data.at[ 1 ] === \"top\" ?\r\n                        data.targetHeight :\r\n                        data.at[ 1 ] === \"bottom\" ?\r\n                            -data.targetHeight :\r\n                            0,\r\n                    offset = -2 * data.offset[ 1 ],\r\n                    newOverTop,\r\n                    newOverBottom;\r\n                if ( overTop < 0 ) {\r\n                    newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight -\r\n                        outerHeight - withinOffset;\r\n                    if ( newOverBottom < 0 || newOverBottom < abs( overTop ) ) {\r\n                        position.top += myOffset + atOffset + offset;\r\n                    }\r\n                } else if ( overBottom > 0 ) {\r\n                    newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset +\r\n                        offset - offsetTop;\r\n                    if ( newOverTop > 0 || abs( newOverTop ) < overBottom ) {\r\n                        position.top += myOffset + atOffset + offset;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        flipfit: {\r\n            left: function() {\r\n                positions.flip.left.apply( this, arguments );\r\n                positions.fit.left.apply( this, arguments );\r\n            },\r\n            top: function() {\r\n                positions.flip.top.apply( this, arguments );\r\n                positions.fit.top.apply( this, arguments );\r\n            }\r\n        }\r\n    };\r\n\r\n    return geom.posit = posit;\r\n});\ndefine('skylark-domx-geom/scrollToTop',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./geom\"\r\n],function(langx,styler,geom) {\r\n    /*   \r\n     * Set the vertical position of the scroll bar for an element.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} pos\r\n     * @param {Number or String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function scrollToTop(elm, pos, speed, callback) {\r\n        var scrollFrom = parseInt(elm.scrollTop),\r\n            i = 0,\r\n            runEvery = 5, // run every 5ms\r\n            freq = speed * 1000 / runEvery,\r\n            scrollTo = parseInt(pos);\r\n\r\n        var interval = setInterval(function() {\r\n            i++;\r\n\r\n            if (i <= freq) elm.scrollTop = (scrollTo - scrollFrom) / freq * i + scrollFrom;\r\n\r\n            if (i >= freq + 1) {\r\n                clearInterval(interval);\r\n                if (callback) langx.debounce(callback, 1000)();\r\n            }\r\n        }, runEvery);\r\n\r\n        return this;\r\n    }\r\n\r\n    return geom.scrollToTop = scrollToTop;\r\n});\ndefine('skylark-domx-geom/main',[\r\n    \"skylark-langx/langx\",\r\n    \"./geom\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-query\",\r\n    \"./posit\",\r\n    \"./scrollToTop\"\r\n],function(langx,geom,velm,$){\r\n   // from ./geom\r\n    velm.delegate([\r\n        \"borderExtents\",\r\n        \"boundingPosition\",\r\n        \"boundingRect\",\r\n        \"clientHeight\",\r\n        \"clientSize\",\r\n        \"clientWidth\",\r\n        \"contentRect\",\r\n        \"height\",\r\n        \"marginExtents\",\r\n        \"marginRect\",\r\n        \"marginSize\",\r\n        \"offsetParent\",\r\n        \"paddingExtents\",\r\n        \"pagePosition\",\r\n        \"pageRect\",\r\n        \"relativePosition\",\r\n        \"relativeRect\",\r\n        \"scrollIntoView\",\r\n        \"scrollLeft\",\r\n        \"scrollTop\",\r\n        \"pageSize\",\r\n        \"width\"\r\n    ], geom,{\r\n        \"pageSize\" : \"size\"\r\n    });\r\n\r\n    $.fn.offset = $.wraps.wrapper_value(geom.pagePosition, geom, geom.pagePosition);\r\n\r\n    $.fn.scrollTop = $.wraps.wrapper_value(geom.scrollTop, geom);\r\n\r\n    $.fn.scrollLeft = $.wraps.wrapper_value(geom.scrollLeft, geom);\r\n\r\n    $.fn.position =  function(options) {\r\n        if (!this.length) {\r\n            return this;\r\n        }\r\n\r\n        if (options) {\r\n            if (options.of && options.of.length) {\r\n                options = langx.clone(options);\r\n                options.of = options.of[0];\r\n            }\r\n            return this.each( function() {\r\n                geom.posit(this,options);\r\n            });\r\n        } else {\r\n            var elem = this[0];\r\n\r\n            return geom.relativePosition(elem);\r\n\r\n        }             \r\n    };\r\n\r\n    $.fn.offsetParent = $.wraps.wrapper_map(geom.offsetParent, geom);\r\n\r\n\r\n    $.fn.pageSize = $.wraps.wrapper_value(geom.size, geom);\r\n\r\n    $.fn.width = $.wraps.wrapper_value(geom.width, geom, geom.width);\r\n\r\n    $.fn.height = $.wraps.wrapper_value(geom.height, geom, geom.height);\r\n\r\n    $.fn.clientSize = $.wraps.wrapper_value(geom.clientSize, geom.clientSize);\r\n    \r\n    ['width', 'height'].forEach(function(dimension) {\r\n        var offset, Dimension = dimension.replace(/./, function(m) {\r\n            return m[0].toUpperCase()\r\n        });\r\n\r\n        $.fn['outer' + Dimension] = function(margin, value) {\r\n            if (arguments.length) {\r\n                if (typeof margin !== 'boolean') {\r\n                    value = margin;\r\n                    margin = false;\r\n                }\r\n            } else {\r\n                margin = false;\r\n                value = undefined;\r\n            }\r\n\r\n            if (value === undefined) {\r\n                var el = this[0];\r\n                if (!el) {\r\n                    return undefined;\r\n                }\r\n                var cb = geom.size(el);\r\n                if (margin) {\r\n                    var me = geom.marginExtents(el);\r\n                    cb.width = cb.width + me.left + me.right;\r\n                    cb.height = cb.height + me.top + me.bottom;\r\n                }\r\n                return dimension === \"width\" ? cb.width : cb.height;\r\n            } else {\r\n                return this.each(function(idx, el) {\r\n                    var mb = {};\r\n                    var me = geom.marginExtents(el);\r\n                    if (dimension === \"width\") {\r\n                        mb.width = value;\r\n                        if (margin) {\r\n                            mb.width = mb.width - me.left - me.right\r\n                        }\r\n                    } else {\r\n                        mb.height = value;\r\n                        if (margin) {\r\n                            mb.height = mb.height - me.top - me.bottom;\r\n                        }\r\n                    }\r\n                    geom.size(el, mb);\r\n                })\r\n\r\n            }\r\n        };\r\n    })\r\n\r\n    $.fn.innerWidth = $.wraps.wrapper_value(geom.clientWidth, geom, geom.clientWidth);\r\n\r\n    $.fn.innerHeight = $.wraps.wrapper_value(geom.clientHeight, geom, geom.clientHeight);\r\n\r\n    return geom;\r\n});\ndefine('skylark-domx-geom', ['skylark-domx-geom/main'], function (main) { return main; });\n\n"]}