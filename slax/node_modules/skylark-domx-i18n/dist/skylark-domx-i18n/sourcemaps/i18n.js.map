{"version":3,"sources":["i18n.js"],"names":["define","skylark","attach","escape","text","replace","unescape","compile","Array","prototype","slice","call","arguments","map","String","join"],"mappings":";;;;;;;AAAAA,QACC,wBACA,qBACA,oBACA,uBACC,SAASC,GACV,OAAOA,EAAQC,OAAO,aAMrBC,OAAS,SAAgBC,GACxB,MAAuB,iBAATA,EAAoBA,EAAKC,QAAQ,QAAS,gBAAgBA,QAAQ,QAAS,gBAAkBD,GAQ5GE,SAAW,SAAkBF,GAC5B,MAAuB,iBAATA,EAAoBA,EAAKC,QAAQ,eAAgB,KAAKA,QAAQ,eAAgB,KAAOD,GAQpGG,QAAU,WAMT,MAAO,KALIC,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,GAAGC,IAAI,SAAUT,GAEjE,OAAOU,OAAOV,GAAMC,QAAQ,KAAM,SAASA,QAAQ,KAAM,WAGvCU,KAAK,MAAQ","file":"../i18n.js","sourcesContent":["define([\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-data\",\r\n\t\"skylark-domx-styler\"\t\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.i18n\",{\r\n\t\t/**\r\n\t\t * Escape translator patterns in text\r\n\t\t * @param {string} text\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tescape : function escape(text) {\r\n\t\t\treturn typeof text === 'string' ? text.replace(/\\[\\[/g, '&lsqb;&lsqb;').replace(/\\]\\]/g, '&rsqb;&rsqb;') : text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Unescape escaped translator patterns in text\r\n\t\t * @param {string} text\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tunescape : function unescape(text) {\r\n\t\t\treturn typeof text === 'string' ? text.replace(/&lsqb;|\\\\\\[/g, '[').replace(/&rsqb;|\\\\\\]/g, ']') : text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Construct a translator pattern\r\n\t\t * @param {string} name - Translation name\r\n\t\t * @param {...string} arg - Optional argument for the pattern\r\n\t\t */\r\n\t\tcompile : function compile() {\r\n\t\t\tvar args = Array.prototype.slice.call(arguments, 0).map(function (text) {\r\n\t\t\t\t// escape commas and percent signs in arguments\r\n\t\t\t\treturn String(text).replace(/%/g, '&#37;').replace(/,/g, '&#44;');\r\n\t\t\t});\r\n\r\n\t\t\treturn '[[' + args.join(', ') + ']]';\r\n\t\t}\r\n\t});\r\n});"]}