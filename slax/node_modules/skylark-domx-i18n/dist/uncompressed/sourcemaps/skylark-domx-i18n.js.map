{"version":3,"sources":["skylark-domx-i18n.js"],"names":[],"mappingsfile":"../skylark-domx-i18n.js","sourcesContent":["define('skylark-domx-i18n/i18n',[\r\n\t\"skylark-langx/skylark\",\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-data\",\r\n\t\"skylark-domx-styler\"\t\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.i18n\",{\r\n\t\t/**\r\n\t\t * Escape translator patterns in text\r\n\t\t * @param {string} text\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tescape : function escape(text) {\r\n\t\t\treturn typeof text === 'string' ? text.replace(/\\[\\[/g, '&lsqb;&lsqb;').replace(/\\]\\]/g, '&rsqb;&rsqb;') : text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Unescape escaped translator patterns in text\r\n\t\t * @param {string} text\r\n\t\t * @returns {string}\r\n\t\t */\r\n\t\tunescape : function unescape(text) {\r\n\t\t\treturn typeof text === 'string' ? text.replace(/&lsqb;|\\\\\\[/g, '[').replace(/&rsqb;|\\\\\\]/g, ']') : text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Construct a translator pattern\r\n\t\t * @param {string} name - Translation name\r\n\t\t * @param {...string} arg - Optional argument for the pattern\r\n\t\t */\r\n\t\tcompile : function compile() {\r\n\t\t\tvar args = Array.prototype.slice.call(arguments, 0).map(function (text) {\r\n\t\t\t\t// escape commas and percent signs in arguments\r\n\t\t\t\treturn String(text).replace(/%/g, '&#37;').replace(/,/g, '&#44;');\r\n\t\t\t});\r\n\r\n\t\t\treturn '[[' + args.join(', ') + ']]';\r\n\t\t}\r\n\t});\r\n});\ndefine('skylark-domx-i18n/Translator',[\r\n\t\"skylark-langx/langx\",\r\n\t\"./i18n\"\r\n],function(langx,i18n) {\r\n\tvar HTMLEntities = Object.freeze({\r\n\t\tamp: '&',\r\n\t\tgt: '>',\r\n\t\tlt: '<',\r\n\t\tquot: '\"',\r\n\t\tapos: \"'\",\r\n\t\tAElig: 198,\r\n\t\tAacute: 193,\r\n\t\tAcirc: 194,\r\n\t\tAgrave: 192,\r\n\t\tAring: 197,\r\n\t\tAtilde: 195,\r\n\t\tAuml: 196,\r\n\t\tCcedil: 199,\r\n\t\tETH: 208,\r\n\t\tEacute: 201,\r\n\t\tEcirc: 202,\r\n\t\tEgrave: 200,\r\n\t\tEuml: 203,\r\n\t\tIacute: 205,\r\n\t\tIcirc: 206,\r\n\t\tIgrave: 204,\r\n\t\tIuml: 207,\r\n\t\tNtilde: 209,\r\n\t\tOacute: 211,\r\n\t\tOcirc: 212,\r\n\t\tOgrave: 210,\r\n\t\tOslash: 216,\r\n\t\tOtilde: 213,\r\n\t\tOuml: 214,\r\n\t\tTHORN: 222,\r\n\t\tUacute: 218,\r\n\t\tUcirc: 219,\r\n\t\tUgrave: 217,\r\n\t\tUuml: 220,\r\n\t\tYacute: 221,\r\n\t\taacute: 225,\r\n\t\tacirc: 226,\r\n\t\taelig: 230,\r\n\t\tagrave: 224,\r\n\t\taring: 229,\r\n\t\tatilde: 227,\r\n\t\tauml: 228,\r\n\t\tccedil: 231,\r\n\t\teacute: 233,\r\n\t\tecirc: 234,\r\n\t\tegrave: 232,\r\n\t\teth: 240,\r\n\t\teuml: 235,\r\n\t\tiacute: 237,\r\n\t\ticirc: 238,\r\n\t\tigrave: 236,\r\n\t\tiuml: 239,\r\n\t\tntilde: 241,\r\n\t\toacute: 243,\r\n\t\tocirc: 244,\r\n\t\tograve: 242,\r\n\t\toslash: 248,\r\n\t\totilde: 245,\r\n\t\touml: 246,\r\n\t\tszlig: 223,\r\n\t\tthorn: 254,\r\n\t\tuacute: 250,\r\n\t\tucirc: 251,\r\n\t\tugrave: 249,\r\n\t\tuuml: 252,\r\n\t\tyacute: 253,\r\n\t\tyuml: 255,\r\n\t\tcopy: 169,\r\n\t\treg: 174,\r\n\t\tnbsp: 160,\r\n\t\tiexcl: 161,\r\n\t\tcent: 162,\r\n\t\tpound: 163,\r\n\t\tcurren: 164,\r\n\t\tyen: 165,\r\n\t\tbrvbar: 166,\r\n\t\tsect: 167,\r\n\t\tuml: 168,\r\n\t\tordf: 170,\r\n\t\tlaquo: 171,\r\n\t\tnot: 172,\r\n\t\tshy: 173,\r\n\t\tmacr: 175,\r\n\t\tdeg: 176,\r\n\t\tplusmn: 177,\r\n\t\tsup1: 185,\r\n\t\tsup2: 178,\r\n\t\tsup3: 179,\r\n\t\tacute: 180,\r\n\t\tmicro: 181,\r\n\t\tpara: 182,\r\n\t\tmiddot: 183,\r\n\t\tcedil: 184,\r\n\t\tordm: 186,\r\n\t\traquo: 187,\r\n\t\tfrac14: 188,\r\n\t\tfrac12: 189,\r\n\t\tfrac34: 190,\r\n\t\tiquest: 191,\r\n\t\ttimes: 215,\r\n\t\tdivide: 247,\r\n\t\t'OElig;': 338,\r\n\t\t'oelig;': 339,\r\n\t\t'Scaron;': 352,\r\n\t\t'scaron;': 353,\r\n\t\t'Yuml;': 376,\r\n\t\t'fnof;': 402,\r\n\t\t'circ;': 710,\r\n\t\t'tilde;': 732,\r\n\t\t'Alpha;': 913,\r\n\t\t'Beta;': 914,\r\n\t\t'Gamma;': 915,\r\n\t\t'Delta;': 916,\r\n\t\t'Epsilon;': 917,\r\n\t\t'Zeta;': 918,\r\n\t\t'Eta;': 919,\r\n\t\t'Theta;': 920,\r\n\t\t'Iota;': 921,\r\n\t\t'Kappa;': 922,\r\n\t\t'Lambda;': 923,\r\n\t\t'Mu;': 924,\r\n\t\t'Nu;': 925,\r\n\t\t'Xi;': 926,\r\n\t\t'Omicron;': 927,\r\n\t\t'Pi;': 928,\r\n\t\t'Rho;': 929,\r\n\t\t'Sigma;': 931,\r\n\t\t'Tau;': 932,\r\n\t\t'Upsilon;': 933,\r\n\t\t'Phi;': 934,\r\n\t\t'Chi;': 935,\r\n\t\t'Psi;': 936,\r\n\t\t'Omega;': 937,\r\n\t\t'alpha;': 945,\r\n\t\t'beta;': 946,\r\n\t\t'gamma;': 947,\r\n\t\t'delta;': 948,\r\n\t\t'epsilon;': 949,\r\n\t\t'zeta;': 950,\r\n\t\t'eta;': 951,\r\n\t\t'theta;': 952,\r\n\t\t'iota;': 953,\r\n\t\t'kappa;': 954,\r\n\t\t'lambda;': 955,\r\n\t\t'mu;': 956,\r\n\t\t'nu;': 957,\r\n\t\t'xi;': 958,\r\n\t\t'omicron;': 959,\r\n\t\t'pi;': 960,\r\n\t\t'rho;': 961,\r\n\t\t'sigmaf;': 962,\r\n\t\t'sigma;': 963,\r\n\t\t'tau;': 964,\r\n\t\t'upsilon;': 965,\r\n\t\t'phi;': 966,\r\n\t\t'chi;': 967,\r\n\t\t'psi;': 968,\r\n\t\t'omega;': 969,\r\n\t\t'thetasym;': 977,\r\n\t\t'upsih;': 978,\r\n\t\t'piv;': 982,\r\n\t\t'ensp;': 8194,\r\n\t\t'emsp;': 8195,\r\n\t\t'thinsp;': 8201,\r\n\t\t'zwnj;': 8204,\r\n\t\t'zwj;': 8205,\r\n\t\t'lrm;': 8206,\r\n\t\t'rlm;': 8207,\r\n\t\t'ndash;': 8211,\r\n\t\t'mdash;': 8212,\r\n\t\t'lsquo;': 8216,\r\n\t\t'rsquo;': 8217,\r\n\t\t'sbquo;': 8218,\r\n\t\t'ldquo;': 8220,\r\n\t\t'rdquo;': 8221,\r\n\t\t'bdquo;': 8222,\r\n\t\t'dagger;': 8224,\r\n\t\t'Dagger;': 8225,\r\n\t\t'bull;': 8226,\r\n\t\t'hellip;': 8230,\r\n\t\t'permil;': 8240,\r\n\t\t'prime;': 8242,\r\n\t\t'Prime;': 8243,\r\n\t\t'lsaquo;': 8249,\r\n\t\t'rsaquo;': 8250,\r\n\t\t'oline;': 8254,\r\n\t\t'frasl;': 8260,\r\n\t\t'euro;': 8364,\r\n\t\t'image;': 8465,\r\n\t\t'weierp;': 8472,\r\n\t\t'real;': 8476,\r\n\t\t'trade;': 8482,\r\n\t\t'alefsym;': 8501,\r\n\t\t'larr;': 8592,\r\n\t\t'uarr;': 8593,\r\n\t\t'rarr;': 8594,\r\n\t\t'darr;': 8595,\r\n\t\t'harr;': 8596,\r\n\t\t'crarr;': 8629,\r\n\t\t'lArr;': 8656,\r\n\t\t'uArr;': 8657,\r\n\t\t'rArr;': 8658,\r\n\t\t'dArr;': 8659,\r\n\t\t'hArr;': 8660,\r\n\t\t'forall;': 8704,\r\n\t\t'part;': 8706,\r\n\t\t'exist;': 8707,\r\n\t\t'empty;': 8709,\r\n\t\t'nabla;': 8711,\r\n\t\t'isin;': 8712,\r\n\t\t'notin;': 8713,\r\n\t\t'ni;': 8715,\r\n\t\t'prod;': 8719,\r\n\t\t'sum;': 8721,\r\n\t\t'minus;': 8722,\r\n\t\t'lowast;': 8727,\r\n\t\t'radic;': 8730,\r\n\t\t'prop;': 8733,\r\n\t\t'infin;': 8734,\r\n\t\t'ang;': 8736,\r\n\t\t'and;': 8743,\r\n\t\t'or;': 8744,\r\n\t\t'cap;': 8745,\r\n\t\t'cup;': 8746,\r\n\t\t'int;': 8747,\r\n\t\t'there4;': 8756,\r\n\t\t'sim;': 8764,\r\n\t\t'cong;': 8773,\r\n\t\t'asymp;': 8776,\r\n\t\t'ne;': 8800,\r\n\t\t'equiv;': 8801,\r\n\t\t'le;': 8804,\r\n\t\t'ge;': 8805,\r\n\t\t'sub;': 8834,\r\n\t\t'sup;': 8835,\r\n\t\t'nsub;': 8836,\r\n\t\t'sube;': 8838,\r\n\t\t'supe;': 8839,\r\n\t\t'oplus;': 8853,\r\n\t\t'otimes;': 8855,\r\n\t\t'perp;': 8869,\r\n\t\t'sdot;': 8901,\r\n\t\t'lceil;': 8968,\r\n\t\t'rceil;': 8969,\r\n\t\t'lfloor;': 8970,\r\n\t\t'rfloor;': 8971,\r\n\t\t'lang;': 9001,\r\n\t\t'rang;': 9002,\r\n\t\t'loz;': 9674,\r\n\t\t'spades;': 9824,\r\n\t\t'clubs;': 9827,\r\n\t\t'hearts;': 9829,\r\n\t\t'diams;': 9830,\r\n\t});\r\n\r\n\t// https://github.com/substack/node-ent/blob/master/index.js\r\n\tfunction decodeHTMLEntities(html) {\r\n\t\treturn String(html)\r\n\t\t\t.replace(/&#(\\d+);?/g, function (_, code) {\r\n\t\t\t\treturn String.fromCharCode(code);\r\n\t\t\t})\r\n\t\t\t.replace(/&#[xX]([A-Fa-f0-9]+);?/g, function (_, hex) {\r\n\t\t\t\treturn String.fromCharCode(parseInt(hex, 16));\r\n\t\t\t})\r\n\t\t\t.replace(/&([^;\\W]+;?)/g, function (m, e) {\r\n\t\t\t\tvar ee = e.replace(/;$/, '');\r\n\t\t\t\tvar target = HTMLEntities[e] || (e.match(/;$/) && HTMLEntities[ee]);\r\n\r\n\t\t\t\tif (typeof target === 'number') {\r\n\t\t\t\t\treturn String.fromCharCode(target);\r\n\t\t\t\t} else if (typeof target === 'string') {\r\n\t\t\t\t\treturn target;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn m;\r\n\t\t\t});\r\n\t}\t\r\n\r\n\tfunction escapeHTML(str) {\r\n\t\treturn langx.escapeHTML(decodeHTMLEntities(\r\n\t\t\tString(str)\r\n\t\t\t\t.replace(/[\\s\\xa0]+/g, ' ')\r\n\t\t\t\t.replace(/^\\s+|\\s+$/g, '')\r\n\t\t));\r\n\t}\r\n\r\n\t//function load(language, namespace) {\r\n\t//\treturn Promise.resolve(jQuery.getJSON(config.relative_path + '/assets/language/' + language + '/' + namespace + '.json?' + config['cache-buster']));\r\n\t//}\r\n\r\n\tvar warn = function () { console.warn.apply(console, arguments); };\r\n\r\n\tvar assign = Object.assign || jQuery.extend;\r\n\r\n\r\n\t/**\r\n\t * Construct a new Translator object\r\n\t * @param {string} language - Language code for this translator instance\r\n\t * @exports translator.Translator\r\n\t */\r\n\tfunction Translator(language,load) {\r\n\t\tvar self = this;\r\n\r\n\t\tif (!language) {\r\n\t\t\tthrow new TypeError('Parameter `language` must be a language string. Received ' + language + (language === '' ? '(empty string)' : ''));\r\n\t\t}\r\n\r\n\t\tself.modules = Object.keys(Translator.moduleFactories).map(function (namespace) {\r\n\t\t\tvar factory = Translator.moduleFactories[namespace];\r\n\t\t\treturn [namespace, factory(language)];\r\n\t\t}).reduce(function (prev, elem) {\r\n\t\t\tvar namespace = elem[0];\r\n\t\t\tvar module = elem[1];\r\n\t\t\tprev[namespace] = module;\r\n\r\n\t\t\treturn prev;\r\n\t\t}, {});\r\n\r\n\t\tself.lang = language;\r\n\t\tself.translations = {};\r\n\t\tself.load = load;\r\n\t}\r\n\r\n\t//Translator.prototype.load = load;\r\n\r\n\t/**\r\n\t * Parse the translation instructions into the language of the Translator instance\r\n\t * @param {string} str - Source string\r\n\t * @returns {Promise<string>}\r\n\t */\r\n\tTranslator.prototype.translate = function translate(str) {\r\n\t\t// regex for valid text in namespace / key\r\n\t\tvar validText = 'a-zA-Z0-9\\\\-_.\\\\/';\r\n\t\tvar validTextRegex = new RegExp('[' + validText + ']');\r\n\t\tvar invalidTextRegex = new RegExp('[^' + validText + '\\\\]]');\r\n\r\n\t\t// current cursor position\r\n\t\tvar cursor = 0;\r\n\t\t// last break of the input string\r\n\t\tvar lastBreak = 0;\r\n\t\t// length of the input string\r\n\t\tvar len = str.length;\r\n\t\t// array to hold the promises for the translations\r\n\t\t// and the strings of untranslated text in between\r\n\t\tvar toTranslate = [];\r\n\r\n\t\t// to store the state of if we're currently in a top-level token for later\r\n\t\tvar inToken = false;\r\n\r\n\t\t// split a translator string into an array of tokens\r\n\t\t// but don't split by commas inside other translator strings\r\n\t\tfunction split(text) {\r\n\t\t\tvar len = text.length;\r\n\t\t\tvar arr = [];\r\n\t\t\tvar i = 0;\r\n\t\t\tvar brk = 0;\r\n\t\t\tvar level = 0;\r\n\r\n\t\t\twhile (i + 2 <= len) {\r\n\t\t\t\tif (text[i] === '[' && text[i + 1] === '[') {\r\n\t\t\t\t\tlevel += 1;\r\n\t\t\t\t\ti += 1;\r\n\t\t\t\t} else if (text[i] === ']' && text[i + 1] === ']') {\r\n\t\t\t\t\tlevel -= 1;\r\n\t\t\t\t\ti += 1;\r\n\t\t\t\t} else if (level === 0 && text[i] === ',' && text[i - 1] !== '\\\\') {\r\n\t\t\t\t\tarr.push(text.slice(brk, i).trim());\r\n\t\t\t\t\ti += 1;\r\n\t\t\t\t\tbrk = i;\r\n\t\t\t\t}\r\n\t\t\t\ti += 1;\r\n\t\t\t}\r\n\t\t\tarr.push(text.slice(brk, i + 1).trim());\r\n\t\t\treturn arr;\r\n\t\t}\r\n\r\n\t\t// move to the first [[\r\n\t\tcursor = str.indexOf('[[', cursor);\r\n\r\n\t\t// the loooop, we'll go to where the cursor\r\n\t\t// is equal to the length of the string since\r\n\t\t// slice doesn't include the ending index\r\n\t\twhile (cursor + 2 <= len && cursor !== -1) {\r\n\t\t\t// split the string from the last break\r\n\t\t\t// to the character before the cursor\r\n\t\t\t// add that to the result array\r\n\t\t\ttoTranslate.push(str.slice(lastBreak, cursor));\r\n\t\t\t// set the cursor position past the beginning\r\n\t\t\t// brackets of the translation string\r\n\t\t\tcursor += 2;\r\n\t\t\t// set the last break to our current\r\n\t\t\t// spot since we just broke the string\r\n\t\t\tlastBreak = cursor;\r\n\t\t\t// we're in a token now\r\n\t\t\tinToken = true;\r\n\r\n\t\t\t// the current level of nesting of the translation strings\r\n\t\t\tvar level = 0;\r\n\t\t\tvar char0;\r\n\t\t\tvar char1;\r\n\t\t\t// validating the current string is actually a translation\r\n\t\t\tvar textBeforeColonFound = false;\r\n\t\t\tvar colonFound = false;\r\n\t\t\tvar textAfterColonFound = false;\r\n\t\t\tvar commaAfterNameFound = false;\r\n\r\n\t\t\twhile (cursor + 2 <= len) {\r\n\t\t\t\tchar0 = str[cursor];\r\n\t\t\t\tchar1 = str[cursor + 1];\r\n\t\t\t\t// found some text after the double bracket,\r\n\t\t\t\t// so this is probably a translation string\r\n\t\t\t\tif (!textBeforeColonFound && validTextRegex.test(char0)) {\r\n\t\t\t\t\ttextBeforeColonFound = true;\r\n\t\t\t\t\tcursor += 1;\r\n\t\t\t\t// found a colon, so this is probably a translation string\r\n\t\t\t\t} else if (textBeforeColonFound && !colonFound && char0 === ':') {\r\n\t\t\t\t\tcolonFound = true;\r\n\t\t\t\t\tcursor += 1;\r\n\t\t\t\t// found some text after the colon,\r\n\t\t\t\t// so this is probably a translation string\r\n\t\t\t\t} else if (colonFound && !textAfterColonFound && validTextRegex.test(char0)) {\r\n\t\t\t\t\ttextAfterColonFound = true;\r\n\t\t\t\t\tcursor += 1;\r\n\t\t\t\t} else if (textAfterColonFound && !commaAfterNameFound && char0 === ',') {\r\n\t\t\t\t\tcommaAfterNameFound = true;\r\n\t\t\t\t\tcursor += 1;\r\n\t\t\t\t// a space or comma was found before the name\r\n\t\t\t\t// this isn't a translation string, so back out\r\n\t\t\t\t} else if (!(textBeforeColonFound && colonFound && textAfterColonFound && commaAfterNameFound) &&\r\n\t\t\t\t\t\tinvalidTextRegex.test(char0)) {\r\n\t\t\t\t\tcursor += 1;\r\n\t\t\t\t\tlastBreak -= 2;\r\n\t\t\t\t\t// no longer in a token\r\n\t\t\t\t\tinToken = false;\r\n\t\t\t\t\tif (level > 0) {\r\n\t\t\t\t\t\tlevel -= 1;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t// if we're at the beginning of another translation string,\r\n\t\t\t\t// we're nested, so add to our level\r\n\t\t\t\t} else if (char0 === '[' && char1 === '[') {\r\n\t\t\t\t\tlevel += 1;\r\n\t\t\t\t\tcursor += 2;\r\n\t\t\t\t// if we're at the end of a translation string\r\n\t\t\t\t} else if (char0 === ']' && char1 === ']') {\r\n\t\t\t\t\t// if we're at the base level, then this is the end\r\n\t\t\t\t\tif (level === 0) {\r\n\t\t\t\t\t\t// so grab the name and args\r\n\t\t\t\t\t\tvar currentSlice = str.slice(lastBreak, cursor);\r\n\t\t\t\t\t\tvar result = split(currentSlice);\r\n\t\t\t\t\t\tvar name = result[0];\r\n\t\t\t\t\t\tvar args = result.slice(1);\r\n\r\n\t\t\t\t\t\t// make a backup based on the raw string of the token\r\n\t\t\t\t\t\t// if there are arguments to the token\r\n\t\t\t\t\t\tvar backup = '';\r\n\t\t\t\t\t\tif (args && args.length) {\r\n\t\t\t\t\t\t\tbackup = this.translate(currentSlice);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// add the translation promise to the array\r\n\t\t\t\t\t\ttoTranslate.push(this.translateKey(name, args, backup));\r\n\t\t\t\t\t\t// skip past the ending brackets\r\n\t\t\t\t\t\tcursor += 2;\r\n\t\t\t\t\t\t// set this as our last break\r\n\t\t\t\t\t\tlastBreak = cursor;\r\n\t\t\t\t\t\t// and we're no longer in a translation string,\r\n\t\t\t\t\t\t// so continue with the main loop\r\n\t\t\t\t\t\tinToken = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// otherwise we lower the level\r\n\t\t\t\t\tlevel -= 1;\r\n\t\t\t\t\t// and skip past the ending brackets\r\n\t\t\t\t\tcursor += 2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// otherwise just move to the next character\r\n\t\t\t\t\tcursor += 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// skip to the next [[\r\n\t\t\tcursor = str.indexOf('[[', cursor);\r\n\t\t}\r\n\r\n\t\t// ending string of source\r\n\t\tvar last = str.slice(lastBreak);\r\n\r\n\t\t// if we were mid-token, treat it as invalid\r\n\t\tif (inToken) {\r\n\t\t\tlast = this.translate(last);\r\n\t\t}\r\n\r\n\t\t// add the remaining text after the last translation string\r\n\t\ttoTranslate.push(last);\r\n\r\n\t\t// and return a promise for the concatenated translated string\r\n\t\treturn Promise.all(toTranslate).then(function (translated) {\r\n\t\t\treturn translated.join('');\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Translates a specific key and array of arguments\r\n\t * @param {string} name - Translation key (ex. 'global:home')\r\n\t * @param {string[]} args - Arguments for `%1`, `%2`, etc\r\n\t * @param {string|Promise<string>} backup - Text to use in case the key can't be found\r\n\t * @returns {Promise<string>}\r\n\t */\r\n\tTranslator.prototype.translateKey = function translateKey(name, args, backup) {\r\n\t\tvar self = this;\r\n\r\n\t\tvar result = name.split(':', 2);\r\n\t\tvar namespace = result[0];\r\n\t\tvar key = result[1];\r\n\r\n\t\tif (self.modules[namespace]) {\r\n\t\t\treturn Promise.resolve(self.modules[namespace](key, args));\r\n\t\t}\r\n\r\n\t\tif (namespace && !key) {\r\n\t\t\twarn('Missing key in translation token \"' + name + '\"');\r\n\t\t\treturn Promise.resolve('[[' + namespace + ']]');\r\n\t\t}\r\n\r\n\t\tvar translation = this.getTranslation(namespace, key);\r\n\t\treturn translation.then(function (translated) {\r\n\t\t\t// check if the translation is missing first\r\n\t\t\tif (!translated) {\r\n\t\t\t\twarn('Missing translation \"' + name + '\"');\r\n\t\t\t\treturn backup || key;\r\n\t\t\t}\r\n\r\n\t\t\tvar argsToTranslate = args.map(function (arg) {\r\n\t\t\t\treturn self.translate(escapeHTML(arg));\r\n\t\t\t});\r\n\r\n\t\t\treturn Promise.all(argsToTranslate).then(function (translatedArgs) {\r\n\t\t\t\tvar out = translated;\r\n\t\t\t\ttranslatedArgs.forEach(function (arg, i) {\r\n\t\t\t\t\tvar escaped = arg.replace(/%(?=\\d)/g, '&#37;').replace(/\\\\,/g, '&#44;');\r\n\t\t\t\t\tout = out.replace(new RegExp('%' + (i + 1), 'g'), escaped);\r\n\t\t\t\t});\r\n\t\t\t\treturn out;\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Load translation file (or use a cached version), and optionally return the translation of a certain key\r\n\t * @param {string} namespace - The file name of the translation namespace\r\n\t * @param {string} [key] - The key of the specific translation to getJSON\r\n\t * @returns {Promise<{ [key: string]: string } | string>}\r\n\t */\r\n\tTranslator.prototype.getTranslation = function getTranslation(namespace, key) {\r\n\t\tvar translation;\r\n\t\tif (!namespace) {\r\n\t\t\twarn('[translator] Parameter `namespace` is ' + namespace + (namespace === '' ? '(empty string)' : ''));\r\n\t\t\ttranslation = Promise.resolve({});\r\n\t\t} else {\r\n\t\t\tthis.translations[namespace] = this.translations[namespace] || this.load(this.lang, namespace).catch(function () { return {}; });\r\n\t\t\ttranslation = this.translations[namespace];\r\n\t\t}\r\n\r\n\t\tif (key) {\r\n\t\t\treturn translation.then(function (x) {\r\n\t\t\t\treturn x && x[key]; // modified by lwf\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn translation;\r\n\t};\r\n\r\n\t/**\r\n\t * @param {Node} node\r\n\t * @returns {Node[]}\r\n\t */\r\n\tfunction descendantTextNodes(node) {\r\n\t\tvar textNodes = [];\r\n\r\n\t\tfunction helper(node) {\r\n\t\t\tif (node.nodeType === 3) {\r\n\t\t\t\ttextNodes.push(node);\r\n\t\t\t} else {\r\n\t\t\t\tfor (var i = 0, c = node.childNodes, l = c.length; i < l; i += 1) {\r\n\t\t\t\t\thelper(c[i]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\thelper(node);\r\n\t\treturn textNodes;\r\n\t}\r\n\r\n\t/**\r\n\t * Recursively translate a DOM element in place\r\n\t * @param {Element} element - Root element to translate\r\n\t * @param {string[]} [attributes] - Array of node attributes to translate\r\n\t * @returns {Promise<void>}\r\n\t */\r\n\tTranslator.prototype.translateInPlace = function translateInPlace(element, attributes) {\r\n\t\tattributes = attributes || ['placeholder', 'title'];\r\n\r\n\t\tvar nodes = descendantTextNodes(element);\r\n\t\tvar text = nodes.map(function (node) {\r\n\t\t\treturn node.nodeValue;\r\n\t\t}).join('  ||  ');\r\n\r\n\t\tvar attrNodes = attributes.reduce(function (prev, attr) {\r\n\t\t\tvar tuples = Array.prototype.map.call(element.querySelectorAll('[' + attr + '*=\"[[\"]'), function (el) {\r\n\t\t\t\treturn [attr, el];\r\n\t\t\t});\r\n\t\t\treturn prev.concat(tuples);\r\n\t\t}, []);\r\n\t\tvar attrText = attrNodes.map(function (node) {\r\n\t\t\treturn node[1].getAttribute(node[0]);\r\n\t\t}).join('  ||  ');\r\n\r\n\t\treturn Promise.all([\r\n\t\t\tthis.translate(text),\r\n\t\t\tthis.translate(attrText),\r\n\t\t]).then(function (ref) {\r\n\t\t\tvar translated = ref[0];\r\n\t\t\tvar translatedAttrs = ref[1];\r\n\t\t\tif (translated) {\r\n\t\t\t\ttranslated.split('  ||  ').forEach(function (html, i) {\r\n\t\t\t\t\t$(nodes[i]).replaceWith(html);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (translatedAttrs) {\r\n\t\t\t\ttranslatedAttrs.split('  ||  ').forEach(function (text, i) {\r\n\t\t\t\t\tattrNodes[i][1].setAttribute(attrNodes[i][0], text);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\r\n\t/**\r\n\t * Get the language of the current environment, falling back to defaults\r\n\t * @returns {string}\r\n\t */\r\n\tTranslator.getLanguage = function getLanguage() {\r\n\t\t//var lang;\r\n\t\t//if (typeof window === 'object' && window.config && window.utils) {\r\n\t\t//\tlang = utils.params().lang || config.userLang || config.defaultLang || 'en-GB';\r\n\t\t//} else {\r\n\t\t//\tvar meta = require('./meta');\r\n\t\t//\tlang = meta.config && meta.config.defaultLang ? meta.config.defaultLang : 'en-GB';\r\n\t\t//}\r\n\t\t//return lang;\r\n\r\n\t\treturn 'en-GB';\r\n\t};\r\n\r\n\t/**\r\n\t * Create and cache a new Translator instance, or return a cached one\r\n\t * @param {string} [language] - ('en-GB') Language string\r\n\t * @returns {Translator}\r\n\t */\r\n\tTranslator.create = function create(language) {\r\n\t\tif (!language) {\r\n\t\t\tlanguage = Translator.getLanguage();\r\n\t\t}\r\n\r\n\t\tTranslator.cache[language] = Translator.cache[language] || new Translator(language);\r\n\r\n\t\treturn Translator.cache[language];\r\n\t};\r\n\r\n\tTranslator.cache = {};\r\n\r\n\t/**\r\n\t * Register a custom module to handle translations\r\n\t * @param {string} namespace - Namespace to handle translation for\r\n\t * @param {Function} factory - Function to return the translation function for this namespace\r\n\t */\r\n\tTranslator.registerModule = function registerModule(namespace, factory) {\r\n\t\tTranslator.moduleFactories[namespace] = factory;\r\n\r\n\t\tObject.keys(Translator.cache).forEach(function (key) {\r\n\t\t\tvar translator = Translator.cache[key];\r\n\t\t\ttranslator.modules[namespace] = factory(translator.lang);\r\n\t\t});\r\n\t};\r\n\r\n\tTranslator.moduleFactories = {};\r\n\r\n\t/**\r\n\t * Remove the translator patterns from text\r\n\t * @param {string} text\r\n\t * @returns {string}\r\n\t */\r\n\tTranslator.removePatterns = function removePatterns(text) {\r\n\t\tvar len = text.length;\r\n\t\tvar cursor = 0;\r\n\t\tvar lastBreak = 0;\r\n\t\tvar level = 0;\r\n\t\tvar out = '';\r\n\t\tvar sub;\r\n\r\n\t\twhile (cursor < len) {\r\n\t\t\tsub = text.slice(cursor, cursor + 2);\r\n\t\t\tif (sub === '[[') {\r\n\t\t\t\tif (level === 0) {\r\n\t\t\t\t\tout += text.slice(lastBreak, cursor);\r\n\t\t\t\t}\r\n\t\t\t\tlevel += 1;\r\n\t\t\t\tcursor += 2;\r\n\t\t\t} else if (sub === ']]') {\r\n\t\t\t\tlevel -= 1;\r\n\t\t\t\tcursor += 2;\r\n\t\t\t\tif (level === 0) {\r\n\t\t\t\t\tlastBreak = cursor;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcursor += 1;\r\n\t\t\t}\r\n\t\t}\r\n\t\tout += text.slice(lastBreak, cursor);\r\n\t\treturn out;\r\n\t};\r\n\r\n\r\n\treturn i18n.Translator = Translator;\r\n\r\n\r\n});\ndefine('skylark-domx-i18n/translate',[\r\n\t\"./i18n\",\r\n\t\"./Translator\"\r\n],function(i18n,Translator){\r\n\t/**\r\n\t * Legacy translator function for backwards compatibility\r\n\t */\r\n\tfunction translate(text, language, callback) {\r\n\t\t// TODO: deprecate?\r\n\r\n\t\tvar cb = callback;\r\n\t\tvar lang = language;\r\n\t\tif (typeof language === 'function') {\r\n\t\t\tcb = language;\r\n\t\t\tlang = null;\r\n\t\t}\r\n\r\n\t\tif (!(typeof text === 'string' || text instanceof String) || text === '') {\r\n\t\t\treturn cb('');\r\n\t\t}\r\n\r\n\t\treturn Translator.create(lang).translate(text).then(function (output) {\r\n\t\t\tif (cb) {\r\n\t\t\t\tsetTimeout(cb, 0, output);\r\n\t\t\t}\r\n\t\t\treturn output;\r\n\t\t}, function (err) {\r\n\t\t\tconsole.warn('Translation failed: ' + err.stack);\r\n\t\t});\r\n\t}\r\n\r\n\treturn i18n.translate = translate;\r\n\t\r\n});\ndefine('skylark-domx-i18n/prepareDom',[\r\n\t\"skylark-domx-query\",\r\n\t\"./i18n\",\r\n\t\"./translate\"\r\n],function($,i18n,translate){\r\n\r\n\treturn i18n.prepareDOM = function prepareDOM() {\r\n\t\t// Add directional code if necessary\r\n\t\ttranslate('[[language:dir]]', function (value) {\r\n\t\t\tif (value && !$('html').attr('data-dir')) {\r\n\t\t\t\t$('html').css('direction', value).attr('data-dir', value);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\t\r\n});\ndefine('skylark-domx-i18n/addTranslation',[\r\n\t\"skylark-domx-query\",\r\n\t\"./i18n\",\r\n\t\"./Translator\"\r\n],function($,i18n,Translator){\r\n\r\n\t/**\r\n\t * Add translations to the cache\r\n\t */\r\n\treturn i18n.addTranslation = function addTranslation(language, namespace, translation) {\r\n\t\tTranslator.create(language).getTranslation(namespace).then(function (translations) {\r\n\t\t\tassign(translations, translation);\r\n\t\t});\r\n\t};\r\n\t\r\n});\ndefine('skylark-domx-i18n/getTranslations',[\r\n\t\"skylark-domx-query\",\r\n\t\"./i18n\",\r\n\t\"./Translator\"\r\n],function($,i18n,Translator){\r\n\r\n\t/**\r\n\t * Get the translations object\r\n\t */\r\n\treturn i18n.getTranslations =  function getTranslations(language, namespace, callback) {\r\n\t\tcallback = callback || function () {};\r\n\t\tTranslator.create(language).getTranslation(namespace).then(callback);\r\n\t};\r\n\t\r\n});\ndefine('skylark-domx-i18n/main',[\r\n\t\"./i18n\",\r\n\t\"./Translator\",\r\n\t\"./prepareDom\",\r\n\t\"./translate\",\r\n\t\"./addTranslation\",\r\n\t\"./getTranslations\"\r\n],function(i18n){\r\n\treturn i18n;\r\n});\ndefine('skylark-domx-i18n', ['skylark-domx-i18n/main'], function (main) { return main; });\n\n"]}