{"version":3,"sources":["create.js"],"names":["define","noder","iframes","create","options","parentElm","props","attrs","id","url","src","style","onload","onerror","className","sandbox","frameBorder","name","iframe","contentWindowName","contentWindow"],"mappings":";;;;;;;AAAAA,QACE,qBACA,aACA,SAASC,EAAMC,GACf,aAgGA,OAAOA,EAAQC,OA9Ff,SAAgBC,EAAQC,GAIrB,IAAIC,KACDC,MAJHH,EAAUA,OAMEI,KACXF,EAAME,GAAKJ,EAAQI,IAGhBJ,EAAQK,MACXH,EAAMI,IAAMN,EAAQK,KAGjBL,EAAQO,QACXL,EAAMK,MAAQP,EAAQO,OAGnBP,EAAQQ,SACXN,EAAMM,OAASR,EAAQQ,QAGpBR,EAAQS,UACXP,EAAMM,OAASR,EAAQS,SAGpBT,EAAQU,YACXR,EAAMQ,UAAYV,EAAQU,WAGvBV,EAAQW,UACXR,EAAMQ,QAAUX,EAAQW,SAGrBX,EAAQY,cACXT,EAAMS,YAAcZ,EAAQY,aAGzBZ,EAAQa,OACXV,EAAMU,KAAOb,EAAQa,MA6CrB,IAAIC,EAASjB,EAAME,OAAO,SAASG,EAAMC,EAAMF,GAM/C,OAJID,EAAQe,oBACXD,EAAOE,cAAcH,KAAOb,EAAQe,mBAG9BD","file":"../create.js","sourcesContent":["define([\r\n  \"skylark-domx-noder\",\r\n  \"./iframes\"\r\n],function(noder,iframes){\r\n  'use strict';\r\n\r\n  function create(options,parentElm) {\r\n  \t  options = options || {\r\n  \t  };\r\n\r\n  \t  let props = {},\r\n  \t  \t  attrs = {};\r\n\r\n  \t  if (options.id) {\r\n  \t  \tprops.id = options.id;\r\n  \t  };\r\n\r\n  \t  if (options.url) {\r\n  \t  \tprops.src = options.url;\r\n  \t  };\r\n\r\n  \t  if (options.style) {\r\n  \t  \tprops.style = options.style;\r\n  \t  }\r\n\r\n  \t  if (options.onload) {\r\n  \t  \tprops.onload = options.onload;\r\n  \t  }\r\n\r\n  \t  if (options.onerror) {\r\n  \t  \tprops.onload = options.onerror;\r\n  \t  }\r\n\r\n  \t  if (options.className) {\r\n  \t  \tprops.className = options.className;\r\n  \t  }\r\n\r\n  \t  if (options.sandbox) {\r\n  \t  \tattrs.sandbox = options.sandbox;\r\n  \t  }\r\n\r\n  \t  if (options.frameBorder) {\r\n  \t  \tattrs.frameBorder = options.frameBorder;  \t  \t\r\n  \t  }\r\n\r\n  \t  if (options.name) {\r\n  \t  \tattrs.name = options.name;\r\n  \t  }\r\n\r\n  \t  /*\r\n      // Basic mode\r\n      // This adds the runner iframe to the page. It's only run once.\r\n      //if (!$live.find('iframe').length) {\r\n        iframe = noder.create(\"iframe\",{\r\n          ///iframe.src = jsbin.runner;\r\n          src : this.options.runnerUrl\r\n        },{\r\n          \"class\" : \"stretch\",\r\n          \"sandbox\", \"allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\",\r\n          \"frameBorder\": '0',\r\n          \"name\", \"<proxy>\",\r\n        },this._elm);\r\n\r\n        try {\r\n          ///iframe.contentWindow.name = '/' + jsbin.state.code + '/' + jsbin.state.revision;\r\n          iframe.contentWindow.name  = this.options.runnerName;\r\n        } catch (e) {\r\n          // ^- this shouldn't really fail, but if we're honest, it's a fucking mystery as to why it even works.\r\n          // problem is: if this throws (because iframe.contentWindow is undefined), then the execution exits\r\n          // and `var renderLivePreview` is set to undefined. The knock on effect is that the calls to renderLivePreview\r\n          // then fail, and jsbin doesn't boot up. Tears all round, so we catch.\r\n        }\r\n      //}\r\n\r\n      iframe.onload = () => {\r\n        if (window.postMessage) {\r\n          // setup postMessage listening to the runner\r\n          $window.on('message', (event) => {\r\n            this.handleMessage(event.originalEvent)\r\n          });\r\n          this.setup(iframe);\r\n          this._inited.resolve();\r\n        }\r\n      };\r\n\r\n      iframe.onerror = err => {\r\n        this._inited.reject(err);\r\n      };\r\n\r\n      */\r\n\r\n      let iframe = noder.create(\"iframe\",props,attrs,parentElm);\r\n\r\n      if (options.contentWindowName) {\r\n      \tiframe.contentWindow.name = options.contentWindowName;\r\n      }\r\n\r\n      return iframe;\r\n  }\r\n\r\n  return iframes.create = create;\r\n});"]}