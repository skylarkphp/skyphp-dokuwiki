{"version":3,"sources":["skylark-domx-iframes.js"],"names":["define","skylark","attach","noder","iframes","create","options","parentElm","props","attrs","id","url","src","style","onload","onerror","className","sandbox","frameBorder","name","iframe","contentWindowName","contentWindow","eventer","hookSizing","on","window","event","height","data","datax","loadReal","clone","attr","urlAttrName","split","prop","replace","ifame","geom","pending","init","i","todo","length","inview","unshift","splice","check","lazyLoad","holdingUrl","push","getQuery","styler","link","border","href","size","search","css","width","main"],"mappings":"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","file":"../skylark-domx-iframes.js","sourcesContent":["define('skylark-domx-iframes/iframes',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"domx.iframes\");\r\n});\ndefine('skylark-domx-iframes/create',[\r\n  \"skylark-domx-noder\",\r\n  \"./iframes\"\r\n],function(noder,iframes){\r\n  'use strict';\r\n\r\n  function create(options,parentElm) {\r\n  \t  options = options || {\r\n  \t  };\r\n\r\n  \t  let props = {},\r\n  \t  \t  attrs = {};\r\n\r\n  \t  if (options.id) {\r\n  \t  \tprops.id = options.id;\r\n  \t  };\r\n\r\n  \t  if (options.url) {\r\n  \t  \tprops.src = options.url;\r\n  \t  };\r\n\r\n  \t  if (options.style) {\r\n  \t  \tprops.style = options.style;\r\n  \t  }\r\n\r\n  \t  if (options.onload) {\r\n  \t  \tprops.onload = options.onload;\r\n  \t  }\r\n\r\n  \t  if (options.onerror) {\r\n  \t  \tprops.onload = options.onerror;\r\n  \t  }\r\n\r\n  \t  if (options.className) {\r\n  \t  \tprops.className = options.className;\r\n  \t  }\r\n\r\n  \t  if (options.sandbox) {\r\n  \t  \tattrs.sandbox = options.sandbox;\r\n  \t  }\r\n\r\n  \t  if (options.frameBorder) {\r\n  \t  \tattrs.frameBorder = options.frameBorder;  \t  \t\r\n  \t  }\r\n\r\n  \t  if (options.name) {\r\n  \t  \tattrs.name = options.name;\r\n  \t  }\r\n\r\n  \t  /*\r\n      // Basic mode\r\n      // This adds the runner iframe to the page. It's only run once.\r\n      //if (!$live.find('iframe').length) {\r\n        iframe = noder.create(\"iframe\",{\r\n          ///iframe.src = jsbin.runner;\r\n          src : this.options.runnerUrl\r\n        },{\r\n          \"class\" : \"stretch\",\r\n          \"sandbox\", \"allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\",\r\n          \"frameBorder\": '0',\r\n          \"name\", \"<proxy>\",\r\n        },this._elm);\r\n\r\n        try {\r\n          ///iframe.contentWindow.name = '/' + jsbin.state.code + '/' + jsbin.state.revision;\r\n          iframe.contentWindow.name  = this.options.runnerName;\r\n        } catch (e) {\r\n          // ^- this shouldn't really fail, but if we're honest, it's a fucking mystery as to why it even works.\r\n          // problem is: if this throws (because iframe.contentWindow is undefined), then the execution exits\r\n          // and `var renderLivePreview` is set to undefined. The knock on effect is that the calls to renderLivePreview\r\n          // then fail, and jsbin doesn't boot up. Tears all round, so we catch.\r\n        }\r\n      //}\r\n\r\n      iframe.onload = () => {\r\n        if (window.postMessage) {\r\n          // setup postMessage listening to the runner\r\n          $window.on('message', (event) => {\r\n            this.handleMessage(event.originalEvent)\r\n          });\r\n          this.setup(iframe);\r\n          this._inited.resolve();\r\n        }\r\n      };\r\n\r\n      iframe.onerror = err => {\r\n        this._inited.reject(err);\r\n      };\r\n\r\n      */\r\n\r\n      let iframe = noder.create(\"iframe\",props,attrs,parentElm);\r\n\r\n      if (options.contentWindowName) {\r\n      \tiframe.contentWindow.name = options.contentWindowName;\r\n      }\r\n\r\n      return iframe;\r\n  }\r\n\r\n  return iframes.create = create;\r\n});\ndefine('skylark-domx-iframes/hook-sizing',[\r\n  \"skylark-domx-eventer\",\r\n  \"./iframes\"\r\n],function(eventer,iframes){\r\n  'use strict';\r\n\r\n  function hookSizing(iframe) {\r\n    var onmessage = function (event) {\r\n      if (!event) { event = window.event; }\r\n      ///TODO : how check message source\r\n      // * 1 to coerse to number, and + 2 to compensate for border\r\n      iframe.style.height = (event.data.height * 1 + 2) + 'px';\r\n    };\r\n\r\n    eventer.on(window,'message', onmessage);\r\n  }\r\n\r\n  return iframes.hookSizing = hookSizing;\r\n\r\n});\ndefine('skylark-domx-iframes/load-real',[\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-data\",\r\n  \"./iframes\",\r\n  \"./hook-sizing\"\r\n],function(noder,datax,iframes,hookSizing){\r\n\r\n  function loadReal(iframe,options) {\r\n    options = options || {};\r\n    var clone = noder.clone(iframe);\r\n    var url = options.url;\r\n    if (!url) {\r\n      url = datax.attr(clone,options.urlAttrName || 'data-url');\r\n    }\r\n    url = url.split('&')[0];\r\n    datax.prop(clone,\"src\",url);\r\n    datax.prop(clone,\"_src\",url); // support for google slide embed\r\n    noder.replace(clone,ifame);\r\n    ///hookSizing(clone);\r\n  }\r\n\r\n  return iframes.loadReal = loadReal;  \r\n});\ndefine('skylark-domx-iframes/lazy-load',[\r\n\t\"skylark-domx-eventer\",\r\n\t\"skylark-domx-data\",\r\n\t\"skylark-domx-geom\",\r\n\t\"./iframes\",\r\n\t\"./load-real\"\r\n],function(eventer,datax,geom,iframes,loadReal){\r\n\tvar pending;\r\n\r\n\r\n  \tfunction check() {\r\n\t    var i = 0;\r\n\t    var todo = [];\r\n\t    for (i = 0; i < pending.length; i++) {\r\n\t      if (geom.inview(pending[i], 400)) {\r\n\t        todo.unshift({ iframe: pending[i], i: i });\r\n\t      }\r\n\t    }\r\n\r\n\t    for (i = todo.length -1 ; i >=0 ; i--) {\r\n\t      pending.splice(todo[i].i, 1);\r\n\t      loadReal(todo[i].iframe);\r\n\t    }\r\n  \t}\r\n\r\n\tfunction init() {\r\n\t\tif (pending) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tpending = [];\r\n\r\n\t\teventer.on(window,\"scroll\",function(){\r\n\t\t\tcheck();\r\n\t\t});\r\n\t}\r\n\r\n\tfunction lazyLoad(iframe,options) {\r\n\t\tinit();\r\n\r\n\t\toptions = options || {};\r\n\t\r\n      \t///iframe.setAttribute('data-url', url);\r\n      \t///iframe.src = 'https://jsbin.com/embed-holding';\r\n      \tif (options.url) {\r\n      \t\tdatax.attr(iframe,(options.urlAttrName || \"data-url\"),options.url)\r\n      \t}\r\n\r\n      \tif (options.holdingUrl) {\r\n      \t\tdatax.prop(iframe,\"src\",options.holdingUrl)      \t\t\r\n      \t}\r\n\r\n\t\tpending.push(iframe);\r\n\t}\r\n\r\n\treturn iframes.lazyLoad = lazyLoad\r\n});\ndefine('skylark-domx-iframes/replace',[\r\n  \"skylark-langx-urls/getQuery\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-styler\",\r\n  \"./iframes\",\r\n  \"./create\",\r\n  \"./load-real\",\r\n  \"./lazy-load\"\r\n],function(getQuery,noder,geom,styler,iframes,create,loadReal,lazyLoad){\r\n  'use strict';\r\n  \r\n  function replace(link,options) {\r\n    options = options || {};\r\n\r\n    /*\r\n    var iframe = noder.createElement('iframe',{\r\n      \"className\" : link.className, // inherit all the classes from the link\r\n      \"id\" : link.id, // also inherit, giving more style control to the user\r\n      \"style\" : { \"border\" : '1px solid #aaa'}\r\n    });\r\n    */\r\n\r\n    var ifarme =create({\r\n      \"className\" : link.className, // inherit all the classes from the link\r\n      \"id\" : link.id, // also inherit, giving more style control to the user\r\n      \"style\" : { \r\n        \"border\" : '1px solid #aaa'\r\n      }\r\n    });\r\n    ///var url = link.href.replace(/edit/, 'embed');\r\n    var url = options.url || link.href,\r\n        size = options.size || getQuery(link.search),\r\n        holdingUrl = options.holdingUrl;\r\n\r\n    styler.css(iframe,\"width\", size.width || '100%');\r\n    styler.css(iframe,\"minHeight\", size.height || '300px');\r\n    if (size.height) {\r\n      styler.css(iframe,\"maxHeight\", size.height);\r\n    }\r\n\r\n    // track when it comes into view and reload\r\n    if (geom.inview(link, 100)) {\r\n      // the iframe is full view, let's render it\r\n      ///iframe.src = url.split('&')[0];\r\n      ///iframe._src = url.split('&')[0]; // support for google slide embed\r\n      ///hookMessaging(iframe);\r\n      loadReal(iframe,{url})\r\n    } else {\r\n      ///iframe.setAttribute('data-url', url);\r\n      ///iframe.src = 'https://jsbin.com/embed-holding';\r\n      ///pending.push(iframe);\r\n      lazyLoad(iframe,{\r\n        url,\r\n        holdingUrl\r\n      });\r\n\r\n    }\r\n\r\n    noder.replace(iframe, link);\r\n  }\r\n\r\n  return iframes.replace = replace;\r\n});\ndefine('skylark-domx-iframes/main',[\r\n\t\"./iframes\",\r\n\t\"./create\",\r\n\t\"./lazy-load\",\r\n\t\"./load-real\",\r\n\t\"./replace\"\r\n],function(){\r\n\t\r\n});\ndefine('skylark-domx-iframes', ['skylark-domx-iframes/main'], function (main) { return main; });\n\n"]}