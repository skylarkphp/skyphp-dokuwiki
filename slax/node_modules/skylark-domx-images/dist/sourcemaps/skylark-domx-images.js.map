{"version":3,"sources":["skylark-domx-images.js"],"names":["define","skylark","attach","images","isCompleted","img","complete","undefined","naturalWidth","isLoaded","langx","eventer","watch","imgs","isArray","totalCount","length","progressedCount","successedCount","faileredCount","d","Deferred","resolve","total","successed","failered","progress","progressed","defer","forEach","on","load","error","promise","finder","loaded","elm","options","addBackgroundImage","elm1","matches","exec","styler","css","url","Image","src","push","nodeName","childImgs","findAll","i","background","children","preload","urls","isString","transforms","transform","el","name","noder","geom","viewer","style","clientSize","loadedCallback","onload","top","height","offsetHeight","left","width","offsetWidth","reset","visibility","onerror","_load","position","border","padding","margin","append","_init","ret","dispose","remove","args","makeArray","arguments","unshift","apply","$","elmx","delegate","imageIsCompleted","imageIsLoaded","imageLoaded","imageViewer","main"],"mappings":"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","file":"../skylark-domx-images.js","sourcesContent":["define('skylark-domx-images/images',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\r\n  function images() {\r\n    return images;\r\n  }\r\n\r\n  return skylark.attach(\"domx.images\" , images);\r\n});\r\n\ndefine('skylark-domx-images/is-completed',[\r\n\t\"./images\"\r\n],function(images){\r\n  function isCompleted(img) {\r\n     return img.complete && img.naturalWidth !== undefined;\r\n  }\r\n\r\n  return images.isCompleted = isCompleted;\r\n});\ndefine('skylark-domx-images/is-loaded',[\r\n\t\"./images\"\r\n],function(images){\r\n\r\n  function isLoaded(img) {\r\n    return img.complete && img.naturalWidth !== 0;\r\n  }\r\n  return images.isLoaded = isLoaded;\r\n});\ndefine('skylark-domx-images/watch',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-eventer\",\r\n    \"./images\",\r\n    \"./is-completed\",\r\n    \"./is-loaded\"\r\n], function(langx,eventer,images,isCompleted,isLoaded) {\r\n\r\n  function watch(imgs) {\r\n    if (!langx.isArray(imgs)) {\r\n      imgs = [imgs];\r\n    }\r\n    var totalCount = imgs.length,\r\n        progressedCount = 0,\r\n        successedCount = 0,\r\n        faileredCount = 0,\r\n        d = new langx.Deferred();\r\n\r\n\r\n    function complete() {\r\n\r\n      d.resolve({\r\n        \"total\" : totalCount,\r\n        \"successed\" : successedCount,\r\n        \"failered\" : faileredCount,\r\n        \"imgs\" : imgs \r\n      });\r\n    }\r\n\r\n    function progress(img,isLoaded) {\r\n\r\n      progressedCount++;\r\n      if (isLoaded) {\r\n        successedCount ++ ; \r\n      } else {\r\n        faileredCount ++ ;\r\n      }\r\n\r\n      // progress event\r\n      d.progress({\r\n        \"img\" : img,\r\n        \"isLoaded\" : isLoaded,\r\n        \"progressed\" : progressedCount,\r\n        \"total\" : totalCount,\r\n        \"imgs\" : imgs \r\n      });\r\n\r\n      // check if completed\r\n      if ( progressedCount == totalCount ) {\r\n        complete();\r\n      }\r\n    }\r\n\r\n    function check() {\r\n      if (!imgs.length ) {\r\n        complete();\r\n        return;\r\n      }\r\n\r\n      imgs.forEach(function(img) {\r\n        if (isCompleted(img)) {\r\n          progress(img,isLoaded(img));\r\n        } else {\r\n          eventer.on(img,{\r\n            \"load\" : function() {\r\n              progress(img,true);\r\n            },\r\n\r\n            \"error\" : function() {\r\n              progress(img,false);\r\n            }\r\n          });      \r\n        }\r\n      });\r\n    }\r\n\r\n    langx.defer(check);\r\n\r\n    d.promise.totalCount = totalCount;\r\n    return d.promise;\r\n  }\r\n\r\n\r\n\r\n  return images.watch = watch;\r\n});\r\n\ndefine('skylark-domx-images/loaded',[\r\n\t\"skylark-domx-finder\",\r\n\t\"./images\",\r\n\t\"./watch\"\r\n],function(finder,images,watch){\r\n\r\n  function loaded(elm,options) {\r\n    var imgs = [];\r\n\r\n    options = options || {};\r\n\r\n    function addBackgroundImage (elm1) {\r\n\r\n      var reURL = /url\\((['\"])?(.*?)\\1\\)/gi;\r\n      var matches = reURL.exec( styler.css(elm1,\"background-image\"));\r\n      var url = matches && matches[2];\r\n      if ( url ) {\r\n        var img = new Image();\r\n        img.src = url;\r\n        imgs.push(img);\r\n      }\r\n    }\r\n\r\n    // filter siblings\r\n    if ( elm.nodeName == 'IMG' ) {\r\n      imgs.push( elm );\r\n    } else {\r\n      // find children\r\n      var childImgs = finder.findAll(elm,'img');\r\n      // concat childElems to filterFound array\r\n      for ( var i=0; i < childImgs.length; i++ ) {\r\n        imgs.push(childImgs[i]);\r\n      }\r\n\r\n      // get background image on element\r\n      if ( options.background === true ) {\r\n        addBackgroundImage(elm);\r\n      } else  if ( typeof options.background == 'string' ) {\r\n        var children = finder.findAll(elm, options.background );\r\n        for ( i=0; i < children.length; i++ ) {\r\n          addBackgroundImage( children[i] );\r\n        }\r\n      }\r\n    }\r\n\r\n    return watch(imgs);\r\n  }\r\n\r\n  return images.loaded = loaded;\r\n});\ndefine('skylark-domx-images/preload',[\r\n    \"skylark-langx/langx\",\r\n\t\"./images\",\r\n\t\"./watch\"\r\n],function(langx,images,watch){\r\n  function preload(urls,options) {\r\n      if (langx.isString(urls)) {\r\n        urls = [urls];\r\n      }\r\n      var images = [];\r\n\r\n      urls.forEach(function(url){\r\n        var img = new Image();\r\n        img.src = url;\r\n        images.push(img);\r\n      });\r\n\r\n      return watch(images);\r\n  }\r\n\r\n  return images.preload = preload;\r\n});\ndefine('skylark-domx-images/transform',[\r\n    \"skylark-domx-transforms\",\r\n    \"./images\"\r\n], function(transforms,images) {\r\n\r\n\r\n  function transform(el,options) {\r\n  }\r\n\r\n  [\"vertical\",\"horizontal\",\"rotate\",\"left\",\"right\",\"scale\",\"zoom\",\"zoomin\",\"zoomout\",\"reset\"].forEach(\r\n    function(name){\r\n      transform[name] = transforms[name];\r\n    }\r\n  );\r\n\r\n\r\n\r\n  return images.transform = transform;\r\n});\r\n\ndefine('skylark-domx-images/viewer',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-transforms\",\r\n    \"./images\"\r\n], function(langx,noder,geom,styler,transforms,images) {\r\n\r\n\r\n\r\n\r\n  function viewer(el,options) {\r\n    var img ,\r\n        style = {},\r\n        clientSize = geom.clientSize(el),\r\n        loadedCallback = options.loaded,\r\n        faileredCallback = options.failered;\r\n\r\n    function onload() {\r\n        styler.css(img,{//center\r\n          top: (clientSize.height - img.offsetHeight) / 2 + \"px\",\r\n          left: (clientSize.width - img.offsetWidth) / 2 + \"px\"\r\n        });\r\n\r\n        transforms.reset(img);\r\n\r\n        styler.css(img,{\r\n          visibility: \"visible\"\r\n        });\r\n\r\n        if (loadedCallback) {\r\n          loadedCallback();\r\n        }\r\n    }\r\n\r\n    function onerror() {\r\n\r\n    }\r\n    function _init() {\r\n      style = styler.css(el,[\"position\",\"overflow\"]);\r\n      if (style.position != \"relative\" && style.position != \"absolute\") { \r\n        styler.css(el,\"position\", \"relative\" );\r\n      }\r\n      styler.css(el,\"overflow\", \"hidden\" );\r\n\r\n      img = new Image();\r\n\r\n      styler.css(img,{\r\n        position: \"absolute\",\r\n        border: 0, padding: 0, margin: 0, width: \"auto\", height: \"auto\",\r\n        visibility: \"hidden\"\r\n      });\r\n\r\n      img.onload = onload;\r\n      img.onerror = onerror;\r\n\r\n      noder.append(el,img);\r\n\r\n      if (options.url) {\r\n        _load(options.url);\r\n      }\r\n    }\r\n\r\n    function _load(url) {\r\n        img.style.visibility = \"hidden\";\r\n        img.src = url;\r\n    }\r\n\r\n    function _dispose() {\r\n        noder.remove(img);\r\n        styler.css(el,style);\r\n        img = img.onload = img.onerror = null;\r\n    }\r\n\r\n    _init();\r\n\r\n    var ret =  {\r\n      load : _load,\r\n      dispose : _dispose\r\n    };\r\n\r\n    [\"vertical\",\"horizontal\",\"rotate\",\"left\",\"right\",\"scale\",\"zoom\",\"zoomin\",\"zoomout\",\"reset\"].forEach(\r\n      function(name){\r\n        ret[name] = function() {\r\n          var args = langx.makeArray(arguments);\r\n          args.unshift(img);\r\n          transforms[name].apply(null,args);\r\n        }\r\n      }\r\n    );\r\n\r\n    return ret;\r\n  }\r\n\r\n\r\n  return images.viewer = viewer;\r\n});\ndefine('skylark-domx-images/main',[\r\n\t\"skylark-domx-query\",\r\n\t\"skylark-domx-velm\",\r\n\t\"./images\",\r\n\t\"./is-completed\",\r\n\t\"./is-loaded\",\r\n\t\"./loaded\",\r\n\t\"./preload\",\r\n\t\"./transform\",\r\n\t\"./viewer\",\r\n\t\"./watch\"\r\n],function($,elmx,images,isCompleted,isLoaded,loaded,preload,transform,viewer,watch){\r\n\r\n  elmx.delegate([\r\n  \t\"imageIsCompleted\",\r\n  \t\"imageIsLoaded\",\r\n  \t\"imageLoaded\",\r\n  \t\"imageViewer\"\r\n  ],images,{\r\n  \t\"imageIsCompleted\" : \"isCompleted\",\r\n  \t\"imageIsLoaded\" : \"isLoaded\",\r\n  \t\"imageLoaded\" : \"loaded\",\r\n  \t\"imageViewer\" : \"viewer\"  \t\r\n  });\r\n\r\n\treturn images;\r\n});\ndefine('skylark-domx-images', ['skylark-domx-images/main'], function (main) { return main; });\n\n"]}