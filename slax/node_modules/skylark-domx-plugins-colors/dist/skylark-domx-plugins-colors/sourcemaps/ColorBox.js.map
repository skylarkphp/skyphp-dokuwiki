{"version":3,"sources":["ColorBox.js"],"names":["define","langx","noder","finder","$","eventer","styler","plugins","popups","Color","colors","ColorPane","ColorBox","Plugin","inherit","klassName","pluginName","options","pane","states","showPalette","showPaletteOnly","togglePaletteOnly","showSelectionPalette","showInput","allowEmpty","showButtons","showInitial","showAlpha","maxSelectionSize","palette","undefined","selectionPalette","color","_updateUI","realColor","this","get","$previewElement","removeClass","css","stating","addClass","toHexString","realRgb","toRgbString","toString","_applyOptions","reflow","_construct","elm","prototype","call","$el","opts","$pane","template","find","instantiate","mixin","_init","self","paneIsVisible","hidePane","hide","listenTo","e","show","stop","revert","set","offset","calcOffset","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,sBACA,qBACA,uBACA,sBACA,4BACA,8BACA,gCACA,WACA,eACC,SAASC,EAAOC,EAAOC,EAAQC,EAAEC,EAASC,EAAOC,EAAQC,EAAOC,EAAMC,EAAOC,GAC9E,aAEA,IAAIC,EAAWL,EAAQM,OAAOC,SAC1BC,UAAY,WAEZC,WAAa,kBAEbC,SACIC,MACIC,QACIC,aAAa,EACbC,iBAAiB,EACjBC,mBAAmB,EACnBC,sBAAsB,EACtBC,WAAW,EACXC,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,WAAW,GAEfC,iBAAkB,EAElBC,aAAUC,EACVC,sBAAmBD,GAIvBE,OAAO,GAIXC,UAAY,WACR,IAAIC,EAAYC,KAAKC,MAMrB,GAHAD,KAAKE,gBAAgBC,YAAY,oBACjCH,KAAKE,gBAAgBE,IAAI,mBAAoB,gBAExCL,GAAaC,KAAKK,QAAQ,cAE3BL,KAAKE,gBAAgBI,SAAS,wBAE7B,CACaP,EAAUQ,cAAxB,IACIC,EAAUT,EAAUU,cAGxBT,KAAKE,gBAAgBE,IAAI,mBAAoBI,GAE9BT,EAAUW,WAG7BV,KAAKlB,KAAKgB,aAIda,cAAgB,WAEbX,KAAKY,UAGPC,WAAY,SAASC,EAAKjC,GACvBV,EAAQM,OAAOsC,UAAUF,WAAWG,KAAKhB,KAAKc,EAAIjC,GAElDmB,KAAKiB,IAAMjB,KAAKhC,IAEhB,IAAIkD,EAAOlB,KAAKnB,QACfsC,EAAQnB,KAAKmB,MAAQnD,EAAEkD,EAAKpC,KAAKsC,UACZpB,KAAKE,gBAAkBF,KAAKiB,IAAII,KAAK,qBAGvDF,EAAM,KACNnB,KAAKlB,KAAOP,EAAU+C,YAAYH,EAAM,GAAGtD,EAAM0D,OAC7C1B,MAAQqB,EAAKrB,OACfqB,EAAKpC,QAIXkB,KAAKwB,SAITA,MAAQ,WACJ,IAAIC,EAAOzB,KACAA,KAAKnB,QAEhBmB,KAAKW,gBAEL,IAAIe,GAAgB,EAiBpB,SAASC,IACAD,IAGLA,GAAgB,EAEhBD,EAAKN,MAAMS,QAtBf5B,KAAKmB,MAAMS,OA0BX5B,KAAK6B,SAAS7B,KAAKiB,IAAI,mBAAoB,SAAUa,GAC7CJ,EACAC,IA1BAD,IAIJA,GAAgB,EAEhBD,EAAKN,MAAMY,OAEXN,EAAKb,SAELa,EAAK3B,aAqBP7B,EAAQ+D,KAAKF,KAGf9B,KAAK6B,SAAS7B,KAAKlB,KAAK,SAAS,CAACgD,EAAEjC,KAGhCG,KAAKE,gBAAgBE,IAAI,mBAAoBP,EAAMY,iBAGvDT,KAAK6B,SAAS7B,KAAKlB,KAAK,mBAAoBgD,IACxCH,OAMRM,OAAU,WACTjC,KAAKlB,KAAKmD,UAIXhC,IAAM,WACF,OAAOD,KAAKlB,KAAKmB,OAIrBiC,IAAM,SAAUrC,GACfG,KAAKlB,KAAKoD,IAAIrC,IAIfe,OAAS,WAELZ,KAAKmB,MAAMf,IAAI,WAAY,YAC3BJ,KAAKmB,MAAMgB,OAAO/D,EAAOgE,WAAWpC,KAAKmB,MAAM,GAAInB,KAAKiB,IAAI,KAE5DjB,KAAKlB,KAAK8B,YASlB,OAFAzC,EAAQkE,SAAS7D,GAEVF,EAAOE,SAAWA","file":"../ColorBox.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-popups\",\r\n    \"skylark-graphics-colors/Color\",\r\n    \"./colors\",\r\n    \"./ColorPane\"\r\n   ],function(langx, noder, finder, $,eventer, styler,plugins,popups,Color,colors,ColorPane) {\r\n    \"use strict\";\r\n\r\n    var ColorBox = plugins.Plugin.inherit({\r\n        klassName : \"ColorBox\",\r\n\r\n        pluginName : \"lark.colors.box\",\r\n\r\n        options : {\r\n            pane : {\r\n                states : {\r\n                    showPalette: false,\r\n                    showPaletteOnly: false,\r\n                    togglePaletteOnly: false,\r\n                    showSelectionPalette: true,\r\n                    showInput: false,\r\n                    allowEmpty: false,\r\n                    showButtons: true,\r\n                    showInitial: false,\r\n                    showAlpha: false\r\n                },                \r\n                maxSelectionSize: 7,\r\n\r\n                palette : undefined,\r\n                selectionPalette : undefined\r\n            },\r\n\r\n            // Options\r\n            color: false\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var realColor = this.get(),\r\n                displayColor = '';\r\n             //reset background info for preview element\r\n            this.$previewElement.removeClass(\"sp-clear-display\");\r\n            this.$previewElement.css('background-color', 'transparent');\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n                // Update the replaced elements background with icon indicating no color selection\r\n                this.$previewElement.addClass(\"sp-clear-display\");\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", realRgb);\r\n\r\n                displayColor = realColor.toString();\r\n            }\r\n\r\n            this.pane._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n            \t$pane = this.$pane = $(opts.pane.template),\r\n                $previewElement = this.$previewElement = this.$el.find(\".sp-preview-inner\");\r\n\r\n\r\n            if ($pane[0]) {\r\n                this.pane = ColorPane.instantiate($pane[0],langx.mixin({\r\n                    color : opts.color\r\n                },opts.pane));\r\n\r\n            } \r\n\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n\r\n            this._applyOptions();\r\n\r\n            var paneIsVisible = false;\r\n            this.$pane.hide();\r\n            function showPane() {\r\n                if (paneIsVisible) {\r\n                    return;\r\n                }\r\n               \r\n                paneIsVisible = true;\r\n\r\n                self.$pane.show();\r\n\r\n                self.reflow();\r\n                \r\n                self._updateUI();\r\n                \r\n            }\r\n\r\n            function hidePane() {\r\n                if (!paneIsVisible) {\r\n                    return;\r\n                }\r\n                paneIsVisible = false;\r\n\r\n                self.$pane.hide();\r\n            }\r\n\r\n\r\n            this.listenTo(this.$el,\"click touchstart\", function (e) {\r\n                if (paneIsVisible) {\r\n                    hidePane();\r\n                } else {\r\n                    showPane();\r\n                }\r\n\r\n              eventer.stop(e);\r\n            });\r\n\r\n            this.listenTo(this.pane,\"picked\",(e,color) => {\r\n\r\n                // Update the replaced elements background color (with actual selected color)\r\n                this.$previewElement.css(\"background-color\", color.toRgbString());               \r\n            });\r\n\r\n            this.listenTo(this.pane,\"canceled choosed\",(e) => {\r\n                hidePane();\r\n            });\r\n\r\n\r\n        },\r\n\r\n        revert :  function () {\r\n        \tthis.pane.revert();\r\n        },\r\n\r\n\r\n        get : function () {\r\n            return this.pane.get();\r\n        },\r\n\r\n\r\n        set : function (color) {\r\n        \tthis.pane.set(color);\r\n        },\r\n\r\n\r\n        reflow : function () {\r\n\r\n            this.$pane.css(\"position\", \"absolute\");\r\n            this.$pane.offset(popups.calcOffset(this.$pane[0], this.$el[0]));\r\n\r\n            this.pane.reflow();\r\n\r\n        }\r\n\r\n\r\n    });\r\n\r\n    plugins.register(ColorBox);\r\n\r\n    return colors.ColorBox = ColorBox;\r\n\r\n});"]}