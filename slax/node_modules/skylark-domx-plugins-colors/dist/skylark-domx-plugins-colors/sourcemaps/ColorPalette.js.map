{"version":3,"sources":["ColorPalette.js"],"names":["define","skylark","langx","browser","noder","finder","$","eventer","styler","fx","plugins","Color","colors","helper","noop","ColorPalette","Plugin","inherit","klassName","pluginName","options","selectors","texts","states","showSelectionPalette","palette","selectionPalette","_addColorToSelectionPalette","color","this","stating","rgb","parse","toRgbString","_paletteLookup","inArray","_selectionPalette","push","length","_maxSelectionSize","shift","getUniqueSelectionPalette","unique","opts","i","reverse","slice","maxSelectionSize","_drawPalette","currentColor","current","html","map","_paletteArray","paletteTemplate","$el","join","_updateUI","_applyOptions","_states","_palette","paletteArray","isArray","paletteLookup","j","_applyStates","_construct","elm","prototype","call","_init","self","_initialColor","paletteEvent","isIE","on","e","target","closest","data","emit","name","value","undefined","reflow","_current","register"],"mappings":"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","file":"../ColorPalette.js","sourcesContent":["define([\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-graphics-colors/Color\",\r\n    \"./colors\",\r\n    \"./helper\"\r\n],function(skylark, langx, browser, noder, finder, $,eventer, styler,fx,plugins,Color,colors,helper) {\r\n    \"use strict\";\r\n\r\n    var noop = langx.noop;\r\n\r\n    var ColorPalette = plugins.Plugin.inherit({\r\n        klassName : \"ColorPalette\",\r\n\r\n        pluginName : \"lark.colors.palette\",\r\n\r\n        options : {\r\n            selectors  : {\r\n            },\r\n\r\n            texts : {\r\n            },\r\n\r\n            states : {\r\n                showSelectionPalette: true\r\n            },\r\n            palette: [\r\n                [\"#ffffff\", \"#000000\", \"#ff0000\", \"#ff8000\", \"#ffff00\", \"#008000\", \"#0000ff\", \"#4b0082\", \"#9400d3\"]\r\n            ],\r\n            selectionPalette: []\r\n\r\n        },\r\n\r\n       _addColorToSelectionPalette : function (color) {\r\n            if (this.stating(\"showSelectionPalette\")) {\r\n                var rgb = Color.parse(color).toRgbString();\r\n                if (!this._paletteLookup[rgb] && langx.inArray(rgb, this._selectionPalette) === -1) {\r\n                    this._selectionPalette.push(rgb);\r\n                    while(this._selectionPalette.length > this._maxSelectionSize) {\r\n                        this._selectionPalette.shift();\r\n                    }\r\n                }\r\n            }\r\n        },  \r\n\r\n        getUniqueSelectionPalette : function () {\r\n            var unique = [],\r\n                opts = this.options;\r\n            if (this.stating(\"showPalette\")) {\r\n                for (var i = 0; i < this._selectionPalette.length; i++) {\r\n                    var rgb = Color.parse(this._selectionPalette[i]).toRgbString();\r\n\r\n                    if (!this._paletteLookup[rgb]) {\r\n                        unique.push(this._selectionPalette[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return unique.reverse().slice(0, opts.maxSelectionSize);\r\n        },\r\n\r\n        _drawPalette : function () {\r\n\r\n            var opts = this.options,\r\n                currentColor = this.current();\r\n\r\n            var html = langx.map(this._paletteArray, function (palette, i) {\r\n                return helper.paletteTemplate(palette, currentColor, \"sp-palette-row sp-palette-row-\" + i, opts);\r\n            });\r\n\r\n            if (this._selectionPalette) {\r\n                html.push(helper.paletteTemplate(this.getUniqueSelectionPalette(), currentColor, \"sp-palette-row sp-palette-row-selection\", opts));\r\n            }\r\n\r\n            this.$el.html(html.join(\"\"));\r\n        },\r\n\r\n\r\n        _updateUI : function () {\r\n           this._drawPalette();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                showSelectionPalette: opts.showSelectionPalette\r\n            };            \r\n\r\n            if (opts.palette) {\r\n                var  palette = this._palette = opts.palette.slice(0),\r\n                    paletteArray = this._paletteArray = langx.isArray(palette[0]) ? palette : [palette],\r\n                    paletteLookup = this._paletteLookup = {};\r\n                for (var i = 0; i < paletteArray.length; i++) {\r\n                    for (var j = 0; j < paletteArray[i].length; j++) {\r\n                        var rgb = Color.parse(paletteArray[i][j]).toRgbString();\r\n                        paletteLookup[rgb] = true;\r\n                    }\r\n                }\r\n            }\r\n           this._applyStates();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n           plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            this.$el = this.$();\r\n\r\n            this._init();\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options,\r\n                initialColor = this._initialColor =  opts.color,\r\n                selectionPalette = this._selectionPalette =  opts.selectionPalette.slice(0);\r\n\r\n            this._applyOptions();\r\n\r\n\r\n            if (!!this._initialColor) {\r\n                this.current(this._initialColor);\r\n\r\n                // In case color was black - update the preview UI and set the format\r\n                // since the set function will not run (default color is black).\r\n                self._addColorToSelectionPalette(this._initialColor);\r\n            } else {\r\n                this._updateUI();\r\n            }\r\n\r\n            function paletteElementClick(e) {\r\n                self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                self.emit(\"selected\",self.current());\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.palette\" : \"click.palette touchstart.palette\";\r\n            this.$el.on(paletteEvent, \".sp-thumb-el\", paletteElementClick);\r\n        },\r\n\r\n\r\n        _applyStates : function() {\r\n\r\n        },\r\n\r\n        stating : function(name,value) {\r\n        \tif (value !== undefined) {\r\n        \t\tthis._states[name] = value;\r\n        \t\tthis._applyStates();\r\n        \t} else {\r\n        \t\treturn this._states[name];\r\n        \t}\r\n        },\r\n\r\n        reflow : function () {\r\n           this._drawPalette();\r\n        },\r\n\r\n        current : function(color) {\r\n        \tif (color === undefined) {\r\n        \t\treturn this._current;\r\n        \t} else {\r\n        \t\tthis._current = color;\r\n                this._updateUI();\r\n        \t}\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPalette);\r\n\r\n    return colors.ColorPalette = ColorPalette;\r\n\r\n});"]}