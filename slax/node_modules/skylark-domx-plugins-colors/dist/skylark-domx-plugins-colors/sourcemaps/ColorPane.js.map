{"version":3,"sources":["ColorPane.js"],"names":["define","langx","browser","noder","finder","$","eventer","styler","fx","plugins","popups","Color","colors","ColorPicker","ColorPalette","ColorPane","Plugin","inherit","klassName","pluginName","options","selectors","pickerContainer","toggleButton","paletteContainer","draggingClass","texts","togglePaletteMoreText","togglePaletteLessText","clearText","noColorSelectedText","states","showPalette","showPaletteOnly","togglePaletteOnly","showSelectionPalette","showInput","allowEmpty","showButtons","showInitial","showAlpha","color","maxSelectionSize","_updateUI","this","stating","palette","picker","_applyOptions","opts","_states","_applyStates","reflow","_construct","elm","prototype","call","$el","theme","$pickerContainer","find","$paletteContainer","initialColor","$toggleButton","_initialColor","_isEmpty","instantiate","selectionPalette","listenTo","e","emit","_init","self","isIE","$container","attr","stop","current","revert","set","_colorOnShow","_updateOriginalInput","get","text","option","toggleClass","css","outerWidth","name","value","undefined","register"],"mappings":"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","file":"../ColorPane.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-fx\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-popups\",\r\n    \"skylark-graphics-colors/Color\",\r\n    \"./colors\",\r\n    \"./ColorPicker\",\r\n    \"./ColorPalette\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,fx,plugins,popups,Color,colors,ColorPicker,ColorPalette) {\r\n    \"use strict\";\r\n\r\n    var ColorPane = plugins.Plugin.inherit({\r\n        klassName : \"ColorPane\",\r\n\r\n        pluginName : \"lark.colors.pane\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                pickerContainer : \".sp-picker-container\",\r\n                toggleButton : \".sp-palette-toggle\",\r\n                paletteContainer : \".sp-palette\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",           \r\n\r\n            texts : {\r\n                togglePaletteMoreText: \"more\",\r\n                togglePaletteLessText: \"less\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showPalette: false,\r\n                showPaletteOnly: false,\r\n                togglePaletteOnly: false,\r\n                showSelectionPalette: true,\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            // Options\r\n            color: false,\r\n            maxSelectionSize: 7\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette._updateUI();\r\n            }\r\n            this.picker._updateUI();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                togglePaletteOnly : opts.states.togglePaletteOnly,\r\n                showPalette : opts.states.showPalette,\r\n                showPaletteOnly : opts.states.showPaletteOnly,\r\n                showSelectionPalette: opts.showSelectionPalette,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n\r\n            var \r\n                //container = this.$container = $(markup,elm.ownerDocument).addClass(theme),\r\n                pickerContainer = this.$pickerContainer =  $el.find(opts.selectors.pickerContainer),\r\n                paletteContainer = this.$paletteContainer =  $el.find(opts.selectors.paletteContainer),\r\n                toggleButton = this.$toggleButton = $el.find(opts.selectors.toggleButton),\r\n                initialColor = this._initialColor =  opts.color,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n            if (paletteContainer[0]) {\r\n                this.palette = ColorPalette.instantiate(paletteContainer[0],{\r\n                    selectionPalette : opts.selectionPalette,\r\n                    color : opts.color,\r\n                    palette : opts.palette,\r\n                    selectionPalette : opts.selectionPalette\r\n                })\r\n            } \r\n\r\n            if (pickerContainer[0]) {\r\n                this.picker = ColorPicker.instantiate(pickerContainer[0],{\r\n                    color : opts.color,\r\n                    states : {\r\n                        showInput: opts.states.showInput,\r\n                        allowEmpty: opts.states.allowEmpty,\r\n                        showButtons: opts.states.showButtons,\r\n                        showInitial: opts.states.showInitial,\r\n                        showAlpha: opts.states.showAlpha                                            \r\n                    }\r\n                }) ;\r\n\r\n                this.listenTo(this.picker,\"canceled\",(e) => {\r\n                    this.emit(\"canceled\");\r\n                });    \r\n                this.listenTo(this.picker,\"choosed\",(e) => {\r\n                    this.emit(\"choosed\");\r\n                });    \r\n                this.listenTo(this.picker,\"picked\",(e,color) => {\r\n                    this.emit(\"picked\",color);\r\n                }); \r\n            }\r\n            this._init();\r\n\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n           if (browser.isIE) {\r\n                this.$container.find(\"*:not(input)\").attr(\"unselectable\", \"on\");\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n\r\n          \r\n            this.listenTo(this.$toggleButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n\r\n                self.stating(\"showPaletteOnly\",!self.stating(\"showPaletteOnly\"));\r\n            });\r\n\r\n            this.listenTo(this.palette,\"selected\",function(e,color){\r\n                self.picker.current(color);\r\n            });\r\n        },\r\n\r\n        revert :  function () {\r\n            this.set(this._colorOnShow, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        get : function () {\r\n            return this.picker.current();\r\n        },\r\n\r\n\r\n        set : function (color) {\r\n            this.picker.current(color);\r\n            this.palette.current(color);\r\n        },\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            if (states.showPaletteOnly) {\r\n                states.showPalette = true;\r\n            }\r\n\r\n            this.$toggleButton.text(states.showPaletteOnly ? this.option(\"texts.togglePaletteMoreText\"): this.option(\"texts.togglePaletteLessText\"));\r\n\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                            .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                            .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                            .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                            .toggleClass(\"sp-palette-buttons-disabled\", !states.togglePaletteOnly)\r\n                            .toggleClass(\"sp-palette-disabled\", !states.showPalette)\r\n                            .toggleClass(\"sp-palette-only\", states.showPaletteOnly)\r\n                            .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (states.showPaletteOnly) {\r\n                this.$el.css('left', '-=' + (this.$pickerContainer.outerWidth(true) + 5));\r\n            }\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this.palette.reflow();\r\n            }\r\n\r\n            this.picker.reflow();\r\n\r\n        }\r\n    });\r\n\r\n\r\n    plugins.register(ColorPane);\r\n\r\n    return colors.ColorPane = ColorPane;\r\n});"]}