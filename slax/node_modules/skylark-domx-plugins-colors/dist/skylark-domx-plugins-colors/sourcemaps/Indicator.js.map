{"version":3,"sources":["indicator.js"],"names":["define","skylark","langx","browser","noder","eventer","finder","$","plugins","Indicator","Plugin","inherit","klassName","pluginName","options","_construct","elm","prototype","call","this","listenTo","elmx","e","_start","_move","_dragging","offset","_offset","pageX","pageY","maxWidth","_maxWidth","maxHeight","_maxHeight","dragX","Math","max","min","left","dragY","top","onmove","apply","_elm","which","button","onstart","arguments","$el","height","width","$doc","document","mousemove","mouseup","_stop","find","addClass","stop","unlistenTo","removeClass","onstop","_delay","register"],"mappings":";;;;;;;AAAAA,QACG,wBACC,sBACA,uBACA,qBACA,uBACA,sBACA,qBACA,6BACF,SAASC,EAASC,EAAOC,EAASC,EAAOC,EAAQC,EAAQC,EAAEC,GA+FzD,IAAIC,EAAYD,EAAQE,OAAOC,SAC3BC,UAAY,YAEZC,WAAa,wBAEbC,WAGAC,WAAY,SAASC,EAAKF,GACtBN,EAAQE,OAAOO,UAAUF,WAAWG,KAAKC,KAAKH,EAAIF,GAElDK,KAAKC,SAASD,KAAKE,OAAO,YAAeC,IACrCH,KAAKI,OAAOD,MAKpBE,MAAQ,SAASF,GACb,GAAIH,KAAKM,UAAW,CAChB,IAAIC,EAASP,KAAKQ,QACdC,EAAQN,EAAEM,MACVC,EAAQP,EAAEO,MACVC,EAAWX,KAAKY,UAChBC,EAAYb,KAAKc,WAEjBC,EAAQC,KAAKC,IAAI,EAAGD,KAAKE,IAAIT,EAAQF,EAAOY,KAAMR,IAClDS,EAAQJ,KAAKC,IAAI,EAAGD,KAAKE,IAAIR,EAAQH,EAAOc,IAAKR,IAEjDS,EAAStB,KAAKL,QAAQ2B,OACtBA,GACAA,EAAOC,MAAMvB,KAAKwB,MAAOT,EAAOK,EAAOjB,MAKnDC,OAAS,SAASD,GAGd,KAFkBA,EAAO,MAAgB,GAAXA,EAAEsB,MAA2B,GAAZtB,EAAEuB,UAE7B1B,KAAKM,UAAW,CAChC,IAAIqB,EAAU3B,KAAKL,QAAQgC,QAC3B,IAAKA,IAAmD,IAAxCA,EAAQJ,MAAMvB,KAAKwB,KAAMI,WAAsB,CAC3D5B,KAAKM,WAAY,EACjB,IAAIuB,EAAM7B,KAAKZ,IAEfY,KAAKc,WAAae,EAAIC,SACtB9B,KAAKY,UAAYiB,EAAIE,QACrB/B,KAAKQ,QAAUqB,EAAItB,SAEnB,IAAIyB,EAAOhC,KAAKZ,EAAE6C,UAElBjC,KAAKC,SAAS+B,GACVE,UAAe/B,IACXH,KAAKK,MAAMF,IAEfgC,QAAahC,IACTH,KAAKoC,MAAMjC,MAGnB6B,EAAKK,KAAK,QAAQC,SAAS,eAE3BtC,KAAKK,MAAMF,GAEXjB,EAAQqD,KAAKpC,MAKzBiC,MAAQ,SAASjC,GACb,IAAI6B,EAAOhC,KAAKZ,EAAE6C,UACdjC,KAAKM,YACLN,KAAKwC,WAAWR,GAChBA,EAAKK,KAAK,QAAQI,YAAY,eAE9BC,OAAS1C,KAAKL,QAAQ+C,OAIlBA,QACA1C,KAAK2C,OAAO,WACRD,OAAOnB,MAAMvB,KAAKwB,KAAMI,cAIpC5B,KAAKM,WAAY,KAM5B,OAFGjB,EAAQuD,SAAStD,GAEbA","file":"../indicator.js","sourcesContent":["define([\r\n   \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\"    \r\n],function(skylark, langx, browser, noder, eventer,finder, $,plugins) {\r\n    /**\r\n    * Lightweight drag helper.  Handles containment within the element, so that\r\n    * when dragging, the x is within [0,element.width] and y is within [0,element.height]\r\n    */\r\n    function draggable(element, onmove, onstart, onstop) {\r\n        onmove = onmove || function () { };\r\n        onstart = onstart || function () { };\r\n        onstop = onstop || function () { };\r\n        var doc = document;\r\n        var dragging = false;\r\n        var offset = {};\r\n        var maxHeight = 0;\r\n        var maxWidth = 0;\r\n        var hasTouch = ('ontouchstart' in window);\r\n\r\n        var duringDragEvents = {};\r\n        duringDragEvents[\"selectstart\"] = prevent;\r\n        duringDragEvents[\"dragstart\"] = prevent;\r\n        duringDragEvents[\"touchmove mousemove\"] = move;\r\n        duringDragEvents[\"touchend mouseup\"] = stop;\r\n\r\n        function prevent(e) {\r\n            if (e.stopPropagation) {\r\n                e.stopPropagation();\r\n            }\r\n            if (e.preventDefault) {\r\n                e.preventDefault();\r\n            }\r\n            e.returnValue = false;\r\n        }\r\n\r\n        function move(e) {\r\n            if (dragging) {\r\n                // Mouseup happened outside of window\r\n                if (browser.isIE && doc.documentMode < 9 && !e.button) {\r\n                    return stop();\r\n                }\r\n\r\n                var t0 = e.originalEvent && e.originalEvent.touches && e.originalEvent.touches[0];\r\n                var pageX = t0 && t0.pageX || e.pageX;\r\n                var pageY = t0 && t0.pageY || e.pageY;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                if (hasTouch) {\r\n                    // Stop scrolling in iOS\r\n                    prevent(e);\r\n                }\r\n\r\n                onmove.apply(element, [dragX, dragY, e]);\r\n            }\r\n        }\r\n\r\n        function start(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            var onstart = this.options.onstart || funcs.noop;\r\n\r\n            if (!rightclick && !dragging) {\r\n                if (onstart.apply(element, arguments) !== false) {\r\n                    dragging = true;\r\n                    maxHeight = $(element).height();\r\n                    maxWidth = $(element).width();\r\n                    offset = $(element).offset();\r\n\r\n                    $(doc).on(duringDragEvents);\r\n                    $(doc.body).addClass(\"sp-dragging\");\r\n\r\n                    move(e);\r\n\r\n                    prevent(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        function stop() {\r\n            if (dragging) {\r\n                $(doc).off(duringDragEvents);\r\n                $(doc.body).removeClass(\"sp-dragging\");\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                setTimeout(function() {\r\n                    onstop.apply(element, arguments);\r\n                }, 0);\r\n            }\r\n            dragging = false;\r\n        }\r\n\r\n        $(element).on(\"touchstart mousedown\", start);\r\n    }\r\n\t\r\n\r\n    var Indicator = plugins.Plugin.inherit({\r\n        klassName : \"Indicator\",\r\n\r\n        pluginName : \"lark.colors.indicator\",\r\n\r\n        options : {\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            this.listenTo(this.elmx(),\"mousedown\" , (e) => {\r\n                this._start(e);\r\n            });\r\n\r\n        },\r\n\r\n        _move : function(e) {\r\n            if (this._dragging) {\r\n                var offset = this._offset,\r\n                    pageX = e.pageX,\r\n                    pageY = e.pageY,\r\n                    maxWidth = this._maxWidth,\r\n                    maxHeight = this._maxHeight;\r\n\r\n                var dragX = Math.max(0, Math.min(pageX - offset.left, maxWidth));\r\n                var dragY = Math.max(0, Math.min(pageY - offset.top, maxHeight));\r\n\r\n                var onmove = this.options.onmove;\r\n                if (onmove) {\r\n                    onmove.apply(this._elm, [dragX, dragY, e]);\r\n                }\r\n            }\r\n        },\r\n\r\n        _start : function(e) {\r\n            var rightclick = (e.which) ? (e.which == 3) : (e.button == 2);\r\n\r\n            if (!rightclick && !this._dragging) {\r\n                var onstart = this.options.onstart;\r\n                if (!onstart || onstart.apply(this._elm, arguments) !== false) {\r\n                    this._dragging = true;\r\n                    var $el = this.$();\r\n\r\n                    this._maxHeight = $el.height();\r\n                    this._maxWidth = $el.width();\r\n                    this._offset = $el.offset();\r\n\r\n                    var $doc = this.$(document)\r\n\r\n                    this.listenTo($doc,{\r\n                        \"mousemove\" : (e) => {\r\n                            this._move(e);\r\n                        },\r\n                        \"mouseup\" : (e) => {\r\n                            this._stop(e);\r\n                        }                \r\n                    });\r\n                    $doc.find(\"body\").addClass(\"sp-dragging\");\r\n\r\n                    this._move(e);\r\n\r\n                    eventer.stop(e);\r\n                }\r\n            }\r\n        },\r\n\r\n        _stop : function(e) {\r\n            var $doc = this.$(document);\r\n            if (this._dragging) {\r\n                this.unlistenTo($doc);\r\n                $doc.find(\"body\").removeClass(\"sp-dragging\");\r\n\r\n                onstop = this.options.onstop;\r\n\r\n                // Wait a tick before notifying observers to allow the click event\r\n                // to fire in Chrome.\r\n                if (onstop) {\r\n                    this._delay(function() {\r\n                        onstop.apply(this._elm, arguments);\r\n                    });\r\n                }\r\n            }\r\n            this._dragging = false;            \r\n        }\r\n    });\r\n\r\n    plugins.register(Indicator);\r\n\r\n\treturn Indicator;\r\n});"]}