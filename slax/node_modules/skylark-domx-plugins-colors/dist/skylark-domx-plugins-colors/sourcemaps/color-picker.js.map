{"version":3,"sources":["color-picker.js"],"names":["define","langx","browser","noder","finder","$","eventer","styler","plugins","Color","colors","helper","Indicator","ColorPicker","Plugin","inherit","klassName","pluginName","options","selectors","dragger","dragHelper","slider","slideHelper","alphaSliderInner","alphaSlider","alphaSlideHelper","textInput","initialColorContainer","cancelButton","clearButton","chooseButton","draggingClass","texts","cancelText","chooseText","clearText","noColorSelectedText","states","showInput","allowEmpty","showButtons","showInitial","showAlpha","preferredFormat","color","_drawInitial","opts","this","stating","initialColor","_initialColor","currentColor","current","$initialColorContainer","html","paletteTemplate","_updateHelperLocations","s","_currentSaturation","v","_currentValue","_isEmpty","$alphaSlideHelper","hide","$slideHelper","$dragHelper","show","dragX","_dragWidth","dragY","_dragHeight","Math","max","_dragHelperHeight","min","css","top","left","alphaX","_currentAlpha","_alphaWidth","_alphaSlideHelperWidth","slideY","_slideHeight","_slideHelperHeight","_updateOriginalInput","fireCallback","equals","_colorOnShow","toString","_currentPreferredFormat","emit","_updateUI","$dragger","width","height","_slideWidth","$slider","$alphaSlider","$textInput","removeClass","flatColor","parse","h","_currentHue","toHexString","format","realColor","displayColor","realHex","toRgbString","rgb","toRgb","a","realAlpha","gradient","isIE","$alphaSliderInner","toFilter","gradientType","val","_drawPalette","_applyOptions","_states","_applyStates","reflow","_construct","elm","prototype","call","$el","theme","find","$cancelButton","$clearButton","$chooseButton","_init","self","dragStart","_isDragging","addClass","_shiftMovementDirection","dragStop","move","setFromTextInput","value","_allowEmpty","tiny","isValid","change","on","setTimeout","keydown","e","keyCode","text","listenTo","stop","revert","attr","plugin","onmove","shiftKey","round","onstart","onstop","parseFloat","oldDragX","oldDragY","furtherFromX","abs","setSaturation","setValue","paletteEvent","ignore","data","target","closest","undefined","newHsv","toHsv","toggleClass","name","register"],"mappings":"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","file":"../color-picker.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-graphics-colors/color\",\r\n    \"./colors\",\r\n    \"./helper\",\r\n    \"./indicator\"\r\n],function(langx, browser, noder, finder, $,eventer, styler,plugins,Color,colors,helper,Indicator) {\r\n    \"use strict\";\r\n\r\n    var ColorPicker = plugins.Plugin.inherit({\r\n        klassName : \"ColorPicker\",\r\n\r\n        pluginName : \"lark.colors.picker\",\r\n\r\n        options : {\r\n            selectors  : {\r\n                dragger : \".sp-color\",\r\n                dragHelper : \".sp-dragger\",\r\n                slider : \".sp-hue\",\r\n                slideHelper : \".sp-slider\",\r\n                alphaSliderInner : \".sp-alpha-inner\",\r\n                alphaSlider : \".sp-alpha\",\r\n                alphaSlideHelper : \".sp-alpha-handle\",\r\n                textInput : \".sp-input\",\r\n                initialColorContainer : \".sp-initial\",\r\n                cancelButton : \".sp-cancel\",\r\n                clearButton : \".sp-clear\",\r\n                chooseButton : \".sp-choose\"\r\n            },\r\n\r\n            draggingClass : \"sp-dragging\",\r\n\r\n            texts : {\r\n                cancelText: \"cancel\",\r\n                chooseText: \"choose\",\r\n                clearText: \"Clear Color Selection\",\r\n                noColorSelectedText: \"No Color Selected\"\r\n            },\r\n\r\n            states : {\r\n                showInput: false,\r\n                allowEmpty: false,\r\n                showButtons: true,\r\n                showInitial: false,\r\n                showAlpha: false\r\n            },\r\n\r\n            preferredFormat : \"hex\",\r\n\r\n            // Options\r\n            color: false\r\n        },\r\n        \r\n        _drawInitial : function () {\r\n            var opts = this.options;\r\n            if (this.stating(\"showInitial\")) {\r\n                var initialColor = this._initialColor;\r\n                var currentColor = this.current();\r\n                this.$initialColorContainer.html(\r\n                    helper.paletteTemplate([initialColor, currentColor], currentColor, \"sp-palette-row-initial\", opts)\r\n                );\r\n            }\r\n        },\r\n\r\n        _updateHelperLocations : function () {\r\n            var s = this._currentSaturation;\r\n            var v = this._currentValue;\r\n\r\n            if(this.stating(\"allowEmpty\") && this._isEmpty) {\r\n                //if selected color is empty, hide the helpers\r\n                this.$alphaSlideHelper.hide();\r\n                this.$slideHelper.hide();\r\n                this.$dragHelper.hide();\r\n            }\r\n            else {\r\n                //make sure helpers are visible\r\n                this.$alphaSlideHelper.show();\r\n                this.$slideHelper.show();\r\n                this.$dragHelper.show();\r\n\r\n                // Where to show the little circle in that displays your current selected color\r\n                var dragX = s * this._dragWidth;\r\n                var dragY = this._dragHeight - (v * this._dragHeight);\r\n                dragX = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragWidth - this._dragHelperHeight, dragX - this._dragHelperHeight)\r\n                );\r\n                dragY = Math.max(\r\n                    -this._dragHelperHeight,\r\n                    Math.min(this._dragHeight - this._dragHelperHeight, dragY - this._dragHelperHeight)\r\n                );\r\n                this.$dragHelper.css({\r\n                    \"top\": dragY + \"px\",\r\n                    \"left\": dragX + \"px\"\r\n                });\r\n\r\n                var alphaX = this._currentAlpha * this._alphaWidth;\r\n                this.$alphaSlideHelper.css({\r\n                    \"left\": (alphaX - (this._alphaSlideHelperWidth / 2)) + \"px\"\r\n                });\r\n\r\n                // Where to show the bar that displays your current selected hue\r\n                var slideY = (this._currentHue) * this._slideHeight;\r\n                this.$slideHelper.css({\r\n                    \"top\": (slideY - this._slideHelperHeight) + \"px\"\r\n                });\r\n            }\r\n        },\r\n\r\n        _updateOriginalInput : function (fireCallback) {\r\n            var color = this.current(),\r\n                displayColor = '',\r\n                hasChanged = !Color.equals(color, this._colorOnShow);\r\n\r\n            if (color) {\r\n                displayColor = color.toString(this._currentPreferredFormat);\r\n                // Update the selection palette with the current color\r\n                this.emit(\"picked\",color);\r\n            }\r\n\r\n\r\n        },\r\n\r\n        _updateUI : function () {\r\n            var opts = this.options;\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n            \r\n            this.$textInput.removeClass(\"sp-validation-error\");\r\n\r\n            this._updateHelperLocations();\r\n\r\n            // Update dragger background color (gradients take care of saturation and value).\r\n            var flatColor = Color.parse({ \r\n                h: this._currentHue * 360, \r\n                s: 1, \r\n                v: 1 \r\n            });\r\n            this.$dragger.css(\"background-color\", flatColor.toHexString());\r\n\r\n            // Get a format that alpha will be included in (hex and names ignore alpha)\r\n            var format = this._currentPreferredFormat;\r\n            if (this._currentAlpha < 1 && !(this._currentAlpha === 0 && format === \"name\")) {\r\n                if (format === \"hex\" || format === \"hex3\" || format === \"hex6\" || format === \"name\") {\r\n                    format = \"rgb\";\r\n                }\r\n            }\r\n\r\n            var realColor = this.current(),\r\n                displayColor = '';\r\n\r\n            if (!realColor && this.stating(\"allowEmpty\")) {\r\n            }\r\n            else {\r\n                var realHex = realColor.toHexString(),\r\n                    realRgb = realColor.toRgbString();\r\n\r\n                if (this.stating(\"showAlpha\")) {\r\n                    var rgb = realColor.toRgb();\r\n                    rgb.a = 0;\r\n                    var realAlpha = Color.parse(rgb).toRgbString();\r\n                    var gradient = \"linear-gradient(left, \" + realAlpha + \", \" + realHex + \")\";\r\n\r\n                    if (browser.isIE) {\r\n                        this.$alphaSliderInner.css(\"filter\", Color.parse(realAlpha).toFilter({ gradientType: 1 }, realHex));\r\n                    }\r\n                    else {\r\n                        this.$alphaSliderInner.css(\"background\", \"-webkit-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-moz-\" + gradient);\r\n                        this.$alphaSliderInner.css(\"background\", \"-ms-\" + gradient);\r\n                        // Use current syntax gradient on unprefixed property.\r\n                        this.$alphaSliderInner.css(\"background\",\r\n                            \"linear-gradient(to right, \" + realAlpha + \", \" + realHex + \")\");\r\n                    }\r\n                }\r\n\r\n                displayColor = realColor.toString(format);\r\n            }\r\n\r\n            // Update the text entry input as it changes happen\r\n            if (this.stating(\"showInput\")) {\r\n                this.$textInput.val(displayColor);\r\n            }\r\n\r\n            if (this.stating(\"showPalette\")) {\r\n                this._drawPalette();\r\n            }\r\n\r\n            this._drawInitial();\r\n        },\r\n\r\n\r\n        _applyOptions : function () {\r\n            var opts = this.options;\r\n\r\n            this._states = {\r\n                allowEmpty : opts.states.allowEmpty,\r\n                showInput : opts.states.showInput,\r\n                showAlpha : opts.states.showAlpha,\r\n                showButtons : opts.states.showButtons,\r\n                showInitial : opts.states.showInitial\r\n            };\r\n\r\n\r\n           this._applyStates();\r\n\r\n           this.reflow();\r\n        },\r\n\r\n         _construct: function(elm, options) {\r\n            plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n            var $el = this.$el = this.$();\r\n\r\n            var opts = this.options,\r\n                theme = opts.theme;\r\n\r\n            var                \r\n                dragger = this.$dragger = $el.find(opts.selectors.dragger),\r\n                dragHelper = this.$dragHelper = $el.find(opts.selectors.dragHelper),\r\n                slider = this.$slider = $el.find(opts.selectors.slider),\r\n                slideHelper = this.$slideHelper =  $el.find(opts.selectors.slideHelper),\r\n                alphaSliderInner = this.$alphaSliderInner = $el.find(opts.selectors.alphaSliderInner),\r\n                alphaSlider = this.$alphaSlider = $el.find(opts.selectors.alphaSlider),\r\n                alphaSlideHelper = this.$alphaSlideHelper = $el.find(opts.selectors.alphaSlideHelper),\r\n                textInput = this.$textInput = $el.find(opts.selectors.textInput),\r\n                initialColorContainer = this.$initialColorContainer = $el.find(opts.selectors.initialColorContainer),\r\n                cancelButton = this.$cancelButton = $el.find(opts.selectors.cancelButton),\r\n                clearButton = this.$clearButton = $el.find(opts.selectors.clearButton),\r\n                chooseButton = this.$chooseButton = $el.find(opts.selectors.chooseButton),\r\n                initialColor = this._initialColor =  opts.color,\r\n                currentPreferredFormat = this._currentPreferredFormat = opts.preferredFormat,\r\n                isEmpty = this._isEmpty =  !initialColor;\r\n\r\n            this._init();\r\n        },\r\n\r\n        _init : function () {\r\n            var self = this,\r\n                opts = this.options;\r\n             function dragStart() {\r\n                if (self._dragHeight <= 0 || self._dragWidth <= 0 || self._slideHeight <= 0) {\r\n                    self.reflow();\r\n                }\r\n                self._isDragging = true;\r\n                self.$el.addClass(self.options.draggingClass);\r\n                self._shiftMovementDirection = null;\r\n            }\r\n\r\n            function dragStop() {\r\n                self._isDragging = false;\r\n                self.$el.removeClass(self.options.draggingClass);\r\n            }           \r\n\r\n            function move() {\r\n                self._updateOriginalInput();\r\n                self._updateUI();\r\n            }\r\n\r\n            this._applyOptions();\r\n\r\n            function setFromTextInput() {\r\n                var value = self.$textInput.val();\r\n\r\n                if ((value === null || value === \"\") && self._allowEmpty) {\r\n                    self.current(null);\r\n                    move();\r\n                }\r\n                else {\r\n                    var tiny = Color.parse(value);\r\n                    if (tiny.isValid()) {\r\n                        self.current(tiny);\r\n                        move();\r\n                    }\r\n                    else {\r\n                        self.$textInput.addClass(\"sp-validation-error\");\r\n                    }\r\n                }\r\n            }\r\n            this.$textInput.change(setFromTextInput);\r\n            this.$textInput.on(\"paste\", function () {\r\n                setTimeout(setFromTextInput, 1);\r\n            });\r\n            this.$textInput.keydown(function (e) { if (e.keyCode == 13) { setFromTextInput(); } });\r\n\r\n            this.$cancelButton.text(opts.texts.cancelText);\r\n            \r\n            this.listenTo(this.$cancelButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n                self.revert();\r\n                self.emit(\"canceled\"); \r\n            });\r\n\r\n            this.$clearButton.attr(\"title\", opts.texts.clearText);\r\n            this.listenTo(this.$clearButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n                self._isEmpty = true;\r\n                move();\r\n\r\n            });\r\n\r\n            this.$chooseButton.text(opts.texts.chooseText);\r\n            this.listenTo(this.$chooseButton,\"click\", function (e) {\r\n                eventer.stop(e);\r\n\r\n                self._updateOriginalInput(true);\r\n                self.emit(\"choosed\"); \r\n            });\r\n          \r\n            this.$alphaSlider.plugin(\"lark.colors.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentAlpha = (dragX / self._alphaWidth);\r\n                    self._isEmpty = false;\r\n                    if (e.shiftKey) {\r\n                        self._currentAlpha = Math.round(self._currentAlpha * 10) / 10;\r\n                    }\r\n\r\n                    move();\r\n\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$slider.plugin(\"lark.colors.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n                    self._currentHue = parseFloat(dragY / self._slideHeight);\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.$dragger.plugin(\"lark.colors.indicator\", {\r\n                \"onmove\" :   function (dragX, dragY, e) {\r\n\r\n                    // shift+drag should snap the movement to either the x or y axis.\r\n                    if (!e.shiftKey) {\r\n                        self._shiftMovementDirection = null;\r\n                    }\r\n                    else if (!self._shiftMovementDirection) {\r\n                        var oldDragX = self._currentSaturation * self._dragWidth;\r\n                        var oldDragY = self._dragHeight - (self._currentValue * self._dragHeight);\r\n                        var furtherFromX = Math.abs(dragX - oldDragX) > Math.abs(dragY - oldDragY);\r\n\r\n                        self._shiftMovementDirection = furtherFromX ? \"x\" : \"y\";\r\n                    }\r\n\r\n                    var setSaturation = !self._shiftMovementDirection || self._shiftMovementDirection === \"x\";\r\n                    var setValue = !self._shiftMovementDirection || self._shiftMovementDirection === \"y\";\r\n\r\n                    if (setSaturation) {\r\n                        self._currentSaturation = parseFloat(dragX / self._dragWidth);\r\n                    }\r\n                    if (setValue) {\r\n                        self._currentValue = parseFloat((self._dragHeight - dragY) / self._dragHeight);\r\n                    }\r\n\r\n                    self._isEmpty = false;\r\n                    if (!self.stating(\"showAlpha\")) {\r\n                        self._currentAlpha = 1;\r\n                    }\r\n\r\n                    move();\r\n                }, \r\n                \"onstart\" : dragStart, \r\n                \"onstop\" :dragStop\r\n            });\r\n\r\n            this.current(this._initialColor);\r\n\r\n            // In case color was black - update the preview UI and set the format\r\n            // since the set function will not run (default color is black).\r\n            self._updateUI();\r\n\r\n            function paletteElementClick(e) {\r\n                if (e.data && e.data.ignore) {\r\n                    self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n                else {\r\n                    self.current($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n                    move();\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\r\n            this.$initialColorContainer.on(paletteEvent, \".sp-thumb-el:nth-child(1)\", { ignore: true }, paletteElementClick);\r\n        },\r\n\r\n        revert :  function () {\r\n            this.current(this._initialColor, true);\r\n            this._updateOriginalInput(true);\r\n        },\r\n\r\n\r\n        current : function(color) {\r\n            if (color === undefined) {\r\n                if (this._allowEmpty && this._isEmpty) {\r\n                    return null;\r\n                }\r\n\r\n\r\n                return Color.parse({\r\n                    h: this._currentHue * 360,\r\n                    s: this._currentSaturation,\r\n                    v: this._currentValue,\r\n                    a: Math.round(this._currentAlpha * 1000) / 1000\r\n                });\r\n\r\n            } else {\r\n                if (Color.equals(color, this.current())) {\r\n                    // Update UI just in case a validation error needs\r\n                    // to be cleared.\r\n                    this._updateUI();\r\n                    return;\r\n                }\r\n\r\n                var newColor, newHsv;\r\n                if (!color && this.stating(\"allowEmpty\")) {\r\n                    this._isEmpty = true;\r\n                } else {\r\n                    this._isEmpty = false;\r\n                    newColor = Color.parse(color);\r\n                    newHsv = newColor.toHsv();\r\n\r\n                    this._currentHue = (newHsv.h % 360) / 360;\r\n                    this._currentSaturation = newHsv.s;\r\n                    this._currentValue = newHsv.v;\r\n                    this._currentAlpha = newHsv.a;\r\n                }\r\n                this._updateUI();\r\n\r\n            }\r\n        },\r\n\r\n\r\n        _applyStates : function() {\r\n           var states = this._states ;\r\n\r\n            this.$el.toggleClass(\"sp-input-disabled\", !states.showInput)\r\n                        .toggleClass(\"sp-clear-enabled\", !!states.allowEmpty)\r\n                        .toggleClass(\"sp-alpha-enabled\", states.showAlpha)\r\n                        .toggleClass(\"sp-buttons-disabled\", !states.showButtons)\r\n                        .toggleClass(\"sp-initial-disabled\", !states.showInitial);\r\n\r\n            if (!states.allowEmpty) {\r\n                this.$clearButton.hide();\r\n            }\r\n\r\n            this._dragWidth = this.$dragger.width();\r\n            this._dragHeight = this.$dragger.height();\r\n            this._dragHelperHeight = this.$dragHelper.height();\r\n            this._slideWidth = this.$slider.width();\r\n            this._slideHeight = this.$slider.height();\r\n            this._slideHelperHeight = this.$slideHelper.height();\r\n            this._alphaWidth = this.$alphaSlider.width();\r\n            this._alphaSlideHelperWidth = this.$alphaSlideHelper.width();\r\n        },\r\n\r\n        stating : function(name,value) {\r\n            if (value !== undefined) {\r\n                this._states[name] = value;\r\n                this._applyStates();\r\n            } else {\r\n                return this._states[name];\r\n            }\r\n        },\r\n\r\n        reflow : function () {\r\n            this._updateHelperLocations();\r\n        }\r\n\r\n    });\r\n\r\n\r\n    plugins.register(ColorPicker);\r\n\r\n    return colors.ColorPicker = ColorPicker;\r\n});"]}