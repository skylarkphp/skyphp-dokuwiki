{"version":3,"sources":["helper.js"],"names":["define","browser","$","Color","isIE","paletteTemplate","p","color","className","opts","html","i","length","current","tiny","parse","c","toHsl","l","equals","formattedString","toString","preferredFormat","swatchStyle","toRgbString","push","append","attr","texts","noColorSelectedText","join"],"mappings":";;;;;;;AAAAA,QACI,uBACA,qBACA,iCACF,SAASC,EAAQC,EAAEC,GAuBEF,EAAQG,KA0B3B,OACCC,gBAzBD,SAA0BC,EAAGC,EAAOC,EAAWC,GAE3C,IADA,IAAIC,KACKC,EAAI,EAAGA,EAAIL,EAAEM,OAAQD,IAAK,CAC/B,IAAIE,EAAUP,EAAEK,GAChB,GAAGE,EAAS,CACR,IAAIC,EAAOX,EAAMY,MAAMF,GACnBG,EAAIF,EAAKG,QAAQC,EAAI,GAAM,4BAA8B,6BAC7DF,GAAMb,EAAMgB,OAAOZ,EAAOM,GAAY,mBAAqB,GAC3D,IAAIO,EAAkBN,EAAKO,SAASZ,EAAKa,iBAAmB,OACxDC,EAAc,oBAAsBT,EAAKU,cAC7Cd,EAAKe,KAAK,gBAAkBL,EAAkB,iBAAmBN,EAAKU,cAAgB,YAAcR,EAAI,yCAA2CO,EAAc,qBAGjKb,EAAKe,KAAKvB,EAAE,WACPwB,OAAOxB,EAAE,8FACLyB,KAAK,QAASlB,EAAKmB,MAAMC,sBAE7BnB,QAIb,MAAO,qBAAuBF,EAAY,KAAOE,EAAKoB,KAAK,IAAM","file":"../helper.js","sourcesContent":["define([\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-graphics-colors/Color\"    \r\n],function(browser,$,Color){\r\n    function paletteElementClick(e) {\r\n        if (e.data && e.data.ignore) {\r\n            self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n            move();\r\n        }\r\n        else {\r\n            self.set($(e.target).closest(\".sp-thumb-el\").data(\"color\"));\r\n            move();\r\n\r\n            // If the picker is going to close immediately, a palette selection\r\n            // is a change.  Otherwise, it's a move only.\r\n            if (opts.hideAfterPaletteSelect) {\r\n                self_updateOriginalInput(true);\r\n                self.hide();\r\n            } else {\r\n                self._updateOriginalInput();\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    var paletteEvent = browser.isIE ? \"mousedown.ColorPicker\" : \"click.ColorPicker touchstart.ColorPicker\";\t\r\n\r\n    function paletteTemplate (p, color, className, opts) {\r\n        var html = [];\r\n        for (var i = 0; i < p.length; i++) {\r\n            var current = p[i];\r\n            if(current) {\r\n                var tiny = Color.parse(current);\r\n                var c = tiny.toHsl().l < 0.5 ? \"sp-thumb-el sp-thumb-dark\" : \"sp-thumb-el sp-thumb-light\";\r\n                c += (Color.equals(color, current)) ? \" sp-thumb-active\" : \"\";\r\n                var formattedString = tiny.toString(opts.preferredFormat || \"rgb\");\r\n                var swatchStyle = \"background-color:\" + tiny.toRgbString();\r\n                html.push('<span title=\"' + formattedString + '\" data-color=\"' + tiny.toRgbString() + '\" class=\"' + c + '\"><span class=\"sp-thumb-inner\" style=\"' + swatchStyle + ';\" /></span>');\r\n            } else {\r\n                var cls = 'sp-clear-display';\r\n                html.push($('<div />')\r\n                    .append($('<span data-color=\"\" style=\"background-color:transparent;\" class=\"' + cls + '\"></span>')\r\n                        .attr('title', opts.texts.noColorSelectedText)\r\n                    )\r\n                    .html()\r\n                );\r\n            }\r\n        }\r\n        return \"<div class='sp-cf \" + className + \"'>\" + html.join('') + \"</div>\";\r\n    }\r\n\r\n    return {\r\n    \tpaletteTemplate\r\n    }\r\n});\r\n"]}