{"version":3,"sources":["draggable.js"],"names":["define","langx","noder","datax","finder","geom","eventer","styler","plugins","dnd","manager","on","off","attr","removeAttr","pagePosition","addClass","height","Draggable","Plugin","inherit","klassName","pluginName","options","draggingClass","_construct","elm","this","overrided","self","forEach","eventName","isFunction","mousedown","e","handle","dragHandle","closest","target","source","dragSource","_elm","prepare","mouseup","dragstart","start","dragend","stop","dragging","end","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBACA,oBACA,sBACA,oBACA,uBACA,sBACA,4BACA,QACA,aACD,SAASC,EAAOC,EAAOC,EAAOC,EAAQC,EAAMC,EAASC,EAAQC,EAASC,EAAIC,GAChEJ,EAAQK,GACPL,EAAQM,IACPT,EAAMU,KACAV,EAAMW,WACVT,EAAKU,aACHR,EAAOS,SACTX,EAAKY,OANlB,IAUIC,EAAYV,EAAQW,OAAOC,SAC3BC,UAAW,YAEXC,WAAa,qBAEbC,SACIC,cAAgB,YAGpBC,WAAY,SAASC,EAAKH,GACtBI,KAAKC,UAAUF,EAAIH,GAEnB,IAAIM,EAAOF,KACPJ,EAAUI,KAAKJ,QAEnBM,EAAKL,cAAgBD,EAAQC,eAE5B,YAAa,UAAW,QAAS,UAAUM,QAAQ,SAASC,GACrD9B,EAAM+B,WAAWT,EAAQQ,KACzBF,EAAKlB,GAAGoB,EAAWR,EAAQQ,MAKnCzB,EAAQK,GAAGe,GACPO,UAAa,SAASC,GAClB,IAAIX,EAAUM,EAAKN,QACfA,EAAQY,SACRN,EAAKO,WAAahC,EAAOiC,QAAQH,EAAEI,OAAQf,EAAQY,SAC9CN,EAAKO,cAIVb,EAAQgB,OACRV,EAAKW,WAAapC,EAAOiC,QAAQH,EAAEI,OAAQf,EAAQgB,QAEnDV,EAAKW,WAAaX,EAAKY,KAE3B/B,EAAQgC,QAAQb,GACZA,EAAKW,YACLrC,EAAMU,KAAKgB,EAAKW,WAAY,YAAa,UAIjDG,QAAW,SAAST,GACZL,EAAKW,aAELX,EAAKW,WAAa,KAClBX,EAAKO,WAAa,OAI1BQ,UAAa,SAASV,GAClB/B,EAAMU,KAAKgB,EAAKW,WAAY,YAAa,SACzC9B,EAAQmC,MAAMhB,EAAMK,IAGxBY,QAAW,SAASZ,GAChB5B,EAAQyC,KAAKb,GAERxB,EAAQsC,UAIbtC,EAAQuC,KAAI,SAU5B,OAFAzC,EAAQ0C,SAAShC,EAAU,aAEpBT,EAAIS,UAAYA","file":"../draggable.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});"]}