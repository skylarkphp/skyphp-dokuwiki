{"version":3,"sources":["manager.js"],"names":["define","dnd","langx","noder","datax","finder","geom","eventer","styler","on","off","attr","removeAttr","pagePosition","addClass","height","Manager","Evented","inherit","klassName","init","prepare","draggable","e","create","dragSource","dragHandle","trigger","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","elm","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","removeClass"],"mappings":";;;;;;;AAAAA,QACI,QACA,sBACA,qBACA,oBACA,sBACA,oBACA,uBACA,uBACD,SAASC,EAAKC,EAAOC,EAAOC,EAAOC,EAAQC,EAAMC,EAASC,GAChDD,EAAQE,GACPF,EAAQG,IACPN,EAAMO,KACAP,EAAMQ,WACVN,EAAKO,aACHL,EAAOM,SACTR,EAAKS,OAkGlB,OAHc,IA5FAd,EAAIe,QAAUd,EAAMe,QAAQC,SACtCC,UAAW,UAEXC,KAAM,aAINC,QAAS,SAASC,GACd,IAAIC,EAAIhB,EAAQiB,OAAO,aACnBC,WAAYH,EAAUG,WACtBC,WAAYJ,EAAUI,aAE1BJ,EAAUK,QAAQJ,GAClBD,EAAUG,WAAaF,EAAEE,YAG7BG,MAAO,SAASN,EAAWO,GAEvB,IAAIC,EAAIxB,EAAKO,aAAaS,EAAUG,YACpCM,KAAKC,gBAAkBC,SAASJ,EAAMK,MAAQJ,EAAEK,MAChDJ,KAAKK,gBAAkBH,SAASJ,EAAMQ,MAAQP,EAAEQ,KAEhD,IAAIf,EAAIhB,EAAQiB,OAAO,WACnBe,IAAKjB,EAAUiB,IACfd,WAAYH,EAAUG,WACtBC,WAAYJ,EAAUI,WACtBc,MAAO,KAEPC,cAGJnB,EAAUK,QAAQJ,GAGlBQ,KAAKW,SAAWpB,EAEZA,EAAUqB,eACVnC,EAAOM,SAASQ,EAAUG,WAAYH,EAAUqB,eAGpDZ,KAAKa,cAAgBrB,EAAEiB,MAClBT,KAAKa,gBACNb,KAAKa,cAAgBtB,EAAUiB,KAGnCR,KAAKc,iBAAmBtB,EAAEkB,SACtBV,KAAKc,kBAEL3C,EAAM4C,KAAKf,KAAKc,iBAAkB,SAASE,EAAKC,GAC5CnB,EAAMoB,aAAaC,QAAQH,EAAKC,KAIxCnB,EAAMoB,aAAaE,aAAapB,KAAKa,cAAeb,KAAKC,gBAAiBD,KAAKK,iBAE/EP,EAAMoB,aAAaG,cAAgB,WAEnC,IAAIC,EAAK9C,EAAQiB,OAAO,cACpBe,IAAKhB,EAAEgB,IACPd,WAAYF,EAAEE,WACdC,WAAYH,EAAEG,WACdc,MAAOjB,EAAEiB,MACTC,SAAUlB,EAAEkB,WAGhBV,KAAKJ,QAAQ0B,IAGjBC,KAAM,aAINC,IAAK,SAASC,GACV,IAAId,EAAWX,KAAKW,SAChBA,GACIA,EAASC,eACTnC,EAAOiD,YAAYf,EAASjB,WAAYiB,EAASC,eAIzD,IAAIpB,EAAIhB,EAAQiB,OAAO,eACvBO,KAAKJ,QAAQJ,GAGbQ,KAAKW,SAAW,KAChBX,KAAKc,iBAAmB,KACxBd,KAAKa,cAAgB,KACrBb,KAAKC,gBAAkB,KACvBD,KAAKK,gBAAkB","file":"../manager.js","sourcesContent":["define([\r\n    \"./dnd\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\"\r\n], function(dnd, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Manager = dnd.Manager = langx.Evented.inherit({\r\n        klassName: \"Manager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new Manager();\r\n\r\n\r\n    return manager;\r\n});"]}