{"version":3,"sources":["skylark-domx-plugins-dnd.js"],"names":["define","plugins","dnd","langx","noder","datax","finder","geom","eventer","styler","on","off","attr","removeAttr","pagePosition","addClass","height","Manager","Evented","inherit","klassName","init","prepare","draggable","e","create","dragSource","dragHandle","trigger","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","elm","ghost","transfer","dragging","draggingClass","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","e1","over","end","dropped","removeClass","manager","Draggable","Plugin","pluginName","options","_construct","overrided","self","forEach","eventName","isFunction","mousedown","handle","closest","target","source","_elm","mouseup","dragstart","dragend","stop","register","Droppable","hoverClass","activeClass","acceptable","dragover","stopPropagation","e2","overElm","preventDefault","dropEffect","dragenter","dragleave","drop","main"],"mappings":"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","file":"../skylark-domx-plugins-dnd.js","sourcesContent":["define('skylark-domx-plugins-dnd/dnd',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n\r\n\treturn plugins.dnd = {};\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-dnd/manager',[\r\n    \"./dnd\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\"\r\n], function(dnd, langx, noder, datax, finder, geom, eventer, styler) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Manager = dnd.Manager = langx.Evented.inherit({\r\n        klassName: \"Manager\",\r\n\r\n        init: function() {\r\n\r\n        },\r\n\r\n        prepare: function(draggable) {\r\n            var e = eventer.create(\"preparing\", {\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle\r\n            });\r\n            draggable.trigger(e);\r\n            draggable.dragSource = e.dragSource;\r\n        },\r\n\r\n        start: function(draggable, event) {\r\n\r\n            var p = geom.pagePosition(draggable.dragSource);\r\n            this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n            this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n            var e = eventer.create(\"started\", {\r\n                elm: draggable.elm,\r\n                dragSource: draggable.dragSource,\r\n                dragHandle: draggable.dragHandle,\r\n                ghost: null,\r\n\r\n                transfer: {}\r\n            });\r\n\r\n            draggable.trigger(e);\r\n\r\n\r\n            this.dragging = draggable;\r\n\r\n            if (draggable.draggingClass) {\r\n                styler.addClass(draggable.dragSource, draggable.draggingClass);\r\n            }\r\n\r\n            this.draggingGhost = e.ghost;\r\n            if (!this.draggingGhost) {\r\n                this.draggingGhost = draggable.elm;\r\n            }\r\n\r\n            this.draggingTransfer = e.transfer;\r\n            if (this.draggingTransfer) {\r\n\r\n                langx.each(this.draggingTransfer, function(key, value) {\r\n                    event.dataTransfer.setData(key, value);\r\n                });\r\n            }\r\n\r\n            event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n            event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n            var e1 = eventer.create(\"dndStarted\", {\r\n                elm: e.elm,\r\n                dragSource: e.dragSource,\r\n                dragHandle: e.dragHandle,\r\n                ghost: e.ghost,\r\n                transfer: e.transfer\r\n            });\r\n\r\n            this.trigger(e1);\r\n        },\r\n\r\n        over: function() {\r\n\r\n        },\r\n\r\n        end: function(dropped) {\r\n            var dragging = this.dragging;\r\n            if (dragging) {\r\n                if (dragging.draggingClass) {\r\n                    styler.removeClass(dragging.dragSource, dragging.draggingClass);\r\n                }\r\n            }\r\n\r\n            var e = eventer.create(\"dndEnded\", {});\r\n            this.trigger(e);\r\n\r\n\r\n            this.dragging = null;\r\n            this.draggingTransfer = null;\r\n            this.draggingGhost = null;\r\n            this.draggingOffsetX = null;\r\n            this.draggingOffsetY = null;\r\n        }\r\n    });\r\n\r\n    var manager = new Manager();\r\n\r\n\r\n    return manager;\r\n});\ndefine('skylark-domx-plugins-dnd/Draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});\ndefine('skylark-domx-plugins-dnd/Droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.dnd.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return dnd.Droppable = Droppable;\r\n});\ndefine('skylark-domx-plugins-dnd/main',[\r\n    \"./dnd\",\r\n    \"./Draggable\",\r\n    \"./Droppable\"\r\n], function(dnd) {\r\n    return dnd;\r\n})\r\n;\ndefine('skylark-domx-plugins-dnd', ['skylark-domx-plugins-dnd/main'], function (main) { return main; });\n\n"]}