{"version":3,"sources":["embed-runner.js"],"names":["define","createIframe","$","plugins","embeds","$window","window","$document","document","EmbedRunner","Plugin","inherit","klassName","pluginName","options","runnerUrl","runnerName","_construct","elm","this","overrided","runner","origin","prepare","_inited","promise","Deferred","url","className","sandbox","frameBorder","name","contentWindowName","onload","postMessage","on","event","handleMessage","originalEvent","setup","iframe","resolve","onerror","err","reject","_elm","arg","cmd","html","inited","runnerFrame","contentWindow","error","console","warn","apply","concat","slice","call","arguments","data","JSON","parse","e","message","type","stringify","complete","store","sessionStorage","removeItem","focus","method","args","_console","console:load:script:success","trigger","console:load:script:error","console:load:dom:success","console:load:dom:error"],"mappings":";;;;;;;AAAAA,QACI,8BACA,qBACA,4BACA,YACD,SAASC,EAAcC,EAAGC,EAAQC,GAEjC,aAQF,IACIC,EAAUH,EAAEI,QACZC,EAAYL,EAAEM,UAGdC,EAAeN,EAAQO,OAAOC,SAEhCC,UAAW,cAEXC,WAAa,qBAEbC,SACEC,UAAY,GACZC,WAAa,IAGfC,WAAa,SAASC,EAAIJ,GACxBK,KAAKC,UAAUF,EAAIJ,GAMlBK,KAAKE,UACLF,KAAKE,OAAOC,OAAS,KASxBC,QAAW,WAET,OAAIJ,KAAKK,QACAL,KAAKK,QAAQC,SAGtBN,KAAKK,QAAU,IAAIE,SA2CnBzB,GACE0B,IAAQR,KAAKL,QAAQC,UACrBa,UAAc,UACdC,QAAY,2FACZC,YAAe,IACfC,KAAQ,UACRC,kBAAqBb,KAAKL,QAAQE,WAClCiB,OAAW,KACL3B,OAAO4B,cAET7B,EAAQ8B,GAAG,UAAYC,IACrBjB,KAAKkB,cAAcD,EAAME,iBAE3BnB,KAAKoB,MAAMC,QACXrB,KAAKK,QAAQiB,YAGjBC,QAAaC,IACXxB,KAAKK,QAAQoB,OAAOD,KAEtBxB,KAAK0B,MAMPtC,EAAU4B,GAAG,kBAAmB,CAACC,EAAOU,KACnB,aAAfA,EAAIxB,QAAyBwB,EAAIxB,SAOvCf,EAAU4B,GAAG,cAAe,CAACC,EAAOW,KAClC5B,KAAKe,YAAY,cAAea,KAGlCxC,EAAU4B,GAAG,sBAAuB,CAACC,EAAOT,KAC1CR,KAAKe,YAAY,sBAAuBP,KAG1CpB,EAAU4B,GAAG,mBAAoB,CAACC,EAAOY,KACvC7B,KAAKe,YAAY,mBAAoBc,KAgChCC,OAAOxB,UAOhBc,MAAQ,SAAUW,GAChB/B,KAAKE,OAAOf,OAAS4C,EAAYC,cACjChC,KAAKE,OAAOmB,OAASU,GAMvBE,MAAQ,WAIN9C,OAAO+C,QAAQC,KAAKC,MAAMF,SAAU,aAAaG,UAAUC,MAAMC,KAAKC,cAMxEtB,cAAgB,SAAUD,GACxB,GAAKA,EAAMd,OAAX,CACA,IAAIsC,EAAOxB,EAAMwB,KAEjB,GAAoB,iBAATA,EAAX,CAoBA,IACEA,EAA6B,iBAAfxB,EAAMwB,KAAoBC,KAAKC,MAAM1B,EAAMwB,MAAQxB,EAAMwB,KACvE,MAAOG,GACP,OAAO5C,KAAKiC,MAAM,4BAA6BW,EAAEC,SAuBnD,GAA+B,mBAApB7C,KAAKyC,EAAKK,MACnB,OAAO,EAET,IACE9C,KAAKyC,EAAKK,MAAML,EAAKA,MACrB,MAAOG,GACP5C,KAAKiC,MAAMW,EAAEC,aAOjB9B,YAAc,SAAU+B,EAAML,GAC5B,IAAKzC,KAAKE,OAAOf,OACf,OAAOa,KAAKiC,MAAM,gDAEpBjC,KAAKE,OAAOf,OAAO4B,YAAY2B,KAAKK,WAClCD,KAAMA,EACNL,KAAMA,IACJzC,KAAKE,OAAOC,SAOlB6C,SAAW,WACT,IACEC,MAAMC,eAAeC,WAAW,iBAChC,MAAOP,MAqCXQ,MAAQ,aASRlB,QAAU,SAAUO,GAClB,IAAIY,EAASZ,EAAKY,OACdC,EAAOb,EAAKa,KAEXnE,OAAOoE,WACPpE,OAAOoE,SAASF,KAAUA,EAAS,OAKxClE,OAAOoE,SAASF,GAAQjB,MAAMjD,OAAOoE,SAAUD,KAMjDE,8BAAgC,SAAUhD,GACxCpB,EAAUqE,QAAQ,8BAA+BjD,IAGnDkD,4BAA8B,SAAUlC,GACtCpC,EAAUqE,QAAQ,4BAA6BjC,IAOjDmC,2BAA6B,SAAUnD,GACrCpB,EAAUqE,QAAQ,2BAA4BjD,IAGhDoD,yBAA2B,SAAUpC,GACnCpC,EAAUqE,QAAQ,yBAA0BjC,MAKhD,OAAOvC,EAAOK,YAAcA","file":"../embed-runner.js","sourcesContent":["define([\r\n    \"skylark-domx-iframes/create\",\r\n    \"skylark-domx/query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./embeds\"\r\n], function(createIframe, $, plugins,embeds) {\r\n\r\n    'use strict';\r\n    // move from render/live.js\r\n\r\n  /** ============================================================================\r\n   * Skylark Html Viewer\r\n   * Messages to and from the runner.\r\n   * ========================================================================== */\r\n\r\n  var \r\n      $window = $(window),\r\n      $document = $(document);\r\n\r\n\r\n  var EmbedRunner =  plugins.Plugin.inherit({\r\n\r\n    klassName: \"EmbedRunner\",\r\n\r\n    pluginName : \"lark.embeds.runner\",\r\n\r\n    options : {\r\n      runnerUrl : \"\",\r\n      runnerName : \"\"\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n\r\n       /**\r\n        * Store what runner origin *should* be\r\n        * TODO this should allow anything if x-origin protection should be disabled\r\n       */\r\n       this.runner = {};\r\n       this.runner.origin = '*';\r\n\r\n    },\r\n\r\n    /**\r\n     * Render live preview.\r\n     * Create the runner iframe, and if postMe wait until the iframe is loaded to\r\n     * start postMessaging the runner.\r\n     */\r\n    prepare :  function () {\r\n\r\n      if (this._inited) {\r\n        return this._inited.promise;\r\n      }\r\n\r\n      this._inited = new Deferred();\r\n\r\n      // Basic mode\r\n      // This adds the runner iframe to the page. It's only run once.\r\n      //if (!$live.find('iframe').length) {\r\n        /*\r\n        iframe = noder.create(\"iframe\",{\r\n          ///iframe.src = jsbin.runner;\r\n          src : this.options.runnerUrl\r\n        },{\r\n          \"class\" : \"stretch\",\r\n          \"sandbox\", \"allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\",\r\n          \"frameBorder\": '0',\r\n          \"name\", \"<proxy>\",\r\n        },this._elm);\r\n\r\n        try {\r\n          ///iframe.contentWindow.name = '/' + jsbin.state.code + '/' + jsbin.state.revision;\r\n          iframe.contentWindow.name  = this.options.runnerName;\r\n        } catch (e) {\r\n          // ^- this shouldn't really fail, but if we're honest, it's a fucking mystery as to why it even works.\r\n          // problem is: if this throws (because iframe.contentWindow is undefined), then the execution exits\r\n          // and `var renderLivePreview` is set to undefined. The knock on effect is that the calls to renderLivePreview\r\n          // then fail, and jsbin doesn't boot up. Tears all round, so we catch.\r\n        }\r\n      //}\r\n\r\n      iframe.onload = () => {\r\n        if (window.postMessage) {\r\n          // setup postMessage listening to the runner\r\n          $window.on('message', (event) => {\r\n            this.handleMessage(event.originalEvent)\r\n          });\r\n          this.setup(iframe);\r\n          this._inited.resolve();\r\n        }\r\n      };\r\n\r\n      iframe.onerror = (err) => {\r\n        this._inited.reject(err);\r\n      };\r\n      */\r\n\r\n      createIframe({\r\n        \"url\" : this.options.runnerUrl,\r\n        \"className\" : \"stretch\",\r\n        \"sandbox\" : \"allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts\",\r\n        \"frameBorder\": '0',\r\n        \"name\": \"<proxy>\",\r\n        \"contentWindowName\": this.options.runnerName,\r\n        \"onload\" : () => {\r\n          if (window.postMessage) {\r\n            // setup postMessage listening to the runner\r\n            $window.on('message', (event) => {\r\n              this.handleMessage(event.originalEvent)\r\n            });\r\n            this.setup(iframe);\r\n            this._inited.resolve();\r\n          }\r\n        },\r\n        \"onerror\" : (err) => {\r\n          this._inited.reject(err);\r\n        }\r\n      },this._elm);\r\n\r\n      /**\r\n       * Events\r\n       */\r\n\r\n      $document.on('codeChange.live', (event, arg) => {\r\n        if (arg.origin === 'setValue' || arg.origin === undefined) {\r\n          return;\r\n        }\r\n        ///store.sessionStorage.removeItem('runnerPending');\r\n      });\r\n\r\n      // Listen for console input and post it to the iframe\r\n      $document.on(\"console:run\", (event, cmd)  => {\r\n        this.postMessage('console:run', cmd);\r\n      });\r\n\r\n      $document.on('console:load:script', (event, url) => {\r\n        this.postMessage('console:load:script', url);\r\n      });\r\n\r\n      $document.on('console:load:dom', (event, html) => {\r\n        this.postMessage('console:load:dom', html);\r\n      });\r\n\r\n      /* not need ? // lwf\r\n       * When the iframe resizes, update the size text\r\n      this.resize = (function () {\r\n        var $size = this.$().find('.size');\r\n\r\n        var hide = func.debounce(function () {\r\n          $size.fadeOut(200);\r\n        }, 2000);\r\n\r\n        var embedResizeDone = false;\r\n\r\n        return function (data) {\r\n          \r\n          ///if (!jsbin.embed) {\r\n          ///  // Display the iframe size in px in the JS Bin UI\r\n          ///  size.show().html(data.width + 'px');\r\n          ///  hide();\r\n          ///}\r\n          ///if (jsbin.embed && self !== top && embedResizeDone === false) {\r\n          if (embedResizeDone === false) {\r\n            embedResizeDone = true;\r\n            // Inform the outer page of a size change\r\n            var height = ($body.outerHeight(true) - $(this.runner.iframe).height()) + data.offsetHeight;\r\n           window.parent.postMessage({ height: height }, '*');\r\n          }\r\n        };\r\n      }());\r\n      */\r\n      \r\n      return inited.promise;\r\n    },\r\n\r\n\r\n    /**\r\n     * Setup the renderer\r\n     */\r\n    setup : function (runnerFrame) {\r\n      this.runner.window = runnerFrame.contentWindow;\r\n      this.runner.iframe = runnerFrame;\r\n    },\r\n\r\n    /**\r\n     * Log error messages, indicating that it's from the renderer.\r\n     */\r\n    error : function () {\r\n      // it's quite likely that the error that fires on this handler actually comes\r\n      // from another service on the page, like a browser plugin, which we can\r\n      // safely ignore.\r\n      window.console.warn.apply(console, ['Renderer:'].concat([].slice.call(arguments)));\r\n    },\r\n\r\n    /**\r\n     * Handle all incoming postMessages to the renderer\r\n     */\r\n    handleMessage : function (event) {\r\n      if (!event.origin) return;\r\n      var data = event.data;\r\n\r\n      if (typeof data !== 'string') {\r\n        // this event isn't for us (i.e. comes from a browser ext)\r\n        return;\r\n      }\r\n\r\n      // specific change to handle reveal embedding\r\n      /*\r\n       // Unnecessary? //lwf\r\n      try {\r\n        if (event.data.indexOf('slide:') === 0 || event.data === 'jsbin:refresh') {\r\n          // reset the state of the panel visibility\r\n          jsbin.panels.allEditors(function (p) {\r\n            p.visible = false;\r\n          });\r\n          jsbin.panels.restore();\r\n          return;\r\n        }\r\n      } catch (e) {}\r\n      */\r\n\r\n      try {\r\n        data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n      } catch (e) {\r\n        return this.error('Error parsing event data:', e.message);\r\n      }\r\n\r\n      /*\r\n       // Unnecessary? //lwf\r\n      if (data.type.indexOf('code:') === 0 && jsbin.embed) {\r\n        var panel = data.type.substr(5);\r\n        if (panel === 'js') { panel = 'javascript'; }\r\n        if (' css javascript html '.indexOf(' ' + panel + ' ') === -1) {\r\n          return renderer.error('No matching event handler:', data.type);\r\n        }\r\n\r\n        if (!jsbin.state.metadata.pro) {\r\n          return renderer.error('Code injection is only supported on pro created bins');\r\n        }\r\n\r\n        jsbin.panels.named[panel].setCode(data.data);\r\n        renderLivePreview();\r\n\r\n        return;\r\n      }\r\n      */\r\n\r\n      if (typeof this[data.type] !== 'function') {\r\n        return false; //renderer.error('No matching handler for event', data);\r\n      }\r\n      try {\r\n        this[data.type](data.data);\r\n      } catch (e) {\r\n        this.error(e.message);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Send message to the runner window\r\n     */\r\n    postMessage : function (type, data) {\r\n      if (!this.runner.window) {\r\n        return this.error('postMessage: No connection to runner window.');\r\n      }\r\n      this.runner.window.postMessage(JSON.stringify({\r\n        type: type,\r\n        data: data\r\n      }), this.runner.origin);\r\n    },\r\n\r\n    /**\r\n     * When the renderer is complete, it means we didn't hit an initial\r\n     * infinite loop\r\n     */\r\n    complete : function () {\r\n      try {\r\n        store.sessionStorage.removeItem('runnerPending');\r\n      } catch (e) {}\r\n    },\r\n\r\n    /**\r\n     * Pass loop protection hit calls up to the error UI\r\n    renderer.loopProtectHit = function (line) {\r\n      var cm = jsbin.panels.named.javascript.editor;\r\n\r\n      // grr - more setTimeouts to the rescue. We need this to go in *after*\r\n      // jshint does it's magic, but jshint set on a setTimeout, so we have to\r\n      // schedule after.\r\n      setTimeout(function () {\r\n        var annotations = cm.state.lint.annotations || [];\r\n        if (typeof cm.updateLinting !== 'undefined') {\r\n          // note: this just updated the *source* reference\r\n          annotations = annotations.filter(function (a) {\r\n            return a.source !== 'loopProtectLine:' + line;\r\n          });\r\n          annotations.push({\r\n            from: CodeMirror.Pos(line-1, 0),\r\n            to: CodeMirror.Pos(line-1, 0),\r\n            message: 'Exiting potential infinite loop.\\nTo disable loop protection: add \"// noprotect\" to your code',\r\n            severity: 'warning',\r\n            source: 'loopProtectLine:' + line\r\n          });\r\n\r\n          cm.updateLinting(annotations);\r\n        }\r\n      }, cm.state.lint.options.delay || 0);\r\n    };\r\n     */\r\n\r\n\r\n\r\n    /**\r\n     * When the iframe focuses, simulate that here\r\n     */\r\n    focus : function () {\r\n      ///jsbin.panels.focus(jsbin.panels.named.live);\r\n      // also close any open dropdowns\r\n      ///closedropdown();\r\n    },\r\n\r\n    /**\r\n     * Proxy console logging to JS Bin's console\r\n     */\r\n    console : function (data) {\r\n      var method = data.method,\r\n          args = data.args;\r\n\r\n      if (!window._console) {return;}\r\n      if (!window._console[method]) {method = 'log';}\r\n\r\n      // skip the entire console rendering if the console is hidden\r\n      ///if (!jsbin.panels.named.console.visible) { return; }\r\n\r\n      window._console[method].apply(window._console, args);\r\n    },\r\n\r\n    /**\r\n     * Load scripts into rendered iframe\r\n     */\r\n    'console:load:script:success' : function (url) {\r\n      $document.trigger('console:load:script:success', url);\r\n    },\r\n\r\n    'console:load:script:error' : function (err) {\r\n      $document.trigger('console:load:script:error', err);\r\n    },\r\n\r\n    /**\r\n     * Load DOME into rendered iframe\r\n     * TODO abstract these so that they are automatically triggered\r\n     */\r\n    'console:load:dom:success' : function (url) {\r\n      $document.trigger('console:load:dom:success', url);\r\n    },\r\n\r\n    'console:load:dom:error' : function (err) {\r\n      $document.trigger('console:load:dom:error', err);\r\n    }\r\n\r\n  });\r\n\r\n  return embeds.EmbedRunner = EmbedRunner;\r\n});\r\n"]}