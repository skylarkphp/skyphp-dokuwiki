{"version":3,"sources":["embed-youtube.js"],"names":["define","langx","noder","$","plugins","embeds","EmbedYoutube","Plugin","inherit","klassName","pluginName","options","_construct","elm","prototype","call","this","videoId","playerVars","clickToPlay","canPlayType","loadAPI","scriptTag","that","onYouTubeIframeAPIReady","window","apiUrl","scriptTags","document","getElementsByTagName","i","length","apply","playOnReady","play","src","createElement","parentNode","insertBefore","onReady","ready","onPlaying","playStatus","emit","onPause","defer","checkSeek","stateChange","YT","PlayerState","PAUSED","ENDED","onStateChange","event","data","PLAYING","hasPlayed","onError","trigger","navigator","test","platform","player","playVideo","Player","_elm","events","pause","pauseVideo"],"mappings":";;;;;;;AAAAA,QACE,sBACA,qBACA,qBACE,4BACF,YACC,SAAUC,EAAOC,EAAOC,EAAGC,EAASC,GACrC,aAEA,IAAIC,EAAeF,EAAQG,OAAOC,SAChCC,UAAW,eAEXC,WAAa,sBAEbC,WAIAC,WAAa,SAASC,EAAIF,GAExBP,EAAQG,OAAOO,UAAUF,WAAWG,KAAKC,KAAKH,EAAIF,GAElDK,KAAKC,QAAUN,EAAQM,QACvBD,KAAKE,WAAaP,EAAQO,WAC1BF,KAAKG,YAAcR,EAAQQ,aAI7BC,YAAa,WACX,OAAO,GAGTC,QAAS,WACP,IAKEC,EALEC,EAAOP,KACTQ,EAA0BC,OAAOD,wBACjCE,EAAS,qCACTC,EAAaC,SAASC,qBAAqB,UAC3CC,EAAIH,EAAWI,OAWjB,IARAN,OAAOD,wBAA0B,WAC3BA,GACFA,EAAwBQ,MAAMhB,MAE5BO,EAAKU,aACPV,EAAKW,QAGFJ,GAEL,GAAIH,EADJG,GAAK,GACaK,MAAQT,EACxB,QAGJJ,EAAYM,SAASQ,cAAc,WACzBD,IAAMT,EAChBC,EAAW,GAAGU,WAAWC,aAAahB,EAAWK,EAAW,KAG9DY,QAAS,WACPvB,KAAKwB,OAAQ,EACTxB,KAAKiB,aACPjB,KAAKkB,QAITO,UAAW,WACLzB,KAAK0B,WAAa,IACpB1B,KAAK2B,KAAK,WACV3B,KAAK0B,WAAa,IAItBE,QAAS,WACP3C,EAAM4C,MAAM,KACV7B,KAAK8B,aACL,MAGJA,UAAW,WAEP9B,KAAK+B,cAAgBC,GAAGC,YAAYC,QACpClC,KAAK+B,cAAgBC,GAAGC,YAAYE,QAGpCnC,KAAK2B,KAAK,gBACH3B,KAAK0B,aAIhBU,cAAe,SAAUC,GACvB,OAAQA,EAAMC,MACZ,KAAKN,GAAGC,YAAYM,QAClBvC,KAAKwC,WAAY,EACjBxC,KAAKyB,YACL,MACF,KAAKO,GAAGC,YAAYC,OACpB,KAAKF,GAAGC,YAAYE,MAClBnC,KAAK4B,UAIT5B,KAAK+B,YAAcM,EAAMC,MAG3BG,QAAS,SAAUJ,GACjBrC,KAAK0C,QAAQ,QAASL,IAGxBnB,KAAM,WACJ,IAAIX,EAAOP,KACNA,KAAK0B,aACR1B,KAAK2B,KAAK,QACV3B,KAAK0B,WAAa,GAEhB1B,KAAKwB,OAEJxB,KAAKwC,YACLxC,KAAKG,aACHM,OAAOkC,WACN,iBAAiBC,KAAKnC,OAAOkC,UAAUE,WAM3C7C,KAAKyB,YAELzB,KAAK8C,OAAOC,aAGd/C,KAAKiB,aAAc,EACbR,OAAOuB,IAAMA,GAAGgB,OAEVhD,KAAK8C,SACf9C,KAAK8C,OAAS,IAAId,GAAGgB,OAAOhD,KAAKiD,MAC/BhD,QAASD,KAAKC,QACdC,WAAYF,KAAKE,WACjBgD,QACE3B,QAAS,WACPhB,EAAKgB,WAEPa,cAAe,SAAUC,GACvB9B,EAAK6B,cAAcC,IAErBI,QAAS,SAAUJ,GACjB9B,EAAKkC,QAAQJ,QAbnBrC,KAAKK,YAqBX8C,MAAO,WACDnD,KAAKwB,MACPxB,KAAK8C,OAAOM,aACHpD,KAAK0B,oBACP1B,KAAKiB,YACZjB,KAAK2B,KAAK,gBACH3B,KAAK0B,eAKlB,OAAOrC,EAAOC,aAAeA","file":"../embed-youtube.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n  './embeds'\r\n], function (langx, noder, $, plugins, embeds) {\r\n  'use strict'\r\n\r\n  var EmbedYoutube = plugins.Plugin.inherit({\r\n    klassName: \"EmbedYoutube\",\r\n\r\n    pluginName : \"lark.embeds.youtube\",\r\n\r\n    options : {\r\n\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      // videoId, playerVars, clickToPlay\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this.videoId = options.videoId;\r\n      this.playerVars = options.playerVars;\r\n      this.clickToPlay = options.clickToPlay;\r\n      ///this.element = document.createElement('div');\r\n    },\r\n\r\n    canPlayType: function () {\r\n      return true;\r\n    },\r\n\r\n    loadAPI: function () {\r\n      var that = this,\r\n        onYouTubeIframeAPIReady = window.onYouTubeIframeAPIReady,\r\n        apiUrl = 'https://www.youtube.com/iframe_api',\r\n        scriptTags = document.getElementsByTagName('script'),\r\n        i = scriptTags.length,\r\n        scriptTag;\r\n\r\n      window.onYouTubeIframeAPIReady = function () {\r\n        if (onYouTubeIframeAPIReady) {\r\n          onYouTubeIframeAPIReady.apply(this);\r\n        }\r\n        if (that.playOnReady) {\r\n          that.play();\r\n        }\r\n      }\r\n      while (i) {\r\n        i -= 1\r\n        if (scriptTags[i].src === apiUrl) {\r\n          return\r\n        }\r\n      }\r\n      scriptTag = document.createElement('script')\r\n      scriptTag.src = apiUrl\r\n      scriptTags[0].parentNode.insertBefore(scriptTag, scriptTags[0])\r\n    },\r\n\r\n    onReady: function () {\r\n      this.ready = true;\r\n      if (this.playOnReady) {\r\n        this.play()\r\n      }\r\n    },\r\n\r\n    onPlaying: function () {\r\n      if (this.playStatus < 2) {\r\n        this.emit(\"playing\");\r\n        this.playStatus = 2;\r\n      }\r\n    },\r\n\r\n    onPause: function () {\r\n      langx.defer(()=>{\r\n        this.checkSeek();\r\n      },2000)\r\n    },\r\n\r\n    checkSeek: function () {\r\n      if (\r\n        this.stateChange === YT.PlayerState.PAUSED ||\r\n        this.stateChange === YT.PlayerState.ENDED\r\n      ) {\r\n        // check if current state change is actually paused\r\n        this.emit(\"pause\");\r\n        delete this.playStatus\r\n      }\r\n    },\r\n\r\n    onStateChange: function (event) {\r\n      switch (event.data) {\r\n        case YT.PlayerState.PLAYING:\r\n          this.hasPlayed = true\r\n          this.onPlaying()\r\n          break\r\n        case YT.PlayerState.PAUSED:\r\n        case YT.PlayerState.ENDED:\r\n          this.onPause()\r\n          break\r\n      }\r\n      // Save most recent state change to this.stateChange\r\n      this.stateChange = event.data\r\n    },\r\n\r\n    onError: function (event) {\r\n      this.trigger(\"error\", event);\r\n    },\r\n\r\n    play: function () {\r\n      var that = this\r\n      if (!this.playStatus) {\r\n        this.emit(\"play\");\r\n        this.playStatus = 1;\r\n      }\r\n      if (this.ready) {\r\n        if (\r\n          !this.hasPlayed &&\r\n          (this.clickToPlay ||\r\n            (window.navigator &&\r\n              /iP(hone|od|ad)/.test(window.navigator.platform)))\r\n        ) {\r\n          // Manually trigger the playing callback if clickToPlay\r\n          // is enabled and to workaround a limitation in iOS,\r\n          // which requires synchronous user interaction to start\r\n          // the video playback:\r\n          this.onPlaying();\r\n        } else {\r\n          this.player.playVideo();\r\n        }\r\n      } else {\r\n        this.playOnReady = true;\r\n        if (!(window.YT && YT.Player)) {\r\n          this.loadAPI();\r\n        } else if (!this.player) {\r\n          this.player = new YT.Player(this._elm, {\r\n            videoId: this.videoId,\r\n            playerVars: this.playerVars,\r\n            events: {\r\n              onReady: function () {\r\n                that.onReady()\r\n              },\r\n              onStateChange: function (event) {\r\n                that.onStateChange(event)\r\n              },\r\n              onError: function (event) {\r\n                that.onError(event)\r\n              }\r\n            }\r\n          })\r\n        }\r\n      }\r\n    },\r\n\r\n    pause: function () {\r\n      if (this.ready) {\r\n        this.player.pauseVideo()\r\n      } else if (this.playStatus) {\r\n        delete this.playOnReady\r\n        this.emit(\"pause\");\r\n        delete this.playStatus\r\n      }\r\n    }\r\n  });\r\n\r\n  return embeds.EmbedYoutube = EmbedYoutube;\r\n});"]}