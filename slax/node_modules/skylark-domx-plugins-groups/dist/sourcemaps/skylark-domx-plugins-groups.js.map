{"version":3,"sources":["skylark-domx-plugins-groups.js"],"names":["define","plugins","groups","langx","$","elmx","Group","Plugin","inherit","klassName","pluginName","options","classes","selectors","item","template","selector","selectable","multiSelect","base","selected","active","_construct","elm","this","overrided","self","velm","_velm","_elm","itemSelector","on","veItem","hasClass","value","getItemValue","setActiveItem","toggleSelectOneItem","clearSelectedItems","selectOneItem","resetItems","_$items","findItem","valueOrIdx","isNumber","eq","isString","filter","getItems","$item","data","undefined","index","getItemsCount","size","getItemIndex","isSelectedItem","addClass","unselectOneItem","removeClass","selectedClass","getSelectedItemValues","map","el","getSelectedItems","getActiveItem","activeClass","$activeItem","current","next","getSelectedItem","selectedItems","renderItemHtml","itemData","_renderItemHtml","itemTpl","isFunction","register","browser","eventer","Indicators","thumbnail","indicator","indexAttrName","prototype","call","$indicators","query","e","$indicator","target","slideIndex","attr","carousel","jump","preventDefault","createIndicator","_renderIndicatorHtml","addIndicator","setAttribute","append","add","clearIndicators","remove","setActiveIndicator","activeIndicatorClass","activeIndicator","events","ModeSlide","Emitter","carsouel","toIndex","currentIndex","type","ended","$active","$next","isCycling","interval","direction","pause","reflow","one","join","emulateTransitionEnd","cycle","styler","Rotatable","Scalable","ModeRotate","_$threedContainer","modes","rotate","threedContainer","_rotatable","starting","closest","length","started","stopped","_scalable","radius","targets","_start","delayTime","items","itemsCount","_itemsCount","deltaDeg","_deltaDeg","i","css","transform","$itemsContainer","_$itemsContainer","ModeCoverflow","_itemOffsets","_currentIndex","coverflow","_classRemover","RegExp","itemCurrent","itemPast","itemFuture","_whiteSpaceRemover","$items","spacing","each","c","replace","children","itemContent","wrapInner","width","outerWidth","containerWidth","itemHeight","biggestHeight","height","left","position","setTimeout","center","newClass","zIndex","total","Carousel","display","single","leftEdge","rightEdge","cycling","controls","loop","wrap","keyboard","toggle","prev","close","cycleStop","indicators","itemsContainer","indicatorsContainer","mode","slide","onjumped","onjumping","_$elm","find","_indicators","mixin","paused","moving","proxy","keydown","document","documentElement","stop","cycled","addItems","_mode","startIndex","start","Math","floor","changeMode","dispose","clearItems","test","tagName","which","isDefined","clearInterval","setInterval","getItemForDirection","activeIndex","willWrap","delta","itemIndex","to","jumping","currentItem","parseInt","jumpingEvent","create","trigger","isDefaultPrevented","jumpedEvent","pausing","isUndefined","addItem","itemHtml","baseClass","Collapse","Linear","noder","datax","finder","geom","dnd","manager","off","removeAttr","pagePosition","Draggable","draggingClass","forEach","eventName","mousedown","handle","dragHandle","source","dragSource","prepare","mouseup","dragstart","dragend","dragging","end","Droppable","hoverClass","acceptable","dragover","stopPropagation","e2","overElm","transfer","draggingTransfer","dataTransfer","dropEffect","dragenter","dragleave","drop","Array","some","enable","disable","destory","placeholders","Sortable","connectWith","placeholder","placeholderClass","container","$container","createElement","class","preparing","ghost","text","show","detach","parent","overing","is","forcePlaceholderSize","outerHeight","hide","not","dropped","after","Tiler","alignment","infiniteScroll","itemRendered","noItemsHTML","viewClass","renderItem","_renderItem","main"],"mappings":"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","file":"../skylark-domx-plugins-groups.js","sourcesContent":["define('skylark-domx-plugins-groups/groups',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.groups = {};\r\n});\r\n\n define('skylark-domx-plugins-groups/group',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\"\r\n],function(langx,$,elmx,plugins,groups){\r\n  'use strict'\r\n\r\n    /*\r\n     * The base plugin class for grouping items.\r\n     */\r\n    var Group = plugins.Plugin.inherit({\r\n        klassName : \"Group\",\r\n\r\n        pluginName : \"lark.groups.group\",\r\n\r\n        options : {\r\n        \tclasses : {\r\n        \t},\r\n\r\n        \tselectors : {\r\n            //container : \"ul\", // \r\n        \t},\r\n\r\n          item : {\r\n            template : \"<span><i class=\\\"glyphicon\\\"></i><a href=\\\"javascript: void(0);\\\"></a> </span>\",\r\n            selector : \"li\",      // \".list-group-item\"\r\n\r\n            selectable: false,\r\n            multiSelect: false,\r\n\r\n            classes : {\r\n              base : \"item\",\r\n              selected : \"selected\",\r\n              active : \"active\"\r\n            }\r\n          },\r\n\r\n          //active : 0,\r\n\r\n          //A collection or function that is used to generate the content of the group \r\n          /*\r\n           * example1\r\n           *itemsSource : [{  \r\n           *  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n           *},{\r\n           *  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n           * }],\r\n           */\r\n          /*\r\n           * example2\r\n           *itemsSource :  function(){},\r\n           */\r\n        },\r\n\r\n        selected : null,\r\n \r\n        _construct : function(elm,options) {\r\n            this.overrided(elm,options);\r\n            var self = this,\r\n                velm = this._velm = elmx(this._elm),\r\n                itemSelector = this.options.item.selector;\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = elmx(this);\r\n                if (!veItem.hasClass('disabled')) {\r\n                    let value = self.getItemValue(this);\r\n                    self.setActiveItem(value);\r\n\r\n                  if (self.options.item.selectable) {\r\n\r\n                      if (self.options.item.multiSelect) {\r\n                        self.toggleSelectOneItem(value);\r\n                      } else {\r\n                        self.clearSelectedItems();\r\n                        self.selectOneItem(value);\r\n                      }\r\n                  }\r\n\r\n                }\r\n\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n\r\n            this.resetItems();\r\n\r\n            ///if (this.options.item.multiSelect) {\r\n            ///  this.selected = [];\r\n            ///} else {\r\n            ///  this.selected = null;\r\n            ///}\r\n            ///this.selected = this.options.selected;\r\n        },\r\n\r\n        resetItems : function() {\r\n            this._$items = this._velm.$(this.options.item.selector);\r\n        },\r\n\r\n        findItem : function (valueOrIdx) {\r\n          var $item;\r\n          if (langx.isNumber(valueOrIdx)) {\r\n            $item = this._$items.eq(valueOrIdx);\r\n          } else if (langx.isString(valueOrIdx)) {\r\n            $item = this._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n          } else {\r\n            $item = $(valueOrIdx);\r\n          }\r\n          return $item[0];\r\n        },\r\n\r\n        getItems : function() {\r\n          return this._$items;\r\n        },\r\n\r\n        getItemValue : function(item) {\r\n          let $item = $(item),\r\n              value = $item.data(\"value\");\r\n          if (value === undefined) {\r\n            value = this._$items.index($item[0]);\r\n          }\r\n          return value;\r\n        },\r\n\r\n        getItemsCount : function() {\r\n            return this._$items.size();\r\n        },\r\n\r\n        getItemIndex : function(item) {\r\n            return this._$items.index(item);\r\n        },\r\n\r\n        \r\n        isSelectedItem : function(valueOrIdx) {\r\n          return $(this.findItem(valueOrIdx)).hasClass(this.options.item.classes.selected);\r\n        },\r\n                 \r\n        selectOneItem : function (valueOrIdx) {\r\n          $(this.findItem(valueOrIdx)).addClass(this.options.item.classes.selected);\r\n        },\r\n\r\n        unselectOneItem : function (valueOrIdx) {\r\n          $(this.findItem(valueOrIdx)).removeClass(this.options.item.classes.selected);\r\n        },\r\n\r\n        /*\r\n         * clears the selected items.\r\n         */\r\n        clearSelectedItems : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          this._$items.filter(`.${selectedClass}`).removeClass(selectedClass);\r\n        },\r\n\r\n        getSelectedItemValues : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          return  this._$items.filter(`.${selectedClass}`).map( (el) => {\r\n            return this.getItemValue(el);\r\n          });\r\n        },\r\n\r\n        getSelectedItems : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          return  this._$items.filter(`.${selectedClass}`);\r\n        },\r\n\r\n        getActiveItem : function() {\r\n          let activeClass = this.options.item.classes.active,\r\n              $activeItem = this._$items.filter(`.${activeClass}`);\r\n          return $activeItem[0] || null;\r\n        },\r\n\r\n        setActiveItem : function(valueOrIdx) {\r\n          let current = this.getActiveItem(),\r\n              next = this.findItem(valueOrIdx);\r\n          if (next != current) {\r\n            let activeClass = this.options.item.classes.active;\r\n            $(current).removeClass(activeClass);\r\n            $(next).addClass(activeClass);\r\n          }\r\n        },\r\n\r\n\r\n        getSelectedItem : function() {\r\n          let selectedItems = this.getSelectedItems();\r\n          return selectedItems[0] || null;\r\n        },\r\n\r\n        toggleSelectOneItem : function(valueOrIdx) {\r\n          if (this.isSelectedItem(valueOrIdx)) {\r\n            this.unselectOneItem(valueOrIdx);\r\n          } else {\r\n            this.selectOneItem(valueOrIdx);\r\n          }\r\n        },\r\n\r\n        renderItemHtml : function(itemData) {\r\n          if (!this._renderItemHtml) {\r\n            let itemTpl = this.options.item.template;\r\n            if (langx.isString(itemTpl)) {\r\n              this._renderItemHtml = langx.template(itemTpl);\r\n            } else if (langx.isFunction(itemTpl)) {\r\n              this._renderItemHtml = itemTpl;\r\n            }\r\n          }\r\n\r\n          return this._renderItemHtml(itemData);\r\n        }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Group);\r\n\r\n  return groups.Group = Group;\r\n\r\n});\r\n\r\n\r\n\r\n\n define('skylark-domx-plugins-groups/_carousel/indicators',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"../groups\"\r\n],function(langx,browser,eventer,$,elmx,plugins,groups){\r\n\r\n\r\n  var Indicators = plugins.Plugin.inherit({\r\n    klassName : \"Indicators\",\r\n\r\n    pluginName : \"lark.groups.carousel.indicators\",\r\n\r\n\r\n    options : {\r\n      thumbnail : true,\r\n\r\n      indicator : {\r\n\t      template : \"<li/>\",\r\n\t      indexAttrName : \"data-index\",\r\n\t      selector : \"> li\",\r\n\t      classes : {\r\n\t          active : \"active\"\r\n\t      }\r\n      }\r\n    },\r\n\r\n    _construct: function(elm, options) {\r\n    \tplugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this._velm = this.elmx();\r\n    \tthis.$indicators = this._velm.query(this.options.indicator.selector);\r\n\r\n      this._velm.on(\"click\", `[${this.options.indicator.indexAttrName}]`, (e) => {\r\n          var $indicator = $(e.target),\r\n              slideIndex = $indicator.attr(this.options.indicator.indexAttrName);\r\n\r\n          this.options.carousel.jump(slideIndex);\r\n          e.preventDefault();\r\n      });\r\n    },\r\n\r\n\r\n    createIndicator: function (itemData) {\r\n      if (!this._renderIndicatorHtml) {\r\n        this._renderIndicatorHtml = langx.template(this.options.indicator.template);\r\n      }\r\n\r\n      /*\r\n      var indicator = noder.createElement(\"li\");\r\n      var title = itemData.title;\r\n      var thumbnailUrl\r\n      var thumbnail\r\n      if (this.options.thumbnail) {\r\n        thumbnailUrl = itemData[\"thumbnail\"]\r\n\r\n        if (thumbnailUrl) {\r\n          indicator.style.backgroundImage = 'url(\"' + thumbnailUrl + '\")'\r\n        }\r\n      }\r\n      if (title) {\r\n        indicator.title = title;\r\n      }\r\n      */\r\n\r\n      return $(this._renderIndicatorHtml(itemData))[0];\r\n    },\r\n\r\n    addIndicator: function (index,itemData) {\r\n        var indicator = this.createIndicator(itemData)\r\n        indicator.setAttribute('data-index', index)\r\n        this._velm.append(indicator)\r\n        this.$indicators = this.$indicators.add(indicator);\r\n    },\r\n\r\n    clearIndicators : function() {\r\n       this.$indicators.remove();\r\n    },\r\n    \r\n    setActiveIndicator: function (index) {\r\n      if (this.$indicators) {\r\n        let activeIndicatorClass = this.options.indicator.classes.active;\r\n        if (this.activeIndicator) {\r\n          this.activeIndicator.removeClass(activeIndicatorClass)\r\n        }\r\n        this.activeIndicator = $(this.$indicators[index])\r\n        this.activeIndicator.addClass(activeIndicatorClass)\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  return Indicators;\r\n});\n define('skylark-domx-plugins-groups/_carousel/mode-slide',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-eventer\"\r\n],function(langx,events,eventer){\r\n  'use strict'\r\n\r\n\r\n  var ModeSlide = events.Emitter.inherit({\r\n\r\n\r\n    _construct : function(carsouel) {\r\n    \tthis.carsouel = carsouel;\r\n    },\r\n\r\n    jump : function(toIndex,currentIndex,type,ended) {\r\n    \tlet carsouel = this.carsouel,\r\n    \t\tvelm = carsouel.elmx(),\r\n    \t\toptions = carsouel.options,\r\n\r\n            $active =  carsouel.$(carsouel.findItem(currentIndex)),\r\n        \t$next = carsouel.$(carsouel.findItem(toIndex)),\r\n        \tisCycling = carsouel.interval,\r\n        \tdirection = type == 'next' ? 'left' : 'right';\r\n\r\n        ///if ($next.hasClass('active')) {\r\n        ///\treturn (carsouel.moving = false)\r\n        ///}\r\n\r\n        isCycling && carsouel.pause();\r\n\r\n        /*\r\n        if (this._$indicators.length) {\r\n            this._$indicators.find('.active').removeClass('active');\r\n            var $nextIndicator = $(this._$indicators.children()[this.getItemIndex($next)]);\r\n            $nextIndicator && $nextIndicator.addClass('active');\r\n        }\r\n        */\r\n\r\n        $next.addClass(type);\r\n        $next.reflow(); // [0].offsetWidth; // force reflow\r\n        $active.addClass(direction);\r\n        $next.addClass(direction);\r\n        $next\r\n            .one('transitionEnd', function() {\r\n                ///$next.removeClass([type, direction].join(' ')).addClass('active')\r\n                ///$active.removeClass(['active', direction].join(' '))\r\n                $next.removeClass([type, direction].join(' '));\r\n                $active.removeClass(direction);\r\n                ended();\r\n            })\r\n            .emulateTransitionEnd();\r\n\r\n        isCycling && carsouel.cycle();\r\n\r\n        return this\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return ModeSlide;\t\r\n});\n define('skylark-domx-plugins-groups/_carousel/mode-rotate',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-plugins-interact/rotatable\",\r\n  \"skylark-domx-plugins-interact/scalable\"\r\n],function(langx,events,eventer,$,styler,Rotatable,Scalable){\r\n  'use strict'\r\n\r\n\r\n  var ModeRotate = events.Emitter.inherit({\r\n\r\n    options : {\r\n\r\n    },\r\n\r\n\r\n    _construct : function(carsouel) {\r\n      this.carsouel = carsouel;\r\n\r\n      this.resetItems();\r\n\r\n      this._$threedContainer = carsouel.$(`.${carsouel.options.modes.rotate.classes.threedContainer}`)\r\n\r\n      this._rotatable = new Rotatable(this._$threedContainer[0],{\r\n          starting : function(e) {\r\n            return $(e.target).closest(carsouel.options.item.selector).length==0;\r\n          },\r\n\r\n          started : function() {\r\n              //playSpin(false);\r\n          },\r\n\r\n          stopped : function() {\r\n              //playSpin(true);\r\n          }\r\n      });\r\n\r\n      this._scalable = new Scalable(this._$threedContainer[0],{\r\n        radius : carsouel.options.modes.rotate.radius,\r\n        targets : carsouel.getItems()\r\n      });\r\n\r\n      this._start = 0;\r\n\r\n    },\r\n\r\n    resetItems : function(delayTime) {\r\n      let items = this.carsouel.getItems();\r\n      if (items) {\r\n        let itemsCount = this._itemsCount = items.length,\r\n          deltaDeg = this._deltaDeg = 360 / itemsCount;\r\n\r\n        for (var i = 0; i < itemsCount; i++) {\r\n          styler.css(items[i],{\r\n            transform : \"rotateY(\" + (i * deltaDeg) + \"deg)\"\r\n          });\r\n        }       \r\n      }\r\n    },\r\n\r\n    jump : function(toIndex,currentIndex,type,ended) {\r\n        let carsouel = this.carsouel,\r\n            velm = carsouel.elmx(),\r\n            options = carsouel.options,\r\n\r\n            $active =  carsouel.$(carsouel.findItem(currentIndex)),\r\n            $next = carsouel.$(carsouel.findItem(toIndex));\r\n\r\n        $next.addClass(type);\r\n        $next.reflow(); // [0].offsetWidth; // force reflow\r\n\r\n        let $itemsContainer = carsouel._$itemsContainer;\r\n\r\n        $itemsContainer\r\n            .one('transitionEnd', function() {\r\n                $next.removeClass(type);\r\n                ended();\r\n            })\r\n            .css(\"transform\",\"rotateY(\" + (toIndex * this._deltaDeg) + \"deg)\")\r\n            .emulateTransitionEnd();\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n  });\r\n\r\n\r\n  return ModeRotate;  \r\n});\n define('skylark-domx-plugins-groups/_carousel/mode-coverflow',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-query\",\r\n],function(langx,events,$){\r\n  'use strict'\r\n\r\n\r\n  var ModeCoverflow = events.Emitter.inherit({\r\n\r\n\r\n    _construct : function(carsouel) {\r\n    \tthis.carsouel = carsouel;\r\n\r\n    \tthis._itemOffsets = [];\r\n    \tthis._currentIndex = -1;\r\n\r\n    \tlet classes = this.carsouel.options.modes.coverflow.classes;\r\n\r\n        this._classRemover = new RegExp('\\\\b(' + classes.itemCurrent + '|' + classes.itemPast + '|' + classes.itemFuture + ')(.*?)(\\\\s|$)', 'g');\r\n        this._whiteSpaceRemover = new RegExp('\\\\s\\\\s+', 'g');\r\n\r\n    \tthis.resetItems();\r\n    },\r\n\r\n\r\n    resetItems : function () {\r\n    \tlet classes = this.carsouel.options.modes.coverflow.classes,\r\n    \t\t$itemsContainer = this.carsouel._$itemsContainer,\r\n    \t\t$items = this.carsouel.getItems(),\r\n    \t\tspacing = this.carsouel.options.modes.coverflow.spacing;\r\n\r\n\r\n\r\n        function noTransition() {\r\n            $itemsContainer.css('transition', 'none');\r\n            $items.css('transition', 'none');\r\n        }\r\n\r\n        function resetTransition() {\r\n            $itemsContainer.css('transition', '');\r\n            $items.css('transition', '');\r\n        }\r\n\r\n\t    function calculateBiggestItemHeight() {\r\n\t        var biggestHeight = 0,\r\n\t            itemHeight;\r\n\r\n\t        $items.each(function() {\r\n\t            itemHeight = $(this).height();\r\n\t            if ( itemHeight > biggestHeight ) { biggestHeight = itemHeight; }\r\n\t        });\r\n\t        return biggestHeight;\r\n\t    }\r\n\r\n\r\n        let skipTransition = true;\r\n        if ( skipTransition ) { \r\n        \tnoTransition(); \r\n        }\r\n\r\n         $items.each((i,item) => {\r\n            let $item = $(item);\r\n\r\n            $item.attr('class', function(i, c) {\r\n                return c && c.replace(this._classRemover, '').replace(this._whiteSpaceRemover, ' ');\r\n            });\r\n\r\n            if ( !$item.children('.' + classes.itemContent ).length) {\r\n                $item.wrapInner('<div class=\"' + classes.itemContent + '\" />');\r\n            }\r\n            let width = $item.outerWidth();\r\n\r\n            if ( spacing !== 0 ) {\r\n               $item.css('margin-right', ( width * spacing ) + 'px');\r\n             }\r\n        });\r\n\r\n\r\n        this._itemOffsets = [];\r\n        let containerWidth = $itemsContainer.width();\r\n        $itemsContainer.height(calculateBiggestItemHeight());\r\n        ///$itemsContainer.height(\"300px\");\r\n\r\n        $items.each((i,item) => {\r\n            let $item = $(item),\r\n                width,\r\n                left;\r\n            width = $item.outerWidth();\r\n            left = $item.position().left;\r\n            this._itemOffsets[i] = -1 * ((left + (width / 2)) - (containerWidth / 2));\r\n\r\n        });\r\n\r\n        if ( skipTransition ) { \r\n        \tsetTimeout(resetTransition, 1); \r\n        }\r\n    },\r\n\r\n    center : function (currentIndex) {\r\n    \tif (currentIndex !== undefined) {\r\n\t        this._currentIndex = currentIndex;\r\n    \t} else {\r\n    \t\tcurrentIndex = this._currentIndex;\r\n    \t}\r\n    \tif (currentIndex>=0)  {\r\n\t        var classes = this.carsouel.options.modes.coverflow.classes,\r\n\t        \t$itemsContainer = this.carsouel._$itemsContainer,\r\n\t        \t$items =  this.carsouel.getItems(),\r\n\t        \ttotal = $items.length;\r\n\t        var $item;\r\n\t        var newClass;\r\n\t        var zIndex;\r\n\r\n\t        $items.each((i,item) => {\r\n\t            $item = $(item);\r\n\t            newClass = ' ';\r\n\r\n\t            if (i === currentIndex)  {\r\n\t                newClass += classes.itemCurrent;\r\n\t                zIndex = (total + 1);\r\n\t            }\r\n\t            else if (i < currentIndex) {\r\n\t                newClass += classes.itemPast + ' ' +\r\n\t                    classes.itemPast + '-' + (currentIndex - i);\r\n\t                zIndex = total - (currentIndex - i);\r\n\t            } else  {\r\n\t                newClass += classes.itemFuture + ' ' +\r\n\t                    classes.itemFuture + '-' + (i - currentIndex);\r\n\t                \r\n\t                zIndex = total -  (i - currentIndex);\r\n\t            }\r\n\r\n\t            $item.css('z-index', zIndex )\r\n\t              .attr('class',(i, c) => {\r\n\t                return c && c.replace(this._classRemover, '').replace(this._whiteSpaceRemover,' ') + newClass;\r\n\t              });\r\n\t        });\r\n\r\n\r\n\t        $itemsContainer.css('transform', 'translateX(' + this._itemOffsets[currentIndex] + 'px)');\r\n    \t}\r\n    },\r\n\r\n    jump : function(toIndex,currentIndex,type,ended) {\r\n        var $itemsContainer = this.carsouel._$itemsContainer;\r\n        this.center(toIndex);\r\n        $itemsContainer\r\n            .one('transitionEnd', function() {\r\n                ended();\r\n            })\r\n            .emulateTransitionEnd();\r\n\r\n        return this;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return ModeCoverflow;\t\r\n});\n define('skylark-domx-plugins-groups/carousel',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\",\r\n  \"./group\",\r\n  \"./_carousel/indicators\",\r\n  \"./_carousel/mode-slide\",\r\n  \"./_carousel/mode-rotate\",\r\n  \"./_carousel/mode-coverflow\"\r\n],function(langx,browser,eventer,$,elmx,plugins,groups,Group,Indicators,ModeSlide,ModeRotate,ModeCoverflow){\r\n  'use strict'\r\n\r\n \r\n  var Carousel = Group.inherit({\r\n    klassName : \"Carousel\",\r\n\r\n    pluginName : \"lark.groups.carousel\",\r\n\r\n        options : {\r\n            classes : {\r\n             // The class to add when the carousel is visible:\r\n              display: 'display',\r\n              // The class to add when the carousel only displays one item:\r\n              single: 'single',\r\n              // The class to add when the left edge has been reached:\r\n              leftEdge: 'left',\r\n              // The class to add when the right edge has been reached:\r\n              rightEdge: 'right',\r\n              // The class to add when the automatic slideshow is active:\r\n              cycling: 'cycling',\r\n\r\n              // The class to add when the carousel controls are visible:\r\n              controls: 'controls',\r\n            },\r\n\r\n            cycle : {\r\n              // [milliseconds]\r\n              // If a positive number, Carousel will automatically advance to next item after that number of milliseconds\r\n              interval: 5000,\r\n\r\n              pause: 'hover',\r\n            },\r\n\r\n            loop : true,\r\n\r\n            wrap: true,\r\n            keyboard: true,\r\n\r\n            controls : {\r\n              selectors : {\r\n               // The class for the \"toggle\" control:\r\n                toggle: '.toggle',\r\n                // The class for the \"prev\" control:\r\n                prev: '.prev',\r\n                // The class for the \"next\" control:\r\n                next: '.next',\r\n                // The class for the \"close\" control:\r\n                close: '.close',\r\n                // The class for the \"play-pause\" toggle control:\r\n                cycleStop: '.cycle-stop'\r\n              }\r\n            },\r\n\r\n            indicators : {\r\n                indicator : {\r\n                  template : \"<li/>\",\r\n                  indexAttrName : \"data-index\"\r\n                },\r\n\r\n            },\r\n\r\n            selectors :{\r\n              itemsContainer : \".items\",\r\n              indicatorsContainer : \".indicators\"\r\n            },\r\n\r\n            item : {\r\n              selector : \".item\",\r\n              classes : {\r\n                base : \"item\"\r\n              }\r\n            },\r\n\r\n            data : {\r\n              //items : \".carousel-item\",  // the items are from dom elements\r\n              //items : [{                 // the items are from json object\r\n              //  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n              //},{\r\n              //  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n              // }],\r\n            },\r\n\r\n            mode : \"slide\",\r\n\r\n            //start : \"center\", //ex:0\r\n\r\n            modes : {\r\n              slide : {\r\n                classes : {\r\n                  base : \"slide\"\r\n                }\r\n              },\r\n\r\n              rotate : {\r\n                classes : {\r\n                  base : \"rotate\",\r\n                  threedContainer : \"items-container\"\r\n                },\r\n                radius : 240\r\n              },\r\n\r\n              coverflow : {\r\n                classes : {\r\n                  base : \"coverflow\",\r\n                  itemPast : \"past\",\r\n                  itemFuture : \"future\",\r\n                  itemCurrent : \"current\",\r\n                  itemContent : \"content\"\r\n                },\r\n                spacing :-0.6\r\n              }\r\n            },\r\n\r\n            onjumped : null,\r\n            onjumping : null\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            //this.options = options\r\n            Group.prototype._construct.call(this,elm,options);\r\n\r\n            this.options.item.selectable = true;\r\n            this.options.item.multiSelect = false;\r\n\r\n\r\n            this._$elm = this.$();\r\n            this._$itemsContainer = this._$elm.find(this.options.selectors.itemsContainer);\r\n            \r\n            let $indicators = this._$elm.find(this.options.selectors.indicatorsContainer); \r\n            if ($indicators.length>0) {\r\n              this._indicators = new Indicators($indicators[0],langx.mixin({\r\n                carousel : this,\r\n                active : 0\r\n              },this.options.indicators));\r\n              this._indicators.setActiveIndicator(0);\r\n            }\r\n\r\n            this.paused = null;\r\n            this.moving = null;\r\n            this.interval = null;\r\n            this.$active = null;\r\n\r\n            if (this.options.cycle.interval >0) {\r\n              this.cycle(true);\r\n            } else {\r\n              this.cycle(false);\r\n            }\r\n\r\n            var self = this;\r\n            this.options.keyboard && this._$elm.on('keydown.lark.carousel', langx.proxy(this.keydown, this))\r\n\r\n            this.options.cycle.pause == 'hover' && !('ontouchstart' in document.documentElement) && this._$elm\r\n                .on('mouseenter.lark.carousel', (e) => {\r\n                  this.pause(true);\r\n                }).on('mouseleave.lark.carousel', (e) => {\r\n                  this.pause(false)\r\n                });\r\n\r\n            this._$elm.find(this.options.controls.selectors.prev).on(\"click\",(e)=>{\r\n                this.prev();\r\n                eventer.stop(e);\r\n            });\r\n\r\n            this._$elm.find(this.options.controls.selectors.next).on(\"click\",(e)=>{\r\n                this.next();\r\n                eventer.stop(e);\r\n            });\r\n\r\n            this._$elm.find(this.options.controls.selectors.cycleStop).on(\"click\",(e)=>{\r\n                this.cycle(!this.cycled);\r\n                eventer.stop(e);\r\n            });\r\n\r\n\r\n            if (this.options.data.items) {\r\n                this.addItems(this.options.data.items);\r\n            }\r\n            \r\n            this._mode = new modes[this.options.mode](this);\r\n\r\n\r\n            let startIndex = this.options.start;\r\n            if (startIndex !== undefined) {\r\n              if (startIndex === 'center' ) {\r\n                startIndex = Math.floor(this.getItemsCount() / 2)\r\n              } \r\n\r\n              this.jump(startIndex)              \r\n            }\r\n\r\n            if (this.options.onjumped) {\r\n              this.on(\"jumped\",this.options.onjumped)\r\n            }\r\n\r\n            if (this.options.onjumping) {\r\n              this.on(\"jumping\",this.options.onjumping)\r\n            }\r\n        },\r\n\r\n        changeMode : function(mode) {\r\n          if (mode == this.options.mode) {\r\n            return;\r\n          }\r\n\r\n          this.options.mode = mode;\r\n\r\n          if (this._mode && this._mode.dispose) {\r\n            this._mode.dispose();\r\n          }\r\n          this._mode = null;\r\n          this.clearItems();\r\n\r\n          this.$().removeClass(\"slide rotate coverflow\").addClass(this.options.modes[mode].classes.base);\r\n          this.$items\r\n\r\n          this.addItems(this.options.data.items);\r\n\r\n          this._mode = new modes[this.options.mode](this);\r\n\r\n          let startIndex = this.options.start;\r\n          if (startIndex !== undefined) {\r\n            if (startIndex === 'center' ) {\r\n              startIndex = Math.floor(this.getItemsCount() / 2)\r\n            } \r\n            this.jump(startIndex)              \r\n          }\r\n        },\r\n\r\n        keydown : function(e) {\r\n            if (/input|textarea/i.test(e.target.tagName)) return\r\n            switch (e.which) {\r\n                case 37:\r\n                    this.prev();\r\n                    break\r\n                case 39:\r\n                    this.next();\r\n                    break\r\n                default:\r\n                    return\r\n            }\r\n\r\n            e.preventDefault()\r\n        },\r\n\r\n\r\n        /*\r\n         * Cycles through the carousel items from left to right.\r\n         */\r\n        cycle : function(cycling) {\r\n            if (langx.isDefined(cycling)) {\r\n              this.cycled = !!cycling;\r\n             ///  e || (this.paused = false)\r\n              if (this.cycled) {\r\n                 this._velm.addClass(this.options.classes.cycling)\r\n              } else {\r\n                 this._velm.removeClass(this.options.classes.cycling)\r\n              }\r\n            } \r\n\r\n            if (this.interval){\r\n              clearInterval(this.interval);\r\n            }\r\n\r\n            if (this.options.cycle.interval && this.cycled && !this.paused ) {\r\n                this.interval = setInterval(langx.proxy(this.next, this), this.options.cycle.interval);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n\r\n        getItemForDirection : function(direction, active) {\r\n            var activeIndex = this.getItemIndex(active)\r\n            var willWrap = (direction == 'prev' && activeIndex === 0) ||\r\n                (direction == 'next' && activeIndex == (this._$items.length - 1))\r\n            if (willWrap && !this.options.wrap) return active\r\n            var delta = direction == 'prev' ? -1 : 1\r\n            var itemIndex = (activeIndex + delta) % this._$items.length\r\n            return this._$items.eq(itemIndex);\r\n        },\r\n\r\n        setActiveItem : function(toIndex) {\r\n            Group.prototype.setActiveItem.call(this,toIndex);\r\n\r\n            if (this._indicators) {\r\n              this._indicators.setActiveIndicator(toIndex);\r\n            }  \r\n        },\r\n\r\n        jump : function (to) {\r\n          if (this.jumping) {\r\n            return\r\n          }\r\n\r\n          let itemsCount = this.getItemsCount();\r\n          if (itemsCount<=1) {\r\n            return;\r\n          } \r\n\r\n          let currentItem = this.getActiveItem(),\r\n              currentIndex = currentItem ? this.getItemIndex(currentItem) : -1,\r\n              toItem,\r\n              toIndex,\r\n              type;\r\n\r\n          if (to === 'prev') {\r\n              type = to;\r\n              if (currentIndex > 0 ) { \r\n                toIndex = currentIndex -1; \r\n              } else if ( this.options.loop ) { \r\n                toIndex = itemsCount - 1; \r\n              }\r\n          } else if (to === 'next') {\r\n              type = to;\r\n              if ( currentIndex < itemsCount - 1 ) { \r\n                toIndex = currentIndex + 1; \r\n              } else if ( this.options.loop ) { \r\n                toIndex = 0; \r\n              }\r\n          } else if (typeof to === 'number') {\r\n              toIndex = to;\r\n          } else if ( typeof to == 'string') {\r\n              toIndex = parseInt(to);\r\n          } else if ( to !== undefined ) {\r\n              // if object is sent, get its index\r\n              toIndex = this.getItemIndex(to);\r\n          }\r\n\r\n          if (toIndex<0 || toIndex==currentIndex) {\r\n            return;\r\n          }\r\n\r\n          if (!type) {\r\n            type = toIndex > currentIndex ? 'next' : 'prev';\r\n          }\r\n\r\n          this.jumping =true;\r\n\r\n          var jumpingEvent = eventer.create('jumping.lark.carousel', {\r\n              toIndex,\r\n              currentIndex,\r\n              type\r\n          });\r\n\r\n          this.trigger(jumpingEvent);\r\n          if (jumpingEvent.isDefaultPrevented()) {\r\n            this.jumping =false;\r\n            return;\r\n          }\r\n\r\n          this._mode.jump(toIndex,currentIndex,type,() => {\r\n            //    $next.removeClass([type, direction].join(' ')).addClass('active')\r\n            //    $active.removeClass(['active', direction].join(' '))\r\n            this.setActiveItem(toIndex);\r\n\r\n            var jumpedEvent = eventer.create('jumped.lark.carousel', { \r\n              toIndex,\r\n              currentIndex,\r\n              type\r\n            });\r\n\r\n            setTimeout(()=> {\r\n              this.trigger(jumpedEvent)\r\n            }, 0)\r\n\r\n\r\n            this.jumping  = false;\r\n\r\n          });\r\n\r\n          return this;\r\n        },\r\n\r\n        /*\r\n         *Cycles the carousel to a particular frame (0 based, similar to an array). Returns to the caller before the target item has been shown\r\n        jump : function(pos) {\r\n            var that = this;\r\n\r\n            var activeItem = this.getActiveItem(),\r\n                activeIndex = activeItem ? this.getItemIndex(activeItem) : -1;\r\n\r\n            if (pos > (this._$items.length - 1) || pos < 0) return\r\n\r\n            if (this.moving) return this._$elm.one('jumped.lark.carousel', function() { that.jump(pos) }) // yes, \"slid\"\r\n            if (activeIndex == pos)  return this.pause().cycle()\r\n\r\n            return this._mode.jump(pos > activeIndex ? 'next' : 'prev', this._$items.eq(pos))\r\n        },\r\n         */\r\n\r\n        /*\r\n         * Stops the carousel from cycling through items.\r\n         */\r\n        pause : function(pausing) {\r\n            if (langx.isUndefined(pausing)) {\r\n              pausing = true;\r\n            }\r\n            this.paused = !!pausing;\r\n\r\n            ///e || (this.paused = true)\r\n\r\n            ///if (this._$elm.find(this.options.controls.selectors.next + \",\"+ this.options.controls.selectors.prev).length) { //.next,.prev\r\n                ///this._$elm.trigger(browser.support.transition.end)\r\n                ///this.cycle(true)\r\n            ///}\r\n\r\n            ///this.interval = clearInterval(this.interval)\r\n            this.cycle();\r\n\r\n            return this\r\n        },\r\n\r\n        /*\r\n         * Cycles to the next item. Returns to the caller before the next item has been shown\r\n         */\r\n        next : function() {\r\n            return this.jump('next')\r\n        },\r\n\r\n        /*\r\n         * Cycles to the previous item. Returns to the caller before the previous item has been shown.\r\n         */\r\n        prev : function() {\r\n            return this.jump('prev')\r\n        },\r\n\r\n        resetItems : function() {\r\n          Group.prototype.resetItems.call(this);\r\n\r\n          if (this._mode && this._mode.resetItems) {\r\n            this._mode.resetItems();\r\n          }\r\n        },\r\n\r\n        addItems : function(items) {\r\n            let index = this.getItemsCount();\r\n            for (var i=0; i<items.length;i++) {\r\n              this.addItem(index++,items[i]);\r\n            }\r\n            this.resetItems();\r\n        },\r\n\r\n        addItem : function(index,itemData) {\r\n          let itemHtml = this.renderItemHtml(itemData),\r\n              baseClass = this.options.item.classes.base;\r\n\r\n\r\n          let $item = $(itemHtml);\r\n          if (baseClass) {\r\n            $item.addClass(baseClass);\r\n          }\r\n\r\n          if (this._$itemsContainer) {\r\n            this._$itemsContainer.append($item);\r\n          }\r\n          if (this._indicators) {\r\n            this._indicators.addIndicator(index,itemData);\r\n          }\r\n        },\r\n\r\n        clearItems : function() {\r\n          if (this._$itemsContainer) {\r\n            this._$itemsContainer.attr(\"style\",\"\");\r\n          }\r\n          this._$items.remove();\r\n          this._$items = $();\r\n\r\n          if (this._indicators) {\r\n            this._indicators.clearIndicators();\r\n          }\r\n        }\r\n  });\r\n\r\n  var modes = Carousel.modes = {\r\n    \"slide\" : ModeSlide,\r\n    \"rotate\" : ModeRotate,\r\n    \"coverflow\" : ModeCoverflow\r\n  };\r\n\r\n  plugins.register(Carousel);\r\n\r\n  return groups.Carousel = Carousel;\t\r\n});\n define('skylark-domx-plugins-groups/linear',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/collapse\",\r\n  \"./groups\",\r\n  \"./group\"\r\n],function(langx,$,elmx,plugins,Collapse,groups,Group){\r\n  'use strict'\r\n\r\n  var Linear = Group.inherit({\r\n    klassName : \"Linear\",\r\n\r\n    pluginName : \"lark.groups.linear\",\r\n\r\n    options: {\r\n        item : {\r\n          selectable: true\r\n        },\r\n        data : {}\r\n    },\r\n\r\n    _construct: function (elm, options) {\r\n      this.overrided(elm, options);\r\n\r\n      if (this.options.data.items) {\r\n          this.addItems(this.options.data.items);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  plugins.register(Linear);\r\n\r\n  return groups.Linear = Linear;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-domx-plugins-dnd/draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});\ndefine('skylark-domx-plugins-dnd/droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.dnd.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return dnd.Droppable = Droppable;\r\n});\ndefine('skylark-domx-plugins-groups/sortable',[\r\n    \"./groups\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-dnd/draggable\",\r\n    \"skylark-domx-plugins-dnd/droppable\"\r\n],function(groups, langx,noder,datax,geom,eventer,styler,$,plugins,Draggable,Droppable){\r\n   'use strict'\r\n\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Sorter = plugins.Plugin.inherit({\r\n        \"klassName\" : \"Sorter\",\r\n\r\n        enable : function() {\r\n\r\n        },\r\n        \r\n        disable : function() {\r\n\r\n        },\r\n\r\n        destory : function() {\r\n\r\n        }\r\n    });\r\n\r\n\r\n    var dragging, placeholders = $();\r\n\r\n\r\n    var Sortable = plugins.Plugin.inherit({\r\n        klassName: \"Sortable\",\r\n\r\n        pluginName : \"lark.groups.sortable\",\r\n        \r\n        options : {\r\n            connectWith: false,\r\n            placeholder: null,\r\n            placeholderClass: 'sortable-placeholder',\r\n            draggingClass: 'sortable-dragging',\r\n            items : null\r\n        },\r\n\r\n        /*\r\n         * @param {HTMLElement} container  the element to use as a sortable container\r\n         * @param {Object} options  options object\r\n         * @param {String} [options.items = \"\"] \r\n         * @param {Object} [options.connectWith =] the selector to create connected groups\r\n         * @param {Object} [options\r\n         * @param {Object} [options\r\n         */\r\n        _construct : function (container,options) {\r\n            this.overrided(container,options);\r\n\r\n            options = this.options;\r\n\r\n            var isHandle, index, \r\n                $container = $(container), \r\n                $items = $container.children(options.items);\r\n            var placeholder = $(options.placeholder || noder.createElement(/^(ul|ol)$/i.test(container.tagName) ? 'li' : 'div',{\r\n                \"class\" : options.placeholderClass\r\n            }));\r\n\r\n            Draggable(container,{\r\n                source : options.items,\r\n                handle : options.handle,\r\n                draggingClass : options.draggingClass,\r\n                preparing : function(e) {\r\n                    //e.dragSource = e.handleElm;\r\n                },\r\n                started :function(e) {\r\n                    e.ghost = e.dragSource;\r\n                    e.transfer = {\r\n                        \"text\": \"dummy\"\r\n                    };\r\n                    index = (dragging = $(e.dragSource)).index();\r\n                },\r\n                ended : function(e) {\r\n                    if (!dragging) {\r\n                        return;\r\n                    }\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n                    if (index != dragging.index()) {\r\n                        dragging.parent().trigger('sortupdate', {item: dragging});\r\n                    }\r\n                    dragging = null;                \r\n                }\r\n\r\n            });\r\n\r\n            \r\n            Droppable(container,{\r\n                started: function(e) {\r\n                    e.acceptable = true;\r\n                    e.activeClass = \"active\";\r\n                    e.hoverClass = \"over\";\r\n                },\r\n                overing : function(e) {\r\n                    if ($items.is(e.overElm)) {\r\n                        if (options.forcePlaceholderSize) {\r\n                            placeholder.height(dragging.outerHeight());\r\n                        }\r\n                        dragging.hide();\r\n                        $(e.overElm)[placeholder.index() < $(e.overElm).index() ? 'after' : 'before'](placeholder);\r\n                        placeholders.not(placeholder).detach();\r\n                    } else if (!placeholders.is(e.overElm) && !$(e.overElm).children(options.items).length) {\r\n                        placeholders.detach();\r\n                        $(e.overElm).append(placeholder);\r\n                    }                \r\n                },\r\n                dropped : function(e) {\r\n                    placeholders.filter(':visible').after(dragging);\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n\r\n                    dragging = null;                \r\n                  }\r\n            });\r\n\r\n            $container.data('items', options.items)\r\n            placeholders = placeholders.add(placeholder);\r\n            if (options.connectWith) {\r\n                $(options.connectWith).add(this).data('connectWith', options.connectWith);\r\n            }\r\n            \r\n        }\r\n    });\r\n\r\n    plugins.register(Sortable,\"sortable\");\r\n\r\n    return groups.Sortable = Sortable;\r\n});\r\n\n define('skylark-domx-plugins-groups/tiler',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\",\r\n  \"./group\"\r\n],function(langx,$,elmx,plugins,groups,Group){\r\n  'use strict'\r\n\r\n  var Tiler = Group.inherit({\r\n    klassName : \"Tiler\",\r\n\r\n    pluginName : \"lark.groups.tiler\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: false,\r\n        viewClass: \"repeater-tile\",\r\n        template : '<div class=\"clearfix repeater-tile\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>',\r\n        item : {\r\n            template: '<div class=\"thumbnail\"><img height=\"75\" src=\"<%= href %>\" width=\"65\"><span><%= title %></span></div>',\r\n            selectable : true\r\n        },\r\n        renderItem : null\r\n    },\r\n\r\n    _construct: function (elm, options) {\r\n      this.overrided(elm, options);\r\n\r\n      this._renderItem = langx.template(this.options.item.template);\r\n\r\n      for (var i=0;i<options.items.length;i++) {\r\n        var itemHtml = this._renderItem(options.items[i]);\r\n        this._velm.append($(itemHtml));\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Tiler);\r\n\r\n  return groups.Tiler = Tiler;\t\r\n});\ndefine('skylark-domx-plugins-groups/main',[\r\n    \"./groups\",\r\n    \"./group\",\r\n    \"./carousel\",\r\n    \"./linear\",\r\n    \"./sortable\",\r\n    \"./tiler\"\r\n], function(groups) {\r\n    return groups;\r\n});\ndefine('skylark-domx-plugins-groups', ['skylark-domx-plugins-groups/main'], function (main) { return main; });\n\n"]}