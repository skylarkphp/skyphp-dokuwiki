{"version":3,"sources":["skylark-domx-plugins-groups.js"],"names":[],"mappingsfile":"../skylark-domx-plugins-groups.js","sourcesContent":["define('skylark-domx-plugins-groups/groups',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.groups = {};\r\n});\r\n\n define('skylark-domx-plugins-groups/group',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\"\r\n],function(langx,$,elmx,plugins,groups){\r\n  'use strict'\r\n\r\n    /*\r\n     * The base plugin class for grouping items.\r\n     */\r\n    var Group = plugins.Plugin.inherit({\r\n        klassName : \"Group\",\r\n\r\n        pluginName : \"lark.groups.group\",\r\n\r\n        options : {\r\n        \tclasses : {\r\n        \t},\r\n\r\n        \tselectors : {\r\n            //container : \"ul\", // \r\n        \t},\r\n\r\n          item : {\r\n            template : \"<span><i class=\\\"glyphicon\\\"></i><a href=\\\"javascript: void(0);\\\"></a> </span>\",\r\n            selector : \"li\",      // \".list-group-item\"\r\n\r\n            selectable: false,\r\n            multiSelect: false,\r\n\r\n            classes : {\r\n              base : \"item\",\r\n              selected : \"selected\",\r\n              active : \"active\"\r\n            }\r\n          },\r\n\r\n          //active : 0,\r\n\r\n          //A collection or function that is used to generate the content of the group \r\n          /*\r\n           * example1\r\n           *itemsSource : [{  \r\n           *  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n           *},{\r\n           *  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n           * }],\r\n           */\r\n          /*\r\n           * example2\r\n           *itemsSource :  function(){},\r\n           */\r\n        },\r\n\r\n        selected : null,\r\n \r\n        _construct : function(elm,options) {\r\n            this.overrided(elm,options);\r\n            var self = this,\r\n                velm = this._velm = elmx(this._elm),\r\n                itemSelector = this.options.item.selector;\r\n\r\n            velm.on('click', itemSelector, function () {\r\n                var veItem = elmx(this);\r\n                if (!veItem.hasClass('disabled')) {\r\n                    let value = self.getItemValue(this);\r\n                    self.setActiveItem(value);\r\n\r\n                  if (self.options.item.selectable) {\r\n\r\n                      if (self.options.item.multiSelect) {\r\n                        self.toggleSelectOneItem(value);\r\n                      } else {\r\n                        self.clearSelectedItems();\r\n                        self.selectOneItem(value);\r\n                      }\r\n                  }\r\n\r\n                }\r\n\r\n\r\n                //veItem.blur();\r\n                return false;\r\n            });\r\n\r\n            this.resetItems();\r\n\r\n            ///if (this.options.item.multiSelect) {\r\n            ///  this.selected = [];\r\n            ///} else {\r\n            ///  this.selected = null;\r\n            ///}\r\n            ///this.selected = this.options.selected;\r\n        },\r\n\r\n        resetItems : function() {\r\n            this._$items = this._velm.$(this.options.item.selector);\r\n        },\r\n\r\n        findItem : function (valueOrIdx) {\r\n          var $item;\r\n          if (langx.isNumber(valueOrIdx)) {\r\n            $item = this._$items.eq(valueOrIdx);\r\n          } else if (langx.isString(valueOrIdx)) {\r\n            $item = this._$items.filter('[data-value=\"' + valueOrIdx + '\"]');\r\n          } else {\r\n            $item = $(valueOrIdx);\r\n          }\r\n          return $item[0];\r\n        },\r\n\r\n        getItems : function() {\r\n          return this._$items;\r\n        },\r\n\r\n        getItemValue : function(item) {\r\n          let $item = $(item),\r\n              value = $item.data(\"value\");\r\n          if (value === undefined) {\r\n            value = this._$items.index($item[0]);\r\n          }\r\n          return value;\r\n        },\r\n\r\n        getItemsCount : function() {\r\n            return this._$items.size();\r\n        },\r\n\r\n        getItemIndex : function(item) {\r\n            return this._$items.index(item);\r\n        },\r\n\r\n        \r\n        isSelectedItem : function(valueOrIdx) {\r\n          return $(this.findItem(valueOrIdx)).hasClass(this.options.item.classes.selected);\r\n        },\r\n                 \r\n        selectOneItem : function (valueOrIdx) {\r\n          $(this.findItem(valueOrIdx)).addClass(this.options.item.classes.selected);\r\n        },\r\n\r\n        unselectOneItem : function (valueOrIdx) {\r\n          $(this.findItem(valueOrIdx)).removeClass(this.options.item.classes.selected);\r\n        },\r\n\r\n        /*\r\n         * clears the selected items.\r\n         */\r\n        clearSelectedItems : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          this._$items.filter(`.${selectedClass}`).removeClass(selectedClass);\r\n        },\r\n\r\n        getSelectedItemValues : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          return  this._$items.filter(`.${selectedClass}`).map( (el) => {\r\n            return this.getItemValue(el);\r\n          });\r\n        },\r\n\r\n        getSelectedItems : function() {\r\n          let selectedClass = this.options.item.classes.selected;\r\n          return  this._$items.filter(`.${selectedClass}`);\r\n        },\r\n\r\n        getActiveItem : function() {\r\n          let activeClass = this.options.item.classes.active,\r\n              $activeItem = this._$items.filter(`.${activeClass}`);\r\n          return $activeItem[0] || null;\r\n        },\r\n\r\n        setActiveItem : function(valueOrIdx) {\r\n          let current = this.getActiveItem(),\r\n              next = this.findItem(valueOrIdx);\r\n          if (next != current) {\r\n            let activeClass = this.options.item.classes.active;\r\n            $(current).removeClass(activeClass);\r\n            $(next).addClass(activeClass);\r\n          }\r\n        },\r\n\r\n\r\n        getSelectedItem : function() {\r\n          let selectedItems = this.getSelectedItems();\r\n          return selectedItems[0] || null;\r\n        },\r\n\r\n        toggleSelectOneItem : function(valueOrIdx) {\r\n          if (this.isSelectedItem(valueOrIdx)) {\r\n            this.unselectOneItem(valueOrIdx);\r\n          } else {\r\n            this.selectOneItem(valueOrIdx);\r\n          }\r\n        },\r\n\r\n        renderItemHtml : function(itemData) {\r\n          if (!this._renderItemHtml) {\r\n            let itemTpl = this.options.item.template;\r\n            if (langx.isString(itemTpl)) {\r\n              this._renderItemHtml = langx.template(itemTpl);\r\n            } else if (langx.isFunction(itemTpl)) {\r\n              this._renderItemHtml = itemTpl;\r\n            }\r\n          }\r\n\r\n          return this._renderItemHtml(itemData);\r\n        }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Group);\r\n\r\n  return groups.Group = Group;\r\n\r\n});\r\n\r\n\r\n\r\n\n define('skylark-domx-plugins-groups/_carousel/indicators',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"../groups\"\r\n],function(langx,browser,eventer,$,elmx,plugins,groups){\r\n\r\n\r\n  var Indicators = plugins.Plugin.inherit({\r\n    klassName : \"Indicators\",\r\n\r\n    pluginName : \"lark.groups.carousel.indicators\",\r\n\r\n\r\n    options : {\r\n      thumbnail : true,\r\n\r\n      indicator : {\r\n\t      template : \"<li/>\",\r\n\t      indexAttrName : \"data-index\",\r\n\t      selector : \"> li\",\r\n\t      classes : {\r\n\t          active : \"active\"\r\n\t      }\r\n      }\r\n    },\r\n\r\n    _construct: function(elm, options) {\r\n    \tplugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      this._velm = this.elmx();\r\n    \tthis.$indicators = this._velm.query(this.options.indicator.selector);\r\n\r\n      this._velm.on(\"click\", `[${this.options.indicator.indexAttrName}]`, (e) => {\r\n          var $indicator = $(e.target),\r\n              slideIndex = $indicator.attr(this.options.indicator.indexAttrName);\r\n\r\n          this.options.carousel.jump(slideIndex);\r\n          e.preventDefault();\r\n      });\r\n    },\r\n\r\n\r\n    createIndicator: function (itemData) {\r\n      if (!this._renderIndicatorHtml) {\r\n        this._renderIndicatorHtml = langx.template(this.options.indicator.template);\r\n      }\r\n\r\n      /*\r\n      var indicator = noder.createElement(\"li\");\r\n      var title = itemData.title;\r\n      var thumbnailUrl\r\n      var thumbnail\r\n      if (this.options.thumbnail) {\r\n        thumbnailUrl = itemData[\"thumbnail\"]\r\n\r\n        if (thumbnailUrl) {\r\n          indicator.style.backgroundImage = 'url(\"' + thumbnailUrl + '\")'\r\n        }\r\n      }\r\n      if (title) {\r\n        indicator.title = title;\r\n      }\r\n      */\r\n\r\n      return $(this._renderIndicatorHtml(itemData))[0];\r\n    },\r\n\r\n    addIndicator: function (index,itemData) {\r\n        var indicator = this.createIndicator(itemData)\r\n        indicator.setAttribute('data-index', index)\r\n        this._velm.append(indicator)\r\n        this.$indicators = this.$indicators.add(indicator);\r\n    },\r\n\r\n    clearIndicators : function() {\r\n       this.$indicators.remove();\r\n    },\r\n    \r\n    setActiveIndicator: function (index) {\r\n      if (this.$indicators) {\r\n        let activeIndicatorClass = this.options.indicator.classes.active;\r\n        if (this.activeIndicator) {\r\n          this.activeIndicator.removeClass(activeIndicatorClass)\r\n        }\r\n        this.activeIndicator = $(this.$indicators[index])\r\n        this.activeIndicator.addClass(activeIndicatorClass)\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  return Indicators;\r\n});\n define('skylark-domx-plugins-groups/_carousel/mode-slide',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-eventer\"\r\n],function(langx,events,eventer){\r\n  'use strict'\r\n\r\n\r\n  var ModeSlide = events.Emitter.inherit({\r\n\r\n\r\n    _construct : function(carsouel) {\r\n    \tthis.carsouel = carsouel;\r\n    },\r\n\r\n    jump : function(toIndex,currentIndex,type,ended) {\r\n    \tlet carsouel = this.carsouel,\r\n    \t\tvelm = carsouel.elmx(),\r\n    \t\toptions = carsouel.options,\r\n\r\n            $active =  carsouel.$(carsouel.findItem(currentIndex)),\r\n        \t$next = carsouel.$(carsouel.findItem(toIndex)),\r\n        \tisCycling = carsouel.interval,\r\n        \tdirection = type == 'next' ? 'left' : 'right';\r\n\r\n        ///if ($next.hasClass('active')) {\r\n        ///\treturn (carsouel.moving = false)\r\n        ///}\r\n\r\n        isCycling && carsouel.pause();\r\n\r\n        /*\r\n        if (this._$indicators.length) {\r\n            this._$indicators.find('.active').removeClass('active');\r\n            var $nextIndicator = $(this._$indicators.children()[this.getItemIndex($next)]);\r\n            $nextIndicator && $nextIndicator.addClass('active');\r\n        }\r\n        */\r\n\r\n        $next.addClass(type);\r\n        $next.reflow(); // [0].offsetWidth; // force reflow\r\n        $active.addClass(direction);\r\n        $next.addClass(direction);\r\n        $next\r\n            .one('transitionEnd', function() {\r\n                ///$next.removeClass([type, direction].join(' ')).addClass('active')\r\n                ///$active.removeClass(['active', direction].join(' '))\r\n                $next.removeClass([type, direction].join(' '));\r\n                $active.removeClass(direction);\r\n                ended();\r\n            })\r\n            .emulateTransitionEnd();\r\n\r\n        isCycling && carsouel.cycle();\r\n\r\n        return this\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return ModeSlide;\t\r\n});\n define('skylark-domx-plugins-groups/_carousel/mode-rotate',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-styler\",\r\n  \"skylark-domx-plugins-interact/rotatable\",\r\n  \"skylark-domx-plugins-interact/scalable\"\r\n],function(langx,events,eventer,$,styler,Rotatable,Scalable){\r\n  'use strict'\r\n\r\n\r\n  var ModeRotate = events.Emitter.inherit({\r\n\r\n    options : {\r\n\r\n    },\r\n\r\n\r\n    _construct : function(carsouel) {\r\n      this.carsouel = carsouel;\r\n\r\n      this.resetItems();\r\n\r\n      this._$threedContainer = carsouel.$(`.${carsouel.options.modes.rotate.classes.threedContainer}`)\r\n\r\n      this._rotatable = new Rotatable(this._$threedContainer[0],{\r\n          starting : function(e) {\r\n            return $(e.target).closest(carsouel.options.item.selector).length==0;\r\n          },\r\n\r\n          started : function() {\r\n              //playSpin(false);\r\n          },\r\n\r\n          stopped : function() {\r\n              //playSpin(true);\r\n          }\r\n      });\r\n\r\n      this._scalable = new Scalable(this._$threedContainer[0],{\r\n        radius : carsouel.options.modes.rotate.radius,\r\n        targets : carsouel.getItems()\r\n      });\r\n\r\n      this._start = 0;\r\n\r\n    },\r\n\r\n    resetItems : function(delayTime) {\r\n      let items = this.carsouel.getItems();\r\n      if (items) {\r\n        let itemsCount = this._itemsCount = items.length,\r\n          deltaDeg = this._deltaDeg = 360 / itemsCount;\r\n\r\n        for (var i = 0; i < itemsCount; i++) {\r\n          styler.css(items[i],{\r\n            transform : \"rotateY(\" + (i * deltaDeg) + \"deg)\"\r\n          });\r\n        }       \r\n      }\r\n    },\r\n\r\n    jump : function(toIndex,currentIndex,type,ended) {\r\n        let carsouel = this.carsouel,\r\n            velm = carsouel.elmx(),\r\n            options = carsouel.options,\r\n\r\n            $active =  carsouel.$(carsouel.findItem(currentIndex)),\r\n            $next = carsouel.$(carsouel.findItem(toIndex));\r\n\r\n        $next.addClass(type);\r\n        $next.reflow(); // [0].offsetWidth; // force reflow\r\n\r\n        let $itemsContainer = carsouel._$itemsContainer;\r\n\r\n        $itemsContainer\r\n            .one('transitionEnd', function() {\r\n                $next.removeClass(type);\r\n                ended();\r\n            })\r\n            .css(\"transform\",\"rotateY(\" + (toIndex * this._deltaDeg) + \"deg)\")\r\n            .emulateTransitionEnd();\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n  });\r\n\r\n\r\n  return ModeRotate;  \r\n});\n define('skylark-domx-plugins-groups/_carousel/mode-coverflow',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-langx-events\",\r\n  \"skylark-domx-query\",\r\n],function(langx,events,$){\r\n  'use strict'\r\n\r\n\r\n  var ModeCoverflow = events.Emitter.inherit({\r\n\r\n\r\n    _construct : function(carsouel) {\r\n    \tthis.carsouel = carsouel;\r\n\r\n    \tthis._itemOffsets = [];\r\n    \tthis._currentIndex = -1;\r\n\r\n    \tlet classes = this.carsouel.options.modes.coverflow.classes;\r\n\r\n        this._classRemover = new RegExp('\\\\b(' + classes.itemCurrent + '|' + classes.itemPast + '|' + classes.itemFuture + ')(.*?)(\\\\s|$)', 'g');\r\n        this._whiteSpaceRemover = new RegExp('\\\\s\\\\s+', 'g');\r\n\r\n    \tthis.resetItems();\r\n    },\r\n\r\n\r\n    resetItems : function () {\r\n    \tlet classes = this.carsouel.options.modes.coverflow.classes,\r\n    \t\t$itemsContainer = this.carsouel._$itemsContainer,\r\n    \t\t$items = this.carsouel.getItems(),\r\n    \t\tspacing = this.carsouel.options.modes.coverflow.spacing;\r\n\r\n\r\n\r\n        function noTransition() {\r\n            $itemsContainer.css('transition', 'none');\r\n            $items.css('transition', 'none');\r\n        }\r\n\r\n        function resetTransition() {\r\n            $itemsContainer.css('transition', '');\r\n            $items.css('transition', '');\r\n        }\r\n\r\n\t    function calculateBiggestItemHeight() {\r\n\t        var biggestHeight = 0,\r\n\t            itemHeight;\r\n\r\n\t        $items.each(function() {\r\n\t            itemHeight = $(this).height();\r\n\t            if ( itemHeight > biggestHeight ) { biggestHeight = itemHeight; }\r\n\t        });\r\n\t        return biggestHeight;\r\n\t    }\r\n\r\n\r\n        let skipTransition = true;\r\n        if ( skipTransition ) { \r\n        \tnoTransition(); \r\n        }\r\n\r\n         $items.each((i,item) => {\r\n            let $item = $(item);\r\n\r\n            $item.attr('class', function(i, c) {\r\n                return c && c.replace(this._classRemover, '').replace(this._whiteSpaceRemover, ' ');\r\n            });\r\n\r\n            if ( !$item.children('.' + classes.itemContent ).length) {\r\n                $item.wrapInner('<div class=\"' + classes.itemContent + '\" />');\r\n            }\r\n            let width = $item.outerWidth();\r\n\r\n            if ( spacing !== 0 ) {\r\n               $item.css('margin-right', ( width * spacing ) + 'px');\r\n             }\r\n        });\r\n\r\n\r\n        this._itemOffsets = [];\r\n        let containerWidth = $itemsContainer.width();\r\n        $itemsContainer.height(calculateBiggestItemHeight());\r\n        ///$itemsContainer.height(\"300px\");\r\n\r\n        $items.each((i,item) => {\r\n            let $item = $(item),\r\n                width,\r\n                left;\r\n            width = $item.outerWidth();\r\n            left = $item.position().left;\r\n            this._itemOffsets[i] = -1 * ((left + (width / 2)) - (containerWidth / 2));\r\n\r\n        });\r\n\r\n        if ( skipTransition ) { \r\n        \tsetTimeout(resetTransition, 1); \r\n        }\r\n    },\r\n\r\n    center : function (currentIndex) {\r\n    \tif (currentIndex !== undefined) {\r\n\t        this._currentIndex = currentIndex;\r\n    \t} else {\r\n    \t\tcurrentIndex = this._currentIndex;\r\n    \t}\r\n    \tif (currentIndex>=0)  {\r\n\t        var classes = this.carsouel.options.modes.coverflow.classes,\r\n\t        \t$itemsContainer = this.carsouel._$itemsContainer,\r\n\t        \t$items =  this.carsouel.getItems(),\r\n\t        \ttotal = $items.length;\r\n\t        var $item;\r\n\t        var newClass;\r\n\t        var zIndex;\r\n\r\n\t        $items.each((i,item) => {\r\n\t            $item = $(item);\r\n\t            newClass = ' ';\r\n\r\n\t            if (i === currentIndex)  {\r\n\t                newClass += classes.itemCurrent;\r\n\t                zIndex = (total + 1);\r\n\t            }\r\n\t            else if (i < currentIndex) {\r\n\t                newClass += classes.itemPast + ' ' +\r\n\t                    classes.itemPast + '-' + (currentIndex - i);\r\n\t                zIndex = total - (currentIndex - i);\r\n\t            } else  {\r\n\t                newClass += classes.itemFuture + ' ' +\r\n\t                    classes.itemFuture + '-' + (i - currentIndex);\r\n\t                \r\n\t                zIndex = total -  (i - currentIndex);\r\n\t            }\r\n\r\n\t            $item.css('z-index', zIndex )\r\n\t              .attr('class',(i, c) => {\r\n\t                return c && c.replace(this._classRemover, '').replace(this._whiteSpaceRemover,' ') + newClass;\r\n\t              });\r\n\t        });\r\n\r\n\r\n\t        $itemsContainer.css('transform', 'translateX(' + this._itemOffsets[currentIndex] + 'px)');\r\n    \t}\r\n    },\r\n\r\n    jump : function(toIndex,currentIndex,type,ended) {\r\n        var $itemsContainer = this.carsouel._$itemsContainer;\r\n        this.center(toIndex);\r\n        $itemsContainer\r\n            .one('transitionEnd', function() {\r\n                ended();\r\n            })\r\n            .emulateTransitionEnd();\r\n\r\n        return this;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  return ModeCoverflow;\t\r\n});\n define('skylark-domx-plugins-groups/carousel',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\",\r\n  \"./group\",\r\n  \"./_carousel/indicators\",\r\n  \"./_carousel/mode-slide\",\r\n  \"./_carousel/mode-rotate\",\r\n  \"./_carousel/mode-coverflow\"\r\n],function(langx,browser,eventer,$,elmx,plugins,groups,Group,Indicators,ModeSlide,ModeRotate,ModeCoverflow){\r\n  'use strict'\r\n\r\n \r\n  var Carousel = Group.inherit({\r\n    klassName : \"Carousel\",\r\n\r\n    pluginName : \"lark.groups.carousel\",\r\n\r\n        options : {\r\n            classes : {\r\n             // The class to add when the carousel is visible:\r\n              display: 'display',\r\n              // The class to add when the carousel only displays one item:\r\n              single: 'single',\r\n              // The class to add when the left edge has been reached:\r\n              leftEdge: 'left',\r\n              // The class to add when the right edge has been reached:\r\n              rightEdge: 'right',\r\n              // The class to add when the automatic slideshow is active:\r\n              cycling: 'cycling',\r\n\r\n              // The class to add when the carousel controls are visible:\r\n              controls: 'controls',\r\n            },\r\n\r\n            cycle : {\r\n              // [milliseconds]\r\n              // If a positive number, Carousel will automatically advance to next item after that number of milliseconds\r\n              interval: 5000,\r\n\r\n              pause: 'hover',\r\n            },\r\n\r\n            loop : true,\r\n\r\n            wrap: true,\r\n            keyboard: true,\r\n\r\n            controls : {\r\n              selectors : {\r\n               // The class for the \"toggle\" control:\r\n                toggle: '.toggle',\r\n                // The class for the \"prev\" control:\r\n                prev: '.prev',\r\n                // The class for the \"next\" control:\r\n                next: '.next',\r\n                // The class for the \"close\" control:\r\n                close: '.close',\r\n                // The class for the \"play-pause\" toggle control:\r\n                cycleStop: '.cycle-stop'\r\n              }\r\n            },\r\n\r\n            indicators : {\r\n                indicator : {\r\n                  template : \"<li/>\",\r\n                  indexAttrName : \"data-index\"\r\n                },\r\n\r\n            },\r\n\r\n            selectors :{\r\n              itemsContainer : \".items\",\r\n              indicatorsContainer : \".indicators\"\r\n            },\r\n\r\n            item : {\r\n              selector : \".item\",\r\n              classes : {\r\n                base : \"item\"\r\n              }\r\n            },\r\n\r\n            data : {\r\n              //items : \".carousel-item\",  // the items are from dom elements\r\n              //items : [{                 // the items are from json object\r\n              //  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n              //},{\r\n              //  type: 'image',href : \"https://xxx.com/1.jpg\",title : \"1\"\r\n              // }],\r\n            },\r\n\r\n            mode : \"slide\",\r\n\r\n            //start : \"center\", //ex:0\r\n\r\n            modes : {\r\n              slide : {\r\n                classes : {\r\n                  base : \"slide\"\r\n                }\r\n              },\r\n\r\n              rotate : {\r\n                classes : {\r\n                  base : \"rotate\",\r\n                  threedContainer : \"items-container\"\r\n                },\r\n                radius : 240\r\n              },\r\n\r\n              coverflow : {\r\n                classes : {\r\n                  base : \"coverflow\",\r\n                  itemPast : \"past\",\r\n                  itemFuture : \"future\",\r\n                  itemCurrent : \"current\",\r\n                  itemContent : \"content\"\r\n                },\r\n                spacing :-0.6\r\n              }\r\n            },\r\n\r\n            onjumped : null,\r\n            onjumping : null\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            //this.options = options\r\n            Group.prototype._construct.call(this,elm,options);\r\n\r\n            this.options.item.selectable = true;\r\n            this.options.item.multiSelect = false;\r\n\r\n\r\n            this._$elm = this.$();\r\n            this._$itemsContainer = this._$elm.find(this.options.selectors.itemsContainer);\r\n            \r\n            let $indicators = this._$elm.find(this.options.selectors.indicatorsContainer); \r\n            if ($indicators.length>0) {\r\n              this._indicators = new Indicators($indicators[0],langx.mixin({\r\n                carousel : this,\r\n                active : 0\r\n              },this.options.indicators));\r\n              this._indicators.setActiveIndicator(0);\r\n            }\r\n\r\n            this.paused = null;\r\n            this.moving = null;\r\n            this.interval = null;\r\n            this.$active = null;\r\n\r\n            if (this.options.cycle.interval >0) {\r\n              this.cycle(true);\r\n            } else {\r\n              this.cycle(false);\r\n            }\r\n\r\n            var self = this;\r\n            this.options.keyboard && this._$elm.on('keydown.lark.carousel', langx.proxy(this.keydown, this))\r\n\r\n            this.options.cycle.pause == 'hover' && !('ontouchstart' in document.documentElement) && this._$elm\r\n                .on('mouseenter.lark.carousel', (e) => {\r\n                  this.pause(true);\r\n                }).on('mouseleave.lark.carousel', (e) => {\r\n                  this.pause(false)\r\n                });\r\n\r\n            this._$elm.find(this.options.controls.selectors.prev).on(\"click\",(e)=>{\r\n                this.prev();\r\n                eventer.stop(e);\r\n            });\r\n\r\n            this._$elm.find(this.options.controls.selectors.next).on(\"click\",(e)=>{\r\n                this.next();\r\n                eventer.stop(e);\r\n            });\r\n\r\n            this._$elm.find(this.options.controls.selectors.cycleStop).on(\"click\",(e)=>{\r\n                this.cycle(!this.cycled);\r\n                eventer.stop(e);\r\n            });\r\n\r\n\r\n            if (this.options.data.items) {\r\n                this.addItems(this.options.data.items);\r\n            }\r\n            \r\n            this._mode = new modes[this.options.mode](this);\r\n\r\n\r\n            let startIndex = this.options.start;\r\n            if (startIndex !== undefined) {\r\n              if (startIndex === 'center' ) {\r\n                startIndex = Math.floor(this.getItemsCount() / 2)\r\n              } \r\n\r\n              this.jump(startIndex)              \r\n            }\r\n\r\n            if (this.options.onjumped) {\r\n              this.on(\"jumped\",this.options.onjumped)\r\n            }\r\n\r\n            if (this.options.onjumping) {\r\n              this.on(\"jumping\",this.options.onjumping)\r\n            }\r\n        },\r\n\r\n        changeMode : function(mode) {\r\n          if (mode == this.options.mode) {\r\n            return;\r\n          }\r\n\r\n          this.options.mode = mode;\r\n\r\n          if (this._mode && this._mode.dispose) {\r\n            this._mode.dispose();\r\n          }\r\n          this._mode = null;\r\n          this.clearItems();\r\n\r\n          this.$().removeClass(\"slide rotate coverflow\").addClass(this.options.modes[mode].classes.base);\r\n          this.$items\r\n\r\n          this.addItems(this.options.data.items);\r\n\r\n          this._mode = new modes[this.options.mode](this);\r\n\r\n          let startIndex = this.options.start;\r\n          if (startIndex !== undefined) {\r\n            if (startIndex === 'center' ) {\r\n              startIndex = Math.floor(this.getItemsCount() / 2)\r\n            } \r\n            this.jump(startIndex)              \r\n          }\r\n        },\r\n\r\n        keydown : function(e) {\r\n            if (/input|textarea/i.test(e.target.tagName)) return\r\n            switch (e.which) {\r\n                case 37:\r\n                    this.prev();\r\n                    break\r\n                case 39:\r\n                    this.next();\r\n                    break\r\n                default:\r\n                    return\r\n            }\r\n\r\n            e.preventDefault()\r\n        },\r\n\r\n\r\n        /*\r\n         * Cycles through the carousel items from left to right.\r\n         */\r\n        cycle : function(cycling) {\r\n            if (langx.isDefined(cycling)) {\r\n              this.cycled = !!cycling;\r\n             ///  e || (this.paused = false)\r\n              if (this.cycled) {\r\n                 this._velm.addClass(this.options.classes.cycling)\r\n              } else {\r\n                 this._velm.removeClass(this.options.classes.cycling)\r\n              }\r\n            } \r\n\r\n            if (this.interval){\r\n              clearInterval(this.interval);\r\n            }\r\n\r\n            if (this.options.cycle.interval && this.cycled && !this.paused ) {\r\n                this.interval = setInterval(langx.proxy(this.next, this), this.options.cycle.interval);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n\r\n        getItemForDirection : function(direction, active) {\r\n            var activeIndex = this.getItemIndex(active)\r\n            var willWrap = (direction == 'prev' && activeIndex === 0) ||\r\n                (direction == 'next' && activeIndex == (this._$items.length - 1))\r\n            if (willWrap && !this.options.wrap) return active\r\n            var delta = direction == 'prev' ? -1 : 1\r\n            var itemIndex = (activeIndex + delta) % this._$items.length\r\n            return this._$items.eq(itemIndex);\r\n        },\r\n\r\n        setActiveItem : function(toIndex) {\r\n            Group.prototype.setActiveItem.call(this,toIndex);\r\n\r\n            if (this._indicators) {\r\n              this._indicators.setActiveIndicator(toIndex);\r\n            }  \r\n        },\r\n\r\n        jump : function (to) {\r\n          if (this.jumping) {\r\n            return\r\n          }\r\n\r\n          let itemsCount = this.getItemsCount();\r\n          if (itemsCount<=1) {\r\n            return;\r\n          } \r\n\r\n          let currentItem = this.getActiveItem(),\r\n              currentIndex = currentItem ? this.getItemIndex(currentItem) : -1,\r\n              toItem,\r\n              toIndex,\r\n              type;\r\n\r\n          if (to === 'prev') {\r\n              type = to;\r\n              if (currentIndex > 0 ) { \r\n                toIndex = currentIndex -1; \r\n              } else if ( this.options.loop ) { \r\n                toIndex = itemsCount - 1; \r\n              }\r\n          } else if (to === 'next') {\r\n              type = to;\r\n              if ( currentIndex < itemsCount - 1 ) { \r\n                toIndex = currentIndex + 1; \r\n              } else if ( this.options.loop ) { \r\n                toIndex = 0; \r\n              }\r\n          } else if (typeof to === 'number') {\r\n              toIndex = to;\r\n          } else if ( typeof to == 'string') {\r\n              toIndex = parseInt(to);\r\n          } else if ( to !== undefined ) {\r\n              // if object is sent, get its index\r\n              toIndex = this.getItemIndex(to);\r\n          }\r\n\r\n          if (toIndex<0 || toIndex==currentIndex) {\r\n            return;\r\n          }\r\n\r\n          if (!type) {\r\n            type = toIndex > currentIndex ? 'next' : 'prev';\r\n          }\r\n\r\n          this.jumping =true;\r\n\r\n          var jumpingEvent = eventer.create('jumping.lark.carousel', {\r\n              toIndex,\r\n              currentIndex,\r\n              type\r\n          });\r\n\r\n          this.trigger(jumpingEvent);\r\n          if (jumpingEvent.isDefaultPrevented()) {\r\n            this.jumping =false;\r\n            return;\r\n          }\r\n\r\n          this._mode.jump(toIndex,currentIndex,type,() => {\r\n            //    $next.removeClass([type, direction].join(' ')).addClass('active')\r\n            //    $active.removeClass(['active', direction].join(' '))\r\n            this.setActiveItem(toIndex);\r\n\r\n            var jumpedEvent = eventer.create('jumped.lark.carousel', { \r\n              toIndex,\r\n              currentIndex,\r\n              type\r\n            });\r\n\r\n            setTimeout(()=> {\r\n              this.trigger(jumpedEvent)\r\n            }, 0)\r\n\r\n\r\n            this.jumping  = false;\r\n\r\n          });\r\n\r\n          return this;\r\n        },\r\n\r\n        /*\r\n         *Cycles the carousel to a particular frame (0 based, similar to an array). Returns to the caller before the target item has been shown\r\n        jump : function(pos) {\r\n            var that = this;\r\n\r\n            var activeItem = this.getActiveItem(),\r\n                activeIndex = activeItem ? this.getItemIndex(activeItem) : -1;\r\n\r\n            if (pos > (this._$items.length - 1) || pos < 0) return\r\n\r\n            if (this.moving) return this._$elm.one('jumped.lark.carousel', function() { that.jump(pos) }) // yes, \"slid\"\r\n            if (activeIndex == pos)  return this.pause().cycle()\r\n\r\n            return this._mode.jump(pos > activeIndex ? 'next' : 'prev', this._$items.eq(pos))\r\n        },\r\n         */\r\n\r\n        /*\r\n         * Stops the carousel from cycling through items.\r\n         */\r\n        pause : function(pausing) {\r\n            if (langx.isUndefined(pausing)) {\r\n              pausing = true;\r\n            }\r\n            this.paused = !!pausing;\r\n\r\n            ///e || (this.paused = true)\r\n\r\n            ///if (this._$elm.find(this.options.controls.selectors.next + \",\"+ this.options.controls.selectors.prev).length) { //.next,.prev\r\n                ///this._$elm.trigger(browser.support.transition.end)\r\n                ///this.cycle(true)\r\n            ///}\r\n\r\n            ///this.interval = clearInterval(this.interval)\r\n            this.cycle();\r\n\r\n            return this\r\n        },\r\n\r\n        /*\r\n         * Cycles to the next item. Returns to the caller before the next item has been shown\r\n         */\r\n        next : function() {\r\n            return this.jump('next')\r\n        },\r\n\r\n        /*\r\n         * Cycles to the previous item. Returns to the caller before the previous item has been shown.\r\n         */\r\n        prev : function() {\r\n            return this.jump('prev')\r\n        },\r\n\r\n        resetItems : function() {\r\n          Group.prototype.resetItems.call(this);\r\n\r\n          if (this._mode && this._mode.resetItems) {\r\n            this._mode.resetItems();\r\n          }\r\n        },\r\n\r\n        addItems : function(items) {\r\n            let index = this.getItemsCount();\r\n            for (var i=0; i<items.length;i++) {\r\n              this.addItem(index++,items[i]);\r\n            }\r\n            this.resetItems();\r\n        },\r\n\r\n        addItem : function(index,itemData) {\r\n          let itemHtml = this.renderItemHtml(itemData),\r\n              baseClass = this.options.item.classes.base;\r\n\r\n\r\n          let $item = $(itemHtml);\r\n          if (baseClass) {\r\n            $item.addClass(baseClass);\r\n          }\r\n\r\n          if (this._$itemsContainer) {\r\n            this._$itemsContainer.append($item);\r\n          }\r\n          if (this._indicators) {\r\n            this._indicators.addIndicator(index,itemData);\r\n          }\r\n        },\r\n\r\n        clearItems : function() {\r\n          if (this._$itemsContainer) {\r\n            this._$itemsContainer.attr(\"style\",\"\");\r\n          }\r\n          this._$items.remove();\r\n          this._$items = $();\r\n\r\n          if (this._indicators) {\r\n            this._indicators.clearIndicators();\r\n          }\r\n        }\r\n  });\r\n\r\n  var modes = Carousel.modes = {\r\n    \"slide\" : ModeSlide,\r\n    \"rotate\" : ModeRotate,\r\n    \"coverflow\" : ModeCoverflow\r\n  };\r\n\r\n  plugins.register(Carousel);\r\n\r\n  return groups.Carousel = Carousel;\t\r\n});\n define('skylark-domx-plugins-groups/linear',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"skylark-domx-plugins-toggles/collapse\",\r\n  \"./groups\",\r\n  \"./group\"\r\n],function(langx,$,elmx,plugins,Collapse,groups,Group){\r\n  'use strict'\r\n\r\n  var Linear = Group.inherit({\r\n    klassName : \"Linear\",\r\n\r\n    pluginName : \"lark.groups.linear\",\r\n\r\n    options: {\r\n        item : {\r\n          selectable: true\r\n        },\r\n        data : {}\r\n    },\r\n\r\n    _construct: function (elm, options) {\r\n      this.overrided(elm, options);\r\n\r\n      if (this.options.data.items) {\r\n          this.addItems(this.options.data.items);\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n  plugins.register(Linear);\r\n\r\n  return groups.Linear = Linear;\r\n\r\n});\r\n\r\n\r\n\r\n\ndefine('skylark-domx-plugins-dnd/draggable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n\r\n    var Draggable = plugins.Plugin.inherit({\r\n        klassName: \"Draggable\",\r\n        \r\n        pluginName : \"lark.dnd.draggable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = this.options;\r\n\r\n            self.draggingClass = options.draggingClass;\r\n\r\n            [\"preparing\", \"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n\r\n            eventer.on(elm, {\r\n                \"mousedown\": function(e) {\r\n                    var options = self.options;\r\n                    if (options.handle) {\r\n                        self.dragHandle = finder.closest(e.target, options.handle);\r\n                        if (!self.dragHandle) {\r\n                            return;\r\n                        }\r\n                    }\r\n                    if (options.source) {\r\n                        self.dragSource = finder.closest(e.target, options.source);\r\n                    } else {\r\n                        self.dragSource = self._elm;\r\n                    }\r\n                    manager.prepare(self);\r\n                    if (self.dragSource) {\r\n                        datax.attr(self.dragSource, \"draggable\", 'true');\r\n                    }\r\n                },\r\n\r\n                \"mouseup\": function(e) {\r\n                    if (self.dragSource) {\r\n                        //datax.attr(self.dragSource, \"draggable\", 'false');\r\n                        self.dragSource = null;\r\n                        self.dragHandle = null;\r\n                    }\r\n                },\r\n\r\n                \"dragstart\": function(e) {\r\n                    datax.attr(self.dragSource, \"draggable\", 'false');\r\n                    manager.start(self, e);\r\n                },\r\n\r\n                \"dragend\": function(e) {\r\n                    eventer.stop(e);\r\n\r\n                    if (!manager.dragging) {\r\n                        return;\r\n                    }\r\n\r\n                    manager.end(false);\r\n                }\r\n            });\r\n\r\n        }\r\n\r\n    });\r\n\r\n    plugins.register(Draggable,\"draggable\");\r\n\r\n    return dnd.Draggable = Draggable;\r\n});\ndefine('skylark-domx-plugins-dnd/droppable',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./dnd\",\r\n    \"./manager\"\r\n], function(langx, noder, datax, finder, geom, eventer, styler, plugins, dnd,manager) {\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var Droppable = plugins.Plugin.inherit({\r\n        klassName: \"Droppable\",\r\n\r\n        pluginName : \"lark.dnd.droppable\",\r\n\r\n        options : {\r\n            draggingClass : \"dragging\"\r\n        },\r\n\r\n        _construct: function(elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n            var self = this,\r\n                options = self.options,\r\n                draggingClass = options.draggingClass,\r\n                hoverClass,\r\n                activeClass,\r\n                acceptable = true;\r\n\r\n            [\"started\", \"entered\", \"leaved\", \"dropped\", \"overing\"].forEach(function(eventName) {\r\n                if (langx.isFunction(options[eventName])) {\r\n                    self.on(eventName, options[eventName]);\r\n                }\r\n            });\r\n\r\n            eventer.on(elm, {\r\n                \"dragover\": function(e) {\r\n                    e.stopPropagation()\r\n\r\n                    if (!acceptable) {\r\n                        return\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"overing\", {\r\n                        overElm: e.target,\r\n                        transfer: manager.draggingTransfer,\r\n                        acceptable: true\r\n                    });\r\n                    self.trigger(e2);\r\n\r\n                    if (e2.acceptable) {\r\n                        e.preventDefault() // allow drop\r\n\r\n                        e.dataTransfer.dropEffect = \"copyMove\";\r\n                    }\r\n\r\n                },\r\n\r\n                \"dragenter\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    var e2 = eventer.create(\"entered\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n                },\r\n\r\n                \"dragleave\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n                    if (!acceptable) return false\r\n\r\n                    var e2 = eventer.create(\"leaved\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    e.stopPropagation()\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.removeClass(elm, hoverClass);\r\n                    }\r\n                },\r\n\r\n                \"drop\": function(e) {\r\n                    var options = self.options,\r\n                        elm = self._elm;\r\n\r\n                    eventer.stop(e); // stops the browser from redirecting.\r\n\r\n                    if (!manager.dragging) return\r\n\r\n                    // manager.dragging.elm.removeClass('dragging');\r\n\r\n                    if (hoverClass && acceptable) {\r\n                        styler.addClass(elm, hoverClass)\r\n                    }\r\n\r\n                    var e2 = eventer.create(\"dropped\", {\r\n                        transfer: manager.draggingTransfer\r\n                    });\r\n\r\n                    self.trigger(e2);\r\n\r\n                    manager.end(true)\r\n                }\r\n            });\r\n\r\n            manager.on(\"dndStarted\", function(e) {\r\n                var e2 = eventer.create(\"started\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                acceptable = e2.acceptable;\r\n                hoverClass = e2.hoverClass;\r\n                activeClass = e2.activeClass;\r\n\r\n                if (activeClass && acceptable) {\r\n                    styler.addClass(elm, activeClass);\r\n                }\r\n\r\n            }).on(\"dndEnded\", function(e) {\r\n                var e2 = eventer.create(\"ended\", {\r\n                    transfer: manager.draggingTransfer,\r\n                    acceptable: false\r\n                });\r\n\r\n                self.trigger(e2);\r\n\r\n                if (hoverClass && acceptable) {\r\n                    styler.removeClass(elm, hoverClass);\r\n                }\r\n                if (activeClass && acceptable) {\r\n                    styler.removeClass(elm, activeClass);\r\n                }\r\n\r\n                acceptable = false;\r\n                activeClass = null;\r\n                hoverClass = null;\r\n            });\r\n\r\n        }\r\n    });\r\n\r\n    plugins.register(Droppable,\"droppable\");\r\n\r\n    return dnd.Droppable = Droppable;\r\n});\ndefine('skylark-domx-plugins-groups/sortable',[\r\n    \"./groups\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"skylark-domx-plugins-dnd/draggable\",\r\n    \"skylark-domx-plugins-dnd/droppable\"\r\n],function(groups, langx,noder,datax,geom,eventer,styler,$,plugins,Draggable,Droppable){\r\n   'use strict'\r\n\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Sorter = plugins.Plugin.inherit({\r\n        \"klassName\" : \"Sorter\",\r\n\r\n        enable : function() {\r\n\r\n        },\r\n        \r\n        disable : function() {\r\n\r\n        },\r\n\r\n        destory : function() {\r\n\r\n        }\r\n    });\r\n\r\n\r\n    var dragging, placeholders = $();\r\n\r\n\r\n    var Sortable = plugins.Plugin.inherit({\r\n        klassName: \"Sortable\",\r\n\r\n        pluginName : \"lark.groups.sortable\",\r\n        \r\n        options : {\r\n            connectWith: false,\r\n            placeholder: null,\r\n            placeholderClass: 'sortable-placeholder',\r\n            draggingClass: 'sortable-dragging',\r\n            items : null\r\n        },\r\n\r\n        /*\r\n         * @param {HTMLElement} container  the element to use as a sortable container\r\n         * @param {Object} options  options object\r\n         * @param {String} [options.items = \"\"] \r\n         * @param {Object} [options.connectWith =] the selector to create connected groups\r\n         * @param {Object} [options\r\n         * @param {Object} [options\r\n         */\r\n        _construct : function (container,options) {\r\n            this.overrided(container,options);\r\n\r\n            options = this.options;\r\n\r\n            var isHandle, index, \r\n                $container = $(container), \r\n                $items = $container.children(options.items);\r\n            var placeholder = $(options.placeholder || noder.createElement(/^(ul|ol)$/i.test(container.tagName) ? 'li' : 'div',{\r\n                \"class\" : options.placeholderClass\r\n            }));\r\n\r\n            Draggable(container,{\r\n                source : options.items,\r\n                handle : options.handle,\r\n                draggingClass : options.draggingClass,\r\n                preparing : function(e) {\r\n                    //e.dragSource = e.handleElm;\r\n                },\r\n                started :function(e) {\r\n                    e.ghost = e.dragSource;\r\n                    e.transfer = {\r\n                        \"text\": \"dummy\"\r\n                    };\r\n                    index = (dragging = $(e.dragSource)).index();\r\n                },\r\n                ended : function(e) {\r\n                    if (!dragging) {\r\n                        return;\r\n                    }\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n                    if (index != dragging.index()) {\r\n                        dragging.parent().trigger('sortupdate', {item: dragging});\r\n                    }\r\n                    dragging = null;                \r\n                }\r\n\r\n            });\r\n\r\n            \r\n            Droppable(container,{\r\n                started: function(e) {\r\n                    e.acceptable = true;\r\n                    e.activeClass = \"active\";\r\n                    e.hoverClass = \"over\";\r\n                },\r\n                overing : function(e) {\r\n                    if ($items.is(e.overElm)) {\r\n                        if (options.forcePlaceholderSize) {\r\n                            placeholder.height(dragging.outerHeight());\r\n                        }\r\n                        dragging.hide();\r\n                        $(e.overElm)[placeholder.index() < $(e.overElm).index() ? 'after' : 'before'](placeholder);\r\n                        placeholders.not(placeholder).detach();\r\n                    } else if (!placeholders.is(e.overElm) && !$(e.overElm).children(options.items).length) {\r\n                        placeholders.detach();\r\n                        $(e.overElm).append(placeholder);\r\n                    }                \r\n                },\r\n                dropped : function(e) {\r\n                    placeholders.filter(':visible').after(dragging);\r\n                    dragging.show();\r\n                    placeholders.detach();\r\n\r\n                    dragging = null;                \r\n                  }\r\n            });\r\n\r\n            $container.data('items', options.items)\r\n            placeholders = placeholders.add(placeholder);\r\n            if (options.connectWith) {\r\n                $(options.connectWith).add(this).data('connectWith', options.connectWith);\r\n            }\r\n            \r\n        }\r\n    });\r\n\r\n    plugins.register(Sortable,\"sortable\");\r\n\r\n    return groups.Sortable = Sortable;\r\n});\r\n\n define('skylark-domx-plugins-groups/tiler',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./groups\",\r\n  \"./group\"\r\n],function(langx,$,elmx,plugins,groups,Group){\r\n  'use strict'\r\n\r\n  var Tiler = Group.inherit({\r\n    klassName : \"Tiler\",\r\n\r\n    pluginName : \"lark.groups.tiler\",\r\n\r\n    options: {\r\n        alignment: 'left',\r\n        infiniteScroll: false,\r\n        itemRendered: null,\r\n        noItemsHTML: 'no items found',\r\n        selectable: false,\r\n        viewClass: \"repeater-tile\",\r\n        template : '<div class=\"clearfix repeater-tile\" data-container=\"true\" data-infinite=\"true\" data-preserve=\"shallow\"></div>',\r\n        item : {\r\n            template: '<div class=\"thumbnail\"><img height=\"75\" src=\"<%= href %>\" width=\"65\"><span><%= title %></span></div>',\r\n            selectable : true\r\n        },\r\n        renderItem : null\r\n    },\r\n\r\n    _construct: function (elm, options) {\r\n      this.overrided(elm, options);\r\n\r\n      this._renderItem = langx.template(this.options.item.template);\r\n\r\n      for (var i=0;i<options.items.length;i++) {\r\n        var itemHtml = this._renderItem(options.items[i]);\r\n        this._velm.append($(itemHtml));\r\n      }\r\n    }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Tiler);\r\n\r\n  return groups.Tiler = Tiler;\t\r\n});\ndefine('skylark-domx-plugins-groups/main',[\r\n    \"./groups\",\r\n    \"./group\",\r\n    \"./carousel\",\r\n    \"./linear\",\r\n    \"./sortable\",\r\n    \"./tiler\"\r\n], function(groups) {\r\n    return groups;\r\n});\ndefine('skylark-domx-plugins-groups', ['skylark-domx-plugins-groups/main'], function (main) { return main; });\n\n"]}