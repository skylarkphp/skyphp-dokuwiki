{"version":3,"sources":["movable.js"],"names":["define","langx","noder","datax","geom","eventer","styler","plugins","interact","on","off","attr","removeAttr","pagePosition","addClass","height","Array","prototype","some","map","Movable","Plugin","inherit","klassName","pluginName","_construct","elm","options","updateWithTouchData","e","keys","i","changedTouches","split","length","updateWithMoveData","movable","self","moveEl","handleEl","this","overrided","overlayDiv","startX","startY","originalPos","handle","auto","constraints","doc","document","startingCallback","starting","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","move","button","stop","deltaX","screenX","deltaY","screenY","l","left","t","top","minX","maxX","minY","maxY","relativePosition","preventDefault","remove","cursor","docSize","getDocumentSize","ret","isPlainObject","size","css","createElement","position","width","zIndex","opacity","append","body","_handleEl","register"],"mappings":"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","file":"../movable.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\"\r\n],function(langx,noder,datax,geom,eventer,styler,plugins,interact){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n    var Movable = plugins.Plugin.inherit({\r\n        klassName: \"Movable\",\r\n\r\n        pluginName : \"lark.interact.movable\",\r\n\r\n\r\n        _construct : function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n\r\n            function updateWithTouchData(e) {\r\n                var keys, i;\r\n\r\n                if (e.changedTouches) {\r\n                    keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            function updateWithMoveData(e) {\r\n                e.movable = self;\r\n                e.moveEl = elm;\r\n                e.handleEl = handleEl;\r\n            }\r\n\r\n            options = this.options;\r\n            var self = this,\r\n                handleEl = options.handle || elm,\r\n                auto = options.auto === false ? false : true,\r\n                constraints = options.constraints,\r\n                overlayDiv,\r\n                doc = options.document || document,\r\n                downButton,\r\n                start,\r\n                stop,\r\n                startX,\r\n                startY,\r\n                originalPos,\r\n                drag,\r\n                size,\r\n                startingCallback = options.starting,\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped,\r\n\r\n                start = function(e) {\r\n                    var docSize = geom.getDocumentSize(doc),\r\n                        cursor;\r\n\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (startingCallback) {\r\n                        var ret = startingCallback(e)\r\n                        if ( ret === false) {\r\n                            return;\r\n                        } else if (langx.isPlainObject(ret)) {\r\n                            if (ret.constraints) {\r\n                                constraints = ret.constraints;\r\n                            }\r\n                            if (ret.started) {\r\n                                startedCallback = ret.started;\r\n                            }\r\n                            if (ret.moving) {\r\n                                movingCallback = ret.moving;\r\n                            }                            \r\n                            if (ret.stopped) {\r\n                                stoppedCallback = ret.stopped;\r\n                            }     \r\n                        }\r\n                    }\r\n\r\n                    e.preventDefault();\r\n\r\n                    downButton = e.button;\r\n                    //handleEl = getHandleEl();\r\n                    startX = e.screenX;\r\n                    startY = e.screenY;\r\n\r\n                    originalPos = geom.relativePosition(elm);\r\n                    size = geom.size(elm);\r\n\r\n                    // Grab cursor from handle so we can place it on overlay\r\n                    cursor = styler.css(handleEl, \"cursor\");\r\n\r\n                    overlayDiv = noder.createElement(\"div\");\r\n                    styler.css(overlayDiv, {\r\n                        position: \"absolute\",\r\n                        top: 0,\r\n                        left: 0,\r\n                        width: docSize.width,\r\n                        height: docSize.height,\r\n                        zIndex: 0x7FFFFFFF,\r\n                        opacity: 0.0001,\r\n                        cursor: cursor\r\n                    });\r\n                    noder.append(doc.body, overlayDiv);\r\n\r\n                    eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                    if (startedCallback) {\r\n                        startedCallback(e);\r\n                    }\r\n                },\r\n\r\n                move = function(e) {\r\n                    updateWithTouchData(e);\r\n                    updateWithMoveData(e);\r\n\r\n                    if (e.button !== 0) {\r\n                        return stop(e);\r\n                    }\r\n\r\n                    e.deltaX = e.screenX - startX;\r\n                    e.deltaY = e.screenY - startY;\r\n\r\n                    if (auto) {\r\n                        var l = originalPos.left + e.deltaX,\r\n                            t = originalPos.top + e.deltaY;\r\n                        if (constraints) {\r\n\r\n                            if (l < constraints.minX) {\r\n                                l = constraints.minX;\r\n                            }\r\n\r\n                            if (l > constraints.maxX) {\r\n                                l = constraints.maxX;\r\n                            }\r\n\r\n                            if (t < constraints.minY) {\r\n                                t = constraints.minY;\r\n                            }\r\n\r\n                            if (t > constraints.maxY) {\r\n                                t = constraints.maxY;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    geom.relativePosition(elm, {\r\n                        left: l,\r\n                        top: t\r\n                    })\r\n\r\n                    e.preventDefault();\r\n                    if (movingCallback) {\r\n                        movingCallback(e);\r\n                    }\r\n                },\r\n\r\n                stop = function(e) {\r\n                    updateWithTouchData(e);\r\n\r\n                    eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                    noder.remove(overlayDiv);\r\n\r\n                    if (stoppedCallback) {\r\n                        stoppedCallback(e);\r\n                    }\r\n                };\r\n\r\n            eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n            this._handleEl = handleEl;\r\n\r\n        },\r\n\r\n        remove : function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Movable,\"movable\");\r\n\r\n    return interact.Movable = Movable;\r\n});\r\n"]}