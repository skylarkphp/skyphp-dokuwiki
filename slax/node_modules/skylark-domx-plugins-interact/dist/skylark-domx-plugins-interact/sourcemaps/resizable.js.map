{"version":3,"sources":["resizable.js"],"names":["define","langx","noder","datax","finder","geom","eventer","styler","$","plugins","interact","Movable","on","off","attr","removeAttr","pagePosition","addClass","height","Array","prototype","some","map","Resizable","Plugin","inherit","klassName","pluginName","options","touchActionNone","handle","border","directions","top","left","right","bottom","topLeft","topRight","bottomLeft","bottomRight","classes","all","grabber","selector","direction","constraints","minWidth","minHeight","maxWidth","maxHeight","_construct","elm","this","overrided","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","handleResize","handleEl","dir","startRect","auto","e","relativeRect","currentRect","width","deltaX","deltaY","resized","isString","find","isHtmlNode","createElement","className","remove","_handleEl","register"],"mappings":"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","file":"../resizable.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-data\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./interact\",\r\n    \"./movable\"\r\n],function(langx,noder,datax,finder,geom,eventer,styler,$,plugins,interact,Movable){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height,\r\n        some = Array.prototype.some,\r\n        map = Array.prototype.map;\r\n\r\n\r\n    var Resizable = plugins.Plugin.inherit({\r\n        klassName: \"Resizable\",\r\n\r\n        \"pluginName\" : \"lark.interact.resizable\",\r\n        \r\n        options : {\r\n            // prevents browser level actions like forward back gestures\r\n            touchActionNone: true,\r\n            // selector for handle that starts dragging\r\n            handle : {\r\n                border : {\r\n                    directions : {\r\n                        top: true, //n\r\n                        left: true, //w\r\n                        right: true, //e\r\n                        bottom: true, //s\r\n                        topLeft : true, // nw\r\n                        topRight : true, // ne\r\n                        bottomLeft : true, // sw\r\n                        bottomRight : true // se                         \r\n                    },\r\n                    classes : {\r\n                        all : \"resizable-handle\",\r\n                        top : \"resizable-handle-n\",\r\n                        left: \"resizable-handle-w\",\r\n                        right: \"resizable-handle-e\",\r\n                        bottom: \"resizable-handle-s\", \r\n                        topLeft : \"resizable-handle-nw\", \r\n                        topRight : \"resizable-handle-ne\",\r\n                        bottomLeft : \"resizable-handle-sw\",             \r\n                        bottomRight : \"resizable-handle-se\"                         \r\n                    }\r\n                },\r\n                grabber: {\r\n                    selector : \"\",\r\n                    direction : \"bottomRight\"\r\n                },\r\n                selector: true\r\n            },\r\n\r\n            constraints : {\r\n                minWidth : null,\r\n                minHeight : null,\r\n                maxWidth : null,\r\n                maxHeight : null\r\n            }\r\n        },\r\n\r\n        _construct :function (elm, options) {\r\n            this.overrided(elm,options);\r\n\r\n\r\n            options = this.options;\r\n            var handle = options.handle || {},\r\n                constraints = options.constraints || {},\r\n                startedCallback = options.started,\r\n                movingCallback = options.moving,\r\n                stoppedCallback = options.stopped;\r\n\r\n            if (langx.isString(handle)) {\r\n                handleEl = finder.find(elm,handle);\r\n            } else if (langx.isHtmlNode(handle)) {\r\n                handleEl = handle;\r\n            }\r\n\r\n            function handleResize(handleEl,dir) {\r\n                let  startRect;\r\n\r\n                Movable(handleEl,{\r\n                    auto : false,\r\n                    started : function(e) {\r\n                        startRect = geom.relativeRect(elm);\r\n                        if (startedCallback) {\r\n                            startedCallback(e);\r\n                        }\r\n                    },\r\n                    moving : function(e) {\r\n                        currentRect = {\r\n                        };\r\n                        if (dir == \"right\" || dir == \"topRight\" || dir == \"bottomRight\" ) {\r\n                            currentRect.width = startRect.width + e.deltaX;\r\n                            if (constraints.minWidth && currentRect.width < constraints.minWidth) {\r\n                                currentRect.width = constraints.minWidth;\r\n                            }\r\n                            if (constraints.maxWidth && currentRect.width > constraints.maxWidth) {\r\n                                currentRect.width = constraints.maxWidth;\r\n                            }\r\n                        } \r\n\r\n                        if (dir == \"bottom\" || dir == \"bottomLeft\" || dir == \"bottomRight\" ) {\r\n                            currentRect.height = startRect.height + e.deltaY;\r\n                            if (constraints.minHeight && currentRect.height < constraints.minHeight) {\r\n                                currentRect.height = constraints.minHeight;\r\n                            }\r\n                            if (constraints.maxHeight && currentRect.height > constraints.maxHeight) {\r\n                                currentRect.height = constraints.maxHeight;\r\n                            }\r\n                        } \r\n\r\n                        if (dir == \"left\" || dir == \"topLeft\" || dir == \"bottomLeft\" ) {\r\n                            currentRect.left = startRect.left + e.deltaX;\r\n                            currentRect.width = startRect.width - e.deltaX;\r\n                            if (constraints.minWidth && currentRect.width < constraints.minWidth) {\r\n                                currentRect.left = currentRect.left + currentRect.width - constraints.minWidth;\r\n                                currentRect.width = constraints.minWidth;\r\n                            }\r\n                            if (constraints.maxWidth && currentRect.width > constraints.maxWidth) {\r\n                                currentRect.left = currentRect.left + currentRect.width - constraints.maxWidth;\r\n                                currentRect.width = constraints.maxWidth;\r\n                            }\r\n                        } \r\n\r\n                        if (dir == \"top\" || dir == \"topLeft\" || dir == \"topRight\" ) {\r\n                            currentRect.top = startRect.top + e.deltaY;\r\n                            currentRect.height = startRect.height - e.deltaY;\r\n                            if (constraints.minHeight && currentRect.height < constraints.minHeight) {\r\n                                currentRect.top = currentRect.top + currentRect.height - constraints.minHeight;\r\n                                currentRect.height = constraints.minHeight;\r\n                            }\r\n                            if (constraints.maxHeight && currentRect.height > constraints.maxHeight) {\r\n                                currentRect.top = currentRect.top + currentRect.height - constraints.maxHeight;\r\n                                currentRect.height = constraints.maxHeight;\r\n                            }\r\n                        } \r\n\r\n                        geom.relativeRect(elm,currentRect);\r\n\r\n                        if (movingCallback) {\r\n                            movingCallback(e);\r\n                        }\r\n                        eventer.resized(elm);\r\n\r\n                    },\r\n                    stopped: function(e) {\r\n                        if (stoppedCallback) {\r\n                            stoppedCallback(e);\r\n                        }                \r\n                    }\r\n                });\r\n            }\r\n\r\n            if (handle && handle.border) {\r\n                let borders = []\r\n                for (var dir in handle.border.directions) {\r\n                    if (handle.border.directions[dir]) {\r\n                        let handleEl = noder.createElement(\"div\",{\r\n                            \"className\": handle.border.classes.all + \" \" + handle.border.classes[dir],\r\n                            \"direction\" : dir\r\n                        },elm);   \r\n                        handleResize(handleEl,dir) ; \r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            if (handle && handle.grabber && handle.grabber.selector) {\r\n                 let handleEl = finder.find(elm,handle.grabber.selector);\r\n                 handleResize(handleEl,handle.grabber.direction) ; \r\n            }\r\n\r\n        },\r\n\r\n        // destroys the dragger.\r\n        remove: function() {\r\n            eventer.off(this._handleEl);\r\n        }\r\n    });\r\n\r\n    plugins.register(Resizable,\"resizable\");\r\n\r\n    return interact.Resizable = Resizable;\r\n});\r\n"]}