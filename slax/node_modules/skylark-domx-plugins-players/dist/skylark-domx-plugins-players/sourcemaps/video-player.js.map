{"version":3,"sources":["video-player.js"],"names":["define","langx","noder","eventer","$","plugins","players","VideoPlayer","Plugin","inherit","klassName","pluginName","options","classes","videoContent","videoLoading","videoPlaying","videoPosterProperty","videoSourcesProperty","_construct","elm","prototype","call","this","isLoading","$el","$video","video","_video","addClass","$poster","_$poster","prop","append","css","maxWidth","maxHeight","$play","_$play","controls","listenTo","seeking","removeClass","trigger","e","stop","pause","play","media","source","_media","title","url","href","type","posterUrl","poster","altText","canPlayType","src","alt","download","load","register"],"mappings":";;;;;;;AAAAA,QACE,sBACA,qBACA,uBACA,qBACA,4BACA,aACA,SAASC,EAAMC,EAAOC,EAAQC,EAAIC,EAASC,GAE3C,aAEA,IAAIC,EAAcF,EAAQG,OAAOC,SAC/BC,UAAY,cAEZC,WAAa,qBAEbC,SACEC,SAEEC,aAAc,gBAEdC,aAAc,gBAEdC,aAAc,iBAIhBC,oBAAqB,SAErBC,qBAAsB,WAYxBC,WAAY,SAASC,EAAKR,GAExBP,EAAQG,OAAOa,UAAUF,WAAWG,KAAKC,KAAKH,EAAIR,GAElD,IAGIY,EAHAC,EAAMF,KAAKnB,IACXsB,EAAStB,EAAE,YACXuB,EAAQJ,KAAKK,OAASF,EAAO,GAIjCD,EAAII,SAASN,KAAKX,QAAQC,QAAQC,cAElC,IAAIgB,EAAUP,KAAKQ,SAAW3B,EAAE,UAEhC0B,EAAQE,KAAK,aAAY,GAEzBP,EAAIQ,OAAOH,GAEXA,EAAQI,KACJC,SAAa,OACbC,UAAc,SAIlB,IAAIC,EAAQd,KAAKe,OAASlC,EAAE,QAE5BiC,EAAML,KAAK,SAAS,UAEpBL,EAAMY,UAAW,EAEjBhB,KAAKiB,SAASd,EAAO,QAAS,cAI9BH,KAAKiB,SAASd,EAAO,QAAS,WACxBC,EAAMc,UACVjB,GAAY,EACZD,KAAKnB,IAAIsC,YAAYnB,KAAKX,QAAQC,QAAQE,cACjC2B,YAAYnB,KAAKX,QAAQC,QAAQG,cAC1CO,KAAKoB,QAAQ,YAIfpB,KAAKiB,SAASd,EAAO,UAAW,KAC9BF,GAAY,EACZD,KAAKnB,IAAIsC,YAAYnB,KAAKX,QAAQC,QAAQE,cACjCc,SAASN,KAAKX,QAAQC,QAAQG,cACvCO,KAAKoB,QAAQ,aAGfpB,KAAKiB,SAASd,EAAO,OAAS,KAE5BF,GAAY,EACZD,KAAKnB,IAAIyB,SAASN,KAAKX,QAAQC,QAAQE,cACvCQ,KAAKoB,QAAQ,UAIfpB,KAAKiB,SAASH,EAAM,QAAUO,IAC5BzC,EAAQ0C,KAAKD,GACTpB,EACFD,KAAKuB,QAELvB,KAAKwB,SAITtB,EAAIQ,OAAOP,GAEXA,EAAOQ,KACHC,SAAa,OACbC,UAAc,SAGlBX,EAAIQ,OAAOI,GAEPd,KAAKX,QAAQoC,OACfzB,KAAK0B,OAAO1B,KAAKX,QAAQoC,QAK7BC,OAAS,SAASD,GAChBzB,KAAK2B,OAASF,EACd,IAAIG,EAAQH,EAAMG,OAAS,GACvBC,EAAMJ,EAAMK,KACZC,EAAON,EAAMM,KACbC,EAAYP,EAAMQ,QAAU,GAC5BC,EAAUT,EAAMS,SAAW,GAE3BhC,EAAMF,KAAKnB,IACXuB,EAAQJ,KAAKK,OACbS,EAAQd,KAAKe,OACbR,EAAUP,KAAKQ,SAEnBN,EAAIO,KAAK,QAASmB,GAEdxB,EAAM+B,aACJN,GAAOE,GAAQ3B,EAAM+B,YAAYJ,KACnC3B,EAAMgC,IAAMP,GAIhBzB,EAAM6B,OAASD,EAEfzB,EAAQE,MACN2B,IAAQJ,EACRK,IAAQH,IAGVpB,EAAML,MACJ6B,SAAcV,EACdE,KAASD,KAKbU,KAAO,WACLvC,KAAKK,OAAOkC,QAGdf,KAAO,WACLxB,KAAKK,OAAOmB,QAIdF,KAAO,aAIPC,MAAQ,WACNvB,KAAKK,OAAOkB,WAQhB,OAFAzC,EAAQ0D,SAASxD,GAEVD,EAAQC,YAAcA","file":"../video-player.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  './players',\r\n],function(langx,noder, eventer,$ , plugins, players) {\r\n\r\n  'use strict'\r\n\r\n  var VideoPlayer = plugins.Plugin.inherit({\r\n    klassName : \"VideoPlayer\",\r\n\r\n    pluginName : \"lark.players.video\",\r\n   \r\n    options : {\r\n      classes : {\r\n        // The class for video content elements:\r\n        videoContent: 'video-content',\r\n        // The class for video when it is loading:\r\n        videoLoading: 'video-loading',\r\n        // The class for video when it is playing:\r\n        videoPlaying: 'video-playing'\r\n\r\n      },\r\n      // The list object property (or data attribute) for the video poster URL:\r\n      videoPosterProperty: 'poster',\r\n      // The list object property (or data attribute) for the video sources array:\r\n      videoSourcesProperty: 'sources',\r\n\r\n      ///media  : {\r\n      ///  title : null,\r\n      ///  url : null,\r\n      ///  type : null,\r\n      ///  posterUrl : null        \r\n      ///}\r\n\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          $video = $('<video/>'),\r\n          video = this._video = $video[0],\r\n          isLoading,\r\n          hasControls;\r\n\r\n      $el.addClass(this.options.classes.videoContent);\r\n\r\n      var $poster = this._$poster = $('<img/>');\r\n      ///$poster.addClass(options.toggleClass)\r\n      $poster.prop(\"draggable\",false);\r\n\r\n      $el.append($poster)\r\n\r\n      $poster.css({\r\n          \"maxWidth\" : \"100%\",\r\n          \"maxHeight\" : \"100%\"\r\n      });\r\n            \r\n\r\n      var $play = this._$play = $('<a/>');\r\n\r\n      $play.prop('target','_blank');\r\n      \r\n      video.controls = true;\r\n     \r\n      this.listenTo($video,'error', function () {\r\n            ///callback(errorArgs[0]);\r\n      });\r\n\r\n      this.listenTo($video,'pause', function () {\r\n        if (video.seeking) return\r\n        isLoading = false;\r\n        this.$().removeClass(this.options.classes.videoLoading)\r\n                .removeClass(this.options.classes.videoPlaying);\r\n        this.trigger(\"pause\");\r\n      });\r\n\r\n\r\n      this.listenTo($video,'playing', () => {\r\n        isLoading = false\r\n        this.$().removeClass(this.options.classes.videoLoading)\r\n                .addClass(this.options.classes.videoPlaying);\r\n        this.trigger(\"playing\");\r\n      });\r\n\r\n      this.listenTo($video,'play',  () => {\r\n        //window.clearTimeout(that.timeout)\r\n        isLoading = true\r\n        this.$().addClass(this.options.classes.videoLoading)\r\n        this.trigger(\"play\");\r\n      });\r\n\r\n\r\n      this.listenTo($play,'click', (e) =>{\r\n        eventer.stop(e)\r\n        if (isLoading) {\r\n          this.pause()\r\n        } else {\r\n          this.play()\r\n        }\r\n      })\r\n\r\n      $el.append($video);\r\n\r\n      $video.css({\r\n          \"maxWidth\" : \"100%\",\r\n          \"maxHeight\" : \"100%\"\r\n      });\r\n\r\n      $el.append($play);\r\n\r\n      if (this.options.media) {\r\n        this.source(this.options.media);\r\n      }\r\n    },\r\n\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this._video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this._video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n\r\n    },\r\n\r\n    pause : function() {\r\n      this._video.pause();      \r\n    }\r\n\r\n\r\n  });\r\n\r\n  plugins.register(VideoPlayer);\r\n\r\n  return players.VideoPlayer = VideoPlayer;\r\n});\r\n\r\n"]}