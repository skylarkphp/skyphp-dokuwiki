{"version":3,"sources":["skylark-domx-plugins-players.js"],"names":[],"mappingsfile":"../skylark-domx-plugins-players.js","sourcesContent":["define('skylark-domx-plugins-players/players',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.players = {};\r\n});\r\n\ndefine('skylark-domx-plugins-players/video-player',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\",\r\n  './players',\r\n],function(langx,noder, eventer,$ , plugins, players) {\r\n\r\n  'use strict'\r\n\r\n  var VideoPlayer = plugins.Plugin.inherit({\r\n    klassName : \"VideoPlayer\",\r\n\r\n    pluginName : \"lark.players.video\",\r\n   \r\n    options : {\r\n      classes : {\r\n        // The class for video content elements:\r\n        videoContent: 'video-content',\r\n        // The class for video when it is loading:\r\n        videoLoading: 'video-loading',\r\n        // The class for video when it is playing:\r\n        videoPlaying: 'video-playing'\r\n\r\n      },\r\n      // The list object property (or data attribute) for the video poster URL:\r\n      videoPosterProperty: 'poster',\r\n      // The list object property (or data attribute) for the video sources array:\r\n      videoSourcesProperty: 'sources',\r\n\r\n      ///media  : {\r\n      ///  title : null,\r\n      ///  url : null,\r\n      ///  type : null,\r\n      ///  posterUrl : null        \r\n      ///}\r\n\r\n    },\r\n\r\n\r\n    _construct: function(elm, options) {\r\n      //this.options = options\r\n      plugins.Plugin.prototype._construct.call(this,elm,options);\r\n\r\n      let $el = this.$(),\r\n          $video = $('<video/>'),\r\n          video = this._video = $video[0],\r\n          isLoading,\r\n          hasControls;\r\n\r\n      $el.addClass(this.options.classes.videoContent);\r\n\r\n      var $poster = this._$poster = $('<img/>');\r\n      ///$poster.addClass(options.toggleClass)\r\n      $poster.prop(\"draggable\",false);\r\n\r\n      $el.append($poster)\r\n\r\n      $poster.css({\r\n          \"maxWidth\" : \"100%\",\r\n          \"maxHeight\" : \"100%\"\r\n      });\r\n            \r\n\r\n      var $play = this._$play = $('<a/>');\r\n\r\n      $play.prop('target','_blank');\r\n      \r\n      video.controls = true;\r\n     \r\n      this.listenTo($video,'error', function () {\r\n            ///callback(errorArgs[0]);\r\n      });\r\n\r\n      this.listenTo($video,'pause', function () {\r\n        if (video.seeking) return\r\n        isLoading = false;\r\n        this.$().removeClass(this.options.classes.videoLoading)\r\n                .removeClass(this.options.classes.videoPlaying);\r\n        this.trigger(\"pause\");\r\n      });\r\n\r\n\r\n      this.listenTo($video,'playing', () => {\r\n        isLoading = false\r\n        this.$().removeClass(this.options.classes.videoLoading)\r\n                .addClass(this.options.classes.videoPlaying);\r\n        this.trigger(\"playing\");\r\n      });\r\n\r\n      this.listenTo($video,'play',  () => {\r\n        //window.clearTimeout(that.timeout)\r\n        isLoading = true\r\n        this.$().addClass(this.options.classes.videoLoading)\r\n        this.trigger(\"play\");\r\n      });\r\n\r\n\r\n      this.listenTo($play,'click', (e) =>{\r\n        eventer.stop(e)\r\n        if (isLoading) {\r\n          this.pause()\r\n        } else {\r\n          this.play()\r\n        }\r\n      })\r\n\r\n      $el.append($video);\r\n\r\n      $video.css({\r\n          \"maxWidth\" : \"100%\",\r\n          \"maxHeight\" : \"100%\"\r\n      });\r\n\r\n      $el.append($play);\r\n\r\n      if (this.options.media) {\r\n        this.source(this.options.media);\r\n      }\r\n    },\r\n\r\n\r\n    source : function(media) {\r\n      this._media = media;\r\n      let title = media.title || \"\",\r\n          url = media.href,\r\n          type = media.type,\r\n          posterUrl = media.poster || \"\",\r\n          altText = media.altText || \"\";\r\n\r\n      let $el = this.$(),\r\n          video = this._video,\r\n          $play = this._$play,\r\n          $poster = this._$poster;\r\n\r\n      $el.prop(\"title\", title);\r\n      \r\n      if (video.canPlayType) {\r\n        if (url && type && video.canPlayType(type)) {\r\n          video.src = url\r\n        }    \r\n      }\r\n\r\n      video.poster = posterUrl\r\n      \r\n      $poster.prop({\r\n        \"src\" : posterUrl,\r\n        \"alt\" : altText\r\n      });\r\n\r\n      $play.prop({\r\n        'download' :  title,\r\n        \"href\" : url\r\n      });\r\n    \r\n    },\r\n\r\n    load : function() {\r\n      this._video.load();\r\n    },\r\n\r\n    play : function() {\r\n      this._video.play();\r\n\r\n    },\r\n\r\n    stop : function() {\r\n\r\n    },\r\n\r\n    pause : function() {\r\n      this._video.pause();      \r\n    }\r\n\r\n\r\n  });\r\n\r\n  plugins.register(VideoPlayer);\r\n\r\n  return players.VideoPlayer = VideoPlayer;\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-players/main',[\r\n    \"./players\",\r\n    \"./video-player\"\r\n], function(players) {\r\n    return players;\r\n})\r\n;\ndefine('skylark-domx-plugins-players', ['skylark-domx-plugins-players/main'], function (main) { return main; });\n\n"]}