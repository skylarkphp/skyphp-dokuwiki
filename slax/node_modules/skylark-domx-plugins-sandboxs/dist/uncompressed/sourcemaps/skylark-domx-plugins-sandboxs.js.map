{"version":3,"sources":["skylark-domx-plugins-sandboxs.js"],"names":[],"mappingsfile":"../skylark-domx-plugins-sandboxs.js","sourcesContent":["define('skylark-domx-plugins-sandboxs/sandboxs',[\r\n    \"skylark-domx-plugins-base/plugins\"\r\n], function(plugins) {\r\n    'use strict';\r\n\r\n\treturn plugins.sandboxs = {};\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-sandboxs/sandbox',[\r\n    \"skylark-langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-eventer\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-domx-plugins-base\",\r\n    \"./sandboxs\"\r\n], function(langx, browser, noder,eventer,  $, plugins, sandboxs) {\r\n    'use strict';\r\n  /** ============================================================================\r\n   * Sandbox\r\n   * Handles creating and insertion of dynamic iframes\r\n   * ========================================================================== */\r\n\r\n\r\n  var getIframeWindow = function (iframeElement) {\r\n      return iframeElement.contentWindow || iframeElement.contentDocument.parentWindow;\r\n  };\r\n\r\n  var Sandbox =  plugins.Plugin.inherit({\r\n\r\n    klassName: \"Sandbox\",\r\n\r\n    pluginName : \"lark.sandboxs.sandbox\",\r\n\r\n    options : {\r\n      name: \"Output\",\r\n      allows : 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts',\r\n      frameBorder : \"0\",\r\n      cssTextTagId : 'sandbox-css'\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n\r\n      /**\r\n       * Save the target container element, plus the old and active iframes.\r\n       */\r\n      this.target = elm;\r\n      this.old = null;\r\n      this.active = null;\r\n      this.state = {};\r\n      this.guid = +new Date(); // id used to keep track of which iframe is active\r\n\r\n    },\r\n\r\n    /**\r\n     * Create a new sandboxed iframe.\r\n     */\r\n    create : function () {\r\n      var iframe = document.createElement('iframe');\r\n      // iframe.src = window.location.origin + '/runner-inner';\r\n      iframe.setAttribute('sandbox', this.options.allows);\r\n      iframe.setAttribute('frameBorder', this.options.frameBorder);\r\n      iframe.setAttribute('name', this.options.name);\r\n      iframe.id = this.guid++;\r\n      // this.active = iframe;\r\n      return iframe;\r\n    },\r\n\r\n    /**\r\n     * Add a new iframe to the page and wait until it has loaded to call the\r\n     * requester back. Also wait until the new iframe has loaded before removing\r\n     * the old one.\r\n     */\r\n    /**\r\n     * Add a new iframe to the page and wait until it has loaded to call the\r\n     * requester back. Also wait until the new iframe has loaded before removing\r\n     * the old one.\r\n     */\r\n    use : function (iframe, done) {\r\n      if (!this.target) {\r\n        throw new Error('Sandbox has no target element.');\r\n\r\n      }\r\n      this.old = this.active;\r\n      this.saveState(this.old);\r\n      this.active = iframe;\r\n      noder.prepend(this.target, iframe);\r\n      // setTimeout allows the iframe to be rendered before other code runs,\r\n      // allowing us access to the calculated properties like innerWidth.\r\n      langx.defer((function () {\r\n        // call the code that renders the iframe source\r\n        if (done) {\r\n          done();\r\n        }\r\n\r\n        // remove *all* the iframes, baring the active one\r\n        var iframes = this.target.getElementsByTagName('iframe');\r\n        var length = iframes.length;\r\n        var i = 0;\r\n        var id = this.active.id;\r\n        var iframe;\r\n\r\n        for (; iframe = iframes[i], i < length; i++) {\r\n          if (iframe.id !== id) {\r\n            noder.remove(iframe);\r\n            length--;\r\n          }\r\n        }\r\n      }).bind(this));\r\n    },\r\n\r\n    /**\r\n     * Restore the state of a prvious iframe, like scroll position.\r\n     */\r\n    restoreState : function (iframe, state) {\r\n      if (!iframe) return {};\r\n      var win = getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      if (state.scroll) {\r\n        win.scrollTo(state.scroll.x, state.scroll.y);\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Save the state of an iframe, like scroll position.\r\n     */\r\n    saveState : function (iframe) {\r\n      if (!iframe) return {};\r\n      var win = getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      return {\r\n        scroll: {\r\n          x: win.scrollX,\r\n          y: win.scrollY\r\n        }\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Attach event listeners and rpevent some default behaviour on the new\r\n     * window during live rendering.\r\n     */\r\n    wrap : function (childWindow, options) {\r\n      if (!childWindow) return;\r\n      options = options || {};\r\n\r\n      // Notify the parent of resize events (and send one straight away)\r\n      ///event.on(childWindow, 'resize', utils.throttle(function () {\r\n      ///  runner.postMessage('resize', this.getSizeProperties(childWindow));\r\n      ///}, 25));\r\n      ///runner.postMessage('resize', this.getSizeProperties(childWindow));\r\n\r\n      eventer.on(childWindow, 'resize', function () {\r\n        eventer.resized(this._elm);\r\n      });\r\n\r\n      // Notify the parent of a focus\r\n      eventer.on(childWindow, 'focus', () => {\r\n        //runner.postMessage('focus');\r\n        eventer.trigger(this._elm,\"focused\");\r\n      });\r\n    },\r\n\r\n    getSizeProperties : function (childWindow) {\r\n      return {\r\n        width: childWindow.innerWidth || childWindow.document.documentElement.clientWidth,\r\n        height: childWindow.innerHeight || childWindow.document.documentElement.clientHeight,\r\n        offsetWidth: childWindow.document.documentElement.offsetWidth,\r\n        offsetHeight: childWindow.document.documentElement.offsetHeight\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Evaluate a command against the active iframe, then use the proxy console\r\n     * to fire information up to the parent\r\n     */\r\n    eval : function (cmd) {\r\n      if (!this.active) throw new Error(\"sandbox.eval: has no active iframe.\");\r\n\r\n      var re = /(^.|\\b)console\\.(\\S+)/g;\r\n\r\n      if (re.test(cmd)) {\r\n        var replaceWith = 'window.runnerWindow.proxyConsole.';\r\n        cmd = cmd.replace(re, function (all, str, arg) {\r\n          return replaceWith + arg;\r\n        });\r\n      }\r\n\r\n      var childWindow = this.active.contentWindow;\r\n      var output = null,\r\n          type = 'log';\r\n      try {\r\n        output = childWindow.eval(cmd);\r\n      } catch (e) {\r\n        output = e.message;\r\n        type = 'error';\r\n      }\r\n\r\n      return proxyConsole[type](output);\r\n    },\r\n\r\n    /**\r\n     * Inject a script via a URL into the page\r\n     */\r\n    injectScript : function (url, cb) {\r\n      if (!this.active) throw new Error(\"sandbox.injectScript: has no active iframe.\");\r\n      var childWindow = this.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      var script = childDocument.createElement('script');\r\n      script.src = url;\r\n      script.onload = function () {\r\n        cb();\r\n      };\r\n      script.onerror = function () {\r\n        cb('Failed to load \"' + url + '\"');\r\n      };\r\n      childDocument.body.appendChild(script);\r\n    },\r\n\r\n    /**\r\n     * Inject full DOM into the page\r\n     */\r\n    injectDOM : function (html, cb) {\r\n      if (!this.active) throw new Error(\"sandbox.injectDOM: has no active iframe.\");\r\n      var childWindow = this.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      try {\r\n        childDocument.body.innerHTML = html;\r\n      } catch (e) {\r\n        cb(\"Failed to load DOM.\");\r\n      }\r\n      cb();\r\n    },\r\n\r\n    injectCssText : function(cssText) {\r\n      if (this.active) {\r\n        var style = this.active.contentDocument.getElementById(this.options.cssTextTagId);\r\n        if (style) {\r\n          style.innerHTML = cssText;\r\n          return;\r\n        }\r\n      }\r\n    },\r\n\r\n    render : function(source,options) {\r\n      var iframe = this.create(options);\r\n      this.use(iframe, () => {\r\n        var childDoc = iframe.contentDocument,\r\n            childWindow = iframe.contentWindow || iframe.contentDocument.parentWindow;\r\n        if (!childDoc) {\r\n          childDoc = childWindow.document;\r\n        }\r\n\r\n        // Reset the console to the prototype state\r\n        let proxyConsole = options.proxyConsole,\r\n            loopProtect = options.loopProtect;\r\n\r\n        proxyConsole.methods.forEach(function (method) {\r\n          delete proxyConsole[method];\r\n        });          \r\n\r\n\r\n        // Start writing the page. This will clear any existing document.\r\n        childDoc.open();\r\n\r\n        // We need to write a blank line first – Firefox blows away things you add\r\n        // to the child window when you do the fist document.write.\r\n        // Note that each document.write fires a DOMContentLoaded in Firefox.\r\n        // This method exhibits synchronous and asynchronous behaviour, depending\r\n        // on the browser. Urg.\r\n        childDoc.write('');\r\n\r\n        // Give the child a reference to things it needs. This has to go here so\r\n        // that the user's code (that runs as a result of the following\r\n        // childDoc.write) can access the objects.\r\n        childWindow.runnerWindow = {\r\n          proxyConsole: proxyConsole,\r\n          protect: loopProtect,\r\n        };\r\n\r\n        childWindow.console = proxyConsole;\r\n\r\n        // if there's a parse error this will fire\r\n        childWindow.onerror = function (msg, url, line, col, error) {\r\n          // show an error on the jsbin console, but not the browser console\r\n          // (i.e. use _raw), because the browser will throw the native error\r\n          // which (hopefully) includes a link to the JavaScript VM at that time.\r\n          proxyConsole._raw('error', error && error.stack ? error.stack : msg + ' (line ' + line + ')');\r\n        };\r\n\r\n        // Write the source out. IE crashes if you have lots of these, so that's\r\n        // why the source is rendered above (processor.render) – it should be one\r\n        // string. IE's a sensitive soul.\r\n        childDoc.write(source);\r\n        // childDoc.documentElement.innerHTML = source;\r\n\r\n        // Close the document. This will fire another DOMContentLoaded.\r\n        childDoc.close();\r\n\r\n        // Setup the new window\r\n        this.wrap(childWindow, options);\r\n      });      \r\n    }\r\n\r\n  });\r\n\r\n\r\n  plugins.register(Sandbox);\r\n\r\n\r\n  return sandboxs.Sandbox = Sandbox;\r\n\r\n});\r\n\r\n\ndefine('skylark-domx-plugins-sandboxs/main',[\r\n\t\"./sandboxs\",\r\n\t\"./sandbox\"\r\n],function(sandboxs){\r\n\treturn sandboxs;\r\n});\ndefine('skylark-domx-plugins-sandboxs', ['skylark-domx-plugins-sandboxs/main'], function (main) { return main; });\n\n"]}