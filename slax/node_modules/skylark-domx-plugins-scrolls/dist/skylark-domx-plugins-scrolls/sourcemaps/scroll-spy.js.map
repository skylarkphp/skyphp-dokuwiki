{"version":3,"sources":["scroll-spy.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","scrolls","ScrollSpy","Plugin","inherit","klassName","pluginName","options","offset","_construct","elm","this","overrided","$body","document","body","$scrollElement","is","window","selector","target","offsets","targets","activeTarget","scrollHeight","on","proxy","process","refresh","getScrollHeight","Math","max","documentElement","that","offsetMethod","offsetBase","isWindow","scrollTop","find","map","$el","href","data","attr","$href","test","length","top","sort","a","b","each","push","i","maxScroll","height","activate","clear","undefined","active","parents","addClass","parent","closest","trigger","parentsUntil","removeClass","register"],"mappings":"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","file":"../scroll-spy.js","sourcesContent":["define([\n  \"skylark-langx/langx\",\n  \"skylark-domx-browser\",\n  \"skylark-domx-eventer\",\n  \"skylark-domx-noder\",\n  \"skylark-domx-geom\",\n  \"skylark-domx-query\",\n  \"skylark-domx-plugins-base\",\n  \"./scrolls\"\n],function(langx,browser,eventer,noder,geom,$,plugins,scrolls){\n\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  var ScrollSpy =  plugins.Plugin.inherit({\n    klassName: \"ScrollSpy\",\n\n    pluginName : \"lark.scrolls.scrollspy\",\n\n    options: {\n      offset: 10\n    },\n\n    _construct : function(elm,options) {\n      this.overrided(elm,options);\n      this.$body          = $(document.body)\n      this.$scrollElement = this.$().is(document.body) ? $(window) : this.$();\n      //this.options        = langx.mixin({}, ScrollSpy.DEFAULTS, options)\n      this.selector       = (this.options.target || '') + ' .nav li > a'\n      this.offsets        = []\n      this.targets        = []\n      this.activeTarget   = null\n      this.scrollHeight   = 0\n\n      this.$scrollElement.on('scroll.scrollspy', langx.proxy(this.process, this))\n      this.refresh()\n      this.process()\n    },\n\n    getScrollHeight : function () {\n      return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n    },\n\n    refresh : function () {\n      var that          = this\n      var offsetMethod  = 'offset'\n      var offsetBase    = 0\n\n      this.offsets      = []\n      this.targets      = []\n      this.scrollHeight = this.getScrollHeight()\n\n      if (!langx.isWindow(this.$scrollElement[0])) {\n        offsetMethod = 'position'\n        offsetBase   = this.$scrollElement.scrollTop()\n      }\n\n      this.$body\n        .find(this.selector)\n        .map(function () {\n          var $el   = $(this)\n          var href  = $el.data('target') || $el.attr('href')\n          var $href = /^#./.test(href) && $(href)\n\n          return ($href\n            && $href.length\n            && $href.is(':visible')\n            && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n        })\n        .sort(function (a, b) { return a[0] - b[0] })\n        .each(function () {\n          that.offsets.push(this[0])\n          that.targets.push(this[1])\n        })\n    },\n\n    process : function () {\n      var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n      var scrollHeight = this.getScrollHeight()\n      var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n      var offsets      = this.offsets\n      var targets      = this.targets\n      var activeTarget = this.activeTarget\n      var i\n\n      if (this.scrollHeight != scrollHeight) {\n        this.refresh()\n      }\n\n      if (scrollTop >= maxScroll) {\n        return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n      }\n\n      if (activeTarget && scrollTop < offsets[0]) {\n        this.activeTarget = null\n        return this.clear()\n      }\n\n      for (i = offsets.length; i--;) {\n        activeTarget != targets[i]\n          && scrollTop >= offsets[i]\n          && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n          && this.activate(targets[i])\n      }\n    },\n\n    activate : function (target) {\n      this.activeTarget = target\n\n      this.clear()\n\n      var selector = this.selector +\n        '[data-target=\"' + target + '\"],' +\n        this.selector + '[href=\"' + target + '\"]'\n\n      var active = $(selector)\n        .parents('li')\n        .addClass('active')\n\n      if (active.parent('.dropdown-menu').length) {\n        active = active\n          .closest('li.dropdown')\n          .addClass('active')\n      }\n\n      active.trigger('activate.scrollspy')\n    },\n\n    clear : function () {\n      $(this.selector)\n        .parentsUntil(this.options.target, '.active')\n        .removeClass('active')\n    }\n\n  });\n\n  plugins.register(ScrollSpy);\n\n  return scrolls.ScrollSpy = ScrollSpy;\n\n});\n"]}