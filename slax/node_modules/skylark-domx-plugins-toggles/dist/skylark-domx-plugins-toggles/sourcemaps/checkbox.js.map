{"version":3,"sources":["checkbox.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","toggles","Checkbox","Plugin","inherit","klassName","pluginName","options","ignoreVisibilityCheck","_construct","elm","this","overrided","$element","tagName","toLowerCase","Error","$label","$chk","find","$container","parent","css","match","containerSelector","attr","$toggleContainer","on","proxy","itemchecked","setInitialState","checked","prop","disabled","setCheckedState","setDisabledState","element","$lbl","$containerToggle","addClass","removeClass","trigger","evt","target","toggle","isChecked","uncheck","check","enable","disable","destroy","remove","outerHTML","prototype","getValue","register"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,4BACA,aACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAQC,GAEpD,IAAIC,EAAWF,EAAQG,OAAOC,SAC5BC,UAAW,WAEXC,WAAa,wBAEbC,SACEC,uBAAuB,GAGzBC,WAAa,SAASC,EAAIH,GACxBI,KAAKC,UAAUF,EAAIH,GACnB,IAAIM,EAAWF,KAAKZ,IAEpB,GAAkC,UAA9BW,EAAII,QAAQC,cACd,MAAM,IAAIC,MAAM,wPASlB,GAJAL,KAAKM,OAASJ,EACdF,KAAKO,KAAOP,KAAKM,OAAOE,KAAK,0BAC7BR,KAAKS,WAAaP,EAASQ,OAAO,cAE7BV,KAAKJ,QAAQC,uBAAyBG,KAAKO,KAAKI,IAAI,cAAcC,MAAM,mBAC3E,MAAM,IAAIP,MAAM,uOAIlB,IAAIQ,EAAoBb,KAAKO,KAAKO,KAAK,eACvCd,KAAKe,iBAAmB3B,EAAEyB,GAG1Bb,KAAKO,KAAKS,GAAG,SAAUjC,EAAMkC,MAAMjB,KAAKkB,YAAalB,OAGrDA,KAAKmB,mBAGPA,gBAAiB,WACf,IAAIZ,EAAOP,KAAKO,KAGZa,EAAUb,EAAKc,KAAK,WACpBC,EAAWf,EAAKc,KAAK,YAGzBrB,KAAKuB,gBAAgBhB,EAAMa,GAC3BpB,KAAKwB,iBAAiBjB,EAAMe,IAG9BC,gBAAiB,SAA0BE,EAASL,GAClD,IAAIb,EAAOkB,EACPC,EAAO1B,KAAKM,OACZqB,EAAmB3B,KAAKe,iBAExBK,GACFb,EAAKc,KAAK,WAAW,GACrBK,EAAKE,SAAS,WACdD,EAAiBE,YAAY,eAC7BH,EAAKI,QAAQ,mCAEbvB,EAAKc,KAAK,WAAW,GACrBK,EAAKG,YAAY,WACjBF,EAAiBC,SAAS,UAC1BF,EAAKI,QAAQ,oCAGfJ,EAAKI,QAAQ,gCAAiCV,IAGhDI,iBAAkB,SAAUC,EAASH,GACnC,IAAIf,EAAOnB,EAAEqC,GACTC,EAAO1B,KAAKM,OAYhB,OAVIgB,GACFf,EAAKc,KAAK,YAAY,GACtBK,EAAKE,SAAS,YACdF,EAAKI,QAAQ,oCAEbvB,EAAKc,KAAK,YAAY,GACtBK,EAAKG,YAAY,YACjBH,EAAKI,QAAQ,kCAGRvB,GAGTW,YAAa,SAAUa,GACrB,IAAIxB,EAAOnB,EAAE2C,EAAIC,QACbZ,EAAUb,EAAKc,KAAK,WAExBrB,KAAKuB,gBAAgBhB,EAAMa,IAG7Ba,OAAQ,WACQjC,KAAKkC,YAGjBlC,KAAKmC,UAELnC,KAAKoC,SAITA,MAAO,WACLpC,KAAKuB,gBAAgBvB,KAAKO,MAAM,IAGlC4B,QAAS,WACPnC,KAAKuB,gBAAgBvB,KAAKO,MAAM,IAGlC2B,UAAW,WAET,OADclC,KAAKO,KAAKc,KAAK,YAI/BgB,OAAQ,WACNrC,KAAKwB,iBAAiBxB,KAAKO,MAAM,IAGnC+B,QAAS,WACPtC,KAAKwB,iBAAiBxB,KAAKO,MAAM,IAGnCgC,QAAS,WAEP,OADAvC,KAAKM,OAAOkC,SACLxC,KAAKM,OAAO,GAAGmC,aAS1B,OAJAlD,EAASmD,UAAUC,SAAWpD,EAASmD,UAAUR,UAEjD7C,EAAQuD,SAASrD,GAEVD,EAAQC,SAAWA","file":"../checkbox.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx/browser\",\r\n  \"skylark-domx/eventer\",\r\n  \"skylark-domx/noder\",\r\n  \"skylark-domx/geom\",\r\n  \"skylark-domx/query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./toggles\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,toggles){\r\n\r\n  var Checkbox = plugins.Plugin.inherit({\r\n    klassName: \"Checkbox\",\r\n\r\n    pluginName : \"lark.toggles.checkbox\",\r\n\r\n    options : {\r\n      ignoreVisibilityCheck: false\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n      var $element = this.$();\r\n\r\n      if (elm.tagName.toLowerCase() !== 'label') {\r\n        throw new Error('Checkbox must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/checkbox.html for example of proper markup. Call `.checkbox()` on the `<label>` not the `<input>`');\r\n        return;\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = $element;\r\n      this.$chk = this.$label.find('input[type=\"checkbox\"]');\r\n      this.$container = $element.parent('.checkbox'); // the container div\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$chk.css('visibility').match(/hidden|collapse/)) {\r\n        throw new Error('For accessibility reasons, in order for tab and space to function on checkbox, checkbox `<input />`\\'s `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$chk.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n      // handle internal events\r\n      this.$chk.on('change', langx.proxy(this.itemchecked, this));\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    setInitialState: function setInitialState () {\r\n      var $chk = this.$chk;\r\n\r\n      // get current state of input\r\n      var checked = $chk.prop('checked');\r\n      var disabled = $chk.prop('disabled');\r\n\r\n      // sync label class with input state\r\n      this.setCheckedState($chk, checked);\r\n      this.setDisabledState($chk, disabled);\r\n    },\r\n\r\n    setCheckedState: function setCheckedState (element, checked) {\r\n      var $chk = element;\r\n      var $lbl = this.$label;\r\n      var $containerToggle = this.$toggleContainer;\r\n\r\n      if (checked) {\r\n        $chk.prop('checked', true);\r\n        $lbl.addClass('checked');\r\n        $containerToggle.removeClass('hide hidden');\r\n        $lbl.trigger('checked.lark.toggles.checkbox');\r\n      } else {\r\n        $chk.prop('checked', false);\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n        $lbl.trigger('unchecked.lark.toggles.checkbox');\r\n      }\r\n\r\n      $lbl.trigger('changed.lark.toggles.checkbox', checked);\r\n    },\r\n\r\n    setDisabledState: function (element, disabled) {\r\n      var $chk = $(element);\r\n      var $lbl = this.$label;\r\n\r\n      if (disabled) {\r\n        $chk.prop('disabled', true);\r\n        $lbl.addClass('disabled');\r\n        $lbl.trigger('disabled.lark.toggles.checkbox');\r\n      } else {\r\n        $chk.prop('disabled', false);\r\n        $lbl.removeClass('disabled');\r\n        $lbl.trigger('enabled.lark.toggles.checkbox');\r\n      }\r\n\r\n      return $chk;\r\n    },\r\n\r\n    itemchecked: function (evt) {\r\n      var $chk = $(evt.target);\r\n      var checked = $chk.prop('checked');\r\n\r\n      this.setCheckedState($chk, checked);\r\n    },\r\n\r\n    toggle: function () {\r\n      var checked = this.isChecked();\r\n\r\n      if (checked) {\r\n        this.uncheck();\r\n      } else {\r\n        this.check();\r\n      }\r\n    },\r\n\r\n    check: function () {\r\n      this.setCheckedState(this.$chk, true);\r\n    },\r\n\r\n    uncheck: function () {\r\n      this.setCheckedState(this.$chk, false);\r\n    },\r\n\r\n    isChecked: function () {\r\n      var checked = this.$chk.prop('checked');\r\n      return checked;\r\n    },\r\n\r\n    enable: function () {\r\n      this.setDisabledState(this.$chk, false);\r\n    },\r\n\r\n    disable: function () {\r\n      this.setDisabledState(this.$chk, true);\r\n    },\r\n\r\n    destroy: function () {\r\n      this.$label.remove();\r\n      return this.$label[0].outerHTML;\r\n    }\r\n  });\r\n\r\n\r\n  Checkbox.prototype.getValue = Checkbox.prototype.isChecked;\r\n\r\n  plugins.register(Checkbox);\r\n\r\n  return toggles.Checkbox = Checkbox;\r\n});\r\n"]}