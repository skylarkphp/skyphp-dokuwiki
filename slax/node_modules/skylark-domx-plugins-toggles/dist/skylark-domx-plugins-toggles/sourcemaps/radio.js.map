{"version":3,"sources":["radio.js"],"names":["define","langx","browser","eventer","noder","geom","$","plugins","toggles","Radio","Plugin","inherit","klassName","pluginName","options","ignoreVisibilityCheck","_construct","elm","this","overrided","tagName","toLowerCase","Error","$label","$radio","find","groupName","attr","css","match","containerSelector","$toggleContainer","on","proxy","itemchecked","setInitialState","checked","prop","disabled","setCheckedState","setDisabledState","resetGroup","each","index","item","$lbl","parent","$containerToggle","removeClass","addClass","element","trigger","evt","target","check","uncheck","isChecked","enable","disable","destroy","remove","outerHTML","prototype","getValue","register"],"mappings":";;;;;;;AAAAA,QACE,sBACA,uBACA,uBACA,qBACA,oBACA,qBACA,4BACA,aACA,SAASC,EAAMC,EAAQC,EAAQC,EAAMC,EAAKC,EAAEC,EAAQC,GAGpD,IAAIC,EAAQF,EAAQG,OAAOC,SACzBC,UAAW,QAEXC,WAAa,qBAEbC,SACEC,uBAAuB,GAGzBC,WAAa,SAASC,EAAIH,GAExB,GADAI,KAAKC,UAAUF,EAAIH,GACe,UAA9BG,EAAIG,QAAQC,cACd,MAAM,IAAIC,MAAM,+OAQlB,GAJAJ,KAAKK,OAASL,KAAKZ,IACnBY,KAAKM,OAASN,KAAKK,OAAOE,KAAK,uBAC/BP,KAAKQ,UAAYR,KAAKM,OAAOG,KAAK,SAE7BT,KAAKJ,QAAQC,uBAAyBG,KAAKM,OAAOI,IAAI,cAAcC,MAAM,mBAC7E,MAAM,IAAIP,MAAM,6MAIlB,IAAIQ,EAAoBZ,KAAKM,OAAOG,KAAK,eACzCT,KAAKa,iBAAmBzB,EAAEwB,GAG1BZ,KAAKM,OAAOQ,GAAG,SAAU/B,EAAMgC,MAAMf,KAAKgB,YAAahB,OAGvDA,KAAKiB,mBAGPA,gBAAiB,WACf,IAAIX,EAASN,KAAKM,OAGdY,EAAUZ,EAAOa,KAAK,WACtBC,EAAWd,EAAOa,KAAK,YAG3BnB,KAAKqB,gBAAgBf,EAAQY,GAC7BlB,KAAKsB,iBAAiBhB,EAAQc,IAGhCG,WAAY,WACInC,EAAE,eAAiBY,KAAKQ,UAAY,MAC1CgB,KAAK,SAAqBC,EAAOC,GACvC,IAAIpB,EAASlB,EAAEsC,GACXC,EAAOrB,EAAOsB,SACdhB,EAAoBN,EAAOG,KAAK,eAChCoB,EAAmBzC,EAAEwB,GAGzBe,EAAKG,YAAY,WACjBD,EAAiBE,SAAS,aAI9BV,gBAAiB,SAAUW,EAASd,GAClC,IAAIZ,EAAS0B,EACTL,EAAOrB,EAAOsB,SACdhB,EAAoBN,EAAOG,KAAK,eAChCoB,EAAmBzC,EAAEwB,GAErBM,GAEFlB,KAAKuB,aAELjB,EAAOa,KAAK,WAAW,GACvBQ,EAAKI,SAAS,WACdF,EAAiBC,YAAY,eAC7BH,EAAKM,QAAQ,gCAEb3B,EAAOa,KAAK,WAAW,GACvBQ,EAAKG,YAAY,WACjBD,EAAiBE,SAAS,UAC1BJ,EAAKM,QAAQ,iCAGfN,EAAKM,QAAQ,6BAA8Bf,IAG7CI,iBAAkB,SAAUU,EAASZ,GACnC,IAAId,EAASlB,EAAE4C,GACXL,EAAO3B,KAAKK,OAYhB,OAVIe,GACFd,EAAOa,KAAK,YAAY,GACxBQ,EAAKI,SAAS,YACdJ,EAAKM,QAAQ,iCAEb3B,EAAOa,KAAK,YAAY,GACxBQ,EAAKG,YAAY,YACjBH,EAAKM,QAAQ,+BAGR3B,GAGTU,YAAa,SAAUkB,GACrB,IAAI5B,EAASlB,EAAE8C,EAAIC,QACnBnC,KAAKqB,gBAAgBf,GAAQ,IAG/B8B,MAAO,WACLpC,KAAKqB,gBAAgBrB,KAAKM,QAAQ,IAGpC+B,QAAS,WACPrC,KAAKqB,gBAAgBrB,KAAKM,QAAQ,IAGpCgC,UAAW,WAET,OADctC,KAAKM,OAAOa,KAAK,YAIjCoB,OAAQ,WACNvC,KAAKsB,iBAAiBtB,KAAKM,QAAQ,IAGrCkC,QAAS,WACPxC,KAAKsB,iBAAiBtB,KAAKM,QAAQ,IAGrCmC,QAAS,WAEP,OADAzC,KAAKK,OAAOqC,SACL1C,KAAKK,OAAO,GAAGsC,aAU1B,OAJApD,EAAMqD,UAAUC,SAAWtD,EAAMqD,UAAUN,UAE3CjD,EAAQyD,SAASvD,GAEVD,EAAQC,MAAQA","file":"../radio.js","sourcesContent":["define([\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx/browser\",\r\n  \"skylark-domx/eventer\",\r\n  \"skylark-domx/noder\",\r\n  \"skylark-domx/geom\",\r\n  \"skylark-domx/query\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./toggles\"\r\n],function(langx,browser,eventer,noder,geom,$,plugins,toggles){\r\n\r\n\r\n  var Radio = plugins.Plugin.inherit({\r\n    klassName: \"Radio\",\r\n\r\n    pluginName : \"lark.toggles.radio\",\r\n\r\n    options : {\r\n      ignoreVisibilityCheck: false\r\n    },\r\n\r\n    _construct : function(elm,options) {\r\n      this.overrided(elm,options);\r\n      if (elm.tagName.toLowerCase() !== 'label') {\r\n        throw new Error('Radio must be initialized on the `label` that wraps the `input` element. See https://github.com/ExactTarget/fuelux/blob/master/reference/markup/radio.html for example of proper markup. Call `.radio()` on the `<label>` not the `<input>`');\r\n      }\r\n\r\n      // cache elements\r\n      this.$label = this.$();\r\n      this.$radio = this.$label.find('input[type=\"radio\"]');\r\n      this.groupName = this.$radio.attr('name'); // don't cache group itself since items can be added programmatically\r\n\r\n      if (!this.options.ignoreVisibilityCheck && this.$radio.css('visibility').match(/hidden|collapse/)) {\r\n        throw new Error('For accessibility reasons, in order for tab and space to function on radio, `visibility` must not be set to `hidden` or `collapse`. See https://github.com/ExactTarget/fuelux/pull/1996 for more details.');\r\n      }\r\n\r\n      // determine if a toggle container is specified\r\n      var containerSelector = this.$radio.attr('data-toggle');\r\n      this.$toggleContainer = $(containerSelector);\r\n\r\n      // handle internal events\r\n      this.$radio.on('change', langx.proxy(this.itemchecked, this));\r\n\r\n      // set default state\r\n      this.setInitialState();\r\n    },\r\n\r\n    setInitialState: function () {\r\n      var $radio = this.$radio;\r\n\r\n      // get current state of input\r\n      var checked = $radio.prop('checked');\r\n      var disabled = $radio.prop('disabled');\r\n\r\n      // sync label class with input state\r\n      this.setCheckedState($radio, checked);\r\n      this.setDisabledState($radio, disabled);\r\n    },\r\n\r\n    resetGroup: function () {\r\n      var $radios = $('input[name=\"' + this.groupName + '\"]');\r\n      $radios.each(function resetRadio (index, item) {\r\n        var $radio = $(item);\r\n        var $lbl = $radio.parent();\r\n        var containerSelector = $radio.attr('data-toggle');\r\n        var $containerToggle = $(containerSelector);\r\n\r\n\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n      });\r\n    },\r\n\r\n    setCheckedState: function (element, checked) {\r\n      var $radio = element;\r\n      var $lbl = $radio.parent();\r\n      var containerSelector = $radio.attr('data-toggle');\r\n      var $containerToggle = $(containerSelector);\r\n\r\n      if (checked) {\r\n        // reset all items in group\r\n        this.resetGroup();\r\n\r\n        $radio.prop('checked', true);\r\n        $lbl.addClass('checked');\r\n        $containerToggle.removeClass('hide hidden');\r\n        $lbl.trigger('checked.lark.toggles.radio');\r\n      } else {\r\n        $radio.prop('checked', false);\r\n        $lbl.removeClass('checked');\r\n        $containerToggle.addClass('hidden');\r\n        $lbl.trigger('unchecked.lark.toggles.radio');\r\n      }\r\n\r\n      $lbl.trigger('changed.lark.toggles.radio', checked);\r\n    },\r\n\r\n    setDisabledState: function (element, disabled) {\r\n      var $radio = $(element);\r\n      var $lbl = this.$label;\r\n\r\n      if (disabled) {\r\n        $radio.prop('disabled', true);\r\n        $lbl.addClass('disabled');\r\n        $lbl.trigger('disabled.lark.toggles.radio');\r\n      } else {\r\n        $radio.prop('disabled', false);\r\n        $lbl.removeClass('disabled');\r\n        $lbl.trigger('enabled.lark.toggles.radio');\r\n      }\r\n\r\n      return $radio;\r\n    },\r\n\r\n    itemchecked: function (evt) {\r\n      var $radio = $(evt.target);\r\n      this.setCheckedState($radio, true);\r\n    },\r\n\r\n    check: function () {\r\n      this.setCheckedState(this.$radio, true);\r\n    },\r\n\r\n    uncheck: function () {\r\n      this.setCheckedState(this.$radio, false);\r\n    },\r\n\r\n    isChecked: function () {\r\n      var checked = this.$radio.prop('checked');\r\n      return checked;\r\n    },\r\n\r\n    enable: function () {\r\n      this.setDisabledState(this.$radio, false);\r\n    },\r\n\r\n    disable: function () {\r\n      this.setDisabledState(this.$radio, true);\r\n    },\r\n\r\n    destroy: function () {\r\n      this.$label.remove();\r\n      return this.$label[0].outerHTML;\r\n    }\r\n\r\n  });\r\n\r\n\r\n  Radio.prototype.getValue = Radio.prototype.isChecked;\r\n\r\n  plugins.register(Radio);\r\n\r\n  return toggles.Radio = Radio;\r\n});\r\n"]}