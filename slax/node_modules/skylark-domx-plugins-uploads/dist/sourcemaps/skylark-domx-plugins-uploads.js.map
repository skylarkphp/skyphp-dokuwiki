{"version":3,"sources":["skylark-domx-plugins-uploads.js"],"names":["define","plugins","uploads","arrays","funcs","objects","slice","Array","prototype","proxy","makeArray","result","mixin","Promise","always","handler","this","then","done","i","arguments","length","fail","catch","Deferred","self","promise","makePromise2","resolve","reject","_resolve","_reject","isResolved","isPending","isRejected","v","e","state","notified","listeners","onResolved","onRejected","onProgress","progress","call","args","undefined","__ctx__","apply","forEach","value","push","pipe","notify","listener","error","resolveWith","context","_resolved","p","reason","rejectWith","_rejected","callback","errback","progback","all","array","d","bind","first","race","when","valueOrPromise","receivedPromise","nativePromise","deferred","cancel","err","immediate","data","Emitter","elmx","SingleUploader","Plugin","klassName","pluginName","options","selectors","picker","dropzone","pastezone","startUploads","cancelUploads","[object Object]","elm","super","_velm","_elm","_initFileHandlers","dzSelector","pzSelector","pkSelector","$","dropped","files","_addFile","pasted","multiple","picked","file","emit","types","Evented","Xhr","http","blobSlice","Blob","webkitSlice","mozSlice","Upload","inherit","_construct","_options","debug","url","headers","maxConnections","maxChunkSize","id","fileName","loaded","total","onComplete","status","xhr","onCancel","onFailure","_queue","_params","_files","_xhrs","_loaded","add","send","params","indexOf","len","copy","clone","_send","sendAll","_cancel","_dequeue","cancelAll","getName","name","getSize","fileSize","size","getLoaded","curUploadingSize","chunkSize","curLoadedSize","type","formParamName","formData","FormData","append","post","lengthComputable","abort","getQueue","inArray","splice","max","nextId","uploader","skylark","langx","FileUpload","MultiUploader","uploadUrl","allowedExtensions","sizeLimit","minSizeLimit","autoUpload","fileList","fileItem","nodata","template","dataType","clear","message","overrided","_initEventHandler","_initUpoadHandler","_updateFileList","_addFiles","_handler","_onProgress","_onComplete","_onCancel","_onFailure","itemSelectors","_listElement","on","$fileItem","closest","fileId","remove","click","$files","find","$item","_getItemByFileId","percent","parseInt","progressHTML","_formatSize","css","parent","html","_updateFile","_filesInProgress","doneMsg","_addToList","item","_formatFileName","with_files_elements","without_files_elements","removeClass","addClass","when_pending","when_running","when_done","item2","_validateFile","replace","_isAllowedExtension","_error","code","messages","r","replacement","join","showMessage","ext","toLowerCase","allowed","bytes","Math","toFixed","register","main"],"mappings":"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","file":"../skylark-domx-plugins-uploads.js","sourcesContent":["define('skylark-domx-plugins-uploads/uploads',[\r\n    \"skylark-domx-plugins-base/plugins\",\r\n    \"skylark-domx-files/dropzone\",\r\n    \"skylark-domx-files/pastezone\",\r\n    \"skylark-domx-files/picker\"\r\n], function(plugins) {\r\n\r\n    var uploads = function() {\r\n        return uploads;\r\n    };\r\n\r\n    return plugins.uploads = uploads;\r\n});\ndefine('skylark-langx-async/deferred',[\n    \"skylark-langx-arrays\",\n\t\"skylark-langx-funcs\",\n    \"skylark-langx-objects\"\n],function(arrays,funcs,objects){\n    \"use strict\";\n\n    var slice = Array.prototype.slice,\n        proxy = funcs.proxy,\n        makeArray = arrays.makeArray,\n        result = objects.result,\n        mixin = objects.mixin;\n\n    mixin(Promise.prototype,{\n        always: function(handler) {\n            //this.done(handler);\n            //this.fail(handler);\n            this.then(handler,handler);\n            return this;\n        },\n        done : function() {\n            for (var i = 0;i<arguments.length;i++) {\n                this.then(arguments[i]);\n            }\n            return this;\n        },\n        fail : function(handler) { \n            //return mixin(Promise.prototype.catch.call(this,handler),added);\n            //return this.then(null,handler);\n            this.catch(handler);\n            return this;\n         }\n    });\n\n\n    var Deferred = function() {\n        var self = this,\n            p = this.promise = makePromise2(new Promise(function(resolve, reject) {\n                self._resolve = resolve;\n                self._reject = reject;\n            }));\n\n        //wrapPromise(p,self);\n\n        //this[PGLISTENERS] = [];\n        //this[PGNOTIFIES] = [];\n\n        //this.resolve = Deferred.prototype.resolve.bind(this);\n        //this.reject = Deferred.prototype.reject.bind(this);\n        //this.progress = Deferred.prototype.progress.bind(this);\n\n    };\n\n   \n    function makePromise2(promise) {\n        // Don't modify any promise that has been already modified.\n        if (promise.isResolved) return promise;\n\n        // Set initial state\n        var isPending = true;\n        var isRejected = false;\n        var isResolved = false;\n\n        // Observe the promise, saving the fulfillment in a closure scope.\n        var result = promise.then(\n            function(v) {\n                isResolved = true;\n                isPending = false;\n                return v; \n            }, \n            function(e) {\n                isRejected = true;\n                isPending = false;\n                throw e; \n            }\n        );\n\n        result.isResolved = function() { return isResolved; };\n        result.isPending = function() { return isPending; };\n        result.isRejected = function() { return isRejected; };\n\n        result.state = function() {\n            if (isResolved) {\n                return 'resolved';\n            }\n            if (isRejected) {\n                return 'rejected';\n            }\n            return 'pending';\n        };\n\n        var notified = [],\n            listeners = [];\n\n          \n        result.then = function(onResolved,onRejected,onProgress) {\n            if (onProgress) {\n                this.progress(onProgress);\n            }\n            return makePromise2(Promise.prototype.then.call(this,\n                onResolved && function(args) {\n                    if (args && args.__ctx__ !== undefined) {\n                        return onResolved.apply(args.__ctx__,args);\n                    } else {\n                        return onResolved(args);\n                    }\n                },\n                onRejected && function(args){\n                    if (args && args.__ctx__ !== undefined) {\n                        return onRejected.apply(args.__ctx__,args);\n                    } else {\n                        return onRejected(args);\n                    }\n                }\n            ));\n        };\n\n        result.progress = function(handler) {\n            notified.forEach(function (value) {\n                handler(value);\n            });\n            listeners.push(handler);\n            return this;\n        };\n\n        result.pipe = result.then;\n\n        result.notify = function(value) {\n            try {\n                notified.push(value);\n\n                return listeners.forEach(function (listener) {\n                    return listener(value);\n                });\n            } catch (error) {\n            this.reject(error);\n            }\n            return this;\n        };\n\n        return result;\n    }\n\n \n    Deferred.prototype.resolve = function(value) {\n        var args = slice.call(arguments);\n        return this.resolveWith(null,args);\n    };\n\n    Deferred.prototype.resolveWith = function(context,args) {\n        args = args ? makeArray(args) : []; \n        args.__ctx__ = context;\n        this._resolve(args);\n        this._resolved = true;\n        return this;\n    };\n\n    Deferred.prototype.notify = function(value) {\n        var p = result(this,\"promise\");\n        p.notify(value);\n        return this;\n    };\n\n    Deferred.prototype.reject = function(reason) {\n        var args = slice.call(arguments);\n        return this.rejectWith(null,args);\n    };\n\n    Deferred.prototype.rejectWith = function(context,args) {\n        args = args ? makeArray(args) : []; \n        args.__ctx__ = context;\n        this._reject(args);\n        this._rejected = true;\n        return this;\n    };\n\n    Deferred.prototype.isResolved = function() {\n        var p = result(this,\"promise\");\n        return p.isResolved();\n    };\n\n    Deferred.prototype.isRejected = function() {\n        var p = result(this,\"promise\");\n        return p.isRejected();\n    };\n\n    Deferred.prototype.state = function() {\n        var p = result(this,\"promise\");\n        return p.state();\n    };\n\n    Deferred.prototype.then = function(callback, errback, progback) {\n        var p = result(this,\"promise\");\n        return p.then(callback, errback, progback);\n    };\n\n    Deferred.prototype.progress = function(progback){\n        var p = result(this,\"promise\");\n        return p.progress(progback);\n    };\n   \n    Deferred.prototype.catch = function(errback) {\n        var p = result(this,\"promise\");\n        return p.catch(errback);\n    };\n\n\n    Deferred.prototype.always  = function() {\n        var p = result(this,\"promise\");\n        p.always.apply(p,arguments);\n        return this;\n    };\n\n    Deferred.prototype.done  = function() {\n        var p = result(this,\"promise\");\n        p.done.apply(p,arguments);\n        return this;\n    };\n\n    Deferred.prototype.fail = function(errback) {\n        var p = result(this,\"promise\");\n        p.fail(errback);\n        return this;\n    };\n\n\n    Deferred.all = function(array) {\n        //return wrapPromise(Promise.all(array));\n        var d = new Deferred();\n        Promise.all(array).then(d.resolve.bind(d),d.reject.bind(d));\n        return result(d,\"promise\");\n    };\n\n    Deferred.first = function(array) {\n        return makePromise2(Promise.race(array));\n    };\n\n\n    Deferred.when = function(valueOrPromise, callback, errback, progback) {\n        var receivedPromise = valueOrPromise && typeof valueOrPromise.then === \"function\";\n        var nativePromise = receivedPromise && valueOrPromise instanceof Promise;\n\n        if (!receivedPromise) {\n            if (arguments.length > 1) {\n                return callback ? callback(valueOrPromise) : valueOrPromise;\n            } else {\n                return new Deferred().resolve(valueOrPromise);\n            }\n        } else if (!nativePromise) {\n            var deferred = new Deferred(valueOrPromise.cancel);\n            valueOrPromise.then(proxy(deferred.resolve,deferred), proxy(deferred.reject,deferred), deferred.notify);\n            valueOrPromise = deferred.promise;\n        }\n\n        if (callback || errback || progback) {\n            return valueOrPromise.then(callback, errback, progback);\n        }\n        return valueOrPromise;\n    };\n\n    Deferred.reject = function(err) {\n        var d = new Deferred();\n        d.reject(err);\n        return d.promise;\n    };\n\n    Deferred.resolve = function(data) {\n        var d = new Deferred();\n        d.resolve.apply(d,arguments);\n        return d.promise;\n    };\n\n    Deferred.immediate = Deferred.resolve;\n\n\n    Deferred.promise = function(callback) {\n        var d = new Deferred();\n\n        callback(d.resolve.bind(d),d.reject.bind(d),d.progress.bind(d));\n\n        return d.promise;\n    };\n\n    return Deferred;\n});\ndefine('skylark-domx-plugins-uploads/single-uploader',[\r\n\t\"skylark-langx-emitter\",\r\n\t\"skylark-langx-async/deferred\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-plugins-base\",\r\n\t\"./uploads\",\r\n],function(\r\n\tEmitter, \r\n\tDeferred, \r\n\telmx,\r\n\tplugins,\r\n\tuploads\r\n) {\r\n\t//import ZipLoader from 'zip-loader';\r\n\r\n\t/**\r\n\t * Watches an element for file drops, parses to create a filemap hierarchy,\r\n\t * and emits the result.\r\n\t */\r\n\tclass SingleUploader extends plugins.Plugin {\r\n\t\tget klassName() {\r\n\t    \treturn \"SingleUploader\";\r\n    \t} \r\n\r\n    \tget pluginName(){\r\n      \t\treturn \"lark.uploads.single\";\r\n    \t} \r\n\r\n\t\tget options () {\r\n      \t\treturn {\r\n\t            selectors : {\r\n\t              picker   : \".file-picker\",\r\n\t              dropzone : \".file-dropzone\",\r\n\t              pastezone: \".file-pastezone\",\r\n\r\n\t              startUploads: '.start-uploads',\r\n\t              cancelUploads: '.cancel-uploads',\r\n\t            }\r\n\t     \t}\r\n\t\t}\r\n\r\n\r\n\t  /**\r\n\t   * @param  {Element} elm\r\n\t   * @param  [options] \r\n\t   */\r\n\t  constructor (elm, options) {\r\n\t  \tsuper(elm,options);\r\n\r\n        this._velm = elmx(this._elm);\r\n\r\n\t  \tthis._initFileHandlers();\r\n\r\n\t}\r\n\r\n    _initFileHandlers () {\r\n        var self = this;\r\n\r\n        var selectors = this.options.selectors,\r\n        \tdzSelector = selectors.dropzone,\r\n        \tpzSelector = selectors.pastezone,\r\n        \tpkSelector = selectors.picker;\r\n\r\n        if (dzSelector) {\r\n\t\t\tthis._velm.$(dzSelector).dropzone({\r\n                dropped : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n\t\t\t});\r\n        }\r\n\r\n\r\n        if (pzSelector) {\r\n            this._velm.$(pzSelector).pastezone({\r\n                pasted : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n\r\n        if (pkSelector) {\r\n            this._velm.$(pkSelector).picker({\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n    }\r\n\r\n     _addFile(file) {\r\n        this.emit('added', file);\t  \r\n     }\r\n\r\n\r\n\t  /**\r\n\t   * Destroys the instance.\r\n\t   */\r\n\t  destroy () {\r\n\t  }\r\n\r\n\r\n\t}\r\n\r\n\treturn uploads.SingleUploader = SingleUploader;\r\n\r\n});\r\n\r\n \ndefine('skylark-net-http/upload',[\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-objects\",\r\n    \"skylark-langx-arrays\",\r\n    \"skylark-langx-async/Deferred\",\r\n    \"skylark-langx-emitter/Evented\",    \r\n    \"./Xhr\",\r\n    \"./http\"\r\n],function(types, objects, arrays, Deferred, Evented,Xhr, http){\r\n\r\n    var blobSlice = Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice;\r\n\r\n\r\n    /*\r\n     *Class for uploading files using xhr.\r\n     */\r\n    var Upload = Evented.inherit({\r\n        klassName : \"Upload\",\r\n\r\n        _construct : function(options) {\r\n            this._options = objects.mixin({\r\n                debug: false,\r\n                url: '/upload',\r\n                headers : {\r\n\r\n                },\r\n                // maximum number of concurrent uploads\r\n                maxConnections: 999,\r\n                // To upload large files in smaller chunks, set the following option\r\n                // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n                // or the browser does not support the required Blob API, files will\r\n                // be uploaded as a whole.\r\n                maxChunkSize: undefined,\r\n\r\n                onProgress: function(id, fileName, loaded, total){\r\n                },\r\n                onComplete: function(id, fileName,result,status,xhr){\r\n                },\r\n                onCancel: function(id, fileName){\r\n                },\r\n                onFailure : function(id,fileName,e) {                    \r\n                }\r\n            },options);\r\n\r\n            this._queue = [];\r\n            // params for files in queue\r\n            this._params = [];\r\n\r\n            this._files = [];\r\n            this._xhrs = [];\r\n\r\n            // current loaded size in bytes for each file\r\n            this._loaded = [];\r\n\r\n        },\r\n\r\n        /**\r\n         * Adds file to the queue\r\n         * Returns id to use with upload, cancel\r\n         **/\r\n        add: function(file){\r\n            return this._files.push(file) - 1;\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id and additional query params to the server.\r\n         */\r\n        send: function(id, params){\r\n            if (!this._files[id]) {\r\n                // Already sended or canceled\r\n                return ;\r\n            }\r\n            if (this._queue.indexOf(id)>-1) {\r\n                // Already in the queue\r\n                return;\r\n            }\r\n            var len = this._queue.push(id);\r\n\r\n            var copy = objects.clone(params);\r\n\r\n            this._params[id] = copy;\r\n\r\n            // if too many active uploads, wait...\r\n            if (len <= this._options.maxConnections){\r\n                this._send(id, this._params[id]);\r\n            }     \r\n        },\r\n\r\n        /**\r\n         * Sends all files  and additional query params to the server.\r\n         */\r\n        sendAll: function(params){\r\n           for( var id = 0; id <this._files.length; id++) {\r\n                this.send(id,params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id){\r\n            this._cancel(id);\r\n            this._dequeue(id);\r\n        },\r\n\r\n        /**\r\n         * Cancells all uploads\r\n         */\r\n        cancelAll: function(){\r\n            for (var i=0; i<this._queue.length; i++){\r\n                this._cancel(this._queue[i]);\r\n            }\r\n            this._queue = [];\r\n        },\r\n\r\n        getName: function(id){\r\n            var file = this._files[id];\r\n            return file.fileName != null ? file.fileName : file.name;\r\n        },\r\n\r\n        getSize: function(id){\r\n            var file = this._files[id];\r\n            return file.fileSize != null ? file.fileSize : file.size;\r\n        },\r\n\r\n        /**\r\n         * Returns uploaded bytes for file identified by id\r\n         */\r\n        getLoaded: function(id){\r\n            return this._loaded[id] || 0;\r\n        },\r\n\r\n\r\n        /**\r\n         * Sends the file identified by id and additional query params to the server\r\n         * @param {Object} params name-value string pairs\r\n         */\r\n        _send: function(id, params){\r\n            var options = this._options,\r\n                name = this.getName(id),\r\n                size = this.getSize(id),\r\n                chunkSize = options.maxChunkSize || 0,\r\n                curUploadingSize,\r\n                curLoadedSize = 0,\r\n                file = this._files[id],\r\n                args = {\r\n                    headers : objects.clone(options.headers)                    \r\n                };\r\n\r\n            this._loaded[id] = this._loaded[id] || 0;\r\n\r\n            var xhr = this._xhrs[id] = new Xhr({\r\n                url : options.url\r\n            });\r\n\r\n            if (chunkSize)  {\r\n\r\n                args.data = blobSlice.call(\r\n                    file,\r\n                    this._loaded[id],\r\n                    this._loaded[id] + chunkSize,\r\n                    file.type\r\n                );\r\n                // Store the current chunk size, as the blob itself\r\n                // will be dereferenced after data processing:\r\n                curUploadingSize = args.data.size;\r\n                // Expose the chunk bytes position range:\r\n                args.headers[\"content-range\"] = 'bytes ' + this._loaded[id] + '-' +\r\n                    (this._loaded[id] + curUploadingSize - 1) + '/' + size;\r\n                args.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            }  else {\r\n                curUploadingSize = size;\r\n                var formParamName =  params.formParamName,\r\n                    formData = params.formData;\r\n\r\n                if (formParamName) {\r\n                    if (!formData) {\r\n                        formData = new FormData();\r\n                    }\r\n                    formData.append(formParamName,file);\r\n                    args.data = formData;\r\n    \r\n                } else {\r\n                    args.headers[\"Content-Type\"] = file.type || \"application/octet-stream\";\r\n                    args.data = file;\r\n                }\r\n            }\r\n\r\n\r\n            var self = this;\r\n            xhr.post(\r\n                args\r\n            ).progress(function(e){\r\n                if (e.lengthComputable){\r\n                    curLoadedSize = curLoadedSize + e.loaded;\r\n                    self._loaded[id] = self._loaded[id] + e.loaded;\r\n                    self._options.onProgress(id, name, self._loaded[id], size);\r\n                }\r\n            }).then(function(result,status,xhr){\r\n                if (!self._files[id]) {\r\n                    // the request was aborted/cancelled\r\n                    return;\r\n                }\r\n\r\n                if (curLoadedSize < curUploadingSize) {\r\n                    // Create a progress event if no final progress event\r\n                    // with loaded equaling total has been triggered\r\n                    // for this chunk:\r\n                    self._loaded[id] = self._loaded[id] + curUploadingSize - curLoadedSize;\r\n                    self._options.onProgress(id, name, self._loaded[id], size);                    \r\n                }\r\n\r\n                if (self._loaded[id] <size) {\r\n                    // File upload not yet complete,\r\n                    // continue with the next chunk:\r\n                    self._send(id,params);\r\n                } else {\r\n                    self._options.onComplete(id,name,result,status,xhr);\r\n\r\n                    self._files[id] = null;\r\n                    self._xhrs[id] = null;\r\n                    self._dequeue(id);\r\n                }\r\n\r\n\r\n            }).catch(function(e){\r\n                self._options.onFailure(id,name,e);\r\n\r\n                self._files[id] = null;\r\n                self._xhrs[id] = null;\r\n                self._dequeue(id);\r\n            });\r\n        },\r\n\r\n        _cancel: function(id){\r\n            this._options.onCancel(id, this.getName(id));\r\n\r\n            this._files[id] = null;\r\n\r\n            if (this._xhrs[id]){\r\n                this._xhrs[id].abort();\r\n                this._xhrs[id] = null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns id of files being uploaded or\r\n         * waiting for their turn\r\n         */\r\n        getQueue: function(){\r\n            return this._queue;\r\n        },\r\n\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        _dequeue: function(id){\r\n            var i = arrays.inArray(id,this._queue);\r\n            this._queue.splice(i, 1);\r\n\r\n            var max = this._options.maxConnections;\r\n\r\n            if (this._queue.length >= max && i < max){\r\n                var nextId = this._queue[max-1];\r\n                this._send(nextId, this._params[nextId]);\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n  Upload.send = function(file, options) {\r\n    var uploader = new Upload(options);\r\n    var id = uploader.add(file);\r\n    return uploader.send(id,options);\r\n  };\r\n\r\n  Upload.sendAll = function(files,options) {\r\n      var uploader = new Upload(options);\r\n      for (var i = 0, len = files.length; i < len; i++) {\r\n        this.add(file[i]);\r\n      }\r\n      return uploader.send(options);\r\n  };\r\n\r\n    return http.Upload = Upload;    \r\n});\ndefine('skylark-domx-plugins-uploads/multi-uploader',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-net-http/upload\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./uploads\"\r\n]  ,function(skylark,langx,$, elmx,FileUpload, plugins,uploads){\r\n\r\n    var fileListTemplate = '<div class=\"lark-multiuploader\">' + \r\n        '    <h3 class=\"popover-title\">Upload files</h3>' + \r\n        '    <div class=\"popover-content container-fluid\" class=\"file-list file-dropzone file-pastezone\">' + \r\n        '        <div class=\"no-data\"><em>Add files.</em></div>' + \r\n        '    </div>' + \r\n        '    <footer>' + \r\n        '        <button class=\"btn btn-warning pull-right btn-sm\" id=\"cancel-uploads-button\"><i class=\"icon-cancel\"></i>Cancel uploads</button>' + \r\n        '        <span class=\"btn btn-success fileinput-button btn-sm\" id=\"fileinput-button\">' + \r\n        '            <i class=\"icon-plus\"></i>' + \r\n        '            <span>Add files...</span>' + \r\n        '            <input id=\"fileupload\" type=\"file\" name=\"files[]\" multiple=\"multiple\">' + \r\n        '        </span>' + \r\n        '        <button class=\"btn btn-primary btn-sm\" id=\"start-uploads-button\"><i class=\"icon-start\"></i>Start uploads</button>' + \r\n        '    </footer>' + \r\n        '</div>',\r\n        fileItemTemplate = '<div class=\"file-item row\">' +\r\n        '   <div class=\"col-md-6\"><span class=\"name\"></span></div>' + \r\n        '   <div class=\"col-md-3\">' +\r\n        '    <span class=\"size\"></span>' +\r\n        '    <div class=\"progress hidden\">' +\r\n        '        <div class=\"progress-label\"></div>' +\r\n        '        <div class=\"bar\"></div>' +\r\n        '    </div>' +\r\n        '    <span class=\"message hidden\"></span>' +\r\n        '   </div>' +\r\n        '   <div class=\"col-md-3\">' +\r\n        '    <button class=\"btn btn-warning btn-xs cancel\"><i class=\"icon-remove\"></i>Cancel</button>' +\r\n        '    <button class=\"btn btn-xs clear hidden\">Clear</button>' +\r\n        '   </div>' +\r\n        '</div>';\r\n\r\n    var MultiUploader =  plugins.Plugin.inherit({\r\n        klassName : \"MultiUploader\",\r\n        pluginName : \"lark.uploads.multi\",\r\n\r\n        options: {\r\n            uploadUrl: '/upload',\r\n\r\n        \tparams: {\r\n                formParamName : \"file\"\r\n            },\r\n\r\n    \t    maxConnections: 3,\r\n        \t// validation\r\n        \tallowedExtensions: [],\r\n        \tsizeLimit: 0,\r\n        \tminSizeLimit: 0,\r\n\r\n            autoUpload: false,\r\n            selectors : {\r\n              fileList : \".file-list\",\r\n              fileItem : \".file-item\",\r\n              nodata : \".file-list .no-data\",\r\n\r\n              picker   : \".file-picker\",\r\n              dropzone : \".file-dropzone\",\r\n              pastezone: \".file-pastezone\",\r\n\r\n              startUploads: '.start-uploads',\r\n              cancelUploads: '.cancel-uploads',\r\n            },\r\n\r\n            template : fileListTemplate,\r\n\r\n            dataType: 'json',\r\n\r\n            fileItem : {\r\n            \tselectors : {\r\n                    name : \".name\",\r\n                    size : \".size\",\r\n                    cancel: \".cancel\",\r\n                    clear : \".clear\",\r\n                    progress : \".progress\",\r\n                    message : \".message\"                   \r\n            \t},\r\n\r\n            \ttemplate : fileItemTemplate\r\n            }\r\n        },\r\n\r\n\r\n        _construct : function(elm,options) {\r\n            var self = this;\r\n\r\n\r\n            // Render current files\r\n            /*\r\n            this.files.forEach(function (file) {\r\n                self.renderFile(file);\r\n            });\r\n            */\r\n\r\n            //this._refresh({files:true});\r\n        \r\n\r\n            //this._files.on('all', function(){\r\n            //  self._refresh({files:true});\r\n            //});\r\n\r\n\r\n           this.overrided(elm,options);\r\n\r\n\r\n           this._velm = elmx(this._elm);\r\n        \r\n\r\n\r\n            this._initEventHandler();\r\n            this._initFileHandlers();\r\n            this._initUpoadHandler();\r\n            this._updateFileList();\r\n        },\r\n\r\n        _initFileHandlers : function() {\r\n            var self = this;\r\n\r\n            var selectors = this.options.selectors,\r\n            \tdzSelector = selectors.dropzone,\r\n            \tpzSelector = selectors.pastezone,\r\n            \tpkSelector = selectors.picker;\r\n\r\n            if (dzSelector) {\r\n\t\t\t\tthis._velm.$(dzSelector).dropzone({\r\n\t                dropped : function (files) {\r\n                        self._addFiles(files);\r\n\t                }\r\n\t\t\t\t});\r\n            }\r\n\r\n\r\n            if (pzSelector) {\r\n                this._velm.$(pzSelector).pastezone({\r\n                    pasted : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n\r\n            if (pkSelector) {\r\n                this._velm.$(pkSelector).picker({\r\n                    multiple: true,\r\n                    picked : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n        },\r\n\r\n        _initUpoadHandler: function(){\r\n            var self = this,\r\n                handlerClass;\r\n\r\n            this._handler = new FileUpload({\r\n                url: this.options.uploadUrl,\r\n                maxConnections: this.options.maxConnections,\r\n                onProgress: function(id, fileName, loaded, total){\r\n                    self._onProgress(id, fileName, loaded, total);\r\n                },\r\n                onComplete: function(id, fileName, result){\r\n                    self._onComplete(id, fileName, result);\r\n                },\r\n                onCancel: function(id, fileName){\r\n                    self._onCancel(id, fileName);\r\n                },\r\n                onFailure: function(id,fileName,e){\r\n                    self._onFailure(id,fileName,e);\r\n                }\r\n            });\r\n        },\r\n        \r\n         /**\r\n         * delegate click event for cancel link\r\n         **/\r\n        _initEventHandler: function(){\r\n            var self = this,\r\n               selectors = this.options.selectors,\r\n               itemSelectors = this.options.fileItem.selectors, \r\n               list = this._listElement;\r\n\r\n            // Add cancel handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.cancel,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                self._handler.cancel(fileId);\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add clear handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.clear,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add cancel all handler\r\n            this._velm.$(selectors.cancelUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    self._handler.cancel(fileId);\r\n                    $fileItem.remove();\r\n                });\r\n                self._updateFileList();\r\n\r\n            });\r\n\r\n            // Add start uploads handler\r\n            this._velm.$(selectors.startUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    if (!$fileItem.data(\"status\")) {\r\n                        // The file has not yet been sent\r\n                        self._handler.send(fileId,self.options.params);\r\n                    }\r\n                });\r\n\r\n            });\r\n            \r\n\r\n        },       \r\n\r\n        _onProgress: function(id, fileName, loaded, total){          \r\n            var $item = this._getItemByFileId(id);\r\n\r\n            var percent = parseInt(loaded / total * 100, 10);\r\n            var progressHTML = this._formatSize(loaded)+' of '+ this._formatSize(total);\r\n\r\n            $item.data(\"status\",\"running\");\r\n            $item.find('.progress')\r\n                .find('.bar')\r\n                .css('width', percent+'%')\r\n                .parent()\r\n                .find('.progress-label')\r\n                .html(progressHTML);\r\n            this._updateFile($item);\r\n\r\n        },\r\n\r\n        _onComplete: function(id, fileName, result){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"done\");\r\n            $item.find('.message').html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            this._updateFile($item);\r\n        },\r\n\r\n        _onFailure : function(id,fileName,e) {\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"error\");\r\n            $item.find('.message').html('<i class=\"icon-error\"></i> ');;\r\n            this._updateFile($item)\r\n\r\n        },\r\n\r\n        _onCancel: function(id, fileName){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"cancel\");\r\n            this._updateFile($item)\r\n        },\r\n\r\n        _addToList: function(id, fileName){\r\n            var self = this;\r\n\r\n\r\n            var fileName = this._handler.getName(id),\r\n                fileSize = this._handler.getSize(id);\r\n\r\n            var item = $(this.options.fileItem.template);\r\n            item.data(\"fileId\",id);\r\n\r\n            item.find(this.options.fileItem.selectors.name).html(this._formatFileName(fileName));\r\n            item.find(this.options.fileItem.selectors.size).html(this._formatSize(fileSize));\r\n\r\n            this._velm.$(this.options.selectors.fileList).append(item);\r\n\r\n            this._updateFileList();\r\n        },\r\n    \r\n        _updateFileList : function ()  {\r\n            var selectors = this.options.selectors,\r\n                itemSelectors = this.options.fileItem.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem);\r\n\r\n            var with_files_elements = this._velm.$(selectors.cancelUploads + ',' + selectors.startUploads);\r\n            var without_files_elements = this._velm.$(selectors.nodata);\r\n            if (files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n        \r\n        _updateFile: function ($item) {\r\n            var selectors = this.options.fileItem.selectors,\r\n                when_pending = $item.find(selectors.size + \",\" + selectors.cancel),\r\n                when_running = $item.find(selectors.progress + \",\" + selectors.cancel),\r\n                when_done = $item.find(selectors.message + \",\" + selectors.clear);\r\n\r\n            var status = $item.data(\"status\");    \r\n            if (status == \"pending\") {\r\n                when_running.add(when_done).addClass('hidden');\r\n                when_pending.removeClass('hidden');\r\n            } else if (status == \"running\") {\r\n                when_pending.add(when_done).addClass('hidden');\r\n                when_running.removeClass('hidden');\r\n            } else if (status == \"done\" || status == \"error\") {\r\n                when_pending.add(when_running).addClass('hidden');\r\n                when_done.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        _getItemByFileId: function(id){\r\n            var selectors = this.options.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem),\r\n                item;\r\n\r\n            // there can't be txt nodes in dynamically created list\r\n            // and we can  use nextSibling\r\n\r\n            for (var i = 0; i<files.length;i++){\r\n                var item2 = files[i];\r\n                if ($(item2).data(\"fileId\") == id) {\r\n                    item = item2;\r\n                    break;\r\n                }\r\n            }\r\n            if (item) {\r\n                return $(item);\r\n            }\r\n        },\r\n\r\n\r\n            \r\n        _addFiles: function(files){\r\n            for (var i=0; i<files.length; i++){\r\n                if ( !this._validateFile(files[i])){\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (var i=0; i<files.length; i++){\r\n                this._addFile(files[i]);\r\n            }\r\n        },\r\n\r\n        _addFile: function(file){\r\n            var id = this._handler.add(file);\r\n\r\n            this._filesInProgress++;\r\n            this._addToList(id);\r\n\r\n            //this._handler.upload(id, this.options.params);\r\n        },\r\n\r\n        _validateFile: function(file){\r\n            var name, size;\r\n\r\n            if (file.value){\r\n                // it is a file input\r\n                // get input value and remove path to normalize\r\n                name = file.value.replace(/.*(\\/|\\\\)/, \"\");\r\n            } else {\r\n                // fix missing properties in Safari\r\n                name = file.fileName != null ? file.fileName : file.name;\r\n                size = file.fileSize != null ? file.fileSize : file.size;\r\n            }\r\n\r\n            if (! this._isAllowedExtension(name)){\r\n                this._error('typeError', name);\r\n                return false;\r\n\r\n            } else if (size === 0){\r\n                this._error('emptyError', name);\r\n                return false;\r\n\r\n            } else if (size && this.options.sizeLimit && size > this.options.sizeLimit){\r\n                this._error('sizeError', name);\r\n                return false;\r\n\r\n            } else if (size && size < this.options.minSizeLimit){\r\n                this._error('minSizeError', name);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _error: function(code, fileName){\r\n            var message = this.options.messages[code];\r\n            function r(name, replacement){ message = message.replace(name, replacement); }\r\n\r\n            r('{file}', this._formatFileName(fileName));\r\n            r('{extensions}', this.options.allowedExtensions.join(', '));\r\n            r('{sizeLimit}', this._formatSize(this.options.sizeLimit));\r\n            r('{minSizeLimit}', this._formatSize(this.options.minSizeLimit));\r\n\r\n            this.options.showMessage(message);\r\n        },\r\n\r\n        _formatFileName: function(name){\r\n            if (name.length > 33){\r\n                name = name.slice(0, 19) + '...' + name.slice(-13);\r\n            }\r\n            return name;\r\n        },\r\n\r\n        _isAllowedExtension: function(fileName){\r\n            var ext = (-1 !== fileName.indexOf('.')) ? fileName.replace(/.*[.]/, '').toLowerCase() : '';\r\n            var allowed = this.options.allowedExtensions;\r\n\r\n            if (!allowed.length){return true;}\r\n\r\n            for (var i=0; i<allowed.length; i++){\r\n                if (allowed[i].toLowerCase() == ext){ return true;}\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _formatSize: function(bytes){\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1024;\r\n                i++;\r\n            } while (bytes > 99);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];\r\n        }\r\n\r\n    });\r\n\r\n   plugins.register(MultiUploader);\r\n\r\n\r\n\r\n\treturn uploads.MultiUploader = MultiUploader;\r\n});\ndefine('skylark-domx-plugins-uploads/main',[\r\n\t\"./uploads\",\r\n\t\"./single-uploader\",\r\n\t\"./multi-uploader\"\r\n],function(uploads){\r\n\treturn uploads;\r\n});\ndefine('skylark-domx-plugins-uploads', ['skylark-domx-plugins-uploads/main'], function (main) { return main; });\n\n"]}