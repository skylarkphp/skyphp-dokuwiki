{"version":3,"sources":["skylark-domx-plugins-uploads.js"],"names":["define","plugins","uploads","Emitter","Deferred","elmx","SingleUploader","Plugin","klassName","pluginName","options","selectors","picker","dropzone","pastezone","startUploads","cancelUploads","[object Object]","elm","super","this","_velm","_elm","_initFileHandlers","self","dzSelector","pzSelector","pkSelector","$","dropped","files","_addFile","pasted","multiple","picked","file","emit","skylark","langx","FileUpload","MultiUploader","inherit","uploadUrl","params","formParamName","maxConnections","allowedExtensions","sizeLimit","minSizeLimit","autoUpload","fileList","fileItem","nodata","template","dataType","name","size","cancel","clear","progress","message","_construct","overrided","_initEventHandler","_initUpoadHandler","_updateFileList","_addFiles","_handler","url","onProgress","id","fileName","loaded","total","_onProgress","onComplete","result","_onComplete","onCancel","_onCancel","onFailure","e","_onFailure","itemSelectors","_listElement","on","$fileItem","closest","fileId","data","remove","click","$files","find","forEach","send","$item","_getItemByFileId","percent","parseInt","progressHTML","_formatSize","css","parent","html","_updateFile","_filesInProgress","doneMsg","_addToList","getName","fileSize","getSize","item","_formatFileName","append","with_files_elements","without_files_elements","length","removeClass","addClass","when_pending","when_running","when_done","status","add","i","item2","_validateFile","value","replace","_isAllowedExtension","_error","code","messages","r","replacement","join","showMessage","slice","ext","indexOf","toLowerCase","allowed","bytes","Math","max","toFixed","register","main"],"mappings":"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","file":"../skylark-domx-plugins-uploads.js","sourcesContent":["define('skylark-domx-plugins-uploads/uploads',[\r\n    \"skylark-domx-plugins-base/plugins\",\r\n    \"skylark-domx-files/dropzone\",\r\n    \"skylark-domx-files/pastezone\",\r\n    \"skylark-domx-files/picker\"\r\n], function(plugins) {\r\n\r\n    var uploads = function() {\r\n        return uploads;\r\n    };\r\n\r\n    return plugins.uploads = uploads;\r\n});\ndefine('skylark-domx-plugins-uploads/single-uploader',[\r\n\t\"skylark-langx-emitter\",\r\n\t\"skylark-langx-async/Deferred\",\r\n    \"skylark-domx-velm\",\r\n    \"skylark-domx-plugins-base\",\r\n\t\"./uploads\",\r\n],function(\r\n\tEmitter, \r\n\tDeferred, \r\n\telmx,\r\n\tplugins,\r\n\tuploads\r\n) {\r\n\t//import ZipLoader from 'zip-loader';\r\n\r\n\t/**\r\n\t * Watches an element for file drops, parses to create a filemap hierarchy,\r\n\t * and emits the result.\r\n\t */\r\n\tclass SingleUploader extends plugins.Plugin {\r\n\t\tget klassName() {\r\n\t    \treturn \"SingleUploader\";\r\n    \t} \r\n\r\n    \tget pluginName(){\r\n      \t\treturn \"lark.uploads.single\";\r\n    \t} \r\n\r\n\t\tget options () {\r\n      \t\treturn {\r\n\t            selectors : {\r\n\t              picker   : \".file-picker\",\r\n\t              dropzone : \".file-dropzone\",\r\n\t              pastezone: \".file-pastezone\",\r\n\r\n\t              startUploads: '.start-uploads',\r\n\t              cancelUploads: '.cancel-uploads',\r\n\t            }\r\n\t     \t}\r\n\t\t}\r\n\r\n\r\n\t  /**\r\n\t   * @param  {Element} elm\r\n\t   * @param  [options] \r\n\t   */\r\n\t  constructor (elm, options) {\r\n\t  \tsuper(elm,options);\r\n\r\n        this._velm = elmx(this._elm);\r\n\r\n\t  \tthis._initFileHandlers();\r\n\r\n\t}\r\n\r\n    _initFileHandlers () {\r\n        var self = this;\r\n\r\n        var selectors = this.options.selectors,\r\n        \tdzSelector = selectors.dropzone,\r\n        \tpzSelector = selectors.pastezone,\r\n        \tpkSelector = selectors.picker;\r\n\r\n        if (dzSelector) {\r\n\t\t\tthis._velm.$(dzSelector).dropzone({\r\n                dropped : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n\t\t\t});\r\n        }\r\n\r\n\r\n        if (pzSelector) {\r\n            this._velm.$(pzSelector).pastezone({\r\n                pasted : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n\r\n        if (pkSelector) {\r\n            this._velm.$(pkSelector).picker({\r\n                multiple: true,\r\n                picked : function (files) {\r\n                    self._addFile(files[0]);\r\n                }\r\n            });                \r\n        }\r\n    }\r\n\r\n     _addFile(file) {\r\n        this.emit('added', file);\t  \r\n     }\r\n\r\n\r\n\t  /**\r\n\t   * Destroys the instance.\r\n\t   */\r\n\t  destroy () {\r\n\t  }\r\n\r\n\r\n\t}\r\n\r\n\treturn uploads.SingleUploader = SingleUploader;\r\n\r\n});\r\n\r\n \ndefine('skylark-domx-plugins-uploads/multi-uploader',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-net-http/Upload\",\r\n  \"skylark-domx-plugins-base\",\r\n  \"./uploads\"\r\n]  ,function(skylark,langx,$, elmx,FileUpload, plugins,uploads){\r\n\r\n    var fileListTemplate = '<div class=\"lark-multiuploader\">' + \r\n        '    <h3 class=\"popover-title\">Upload files</h3>' + \r\n        '    <div class=\"popover-content container-fluid\" class=\"file-list file-dropzone file-pastezone\">' + \r\n        '        <div class=\"no-data\"><em>Add files.</em></div>' + \r\n        '    </div>' + \r\n        '    <footer>' + \r\n        '        <button class=\"btn btn-warning pull-right btn-sm\" id=\"cancel-uploads-button\"><i class=\"icon-cancel\"></i>Cancel uploads</button>' + \r\n        '        <span class=\"btn btn-success fileinput-button btn-sm\" id=\"fileinput-button\">' + \r\n        '            <i class=\"icon-plus\"></i>' + \r\n        '            <span>Add files...</span>' + \r\n        '            <input id=\"fileupload\" type=\"file\" name=\"files[]\" multiple=\"multiple\">' + \r\n        '        </span>' + \r\n        '        <button class=\"btn btn-primary btn-sm\" id=\"start-uploads-button\"><i class=\"icon-start\"></i>Start uploads</button>' + \r\n        '    </footer>' + \r\n        '</div>',\r\n        fileItemTemplate = '<div class=\"file-item row\">' +\r\n        '   <div class=\"col-md-6\"><span class=\"name\"></span></div>' + \r\n        '   <div class=\"col-md-3\">' +\r\n        '    <span class=\"size\"></span>' +\r\n        '    <div class=\"progress hidden\">' +\r\n        '        <div class=\"progress-label\"></div>' +\r\n        '        <div class=\"bar\"></div>' +\r\n        '    </div>' +\r\n        '    <span class=\"message hidden\"></span>' +\r\n        '   </div>' +\r\n        '   <div class=\"col-md-3\">' +\r\n        '    <button class=\"btn btn-warning btn-xs cancel\"><i class=\"icon-remove\"></i>Cancel</button>' +\r\n        '    <button class=\"btn btn-xs clear hidden\">Clear</button>' +\r\n        '   </div>' +\r\n        '</div>';\r\n\r\n    var MultiUploader =  plugins.Plugin.inherit({\r\n        klassName : \"MultiUploader\",\r\n        pluginName : \"lark.uploads.multi\",\r\n\r\n        options: {\r\n            uploadUrl: '/upload',\r\n\r\n        \tparams: {\r\n                formParamName : \"file\"\r\n            },\r\n\r\n    \t    maxConnections: 3,\r\n        \t// validation\r\n        \tallowedExtensions: [],\r\n        \tsizeLimit: 0,\r\n        \tminSizeLimit: 0,\r\n\r\n            autoUpload: false,\r\n            selectors : {\r\n              fileList : \".file-list\",\r\n              fileItem : \".file-item\",\r\n              nodata : \".file-list .no-data\",\r\n\r\n              picker   : \".file-picker\",\r\n              dropzone : \".file-dropzone\",\r\n              pastezone: \".file-pastezone\",\r\n\r\n              startUploads: '.start-uploads',\r\n              cancelUploads: '.cancel-uploads',\r\n            },\r\n\r\n            template : fileListTemplate,\r\n\r\n            dataType: 'json',\r\n\r\n            fileItem : {\r\n            \tselectors : {\r\n                    name : \".name\",\r\n                    size : \".size\",\r\n                    cancel: \".cancel\",\r\n                    clear : \".clear\",\r\n                    progress : \".progress\",\r\n                    message : \".message\"                   \r\n            \t},\r\n\r\n            \ttemplate : fileItemTemplate\r\n            }\r\n        },\r\n\r\n\r\n        _construct : function(elm,options) {\r\n            var self = this;\r\n\r\n\r\n            // Render current files\r\n            /*\r\n            this.files.forEach(function (file) {\r\n                self.renderFile(file);\r\n            });\r\n            */\r\n\r\n            //this._refresh({files:true});\r\n        \r\n\r\n            //this._files.on('all', function(){\r\n            //  self._refresh({files:true});\r\n            //});\r\n\r\n\r\n           this.overrided(elm,options);\r\n\r\n\r\n           this._velm = elmx(this._elm);\r\n        \r\n\r\n\r\n            this._initEventHandler();\r\n            this._initFileHandlers();\r\n            this._initUpoadHandler();\r\n            this._updateFileList();\r\n        },\r\n\r\n        _initFileHandlers : function() {\r\n            var self = this;\r\n\r\n            var selectors = this.options.selectors,\r\n            \tdzSelector = selectors.dropzone,\r\n            \tpzSelector = selectors.pastezone,\r\n            \tpkSelector = selectors.picker;\r\n\r\n            if (dzSelector) {\r\n\t\t\t\tthis._velm.$(dzSelector).dropzone({\r\n\t                dropped : function (files) {\r\n                        self._addFiles(files);\r\n\t                }\r\n\t\t\t\t});\r\n            }\r\n\r\n\r\n            if (pzSelector) {\r\n                this._velm.$(pzSelector).pastezone({\r\n                    pasted : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n\r\n            if (pkSelector) {\r\n                this._velm.$(pkSelector).picker({\r\n                    multiple: true,\r\n                    picked : function (files) {\r\n                        self._addFiles(files);\r\n                    }\r\n                });                \r\n            }\r\n        },\r\n\r\n        _initUpoadHandler: function(){\r\n            var self = this,\r\n                handlerClass;\r\n\r\n            this._handler = new FileUpload({\r\n                url: this.options.uploadUrl,\r\n                maxConnections: this.options.maxConnections,\r\n                onProgress: function(id, fileName, loaded, total){\r\n                    self._onProgress(id, fileName, loaded, total);\r\n                },\r\n                onComplete: function(id, fileName, result){\r\n                    self._onComplete(id, fileName, result);\r\n                },\r\n                onCancel: function(id, fileName){\r\n                    self._onCancel(id, fileName);\r\n                },\r\n                onFailure: function(id,fileName,e){\r\n                    self._onFailure(id,fileName,e);\r\n                }\r\n            });\r\n        },\r\n        \r\n         /**\r\n         * delegate click event for cancel link\r\n         **/\r\n        _initEventHandler: function(){\r\n            var self = this,\r\n               selectors = this.options.selectors,\r\n               itemSelectors = this.options.fileItem.selectors, \r\n               list = this._listElement;\r\n\r\n            // Add cancel handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.cancel,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                self._handler.cancel(fileId);\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add clear handler\r\n            this._velm.$(selectors.fileList).on(\"click\",itemSelectors.clear,function(e){\r\n                var $fileItem = $(this).closest(selectors.fileItem),\r\n                    fileId = $fileItem.data(\"fileId\");\r\n                $fileItem.remove();\r\n                self._updateFileList();\r\n            });\r\n\r\n            // Add cancel all handler\r\n            this._velm.$(selectors.cancelUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    self._handler.cancel(fileId);\r\n                    $fileItem.remove();\r\n                });\r\n                self._updateFileList();\r\n\r\n            });\r\n\r\n            // Add start uploads handler\r\n            this._velm.$(selectors.startUploads).click(function(){\r\n                var $files = self._velm.$(selectors.fileList).find(selectors.fileItem);           \r\n                $files.forEach(function(fileItem){\r\n                    var $fileItem = $(fileItem),\r\n                        fileId = $fileItem.data(\"fileId\");\r\n                    if (!$fileItem.data(\"status\")) {\r\n                        // The file has not yet been sent\r\n                        self._handler.send(fileId,self.options.params);\r\n                    }\r\n                });\r\n\r\n            });\r\n            \r\n\r\n        },       \r\n\r\n        _onProgress: function(id, fileName, loaded, total){          \r\n            var $item = this._getItemByFileId(id);\r\n\r\n            var percent = parseInt(loaded / total * 100, 10);\r\n            var progressHTML = this._formatSize(loaded)+' of '+ this._formatSize(total);\r\n\r\n            $item.data(\"status\",\"running\");\r\n            $item.find('.progress')\r\n                .find('.bar')\r\n                .css('width', percent+'%')\r\n                .parent()\r\n                .find('.progress-label')\r\n                .html(progressHTML);\r\n            this._updateFile($item);\r\n\r\n        },\r\n\r\n        _onComplete: function(id, fileName, result){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"done\");\r\n            $item.find('.message').html('<i class=\"icon-success\"></i> ' + (this.doneMsg || 'Uploaded'));\r\n            this._updateFile($item);\r\n        },\r\n\r\n        _onFailure : function(id,fileName,e) {\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"error\");\r\n            $item.find('.message').html('<i class=\"icon-error\"></i> ');;\r\n            this._updateFile($item)\r\n\r\n        },\r\n\r\n        _onCancel: function(id, fileName){\r\n            this._filesInProgress--;\r\n            var $item = this._getItemByFileId(id);\r\n            $item.data(\"status\",\"cancel\");\r\n            this._updateFile($item)\r\n        },\r\n\r\n        _addToList: function(id, fileName){\r\n            var self = this;\r\n\r\n\r\n            var fileName = this._handler.getName(id),\r\n                fileSize = this._handler.getSize(id);\r\n\r\n            var item = $(this.options.fileItem.template);\r\n            item.data(\"fileId\",id);\r\n\r\n            item.find(this.options.fileItem.selectors.name).html(this._formatFileName(fileName));\r\n            item.find(this.options.fileItem.selectors.size).html(this._formatSize(fileSize));\r\n\r\n            this._velm.$(this.options.selectors.fileList).append(item);\r\n\r\n            this._updateFileList();\r\n        },\r\n    \r\n        _updateFileList : function ()  {\r\n            var selectors = this.options.selectors,\r\n                itemSelectors = this.options.fileItem.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem);\r\n\r\n            var with_files_elements = this._velm.$(selectors.cancelUploads + ',' + selectors.startUploads);\r\n            var without_files_elements = this._velm.$(selectors.nodata);\r\n            if (files.length > 0) {\r\n                with_files_elements.removeClass('hidden');\r\n                without_files_elements.addClass('hidden');\r\n            } else {\r\n                with_files_elements.addClass('hidden');\r\n                without_files_elements.removeClass('hidden');\r\n            }\r\n        },\r\n        \r\n        _updateFile: function ($item) {\r\n            var selectors = this.options.fileItem.selectors,\r\n                when_pending = $item.find(selectors.size + \",\" + selectors.cancel),\r\n                when_running = $item.find(selectors.progress + \",\" + selectors.cancel),\r\n                when_done = $item.find(selectors.message + \",\" + selectors.clear);\r\n\r\n            var status = $item.data(\"status\");    \r\n            if (status == \"pending\") {\r\n                when_running.add(when_done).addClass('hidden');\r\n                when_pending.removeClass('hidden');\r\n            } else if (status == \"running\") {\r\n                when_pending.add(when_done).addClass('hidden');\r\n                when_running.removeClass('hidden');\r\n            } else if (status == \"done\" || status == \"error\") {\r\n                when_pending.add(when_running).addClass('hidden');\r\n                when_done.removeClass('hidden');\r\n            }\r\n        },\r\n\r\n        _getItemByFileId: function(id){\r\n            var selectors = this.options.selectors,\r\n                files = this._velm.$(selectors.fileList).find(selectors.fileItem),\r\n                item;\r\n\r\n            // there can't be txt nodes in dynamically created list\r\n            // and we can  use nextSibling\r\n\r\n            for (var i = 0; i<files.length;i++){\r\n                var item2 = files[i];\r\n                if ($(item2).data(\"fileId\") == id) {\r\n                    item = item2;\r\n                    break;\r\n                }\r\n            }\r\n            if (item) {\r\n                return $(item);\r\n            }\r\n        },\r\n\r\n\r\n            \r\n        _addFiles: function(files){\r\n            for (var i=0; i<files.length; i++){\r\n                if ( !this._validateFile(files[i])){\r\n                    return;\r\n                }\r\n            }\r\n\r\n            for (var i=0; i<files.length; i++){\r\n                this._addFile(files[i]);\r\n            }\r\n        },\r\n\r\n        _addFile: function(file){\r\n            var id = this._handler.add(file);\r\n\r\n            this._filesInProgress++;\r\n            this._addToList(id);\r\n\r\n            //this._handler.upload(id, this.options.params);\r\n        },\r\n\r\n        _validateFile: function(file){\r\n            var name, size;\r\n\r\n            if (file.value){\r\n                // it is a file input\r\n                // get input value and remove path to normalize\r\n                name = file.value.replace(/.*(\\/|\\\\)/, \"\");\r\n            } else {\r\n                // fix missing properties in Safari\r\n                name = file.fileName != null ? file.fileName : file.name;\r\n                size = file.fileSize != null ? file.fileSize : file.size;\r\n            }\r\n\r\n            if (! this._isAllowedExtension(name)){\r\n                this._error('typeError', name);\r\n                return false;\r\n\r\n            } else if (size === 0){\r\n                this._error('emptyError', name);\r\n                return false;\r\n\r\n            } else if (size && this.options.sizeLimit && size > this.options.sizeLimit){\r\n                this._error('sizeError', name);\r\n                return false;\r\n\r\n            } else if (size && size < this.options.minSizeLimit){\r\n                this._error('minSizeError', name);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        },\r\n\r\n        _error: function(code, fileName){\r\n            var message = this.options.messages[code];\r\n            function r(name, replacement){ message = message.replace(name, replacement); }\r\n\r\n            r('{file}', this._formatFileName(fileName));\r\n            r('{extensions}', this.options.allowedExtensions.join(', '));\r\n            r('{sizeLimit}', this._formatSize(this.options.sizeLimit));\r\n            r('{minSizeLimit}', this._formatSize(this.options.minSizeLimit));\r\n\r\n            this.options.showMessage(message);\r\n        },\r\n\r\n        _formatFileName: function(name){\r\n            if (name.length > 33){\r\n                name = name.slice(0, 19) + '...' + name.slice(-13);\r\n            }\r\n            return name;\r\n        },\r\n\r\n        _isAllowedExtension: function(fileName){\r\n            var ext = (-1 !== fileName.indexOf('.')) ? fileName.replace(/.*[.]/, '').toLowerCase() : '';\r\n            var allowed = this.options.allowedExtensions;\r\n\r\n            if (!allowed.length){return true;}\r\n\r\n            for (var i=0; i<allowed.length; i++){\r\n                if (allowed[i].toLowerCase() == ext){ return true;}\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        _formatSize: function(bytes){\r\n            var i = -1;\r\n            do {\r\n                bytes = bytes / 1024;\r\n                i++;\r\n            } while (bytes > 99);\r\n\r\n            return Math.max(bytes, 0.1).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];\r\n        }\r\n\r\n    });\r\n\r\n   plugins.register(MultiUploader);\r\n\r\n\r\n\r\n\treturn uploads.MultiUploader = MultiUploader;\r\n});\ndefine('skylark-domx-plugins-uploads/main',[\r\n\t\"./uploads\",\r\n\t\"./single-uploader\",\r\n\t\"./multi-uploader\"\r\n],function(uploads){\r\n\treturn uploads;\r\n});\ndefine('skylark-domx-plugins-uploads', ['skylark-domx-plugins-uploads/main'], function (main) { return main; });\n\n"]}