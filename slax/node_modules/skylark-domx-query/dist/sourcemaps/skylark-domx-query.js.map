{"version":3,"sources":["skylark-domx-query.js"],"names":["define","skylark","langx","noder","finder","isQ","some","Array","prototype","push","slice","every","concat","filter","map","forEach","indexOf","sort","rquickExpr","funcArg","isArrayLike","isString","uniq","isFunction","type","isObject","isArray","isWindow","isDocument","isPlainObject","compact","flatten","camelCase","dasherize","children","wrapper_node_operation","func","context","oldValueFunc","html","argType","nodes","arguments","arg","createFragment","length","this","each","idx","apply","wrapper_map","params","call","result","elem","query","wrapper_selector","last","selector","querySelector","wrapper_selector_until","util","wrapper_every_act","node","wrapper_value","value","isDefined","newValue","$","NodeList","klass","klassName","init","match","props","doc","charAt","exec","byId","ownerDoc","find","descendants","name","attr","object","ready","rootQuery","document","fn","mixin","el","i","get","undefined","toArray","size","remove","callback","not","element","matches","add","is","inArray","isHtmlNode","excludes","item","has","contains","eq","first","closest","parents","ancestors","parentsUntil","parent","contents","empty","pluck","property","pushStack","elms","ret","prevObject","replaceWith","newContent","before","wrap","htmlIsFunction","wrapAll","ownerDocument","clone","parentNode","insertBefore","firstElementChild","append","wrapInner","self","unwrap","childNodes","cloneNode","toggle","setting","css","show","hide","prev","prevAll","previousSiblings","next","nextAll","nextSiblings","siblings","index","detach","hover","fnOver","fnOut","mouseenter","mouseleave","traverse","after","prepend","appendTo","prependTo","insertAfter","replaceAll","original","elems","insert","scrollParent","includeHidden","position","excludeStaticParent","overflowRegex","test","end","andSelf","addBack","split","eventType","place","refNode","descendant","replace","addContent","content","template","substitute","disableSelection","createElement","on","event","preventDefault","enableSelection","off","reflow","isBlockNode","plugin","options","args","returnValue","plugins","instantiate","wraps","wrapper_some_chk","wrapper_every_act_firstArgFunc","arg1","newArg1","wrapper_name_value","attach","styler","style","hasClass","addClass","className","removeClass","toggleClass","replaceClass","newClass","oldClass","main"],"mappings":"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","file":"../skylark-domx-query.js","sourcesContent":["define('skylark-domx-query/query',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\"\r\n], function(skylark, langx, noder, finder) {\r\n    var some = Array.prototype.some,\r\n        push = Array.prototype.push,\r\n        every = Array.prototype.every,\r\n        concat = Array.prototype.concat,\r\n        slice = Array.prototype.slice,\r\n        map = Array.prototype.map,\r\n        filter = Array.prototype.filter,\r\n        forEach = Array.prototype.forEach,\r\n        indexOf = Array.prototype.indexOf,\r\n        sort = Array.prototype.sort,\r\n        isQ;\r\n\r\n    var rquickExpr = /^(?:[^#<]*(<[\\w\\W]+>)[^>]*$|#([\\w\\-]*)$)/;\r\n\r\n    var funcArg = langx.funcArg,\r\n        isArrayLike = langx.isArrayLike,\r\n        isString = langx.isString,\r\n        uniq = langx.uniq,\r\n        isFunction = langx.isFunction;\r\n\r\n    var type = langx.type,\r\n        isArray = langx.isArray,\r\n\r\n        isWindow = langx.isWindow,\r\n\r\n        isDocument = langx.isDocument,\r\n\r\n        isObject = langx.isObject,\r\n\r\n        isPlainObject = langx.isPlainObject,\r\n\r\n        compact = langx.compact,\r\n\r\n        flatten = langx.flatten,\r\n\r\n        camelCase = langx.camelCase,\r\n\r\n        dasherize = langx.dasherize,\r\n        children = finder.children;\r\n\r\n    function wrapper_node_operation(func, context, oldValueFunc) {\r\n        return function(html) {\r\n            var argType, nodes = langx.map(arguments, function(arg) {\r\n                argType = type(arg)\r\n                return argType == \"function\" || argType == \"object\" || argType == \"array\" || arg == null ?\r\n                    arg : noder.createFragment(arg)\r\n            });\r\n            if (nodes.length < 1) {\r\n                return this\r\n            }\r\n            this.each(function(idx) {\r\n                func.apply(context, [this, nodes, idx > 0]);\r\n            });\r\n            return this;\r\n        }\r\n    }\r\n\r\n    function wrapper_map(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = langx.map(self, function(elem, idx) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n            return query(uniq(result));\r\n        }\r\n    }\r\n\r\n    function wrapper_selector(func, context, last) {\r\n        return function(selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) {\r\n                if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem] : [elem, selector]);\r\n                } else {\r\n                    return [];\r\n                }\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n    function wrapper_selector_until(func, context, last) {\r\n        return function(util, selector) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            //if (selector === undefined) { //TODO : needs confirm?\r\n            //    selector = util;\r\n            //    util = undefined;\r\n            //}\r\n            var result = this.map(function(idx, elem) {\r\n                // if (elem.nodeType == 1) { // TODO\r\n                //if (elem.querySelector) {\r\n                    return func.apply(context, last ? [elem, util] : [elem, selector, util]);\r\n                //} else {\r\n                //    return [];\r\n                //}\r\n            });\r\n            if (last && selector) {\r\n                return result.filter(selector);\r\n            } else {\r\n                return result;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function wrapper_every_act(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            this.each(function(idx,node) {\r\n                func.apply(context, [this].concat(params));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_every_act_firstArgFunc(func, context, oldValueFunc) {\r\n        return function(arg1) {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            forEach.call(self, function(elem, idx) {\r\n                var newArg1 = funcArg(elem, arg1, idx, oldValueFunc(elem));\r\n                func.apply(context, [elem, newArg1].concat(params.slice(1)));\r\n            });\r\n            return self;\r\n        }\r\n    }\r\n\r\n    function wrapper_some_chk(func, context) {\r\n        return function() {\r\n            var self = this,\r\n                params = slice.call(arguments);\r\n            return some.call(self, function(elem) {\r\n                return func.apply(context, [elem].concat(params));\r\n            });\r\n        }\r\n    }\r\n\r\n    function wrapper_name_value(func, context, oldValueFunc) {\r\n        return function(name, value) {\r\n            var self = this;\r\n\r\n            if (langx.isPlainObject(name) || langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem, name));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem,name,newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0], name]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    function wrapper_value(func, context, oldValueFunc) {\r\n        return function(value) {\r\n            var self = this;\r\n\r\n            if (langx.isDefined(value)) {\r\n                forEach.call(self, function(elem, idx) {\r\n                    var newValue;\r\n                    if (oldValueFunc) {\r\n                        newValue = funcArg(elem, value, idx, oldValueFunc(elem));\r\n                    } else {\r\n                        newValue = value\r\n                    }\r\n                    func.apply(context, [elem, newValue]);\r\n                });\r\n                return self;\r\n            } else {\r\n                if (self[0]) {\r\n                    return func.apply(context, [self[0]]);\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    var NodeList = langx.klass({\r\n        klassName: \"SkNodeList\",\r\n        init: function(selector, context) {\r\n            var self = this,\r\n                match, nodes, node, props;\r\n\r\n            if (selector) {\r\n                self.context = context = context || noder.doc();\r\n\r\n                if (isString(selector)) {\r\n                    // a html string or a css selector is expected\r\n                    self.selector = selector;\r\n\r\n                    if (selector.charAt(0) === \"<\" && selector.charAt(selector.length - 1) === \">\" && selector.length >= 3) {\r\n                        match = [null, selector, null];\r\n                    } else {\r\n                        match = rquickExpr.exec(selector);\r\n                    }\r\n\r\n                    if (match) {\r\n                        if (match[1]) {\r\n                            // if selector is html\r\n                            nodes = noder.createFragment(selector);\r\n\r\n                            if (langx.isPlainObject(context)) {\r\n                                props = context;\r\n                            }\r\n\r\n                        } else {\r\n                            node = finder.byId(match[2], noder.ownerDoc(context));\r\n\r\n                            if (node) {\r\n                                // if selector is id\r\n                                nodes = [node];\r\n                            }\r\n\r\n                        }\r\n                    } else {\r\n                        // if selector is css selector\r\n                        if (langx.isString(context)) {\r\n                            context = finder.find(context);\r\n                        }\r\n\r\n                        nodes = finder.descendants(context, selector);\r\n                    }\r\n                } else {\r\n                    if (!noder.isWindow(selector) && isArrayLike(selector)) {\r\n                        // a dom node array is expected\r\n                        nodes = selector;\r\n                    } else {\r\n                        // a dom node is expected\r\n                        nodes = [selector];\r\n                    }\r\n                    //self.add(selector, false);\r\n                }\r\n            }\r\n\r\n\r\n            if (nodes) {\r\n\r\n                push.apply(self, nodes);\r\n\r\n                if (props) {\r\n                    for ( var name  in props ) {\r\n                        // Properties of context are called as methods if possible\r\n                        if ( langx.isFunction( this[ name ] ) ) {\r\n                            this[ name ]( props[ name ] );\r\n                        } else {\r\n                            this.attr( name, props[ name ] );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return self;\r\n        }\r\n    });\r\n\r\n    var query = (function() {\r\n        isQ = function(object) {\r\n            return object instanceof NodeList;\r\n        }\r\n        init = function(selector, context) {\r\n            return new NodeList(selector, context);\r\n        }\r\n\r\n        var $ = function(selector, context) {\r\n            if (isFunction(selector)) {\r\n                $.ready(function() {\r\n                    selector($);\r\n                });\r\n                return rootQuery;\r\n            } else if (isQ(selector)) {\r\n                return selector;\r\n            } else {\r\n                if (context && isQ(context) && isString(selector)) {\r\n                    return context.find(selector);\r\n                }\r\n                return init(selector, context);\r\n            }\r\n        },rootQuery = $(document);\r\n\r\n        $.fn = NodeList.prototype;\r\n        langx.mixin($.fn, {\r\n            // `map` and `slice` in the jQuery API work differently\r\n            // from their array counterparts\r\n            length : 0,\r\n\r\n            map: function(fn) {\r\n                return $(uniq(langx.map(this, function(el, i) {\r\n                    return fn.call(el, i, el)\r\n                })));\r\n            },\r\n\r\n            slice: function() {\r\n                return $(slice.apply(this, arguments))\r\n            },\r\n\r\n            forEach: function() {\r\n                return forEach.apply(this,arguments);\r\n            },\r\n\r\n            get: function(idx) {\r\n                return idx === undefined ? slice.call(this) : this[idx >= 0 ? idx : idx + this.length]\r\n            },\r\n\r\n            indexOf: function() {\r\n                return indexOf.apply(this,arguments);\r\n            },\r\n\r\n            sort : function() {\r\n                return sort.apply(this,arguments);\r\n            },\r\n\r\n            toArray: function() {\r\n                return slice.call(this);\r\n            },\r\n\r\n            size: function() {\r\n                return this.length\r\n            },\r\n\r\n            //remove: wrapper_every_act(noder.remove, noder),\r\n            remove : function(selector) {\r\n                if (selector) {\r\n                    return this.find(selector).remove();\r\n                }\r\n                this.each(function(i,node){\r\n                    noder.remove(node);\r\n                });\r\n                return this;\r\n            },\r\n\r\n            each: function(callback) {\r\n                langx.each(this, callback);\r\n                return this;\r\n            },\r\n\r\n            filter: function(selector) {\r\n                if (isFunction(selector)) return this.not(this.not(selector))\r\n                return $(filter.call(this, function(element) {\r\n                    return finder.matches(element, selector)\r\n                }))\r\n            },\r\n\r\n            add: function(selector, context) {\r\n                return $(uniq(this.toArray().concat($(selector, context).toArray())));\r\n            },\r\n\r\n            is: function(selector) {\r\n                if (this.length > 0) {\r\n                    var self = this;\r\n                    if (langx.isString(selector)) {\r\n                        return some.call(self,function(elem) {\r\n                            return finder.matches(elem, selector);\r\n                        });\r\n                    } else if (langx.isArrayLike(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return langx.inArray(elem, selector) > -1;\r\n                        });\r\n                    } else if (langx.isHtmlNode(selector)) {\r\n                       return some.call(self,function(elem) {\r\n                            return elem ==  selector;\r\n                        });\r\n                    }\r\n                }\r\n                return false;\r\n            },\r\n            \r\n            not: function(selector) {\r\n                var nodes = []\r\n                if (isFunction(selector) && selector.call !== undefined)\r\n                    this.each(function(idx,node) {\r\n                        if (!selector.call(this, idx,node)) nodes.push(this)\r\n                    })\r\n                else {\r\n                    var excludes = typeof selector == 'string' ? this.filter(selector) :\r\n                        (isArrayLike(selector) && isFunction(selector.item)) ? slice.call(selector) : $(selector)\r\n                    this.forEach(function(el) {\r\n                        if (excludes.indexOf(el) < 0) nodes.push(el)\r\n                    })\r\n                }\r\n                return $(nodes)\r\n            },\r\n\r\n            has: function(selector) {\r\n                return this.filter(function() {\r\n                    return isObject(selector) ?\r\n                        noder.contains(this, selector) :\r\n                        $(this).find(selector).size()\r\n                })\r\n            },\r\n\r\n            eq: function(idx) {\r\n                return idx === -1 ? this.slice(idx) : this.slice(idx, +idx + 1);\r\n            },\r\n\r\n            first: function() {\r\n                return this.eq(0);\r\n            },\r\n\r\n            last: function() {\r\n                return this.eq(-1);\r\n            },\r\n\r\n            find: wrapper_selector(finder.descendants, finder),\r\n\r\n            closest: wrapper_selector(finder.closest, finder),\r\n            /*\r\n                        closest: function(selector, context) {\r\n                            var node = this[0],\r\n                                collection = false\r\n                            if (typeof selector == 'object') collection = $(selector)\r\n                            while (node && !(collection ? collection.indexOf(node) >= 0 : finder.matches(node, selector)))\r\n                                node = node !== context && !isDocument(node) && node.parentNode\r\n                            return $(node)\r\n                        },\r\n            */\r\n\r\n\r\n            parents: wrapper_selector(finder.ancestors, finder),\r\n\r\n            parentsUntil: wrapper_selector_until(finder.ancestors, finder),\r\n\r\n\r\n            parent: wrapper_selector(finder.parent, finder),\r\n\r\n            children: wrapper_selector(finder.children, finder),\r\n\r\n            contents: wrapper_map(noder.contents, noder),\r\n\r\n            empty: wrapper_every_act(noder.empty, noder),\r\n\r\n            html: wrapper_value(noder.html, noder),\r\n\r\n            // `pluck` is borrowed from Prototype.js\r\n            pluck: function(property) {\r\n                return langx.map(this, function(el) {\r\n                    return el[property]\r\n                })\r\n            },\r\n\r\n            pushStack : function(elms) {\r\n                var ret = $(elms);\r\n                ret.prevObject = this;\r\n                return ret;\r\n            },\r\n            \r\n            replaceWith: function(newContent) {\r\n                return this.before(newContent).remove();\r\n            },\r\n\r\n            wrap: function(html) {\r\n                /*\r\n                var func = isFunction(structure)\r\n                if (this[0] && !func)\r\n                    var dom = $(structure).get(0),\r\n                        clone = dom.parentNode || this.length > 1\r\n\r\n                return this.each(function(index,node) {\r\n                    $(this).wrapAll(\r\n                        func ? structure.call(this, index,node) :\r\n                        clone ? dom.cloneNode(true) : dom\r\n                    )\r\n                })\r\n                */\r\n                var htmlIsFunction = typeof html === \"function\";\r\n\r\n                return this.each( function( i ) {\r\n                    $( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\r\n                } );                \r\n            },\r\n\r\n            wrapAll: function(html) {\r\n                /*\r\n                if (this[0]) {\r\n                    $(this[0]).before(wrappingElement = $(wrappingElement));\r\n                    var children;\r\n                    // drill down to the inmost element\r\n                    while ((children = wrappingElement.children()).length) {\r\n                        wrappingElement = children.first();\r\n                    }\r\n                    $(wrappingElement).append(this);\r\n                }\r\n                return this\r\n                */\r\n                var wrap;\r\n\r\n                if ( this[ 0 ] ) {\r\n                    if ( typeof html === \"function\" ) {\r\n                        html = html.call( this[ 0 ] );\r\n                    }\r\n\r\n                    // The elements to wrap the target around\r\n                    wrap = $( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\r\n\r\n                    if ( this[ 0 ].parentNode ) {\r\n                        wrap.insertBefore( this[ 0 ] );\r\n                    }\r\n\r\n                    wrap.map( function() {\r\n                        var elem = this;\r\n\r\n                        while ( elem.firstElementChild ) {\r\n                            elem = elem.firstElementChild;\r\n                        }\r\n\r\n                        return elem;\r\n                    } ).append( this );\r\n                }\r\n\r\n                return this;\r\n\r\n            },\r\n\r\n            wrapInner: function(html) {\r\n                /*\r\n                var func = isFunction(wrappingElement)\r\n                return this.each(function(index,node) {\r\n                    var self = $(this),\r\n                        contents = self.contents(),\r\n                        dom = func ? wrappingElement.call(this, index,node) : wrappingElement\r\n                    contents.length ? contents.wrapAll(dom) : self.append(dom)\r\n                })\r\n                */\r\n                if ( typeof html === \"function\" ) {\r\n                    return this.each( function( i ) {\r\n                        $( this ).wrapInner( html.call( this, i ) );\r\n                    } );\r\n                }\r\n\r\n                return this.each( function() {\r\n                    var self = $( this ),\r\n                        contents = self.contents();\r\n\r\n                    if ( contents.length ) {\r\n                        contents.wrapAll( html );\r\n\r\n                    } else {\r\n                        self.append( html );\r\n                    }\r\n                } );\r\n\r\n            },\r\n\r\n            unwrap: function(selector) {\r\n                /*\r\n                if (this.parent().children().length === 0) {\r\n                    // remove dom without text\r\n                    this.parent(selector).not(\"body\").each(function() {\r\n                        $(this).replaceWith(document.createTextNode(this.childNodes[0].textContent));\r\n                    });\r\n                } else {\r\n                    this.parent().each(function() {\r\n                        $(this).replaceWith($(this).children())\r\n                    });\r\n                }\r\n                return this\r\n                */\r\n                this.parent(selector).not(\"body\").each( function() {\r\n                    $(this).replaceWith(this.childNodes);\r\n                });\r\n                return this;\r\n\r\n            },\r\n\r\n            clone: function() {\r\n                return this.map(function() {\r\n                    return this.cloneNode(true)\r\n                })\r\n            },\r\n\r\n\r\n            toggle: function(setting) {\r\n                return this.each(function() {\r\n                    var el = $(this);\r\n                    (setting === undefined ? el.css(\"display\") == \"none\" : setting) ? el.show(): el.hide()\r\n                })\r\n            },\r\n\r\n            prev: function(selector) {\r\n                return $(this.pluck('previousElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            prevAll: wrapper_selector(finder.previousSiblings, finder),\r\n\r\n            next: function(selector) {\r\n                return $(this.pluck('nextElementSibling')).filter(selector || '*')\r\n            },\r\n\r\n            nextAll: wrapper_selector(finder.nextSiblings, finder),\r\n\r\n            siblings: wrapper_selector(finder.siblings, finder),\r\n\r\n            index: function(elem) {\r\n                if (elem) {\r\n                    return this.indexOf($(elem)[0]);\r\n                } else {\r\n                    return this.parent().children().indexOf(this[0]);\r\n                }\r\n            }\r\n        });\r\n\r\n        // for now\r\n        $.fn.detach = $.fn.remove;\r\n\r\n        $.fn.hover = function(fnOver, fnOut) {\r\n            return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);\r\n        };\r\n\r\n\r\n        var traverseNode = noder.traverse;\r\n\r\n\r\n        $.fn.after = wrapper_node_operation(noder.after, noder);\r\n\r\n        $.fn.prepend = wrapper_node_operation(noder.prepend, noder);\r\n\r\n        $.fn.before = wrapper_node_operation(noder.before, noder);\r\n\r\n        $.fn.append = wrapper_node_operation(noder.append, noder);\r\n\r\n\r\n        langx.each( {\r\n            appendTo: \"append\",\r\n            prependTo: \"prepend\",\r\n            insertBefore: \"before\",\r\n            insertAfter: \"after\",\r\n            replaceAll: \"replaceWith\"\r\n        }, function( name, original ) {\r\n            $.fn[ name ] = function( selector ) {\r\n                var elems,\r\n                    ret = [],\r\n                    insert = $( selector ),\r\n                    last = insert.length - 1,\r\n                    i = 0;\r\n\r\n                for ( ; i <= last; i++ ) {\r\n                    elems = i === last ? this : this.clone( true );\r\n                    $( insert[ i ] )[ original ]( elems );\r\n\r\n                    // Support: Android <=4.0 only, PhantomJS 1 only\r\n                    // .get() because push.apply(_, arraylike) throws on ancient WebKit\r\n                    push.apply( ret, elems.get() );\r\n                }\r\n\r\n                return this.pushStack( ret );\r\n            };\r\n        } );\r\n\r\n/*\r\n        $.fn.insertAfter = function(html) {\r\n            $(html).after(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.insertBefore = function(html) {\r\n            $(html).before(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.appendTo = function(html) {\r\n            $(html).append(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.prependTo = function(html) {\r\n            $(html).prepend(this);\r\n            return this;\r\n        };\r\n\r\n        $.fn.replaceAll = function(selector) {\r\n            $(selector).replaceWith(this);\r\n            return this;\r\n        };\r\n*/\r\n        return $;\r\n    })();\r\n\r\n    (function($) {\r\n        $.fn.scrollParent = function( includeHidden ) {\r\n            var position = this.css( \"position\" ),\r\n                excludeStaticParent = position === \"absolute\",\r\n                overflowRegex = includeHidden ? /(auto|scroll|hidden)/ : /(auto|scroll)/,\r\n                scrollParent = this.parents().filter( function() {\r\n                    var parent = $( this );\r\n                    if ( excludeStaticParent && parent.css( \"position\" ) === \"static\" ) {\r\n                        return false;\r\n                    }\r\n                    return overflowRegex.test( parent.css( \"overflow\" ) + parent.css( \"overflow-y\" ) +\r\n                        parent.css( \"overflow-x\" ) );\r\n                } ).eq( 0 );\r\n\r\n            return position === \"fixed\" || !scrollParent.length ?\r\n                $( this[ 0 ].ownerDocument || document ) :\r\n                scrollParent;\r\n        };\r\n\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.end = function() {\r\n            return this.prevObject || $()\r\n        }\r\n\r\n        $.fn.andSelf = function() {\r\n            return this.add(this.prevObject || $())\r\n        }\r\n\r\n        $.fn.addBack = function(selector) {\r\n            if (this.prevObject) {\r\n                if (selector) {\r\n                    return this.add(this.prevObject.filter(selector));\r\n                } else {\r\n                    return this.add(this.prevObject);\r\n                }\r\n            } else {\r\n                return this;\r\n            }\r\n        }\r\n\r\n        'filter,add,not,eq,first,last,find,closest,parents,parent,children,siblings,prev,prevAll,next,nextAll'.split(',').forEach(function(property) {\r\n            var fn = $.fn[property]\r\n            $.fn[property] = function() {\r\n                var ret = fn.apply(this, arguments)\r\n                ret.prevObject = this\r\n                return ret\r\n            }\r\n        })\r\n    })(query);\r\n\r\n\r\n    (function($) {\r\n        $.fn.query = $.fn.find;\r\n\r\n        $.fn.place = function(refNode, position) {\r\n            // summary:\r\n            //      places elements of this node list relative to the first element matched\r\n            //      by queryOrNode. Returns the original NodeList. See: `dojo/dom-construct.place`\r\n            // queryOrNode:\r\n            //      may be a string representing any valid CSS3 selector or a DOM node.\r\n            //      In the selector case, only the first matching element will be used\r\n            //      for relative positioning.\r\n            // position:\r\n            //      can be one of:\r\n            //\r\n            //      -   \"last\" (default)\r\n            //      -   \"first\"\r\n            //      -   \"before\"\r\n            //      -   \"after\"\r\n            //      -   \"only\"\r\n            //      -   \"replace\"\r\n            //\r\n            //      or an offset in the childNodes\r\n            if (langx.isString(refNode)) {\r\n                refNode = finder.descendant(refNode);\r\n            } else if (isQ(refNode)) {\r\n                refNode = refNode[0];\r\n            }\r\n            return this.each(function(i, node) {\r\n                switch (position) {\r\n                    case \"before\":\r\n                        noder.before(refNode, node);\r\n                        break;\r\n                    case \"after\":\r\n                        noder.after(refNode, node);\r\n                        break;\r\n                    case \"replace\":\r\n                        noder.replace(refNode, node);\r\n                        break;\r\n                    case \"only\":\r\n                        noder.empty(refNode);\r\n                        noder.append(refNode, node);\r\n                        break;\r\n                    case \"first\":\r\n                        noder.prepend(refNode, node);\r\n                        break;\r\n                        // else fallthrough...\r\n                    default: // aka: last\r\n                        noder.append(refNode, node);\r\n                }\r\n            });\r\n        };\r\n\r\n        $.fn.addContent = function(content, position) {\r\n            if (content.template) {\r\n                content = langx.substitute(content.template, content);\r\n            }\r\n            return this.append(content);\r\n        };\r\n\r\n\r\n\r\n        $.fn.disableSelection = ( function() {\r\n            var eventType = \"onselectstart\" in document.createElement( \"div\" ) ?\r\n                \"selectstart\" :\r\n                \"mousedown\";\r\n\r\n            return function() {\r\n                return this.on( eventType + \".ui-disableSelection\", function( event ) {\r\n                    event.preventDefault();\r\n                } );\r\n            };\r\n        } )();\r\n\r\n        $.fn.enableSelection = function() {\r\n            return this.off( \".ui-disableSelection\" );\r\n        };\r\n\r\n        $.fn.reflow = function() {\r\n            return noder.reflow(this[0]);\r\n        };\r\n\r\n        $.fn.isBlockNode = function() {\r\n            return noder.isBlockNode(this[0]);\r\n        };\r\n       \r\n\r\n    })(query);\r\n\r\n    query.fn.plugin = function(name,options) {\r\n        var args = slice.call( arguments, 1 ),\r\n            self = this,\r\n            returnValue = this;\r\n\r\n        this.each(function(){\r\n            returnValue = plugins.instantiate.apply(self,[this,name].concat(args));\r\n        });\r\n        return returnValue;\r\n    };\r\n\r\n\r\n    query.wraps = {\r\n        wrapper_node_operation,\r\n        wrapper_map,\r\n        wrapper_value,\r\n        wrapper_selector,\r\n        wrapper_some_chk,\r\n        wrapper_selector_until,\r\n        wrapper_every_act_firstArgFunc,\r\n        wrapper_every_act,\r\n        wrapper_name_value\r\n\r\n    };\r\n\r\n    return skylark.attach(\"domx.query\", query);\r\n\r\n});\ndefine('skylark-domx-query/main',[\r\n\t\"./query\",\r\n\t\"skylark-domx-styler\"\r\n],function($,styler){\r\n\r\n    $.fn.style = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    $.fn.css = $.wraps.wrapper_name_value(styler.css, styler);\r\n\r\n    //hasClass(name)\r\n    $.fn.hasClass = $.wraps.wrapper_some_chk(styler.hasClass, styler);\r\n\r\n    //addClass(name)\r\n    $.fn.addClass = $.wraps.wrapper_every_act_firstArgFunc(styler.addClass, styler, styler.className);\r\n\r\n    //removeClass(name)\r\n    $.fn.removeClass = $.wraps.wrapper_every_act_firstArgFunc(styler.removeClass, styler, styler.className);\r\n\r\n    //toogleClass(name,when)\r\n    $.fn.toggleClass = $.wraps.wrapper_every_act_firstArgFunc(styler.toggleClass, styler, styler.className);\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n\r\n    $.fn.replaceClass = function(newClass, oldClass) {\r\n        this.removeClass(oldClass);\r\n        this.addClass(newClass);\r\n        return this;\r\n    };\r\n        \r\n\r\n\treturn $;\r\n});\ndefine('skylark-domx-query', ['skylark-domx-query/main'], function (main) { return main; });\n\n"]}