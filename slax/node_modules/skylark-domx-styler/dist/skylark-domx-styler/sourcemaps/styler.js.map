{"version":3,"sources":["styler.js"],"names":["define","skylark","langx","Array","prototype","every","forEach","camelCase","dasherize","maybeAddPx","name","value","cssNumber","column-count","columns","font-weight","line-height","opacity","z-index","zoom","classReCache","classRE","RegExp","className","node","klass","svg","undefined","baseVal","elementDisplay","addClass","elm","this","cls","isString","split","re","match","getStyles","elem","view","ownerDocument","defaultView","opener","window","getComputedStyle","hasClass","removeClass","replace","trim","styler","mixin","autocssfix","cssHooks","css","property","computedStyle","style","getPropertyValue","isArrayLike","props","call","prop","removeProperty","key","cssText","disabled","arguments","length","dom","hide","isInvisible","show","nodeName","element","display","document","createElement","body","appendChild","parentNode","removeChild","toggleClass","when","attach"],"mappings":"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","file":"../styler.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark, langx) {\r\n    var every = Array.prototype.every,\r\n        forEach = Array.prototype.forEach,\r\n        camelCase = langx.camelCase,\r\n        dasherize = langx.dasherize;\r\n\r\n    function maybeAddPx(name, value) {\r\n        return (typeof value == \"number\" && !cssNumber[dasherize(name)]) ? value + \"px\" : value\r\n    }\r\n\r\n    var cssNumber = {\r\n            'column-count': 1,\r\n            'columns': 1,\r\n            'font-weight': 1,\r\n            'line-height': 1,\r\n            'opacity': 1,\r\n            'z-index': 1,\r\n            'zoom': 1\r\n        },\r\n        classReCache = {\r\n\r\n        };\r\n\r\n    function classRE(name) {\r\n        return name in classReCache ?\r\n            classReCache[name] : (classReCache[name] = new RegExp('(^|\\\\s)' + name + '(\\\\s|$)'));\r\n    }\r\n\r\n    // access className property while respecting SVGAnimatedString\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} node\r\n     * @param {String} value\r\n     */\r\n    function className(node, value) {\r\n        var klass = node.className || '',\r\n            svg = klass && klass.baseVal !== undefined\r\n\r\n        if (value === undefined) return svg ? klass.baseVal : klass\r\n        svg ? (klass.baseVal = value) : (node.className = value)\r\n    }\r\n\r\n    function disabled(elm, value ) {\r\n        if (arguments.length < 2) {\r\n            return !!this.dom.disabled;\r\n        }\r\n\r\n        elm.disabled = value;\r\n\r\n        return this;\r\n    }\r\n\r\n    var elementDisplay = {};\r\n\r\n    function defaultDisplay(nodeName) {\r\n        var element, display\r\n        if (!elementDisplay[nodeName]) {\r\n            element = document.createElement(nodeName)\r\n            document.body.appendChild(element)\r\n            display = getStyles(element).getPropertyValue(\"display\")\r\n            element.parentNode.removeChild(element)\r\n            display == \"none\" && (display = \"block\")\r\n            elementDisplay[nodeName] = display\r\n        }\r\n        return elementDisplay[nodeName]\r\n    }\r\n    /*\r\n     * Display the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function show(elm) {\r\n        styler.css(elm, \"display\", \"\");\r\n        if (styler.css(elm, \"display\") == \"none\") {\r\n            styler.css(elm, \"display\", defaultDisplay(elm.nodeName));\r\n        }\r\n        return this;\r\n    }\r\n\r\n    function isInvisible(elm) {\r\n        return styler.css(elm, \"display\") == \"none\" || styler.css(elm, \"opacity\") == 0 || styler.css(elm,\"visibility\") == \"hidden\";\r\n    }\r\n\r\n    /*\r\n     * Hide the matched elements.\r\n     * @param {HTMLElement} elm\r\n     */\r\n    function hide(elm) {\r\n        styler.css(elm, \"display\", \"none\");\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Adds the specified class(es) to each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function addClass(elm, name) {\r\n        if (!name) return this\r\n        var cls = className(elm),\r\n            names;\r\n        if (langx.isString(name)) {\r\n            names = name.split(/\\s+/g);\r\n        } else {\r\n            names = name;\r\n        }\r\n        names.forEach(function(klass) {\r\n            var re = classRE(klass);\r\n            if (!cls.match(re)) {\r\n                cls += (cls ? \" \" : \"\") + klass;\r\n            }\r\n        });\r\n\r\n        className(elm, cls);\r\n\r\n        return this;\r\n    }\r\n\r\n    function getStyles( elem ) {\r\n\r\n        // Support: IE <=11 only, Firefox <=30 (#15098, #14150)\r\n        // IE throws on elements created in popups\r\n        // FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\r\n        var view = elem.ownerDocument.defaultView;\r\n\r\n        if ( !view || !view.opener ) {\r\n            view = window;\r\n        }\r\n\r\n        return view.getComputedStyle( elem);\r\n    }\r\n\r\n\r\n    /*\r\n     * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} property\r\n     * @param {Any} value\r\n     */\r\n    function css(elm, property, value) {\r\n        //if (arguments.length < 3) {\r\n        if (value == void 0) {\r\n            var computedStyle,\r\n                computedStyle = getStyles(elm)\r\n            if (property == void 0) {\r\n                return computedStyle;\r\n            } else if (langx.isString(property)) {\r\n                return elm.style[camelCase(property)] || computedStyle.getPropertyValue(dasherize(property))\r\n            } else if (langx.isArrayLike(property)) {\r\n                var props = {}\r\n                forEach.call(property, function(prop) {\r\n                    props[prop] = (elm.style[camelCase(prop)] || computedStyle.getPropertyValue(dasherize(prop)))\r\n                })\r\n                return props\r\n            }\r\n        }\r\n\r\n        var css = '';\r\n        if (typeof(property) == 'string') {\r\n            if (!value && value !== 0) {\r\n                elm.style.removeProperty(dasherize(property));\r\n            } else {\r\n                css = dasherize(property) + \":\" + maybeAddPx(property, value)\r\n            }\r\n        } else {\r\n            for (key in property) {\r\n                if (property[key] === undefined) {\r\n                    continue;\r\n                }\r\n                if (!property[key] && property[key] !== 0) {\r\n                    elm.style.removeProperty(dasherize(key));\r\n                } else {\r\n                    css += dasherize(key) + ':' + maybeAddPx(key, property[key]) + ';'\r\n                }\r\n            }\r\n        }\r\n\r\n        elm.style.cssText += ';' + css;\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Determine whether any of the matched elements are assigned the given class.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function hasClass(elm, name) {\r\n        var re = classRE(name);\r\n        return elm.className && elm.className.match(re);\r\n    }\r\n\r\n    /*\r\n     * Remove a single class, multiple classes, or all classes from each element in the set of matched elements.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     */\r\n    function removeClass(elm, name) {\r\n        if (name) {\r\n            var cls = className(elm),\r\n                names;\r\n\r\n            if (langx.isString(name)) {\r\n                names = name.split(/\\s+/g);\r\n            } else {\r\n                names = name;\r\n            }\r\n\r\n            names.forEach(function(klass) {\r\n                var re = classRE(klass);\r\n                if (cls.match(re)) {\r\n                    cls = cls.replace(re, \" \");\r\n                }\r\n            });\r\n\r\n            className(elm, cls.trim());\r\n        } else {\r\n            className(elm, \"\");\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /*\r\n     * Add or remove one or more classes from the specified element.\r\n     * @param {HTMLElement} elm\r\n     * @param {String} name\r\n     * @param {} when\r\n     */\r\n    function toggleClass(elm, name, when) {\r\n        var self = this;\r\n        name.split(/\\s+/g).forEach(function(klass) {\r\n            if (when === undefined) {\r\n                when = !hasClass(elm, klass);\r\n            }\r\n            if (when) {\r\n                addClass(elm, klass);\r\n            } else {\r\n                removeClass(elm, klass)\r\n            }\r\n        });\r\n\r\n        return self;\r\n    }\r\n\r\n    var styler = function() {\r\n        return styler;\r\n    };\r\n\r\n    langx.mixin(styler, {\r\n        autocssfix: false,\r\n        cssHooks: {\r\n\r\n        },\r\n\r\n        addClass: addClass,\r\n        className: className,\r\n        css: css,\r\n        disabled : disabled,        \r\n        hasClass: hasClass,\r\n        hide: hide,\r\n        isInvisible: isInvisible,\r\n        removeClass: removeClass,\r\n        show: show,\r\n        toggleClass: toggleClass\r\n    });\r\n\r\n    return skylark.attach(\"domx.styler\", styler);\r\n});"]}