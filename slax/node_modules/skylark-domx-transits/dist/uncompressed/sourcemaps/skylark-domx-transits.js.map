{"version":3,"sources":["skylark-domx-transits.js"],"names":[],"mappingsfile":"../skylark-domx-transits.js","sourcesContent":["define('skylark-domx-transits/transits',[\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\"\r\n], function(skylark,langx) {\r\n\r\n    function transits() {\r\n        return transits;\r\n    }\r\n\r\n    langx.mixin(transits, {\r\n        off: false,\r\n        speeds: {\r\n            normal: 400,\r\n            fast: 200,\r\n            slow: 600\r\n        }\r\n    });\r\n\r\n    return skylark.attach(\"domx.transits\", transits);\r\n});\ndefine('skylark-domx-transits/transit',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-eventer\",\r\n    \"./transits\"\r\n], function(langx, browser, noder, geom, styler, eventer,transits) {\r\n\r\n    var transitionProperty,\r\n        transitionDuration,\r\n        transitionTiming,\r\n        transitionDelay,\r\n\r\n        transitionEnd = browser.normalizeCssEvent('TransitionEnd'),\r\n\r\n        supportedTransforms = /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i,\r\n        transform = browser.css3PropPrefix + \"transform\",\r\n        cssReset = {};\r\n\r\n    cssReset[transitionProperty = browser.normalizeCssProperty(\"transition-property\")] =\r\n        cssReset[transitionDuration = browser.normalizeCssProperty(\"transition-duration\")] =\r\n        cssReset[transitionDelay = browser.normalizeCssProperty(\"transition-delay\")] =\r\n        cssReset[transitionTiming = browser.normalizeCssProperty(\"transition-timing-function\")] = \"\";\r\n\r\n    /*   \r\n     * Perform a custom animation of a set of CSS properties.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} properties\r\n     * @param {String} ease\r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     * @param {Number or String} delay\r\n     */\r\n    function transit(elm, properties, duration, ease, callback, delay) {\r\n        var key,\r\n            cssValues = {},\r\n            cssProperties = [],\r\n            transforms = \"\",\r\n            that = this,\r\n            endEvent,\r\n            wrappedCallback,\r\n            fired = false,\r\n            hasScrollTop = false,\r\n            resetClipAuto = false;\r\n\r\n        if (langx.isPlainObject(duration)) {\r\n            ease = duration.easing;\r\n            callback = duration.complete;\r\n            delay = duration.delay;\r\n            duration = duration.duration;\r\n        }\r\n\r\n        if (langx.isString(duration)) {\r\n            duration = transits.speeds[duration];\r\n        }\r\n        if (duration === undefined) {\r\n            duration = transits.speeds.normal;\r\n        }\r\n        duration = duration / 1000;\r\n        if (transits.off) {\r\n            duration = 0;\r\n        }\r\n\r\n        if (langx.isFunction(ease)) {\r\n            callback = ease;\r\n            eace = \"swing\";\r\n        } else {\r\n            ease = ease || \"swing\";\r\n        }\r\n\r\n        if (delay) {\r\n            delay = delay / 1000;\r\n        } else {\r\n            delay = 0;\r\n        }\r\n\r\n        // CSS transitions\r\n        for (key in properties) {\r\n            var v = properties[key];\r\n            if (supportedTransforms.test(key)) {\r\n                transforms += key + \"(\" + v + \") \";\r\n            } else {\r\n                if (key === \"scrollTop\") {\r\n                    hasScrollTop = true;\r\n                }\r\n                if (key == \"clip\" && langx.isPlainObject(v)) {\r\n                    cssValues[key] = \"rect(\" + v.top+\"px,\"+ v.right +\"px,\"+ v.bottom +\"px,\"+ v.left+\"px)\";\r\n                    if (styler.css(elm,\"clip\") == \"auto\") {\r\n                        var size = geom.size(elm);\r\n                        styler.css(elm,\"clip\",\"rect(\"+\"0px,\"+ size.width +\"px,\"+ size.height +\"px,\"+\"0px)\");  \r\n                        resetClipAuto = true;\r\n                    }\r\n\r\n                } else {\r\n                    cssValues[key] = v;\r\n                }\r\n                cssProperties.push(langx.dasherize(key));\r\n            }\r\n        }\r\n        endEvent = transitionEnd;\r\n\r\n        if (transforms) {\r\n            cssValues[transform] = transforms;\r\n            cssProperties.push(transform);\r\n        }\r\n\r\n        if (duration > 0) {\r\n            cssValues[transitionProperty] = cssProperties.join(\", \");\r\n            cssValues[transitionDuration] = duration + \"s\";\r\n            cssValues[transitionDelay] = delay + \"s\";\r\n            cssValues[transitionTiming] = ease;\r\n        }\r\n\r\n        wrappedCallback = function(event) {\r\n            fired = true;\r\n            if (event) {\r\n                if (event.target !== event.currentTarget) {\r\n                    return // makes sure the event didn't bubble from \"below\"\r\n                }\r\n                eventer.off(event.target, endEvent, wrappedCallback)\r\n            } else {\r\n                eventer.off(elm, endEvent, wrappedCallback) // triggered by setTimeout\r\n            }\r\n            styler.css(elm, cssReset);\r\n            if (resetClipAuto) {\r\n //               styler.css(elm,\"clip\",\"auto\");\r\n            }\r\n            callback && callback.call(this);\r\n        };\r\n\r\n        if (duration > 0) {\r\n            eventer.on(elm, endEvent, wrappedCallback);\r\n            // transitionEnd is not always firing on older Android phones\r\n            // so make sure it gets fired\r\n            langx.debounce(function() {\r\n                if (fired) {\r\n                    return;\r\n                }\r\n                wrappedCallback.call(that);\r\n            }, ((duration + delay) * 1000) + 25)();\r\n        }\r\n\r\n        // trigger page reflow so new elements can transit\r\n        elm.clientLeft;\r\n\r\n        styler.css(elm, cssValues);\r\n\r\n        if (duration <= 0) {\r\n            langx.debounce(function() {\r\n                if (fired) {\r\n                    return;\r\n                }\r\n                wrappedCallback.call(that);\r\n            }, 0)();\r\n        }\r\n\r\n        if (hasScrollTop) {\r\n            geom.scrollToTop(elm, properties[\"scrollTop\"], duration, callback);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    return transits.transit = transit;\r\n\r\n});\ndefine('skylark-domx-transits/bounce',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,geom,styler,transits,transit) {\r\n\r\n    function bounce(elm, options, done ) {\r\n        var upAnim, downAnim, refValue,\r\n            // Defaults:\r\n            mode = options.mode,\r\n            hide = mode === \"hide\",\r\n            show = mode === \"show\",\r\n            direction = options.direction || \"up\",\r\n            start,\r\n            distance = options.distance,\r\n            times = options.times || 5,\r\n\r\n            // Number of internal animations\r\n            anims = times * 2 + ( show || hide ? 1 : 0 ),\r\n            speed = options.duration / anims,\r\n            easing = options.easing,\r\n\r\n            // Utility:\r\n            ref = ( direction === \"up\" || direction === \"down\" ) ? \"top\" : \"left\",\r\n            motion = ( direction === \"up\" || direction === \"left\" ),\r\n            i = 0;\r\n\r\n        //createPlaceholder(elm);\r\n\r\n        var Deferred = langx.Deferred;\r\n        var funcs = [];\r\n\r\n        refValue = styler.css(elm,ref );\r\n\r\n        // Default distance for the BIGGEST bounce is the outer Distance / 3\r\n        if ( !distance ) {\r\n            var msize = geom.size(elm);\r\n            distance = (ref === \"top\" ? msize.height : msize.width) / 3;\r\n        }\r\n\r\n        start = geom.relativePosition(elm)[ref];\r\n\r\n        if ( show ) {\r\n            downAnim = { opacity: 1 };\r\n            downAnim[ ref ] = refValue;\r\n\r\n            // If we are showing, force opacity 0 and set the initial position\r\n            // then do the \"first\" animation\r\n            styler.css(elm, \"opacity\", 0 );\r\n            styler.css(elm, ref, start + (motion ? -distance * 2 : distance * 2 ));\r\n\r\n            funcs.push(doAnimate(elm,downAnim, speed, easing));\r\n        }\r\n\r\n        // Start at the smallest distance if we are hiding\r\n        if ( hide ) {\r\n            distance = distance / Math.pow( 2, times - 1 );\r\n        }\r\n\r\n        downAnim = {};\r\n        downAnim[ ref ] = refValue;\r\n\r\n\r\n        function doAnimate(elm,properties, duration, easing) {\r\n            return function() {\r\n                var d = new Deferred();\r\n\r\n                transit(elm,properties, duration, easing ,function(){\r\n                    d.resolve();\r\n                });\r\n                return d.promise;\r\n\r\n            }\r\n        }\r\n\r\n        // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here\r\n        for ( ; i < times; i++ ) {\r\n            upAnim = {};\r\n            upAnim[ ref ] = start + ( motion ? -distance : distance) ;\r\n\r\n            funcs.push(doAnimate(elm,upAnim, speed, easing));\r\n\r\n            funcs.push(doAnimate(elm,downAnim, speed, easing));\r\n\r\n            distance = hide ? distance * 2 : distance / 2;\r\n        }\r\n\r\n        // Last Bounce when Hiding\r\n        if ( hide ) {\r\n            upAnim = { opacity: 0 };\r\n            upAnim[ ref ] = start + ( motion ? -1 * distance : distance) ;\r\n\r\n            funcs.push(doAnimate(elm,upAnim, speed, easing ));\r\n        }\r\n\r\n        funcs.push(done);\r\n        funcs.reduce(function(prev, curr, index, array) {\r\n            return prev.then(curr);\r\n        }, Deferred.resolve());\r\n\r\n        return this;\r\n    } \r\n\r\n    return transits.bounce = bounce;\r\n});\ndefine('skylark-domx-transits/emulate-transition-end',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-browser\",\r\n    \"skylark-domx-eventer\",\r\n    \"./transits\"\r\n],function(langx,browser,eventer,transits) {\r\n    \r\n    function emulateTransitionEnd(elm,duration) {\r\n        var called = false;\r\n        eventer.one(elm,'transitionEnd', function () { \r\n            called = true;\r\n        })\r\n        var callback = function () { \r\n            if (!called) {\r\n                eventer.trigger(elm,browser.support.transition.end) \r\n            }\r\n        };\r\n        setTimeout(callback, duration);\r\n        \r\n        return this;\r\n    } \r\n\r\n\r\n\r\n    return transits.emulateTransitionEnd = emulateTransitionEnd;\r\n});\ndefine('skylark-domx-transits/show',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,styler,transits,transit) {\r\n    /*   \r\n     * Display an element.\r\n     * @param {Object} elm  \r\n     * @param {String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function show(elm, speed, callback) {\r\n        styler.show(elm);\r\n        if (speed) {\r\n            if (!callback && langx.isFunction(speed)) {\r\n                callback = speed;\r\n                speed = \"normal\";\r\n            }\r\n            styler.css(elm, \"opacity\", 0)\r\n            transit(elm, { opacity: 1, scale: \"1,1\" }, speed, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    return transits.show = show;\r\n});\ndefine('skylark-domx-transits/hide',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,styler,transits,transit) {\r\n    /*   \r\n     * Hide an element.\r\n     * @param {Object} elm  \r\n     * @param {String} speed\r\n     * @param {Function} callback\r\n     */\r\n    function hide(elm, speed, callback) {\r\n        if (speed) {\r\n            if (!callback && langx.isFunction(speed)) {\r\n                callback = speed;\r\n                speed = \"normal\";\r\n            }\r\n            transit(elm, { opacity: 0, scale: \"0,0\" }, speed, function() {\r\n                styler.hide(elm);\r\n                if (callback) {\r\n                    callback.call(elm);\r\n                }\r\n            });\r\n        } else {\r\n            styler.hide(elm);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    return transits.hide = hide;\r\n});\ndefine('skylark-domx-transits/explode',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-query\",\r\n    \"./transits\",\r\n    \"./transit\",\r\n    \"./show\",\r\n    \"./hide\"\r\n],function(langx,styler,geom,noder,$,transits,transit,show,hide) {\r\n\r\n    function explode( elm,options, done ) {\r\n\r\n\t\t// Show and then visibility:hidden the element before calculating offset\r\n\t\tstyler.show(elm);\r\n\t\tstyler.css(elm, \"visibility\", \"hidden\" );\r\n\r\n\t\tvar i, j, left, top, mx, my,\r\n\t\t\trows = options.pieces ? Math.round( Math.sqrt( options.pieces ) ) : 3,\r\n\t\t\tcells = rows,\r\n\t\t\tmode = options.mode,\r\n\t\t\tshow = mode === \"show\",\r\n\t\t\toffset = geom.pagePosition(elm),\r\n\r\n\t\t\t// Width and height of a piece\r\n\t\t\tsize = geom.marginSize(elm),\r\n\t\t\twidth = Math.ceil( size.width / cells ),\r\n\t\t\theight = Math.ceil( size.height / rows ),\r\n\t\t\tpieces = [];\r\n\r\n\t\t// Children transit complete:\r\n\t\tfunction childComplete() {\r\n\t\t\tpieces.push( this );\r\n\t\t\tif ( pieces.length === rows * cells ) {\r\n\t\t\t\tanimComplete();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Clone the element for each row and cell.\r\n\t\tfor ( var i = 0; i < rows; i++ ) { // ===>\r\n\t\t\ttop = offset.top + i * height;\r\n\t\t\tmy = i - ( rows - 1 ) / 2;\r\n\r\n\t\t\tfor ( j = 0; j < cells; j++ ) { // |||\r\n\t\t\t\tleft = offset.left + j * width;\r\n\t\t\t\tmx = j - ( cells - 1 ) / 2;\r\n\r\n\t\t\t\t// Create a clone of the now hidden main element that will be absolute positioned\r\n\t\t\t\t// within a wrapper div off the -left and -top equal to size of our pieces\r\n\t\t\t\t$(elm)\r\n\t\t\t\t\t.clone()\r\n\t\t\t\t\t.appendTo( \"body\" )\r\n\t\t\t\t\t.wrap( \"<div></div>\" )\r\n\t\t\t\t\t.css( {\r\n\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\tvisibility: \"visible\",\r\n\t\t\t\t\t\tleft: -j * width,\r\n\t\t\t\t\t\ttop: -i * height\r\n\t\t\t\t\t} )\r\n\r\n\t\t\t\t\t// Select the wrapper - make it overflow: hidden and absolute positioned based on\r\n\t\t\t\t\t// where the original was located +left and +top equal to the size of pieces\r\n\t\t\t\t\t.parent()\r\n\t\t\t\t\t\t.addClass( options.explodeClass || \"ui-effects-explode\" )\r\n\t\t\t\t\t\t.css( {\r\n\t\t\t\t\t\t\tposition: \"absolute\",\r\n\t\t\t\t\t\t\toverflow: \"hidden\",\r\n\t\t\t\t\t\t\twidth: width,\r\n\t\t\t\t\t\t\theight: height,\r\n\t\t\t\t\t\t\tleft: left + ( show ? mx * width : 0 ),\r\n\t\t\t\t\t\t\ttop: top + ( show ? my * height : 0 ),\r\n\t\t\t\t\t\t\topacity: show ? 0 : 1\r\n\t\t\t\t\t\t} )\r\n\t\t\t\t\t\t.transit( {\r\n\t\t\t\t\t\t\tleft: left + ( show ? 0 : mx * width ),\r\n\t\t\t\t\t\t\ttop: top + ( show ? 0 : my * height ),\r\n\t\t\t\t\t\t\topacity: show ? 1 : 0\r\n\t\t\t\t\t\t}, options.duration || 500, options.easing, childComplete );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction animComplete() {\r\n\t\t\tstyler.css(elm, {\r\n\t\t\t\tvisibility: \"visible\"\r\n\t\t\t} );\r\n\t\t\t$( pieces ).remove();\r\n\t\t\tdone();\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\r\n\treturn transits.explode = explode;\r\n});\r\n\ndefine('skylark-domx-transits/fade',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,styler,transits,transit) {\r\n    /*   \r\n     * Adjust the opacity of an element.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {Number or String} opacity\r\n     * @param {String} easing\r\n     * @param {Function} callback\r\n     */\r\n    function fade(elm, opacity,options, callback) {\r\n        if (langx.isFunction(options)) {\r\n            callback = options;\r\n            options = {};\r\n        }\r\n        options = options || {};\r\n        \r\n        transit(elm, { opacity: opacity }, options.duration, options.easing, callback);\r\n        return this;\r\n    }\r\n\r\n\r\n    return transits.fade = fade;\r\n});\ndefine('skylark-domx-transits/fade-in',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./fade\"\r\n],function(langx,styler,transits,fadeTo) {\r\n    /*   \r\n     * Display an element by fading them to opaque.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {String} easing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeIn(elm, options, callback) {\r\n        var target = styler.css(elm, \"opacity\");\r\n        if (target > 0) {\r\n            styler.css(elm, \"opacity\", 0);\r\n        } else {\r\n            target = 1;\r\n        }\r\n        styler.show(elm);\r\n\r\n        fadeTo(elm,  target,options, callback);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    return transits.fadeIn = fadeIn;\r\n});\ndefine('skylark-domx-transits/fade-out',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./fade\"\r\n],function(langx,styler,transits,fadeTo) {\r\n    /*   \r\n     * Hide an element by fading them to transparent.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {String} easing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeOut(elm, options, callback) {\r\n\r\n        function complete() {\r\n            styler.css(elm,\"opacity\",opacity);\r\n            styler.hide(elm);\r\n            if (callback) {\r\n                callback.call(elm);\r\n            }\r\n        }\r\n\r\n        fadeTo(elm, 0,options,callback);\r\n\r\n        return this;\r\n    }\r\n\r\n    return transits.fadeOut = fadeOut;\r\n});\ndefine('skylark-domx-transits/fade-toggle',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./fade-in\",\r\n    \"./fade-out\"\r\n],function(langx,styler,transits,fadeIn,fadeOut) {\r\n\r\n    /*   \r\n     * Display or hide an element by animating its opacity.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {String} ceasing\r\n     * @param {Function} callback\r\n     */\r\n    function fadeToggle(elm, speed, easing, callback) {\r\n        if (styler.isInvisible(elm)) {\r\n            fadeIn(elm, speed, easing, callback);\r\n        } else {\r\n            fadeOut(elm, speed, easing, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    return transits.fadeToggle = fadeToggle;\r\n});\ndefine('skylark-domx-transits/pulsate',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,geom,styler,transits,transit) {\r\n\r\n\tfunction pulsate(elm, options, done ) {\r\n\t\tvar \r\n\t\t\tmode = options.mode,\r\n\t\t\tshow = mode === \"show\" || !mode,\r\n\t\t\thide = mode === \"hide\",\r\n\t\t\tshowhide = show || hide,\r\n\r\n\t\t\t// Showing or hiding leaves off the \"last\" animation\r\n\t\t\tanims = ( ( options.times || 5 ) * 2 ) + ( showhide ? 1 : 0 ),\r\n\t\t\tduration = options.duration / anims,\r\n\t\t\tanimateTo = 0,\r\n\t\t\ti = 1;\r\n\r\n\t\tif ( show || styler.isInvisible(elm) ) {\r\n\t\t\tstyler.css(elm, \"opacity\", 0 );\r\n\t\t\tstyler.show(elm);\r\n\t\t\tanimateTo = 1;\r\n\t\t}\r\n\r\n\t\t// Anims - 1 opacity \"toggles\"\r\n\r\n\t\tvar Deferred = langx.Deferred;\r\n\t\tvar funcs = [];\r\n\r\n\t\tfunction doAnimate(elm,properties, duration, ease) {\r\n\t\t\treturn function() {\r\n\t\t\t\tvar d = new Deferred();\r\n\r\n\t\t\t\ttransit( elm,properties, duration, ease ,function(){\r\n\t\t\t\t\td.resolve();\r\n\t\t\t\t});\r\n\t\t\t\treturn d.promise;\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\r\n\t\tfor ( ; i < anims; i++ ) {\r\n\t\t\tfuncs.push(doAnimate(elm,{ opacity: animateTo }, duration, options.easing ));\r\n\t\t\tanimateTo = 1 - animateTo;\r\n\t\t}\r\n\r\n\t    funcs.push(doAnimate(elm,{ opacity: animateTo }, duration, options.easing ));\r\n\r\n\t\tfuncs.push(done);\r\n\t\tfuncs.reduce(function(prev, curr, index, array) {\r\n\t  \t\treturn prev.then(curr);\r\n\t\t}, Deferred.resolve());\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\treturn transits.pulsate = pulsate;\r\n\r\n});\r\n\ndefine('skylark-domx-transits/shake',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-geom\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,geom,styler,transits,transit) {\r\n\tfunction shake(elm, options, done ) {\r\n\r\n\t\tvar i = 1,\r\n\t\t\tdirection = options.direction || \"left\",\r\n\t\t\tdistance = options.distance || 20,\r\n\t\t\ttimes = options.times || 3,\r\n\t\t\tanims = times * 2 + 1,\r\n\t\t\tspeed = Math.round( options.duration / anims ),\r\n\t\t\tref = ( direction === \"up\" || direction === \"down\" ) ? \"top\" : \"left\",\r\n\t\t\tpositiveMotion = ( direction === \"up\" || direction === \"left\" ),\r\n\t\t\tanimation0 = {},\r\n\t\t\tanimation = {},\r\n\t\t\tanimation1 = {},\r\n\t\t\tanimation2 = {};\r\n\r\n\t\tvar Deferred = langx.Deferred;\r\n\t\t\tstart = geom.relativePosition(elm)[ref],\r\n\t\t\tfuncs = [];\r\n\r\n\t\tfunction doAnimate(elm,properties, duration, ease) {\r\n\t\t\treturn function() {\r\n\t\t\t\tvar d = new Deferred();\r\n\r\n\t\t\t\ttransit(elm, properties, duration, ease ,function(){\r\n\t\t\t\t\td.resolve();\r\n\t\t\t\t});\r\n\t\t\t\treturn d.promise;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Animation\r\n\t\tanimation0[ ref ] = start;\r\n\t\tanimation[ ref ] = start + ( positiveMotion ? -1 : 1 ) * distance;\r\n\t\tanimation1[ ref ] = animation[ ref ] + ( positiveMotion ? 1 : -1 ) * distance * 2;\r\n\t\tanimation2[ ref ] = animation1[ ref ] + ( positiveMotion ? -1 : 1 ) * distance * 2;\r\n\r\n\t\t// Animate\r\n\t    funcs.push(doAnimate(elm,animation, speed, options.easing ));\r\n\r\n\t\t// Shakes\r\n\t\tfor ( ; i < times; i++ ) {\r\n\t\t    funcs.push(doAnimate(elm,animation1, speed, options.easing ));\r\n\t\t    funcs.push(doAnimate(elm,animation2, speed, options.easing ));\r\n\t\t}\r\n\r\n\t    funcs.push(doAnimate(elm,animation0, speed /2 , options.easing ));\r\n\r\n\t\tfuncs.push(done);\r\n\t\tfuncs.reduce(function(prev, curr, index, array) {\r\n\t  \t\treturn prev.then(curr);\r\n\t\t}, Deferred.resolve());\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\treturn transits.shake = shake;\r\n\r\n});\r\n\ndefine('skylark-domx-transits/slide',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,styler,transits,transit) {\r\n\r\n    function slide(elm,options,callback ) {\r\n    \tif (langx.isFunction(options)) {\r\n    \t\tcallback = options;\r\n    \t\toptions = {};\r\n    \t}\r\n    \toptions = options || {};\r\n\t\tvar direction = options.direction || \"down\",\r\n\t\t\tisHide = ( direction === \"up\" || direction === \"left\" ),\r\n\t\t\tisVert = ( direction === \"up\" || direction === \"down\" ),\r\n\t\t\tduration = options.duration || transits.speeds.normal;\r\n\r\n\r\n        // get the element position to restore it then\r\n        var position = styler.css(elm, 'position');\r\n\r\n        if (isHide) {\r\n            // active the function only if the element is visible\r\n        \tif (styler.isInvisible(elm)) {\r\n        \t\treturn this;\r\n        \t}\r\n        } else {\r\n\t        // show element if it is hidden\r\n\t        styler.show(elm);        \t\r\n\t        // place it so it displays as usually but hidden\r\n\t        styler.css(elm, {\r\n\t            position: 'absolute',\r\n\t            visibility: 'hidden'\r\n\t        });\r\n        }\r\n\r\n\r\n\r\n        if (isVert) { // up--down\r\n\t        // get naturally height, margin, padding\r\n\t        var marginTop = styler.css(elm, 'margin-top');\r\n\t        var marginBottom = styler.css(elm, 'margin-bottom');\r\n\t        var paddingTop = styler.css(elm, 'padding-top');\r\n\t        var paddingBottom = styler.css(elm, 'padding-bottom');\r\n\t        var height = styler.css(elm, 'height');\r\n\r\n\t        if (isHide) {  \t// slideup\r\n\t            // set initial css for animation\r\n\t            styler.css(elm, {\r\n\t                visibility: 'visible',\r\n\t                overflow: 'hidden',\r\n\t                height: height,\r\n\t                marginTop: marginTop,\r\n\t                marginBottom: marginBottom,\r\n\t                paddingTop: paddingTop,\r\n\t                paddingBottom: paddingBottom\r\n\t            });\r\n\r\n\t            // transit element height, margin and padding to zero\r\n\t            transit(elm, {\r\n\t                height: 0,\r\n\t                marginTop: 0,\r\n\t                marginBottom: 0,\r\n\t                paddingTop: 0,\r\n\t                paddingBottom: 0\r\n\t            }, {\r\n\t                // callback : restore the element position, height, margin and padding to original values\r\n\t                duration: duration,\r\n\t                queue: false,\r\n\t                complete: function() {\r\n\t                    styler.hide(elm);\r\n\t                    styler.css(elm, {\r\n\t                        visibility: 'visible',\r\n\t                        overflow: 'hidden',\r\n\t                        height: height,\r\n\t                        marginTop: marginTop,\r\n\t                        marginBottom: marginBottom,\r\n\t                        paddingTop: paddingTop,\r\n\t                        paddingBottom: paddingBottom\r\n\t                    });\r\n\t                    if (callback) {\r\n\t                        callback.apply(elm);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        } else {     \t// slidedown\r\n\t\t        // set initial css for animation\r\n\t\t        styler.css(elm, {\r\n\t\t            position: position,\r\n\t\t            visibility: 'visible',\r\n\t\t            overflow: 'hidden',\r\n\t\t            height: 0,\r\n\t\t            marginTop: 0,\r\n\t\t            marginBottom: 0,\r\n\t\t            paddingTop: 0,\r\n\t\t            paddingBottom: 0\r\n\t\t        });\r\n\r\n\t\t        // transit to gotten height, margin and padding\r\n\t\t        transit(elm, {\r\n\t\t            height: height,\r\n\t\t            marginTop: marginTop,\r\n\t\t            marginBottom: marginBottom,\r\n\t\t            paddingTop: paddingTop,\r\n\t\t            paddingBottom: paddingBottom\r\n\t\t        }, {\r\n\t\t            duration: duration,\r\n\t\t            complete: function() {\r\n\t\t                if (callback) {\r\n\t\t                    callback.apply(elm);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        });\r\n\r\n\t        }\r\n\r\n        } else { // left--right\r\n\t        // get naturally height, margin, padding\r\n\t        var marginLeft = styler.css(elm, 'margin-left');\r\n\t        var marginRight = styler.css(elm, 'margin-right');\r\n\t        var paddingLeft = styler.css(elm, 'padding-left');\r\n\t        var paddingRight = styler.css(elm, 'padding-right');\r\n\t        var width = styler.css(elm, 'width');\r\n\r\n\t        if (isHide) {  \t// slideleft\r\n\t            // set initial css for animation\r\n\t            styler.css(elm, {\r\n\t                visibility: 'visible',\r\n\t                overflow: 'hidden',\r\n\t                width: width,\r\n\t                marginLeft: marginLeft,\r\n\t                marginRight: marginRight,\r\n\t                paddingLeft: paddingLeft,\r\n\t                paddingRight: paddingRight\r\n\t            });\r\n\r\n\t            // transit element height, margin and padding to zero\r\n\t            transit(elm, {\r\n\t                width: 0,\r\n\t                marginLeft: 0,\r\n\t                marginRight: 0,\r\n\t                paddingLeft: 0,\r\n\t                paddingRight: 0\r\n\t            }, {\r\n\t                // callback : restore the element position, height, margin and padding to original values\r\n\t                duration: duration,\r\n\t                queue: false,\r\n\t                complete: function() {\r\n\t                    styler.hide(elm);\r\n\t                    styler.css(elm, {\r\n\t                        visibility: 'visible',\r\n\t                        overflow: 'hidden',\r\n\t                        width: width,\r\n\t                        marginLeft: marginLeft,\r\n\t                        marginRight: marginRight,\r\n\t                        paddingLeft: paddingLeft,\r\n\t                        paddingRight: paddingRight\r\n\t                    });\r\n\t                    if (callback) {\r\n\t                        callback.apply(elm);\r\n\t                    }\r\n\t                }\r\n\t            });\r\n\t        } else {     \t// slideright\r\n\t\t        // set initial css for animation\r\n\t\t        styler.css(elm, {\r\n\t\t            position: position,\r\n\t\t            visibility: 'visible',\r\n\t\t            overflow: 'hidden',\r\n\t\t            width: 0,\r\n\t\t            marginLeft: 0,\r\n\t\t            marginRight: 0,\r\n\t\t            paddingLeft: 0,\r\n\t\t            paddingRight: 0\r\n\t\t        });\r\n\r\n\t\t        // transit to gotten width, margin and padding\r\n\t\t        transit(elm, {\r\n\t\t            width: width,\r\n\t\t            marginLeft: marginLeft,\r\n\t\t            marginRight: marginRight,\r\n\t\t            paddingLeft: paddingLeft,\r\n\t\t            paddingRight: paddingRight\r\n\t\t        }, {\r\n\t\t            duration: duration,\r\n\t\t            complete: function() {\r\n\t\t                if (callback) {\r\n\t\t                    callback.apply(elm);\r\n\t\t                }\r\n\t\t            }\r\n\t\t        });\r\n\r\n\t        }       \t\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    return transits.slide = slide;\r\n\r\n});\r\n\ndefine('skylark-domx-transits/slide-down',[\r\n    \"./transits\",\r\n    \"./slide\"\r\n],function(transits,slide) {\r\n    /*   \r\n     * Display an element with a sliding motion.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     */\r\n    function slideDown(elm, duration, callback) {\r\n        return slide(elm,{\r\n            direction : \"down\",\r\n            duration : duration\r\n        },callback);\r\n    }\r\n\r\n    return transits.slideDown = slideDown;\r\n});\ndefine('skylark-domx-transits/slide-up',[\r\n    \"./transits\",\r\n    \"./slide\"\r\n],function(transits,slide) {\r\n    /*   \r\n     * Hide an element with a sliding motion.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     */\r\n    function slideUp(elm, duration, callback) {\r\n        return slide(elm,{\r\n            direction : \"up\",\r\n            duration : duration\r\n        },callback);\r\n    }\r\n\r\n\r\n\r\n    return transits.slideUp = slideUp;\r\n});\ndefine('skylark-domx-transits/slide-toggle',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-geom\",\r\n    \"./transits\",\r\n    \"./slide-down\",\r\n    \"./slide-up\"\r\n],function(langx,geom,transits,slideDown,slideUp) {\r\n\r\n    /*   \r\n     * Display or hide an element with a sliding motion.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} duration\r\n     * @param {Function} callback\r\n     */\r\n    function slideToggle(elm, duration, callback) {\r\n\r\n        // if the element is hidden, slideDown !\r\n        if (geom.height(elm) == 0) {\r\n            slideDown(elm, duration, callback);\r\n        }\r\n        // if the element is visible, slideUp !\r\n        else {\r\n            slideUp(elm, duration, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    return transits.slideToggle = slideToggle;\r\n});\ndefine('skylark-domx-transits/throb',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"skylark-domx-noder\",\r\n    \"./transits\",\r\n    \"./transit\"\r\n],function(langx,styler,noder,transits,transit) {\r\n\r\n    \r\n    /*   \r\n     * Replace an old node with the specified node.\r\n     * @param {HTMLElement} elm\r\n     * @param {Node} params\r\n     */\r\n    function throb(elm, params) {\r\n        params = params || {};\r\n\r\n        var self = this,\r\n            text = params.text,\r\n            style = params.style,\r\n            time = params.time,\r\n            callback = params.callback,\r\n            timer,\r\n\r\n            throbber = noder.createElement(\"div\", {\r\n                \"class\": params.className || \"throbber\"\r\n            }),\r\n            //_overlay = overlay(throbber, {\r\n            //    \"class\": 'overlay fade'\r\n            //}),\r\n            remove = function() {\r\n                if (timer) {\r\n                    clearTimeout(timer);\r\n                    timer = null;\r\n                }\r\n                if (throbber) {\r\n                    noder.remove(throbber);\r\n                    throbber = null;\r\n                }\r\n            },\r\n            update = function(params) {\r\n                if (params && params.text && throbber) {\r\n                    textNode.nodeValue = params.text;\r\n                }\r\n            };\r\n\r\n        if (params.style) {\r\n            styler.css(throbber,params.style);\r\n        }\r\n\r\n        //throb = noder.createElement(\"div\", {\r\n        //   \"class\": params.throb && params.throb.className || \"throb\"\r\n        //}),\r\n        //textNode = noder.createTextNode(text || \"\"),\r\n \r\n        var content = params.content ||  '<span class=\"throb\"></span>';\r\n\r\n        //throb.appendChild(textNode);\r\n        //throbber.appendChild(throb);\r\n\r\n        noder.html(throbber,content);\r\n        \r\n        elm.appendChild(throbber);\r\n\r\n        var end = function() {\r\n            remove();\r\n            if (callback) callback();\r\n        };\r\n        if (time) {\r\n            timer = setTimeout(end, time);\r\n        }\r\n\r\n        return {\r\n            throbber : throbber,\r\n            remove: remove,\r\n            update: update\r\n        };\r\n    }\r\n\r\n    return transits.throb = throb;\r\n});\ndefine('skylark-domx-transits/toggle',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-styler\",\r\n    \"./transits\",\r\n    \"./show\",\r\n    \"./hide\"\r\n],function(langx,styler,transits,show,hide) {\r\n    /*   \r\n     * Display or hide an element.\r\n     * @param {Object} elm  \r\n     * @param {Number or String} speed\r\n     * @param {Function} callbacke\r\n     */\r\n    function toggle(elm, speed, callback) {\r\n        if (styler.isInvisible(elm)) {\r\n            show(elm, speed, callback);\r\n        } else {\r\n            hide(elm, speed, callback);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    return transits.toggle = toggle;\r\n});\ndefine('skylark-domx-transits/main',[\r\n\t\"./transits\",\r\n\t\"skylark-domx-velm\",\r\n\t\"skylark-domx-query\",\r\n    \"./transit\",\r\n    \"./bounce\",\r\n    \"./emulate-transition-end\",\r\n    \"./explode\",\r\n    \"./fade-in\",\r\n    \"./fade-out\",\r\n    \"./fade\",\r\n    \"./fade-toggle\",\r\n    \"./hide\",\r\n    \"./pulsate\",\r\n    \"./shake\",\r\n    \"./show\",\r\n    \"./slide\",\r\n    \"./slide-down\",\r\n    \"./slide-toggle\",\r\n    \"./slide-up\",\r\n    \"./throb\",\r\n    \"./toggle\"\r\n],function(transits,velm,$){\r\n    // from ./transits\r\n    velm.delegate([\r\n        \"transit\",\r\n        \"emulateTransitionEnd\",\r\n        \"fadeIn\",\r\n        \"fadeOut\",\r\n        \"fade\",\r\n        \"fadeToggle\",\r\n        \"hide\",\r\n        \"scrollToTop\",\r\n        \"slideDown\",\r\n        \"slideToggle\",\r\n        \"slideUp\",\r\n        \"show\",\r\n        \"toggle\"\r\n    ], transits);\r\n\r\n    $.fn.hide =  $.wraps.wrapper_every_act(transits.hide, transits);\r\n\r\n    $.fn.transit = $.wraps.wrapper_every_act(transits.transit, transits);\r\n    $.fn.emulateTransitionEnd = $.wraps.wrapper_every_act(transits.emulateTransitionEnd, transits);\r\n\r\n    $.fn.show = $.wraps.wrapper_every_act(transits.show, transits);\r\n    $.fn.hide = $.wraps.wrapper_every_act(transits.hide, transits);\r\n    $.fn.toogle = $.wraps.wrapper_every_act(transits.toogle, transits);\r\n    $.fn.fadeTo = $.wraps.wrapper_every_act(transits.fadeTo, transits);\r\n    $.fn.fadeIn = $.wraps.wrapper_every_act(transits.fadeIn, transits);\r\n    $.fn.fadeOut = $.wraps.wrapper_every_act(transits.fadeOut, transits);\r\n    $.fn.fadeToggle = $.wraps.wrapper_every_act(transits.fadeToggle, transits);\r\n\r\n    $.fn.slideDown = $.wraps.wrapper_every_act(transits.slideDown, transits);\r\n    $.fn.slideToggle = $.wraps.wrapper_every_act(transits.slideToggle, transits);\r\n    $.fn.slideUp = $.wraps.wrapper_every_act(transits.slideUp, transits);\r\n\r\n\treturn transits;\r\n});\ndefine('skylark-domx-transits', ['skylark-domx-transits/main'], function (main) { return main; });\n\n"]}