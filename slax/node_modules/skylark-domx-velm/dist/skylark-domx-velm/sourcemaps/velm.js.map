{"version":3,"sources":["velm.js"],"names":["define","skylark","langx","noder","finder","$","map","Array","prototype","slice","VisualElement","klass","klassName","_construct","node","isString","trim","charAt","createFragment","document","getElementById","this","_elm","query","selector","elm","root","body","velm","mixin","batch","nodes","action","args","forEach","apply","partial","name","fn","props","delegate","names","context","matching","matchedName","elem","ret","concat","call","arguments","HTMLElement","isArrayLike","el","_delegator","find","descendant","attach"],"mappings":";;;;;;;AAAAA,QACI,wBACA,sBACA,qBACA,sBACA,sBACD,SAASC,EAASC,EAAOC,EAAOC,EAAQC,GACvC,IAAIC,EAAMC,MAAMC,UAAUF,IACtBG,EAAQF,MAAMC,UAAUC,MAKxBC,EAAgBR,EAAMS,OACtBC,UAAW,gBAEXC,WAAc,SAASC,GACfZ,EAAMa,SAASD,KAIXA,EAFmB,OADvBA,EAAOZ,EAAMc,KAAKF,IACTG,OAAO,GAELd,EAAMe,eAAeJ,GAAM,GAG3BK,SAASC,eAAeN,IAGvCO,KAAKC,KAAOR,KAIpBJ,EAAcF,UAAUH,EAAIK,EAAcF,UAAUe,MAAQ,SAASC,GACjE,OAAOnB,EAAEmB,EAASH,KAAKC,OAG3BZ,EAAcF,UAAUiB,IAAM,WAC1B,OAAOJ,KAAKC,MAMhB,IAAII,EAAO,IAAIhB,EAAcS,SAASQ,MAClCC,EAAO,SAASd,GACZ,OAAIA,EACO,IAAIJ,EAAcI,GAElBY,GAoInB,OAjGAxB,EAAM2B,MAAMD,GACRE,MAAO,SAASC,EAAOC,EAAQC,GAM3B,OALAF,EAAMG,QAAQ,SAASpB,GACnB,IAAIW,EAAOX,aAAgBJ,EAAiBI,EAAOc,EAAKd,GACxDW,EAAIO,GAAQG,MAAMV,EAAKQ,KAGpBZ,MAGXK,KAAM,IAAIhB,EAAcS,SAASQ,MAEjCjB,cAAeA,EAEf0B,QAAS,SAASC,EAAMC,GACpB,IAAIC,KAEJA,EAAMF,GAAQC,EAEd5B,EAAc0B,QAAQG,IAG1BC,SAAU,SAASC,EAAOC,EAAQC,GAC9B,IAAIJ,KAEJE,EAAMP,QAAQ,SAASG,GACnB,IAAIO,EAAcP,EACdM,GAAYA,EAASN,KACrBO,EAAcD,EAASN,IAE3BE,EAAMF,GAzDlB,SAAoBC,EAAII,GACpB,OAAO,WACH,IACIG,EADOxB,KACKC,KACZwB,EAAMR,EAAGH,MAAMO,GAAUG,GAAME,OAAOtC,EAAMuC,KAAKC,aAErD,GAAIH,EAAK,CACL,GAAIA,IAAQJ,EACR,OANGrB,KAQCyB,aAAeI,YACfJ,EAAM,IAAIpC,EAAcoC,GACjB5C,EAAMiD,YAAYL,KACzBA,EAAMxC,EAAI0C,KAAKF,EAAK,SAASM,GACzB,OAAIA,aAAcF,YACP,IAAIxC,EAAc0C,GAElBA,KAM3B,OAAON,GAkCWO,CAAWX,EAAQE,GAAcF,KAGnDhC,EAAc0B,QAAQG,MAK9BX,EAAKY,UACD,WACA,YACA,WACA,aACA,OACA,UACA,aACA,YACA,UACA,cACA,eACA,SACA,kBACA,mBACA,YACDpC,GAMHwB,EAAK0B,KAAO,SAAS9B,GACjB,MAAiB,SAAbA,EACOH,KAAKK,KAELL,KAAKK,KAAK6B,WAAW/B,IAMpCI,EAAKY,UACD,QACA,SACA,SACA,QACA,WACA,WACA,QACA,OACA,YACA,aACA,eACA,WACA,WACA,UACA,SACA,cACA,UACA,UACA,QACA,WACA,UACA,eACA,UACDrC,GAGIF,EAAQuD,OAAO,YAAa5B","file":"../velm.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\",\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-noder\",\r\n    \"skylark-domx-finder\",\r\n    \"skylark-domx-query\"\r\n], function(skylark, langx, noder, finder, $) {\r\n    var map = Array.prototype.map,\r\n        slice = Array.prototype.slice;\r\n    /*\r\n     * VisualElement is a skylark class type wrapping a visule dom node,\r\n     * provides a number of prototype methods and supports chain calls.\r\n     */\r\n    var VisualElement = langx.klass({\r\n        klassName: \"VisualElement\",\r\n\r\n        \"_construct\": function(node) {\r\n            if (langx.isString(node)) {\r\n                node = langx.trim(node);\r\n                if (node.charAt(0) === \"<\") {\r\n                    //html\r\n                    node = noder.createFragment(node)[0];\r\n                } else {\r\n                    // id\r\n                    node = document.getElementById(node);\r\n                }\r\n            }\r\n            this._elm = node;\r\n        }\r\n    });\r\n\r\n    VisualElement.prototype.$ = VisualElement.prototype.query = function(selector) {\r\n        return $(selector,this._elm);\r\n    };\r\n\r\n    VisualElement.prototype.elm = function() {\r\n        return this._elm;\r\n    };\r\n\r\n    /*\r\n     * the VisualElement object wrapping document.body\r\n     */\r\n    var root = new VisualElement(document.body),\r\n        velm = function(node) {\r\n            if (node) {\r\n                return new VisualElement(node);\r\n            } else {\r\n                return root;\r\n            }\r\n        };\r\n    /*\r\n     * Extend VisualElement prototype with wrapping the specified methods.\r\n     * @param {ArrayLike} fn\r\n     * @param {Object} context\r\n     */\r\n    function _delegator(fn, context) {\r\n        return function() {\r\n            var self = this,\r\n                elem = self._elm,\r\n                ret = fn.apply(context, [elem].concat(slice.call(arguments)));\r\n\r\n            if (ret) {\r\n                if (ret === context) {\r\n                    return self;\r\n                } else {\r\n                    if (ret instanceof HTMLElement) {\r\n                        ret = new VisualElement(ret);\r\n                    } else if (langx.isArrayLike(ret)) {\r\n                        ret = map.call(ret, function(el) {\r\n                            if (el instanceof HTMLElement) {\r\n                                return new VisualElement(el);\r\n                            } else {\r\n                                return el;\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n            return ret;\r\n        };\r\n    }\r\n\r\n    langx.mixin(velm, {\r\n        batch: function(nodes, action, args) {\r\n            nodes.forEach(function(node) {\r\n                var elm = (node instanceof VisualElement) ? node : velm(node);\r\n                elm[action].apply(elm, args);\r\n            });\r\n\r\n            return this;\r\n        },\r\n\r\n        root: new VisualElement(document.body),\r\n\r\n        VisualElement: VisualElement,\r\n\r\n        partial: function(name, fn) {\r\n            var props = {};\r\n\r\n            props[name] = fn;\r\n\r\n            VisualElement.partial(props);\r\n        },\r\n\r\n        delegate: function(names, context,matching) {\r\n            var props = {};\r\n\r\n            names.forEach(function(name) {\r\n                var matchedName = name;\r\n                if (matching && matching[name]) {\r\n                    matchedName = matching[name];\r\n                } \r\n                props[name] = _delegator(context[matchedName], context);\r\n            });\r\n\r\n            VisualElement.partial(props);\r\n        }\r\n    });\r\n\r\n    // from ./finder\r\n    velm.delegate([\r\n        \"ancestor\",\r\n        \"ancestors\",\r\n        \"children\",\r\n        \"descendant\",\r\n        \"find\",\r\n        \"findAll\",\r\n        \"firstChild\",\r\n        \"lastChild\",\r\n        \"matches\",\r\n        \"nextSibling\",\r\n        \"nextSiblings\",\r\n        \"parent\",\r\n        \"previousSibling\",\r\n        \"previousSiblings\",\r\n        \"siblings\"\r\n    ], finder);\r\n\r\n    /*\r\n     * find a dom element matched by the specified selector.\r\n     * @param {String} selector\r\n     */\r\n    velm.find = function(selector) {\r\n        if (selector === \"body\") {\r\n            return this.root;\r\n        } else {\r\n            return this.root.descendant(selector);\r\n        }\r\n    };\r\n\r\n\r\n    // from ./noder\r\n    velm.delegate([\r\n        \"after\",\r\n        \"append\",\r\n        \"before\",\r\n        \"clone\",\r\n        \"contains\",\r\n        \"contents\",\r\n        \"empty\",\r\n        \"html\",\r\n        \"isChildOf\",\r\n        \"isDocument\",\r\n        \"isInDocument\",\r\n        \"isWindow\",\r\n        \"ownerDoc\",\r\n        \"prepend\",\r\n        \"remove\",\r\n        \"removeChild\",\r\n        \"replace\",\r\n        \"reverse\",\r\n        \"throb\",\r\n        \"traverse\",\r\n        \"wrapper\",\r\n        \"wrapperInner\",\r\n        \"unwrap\"\r\n    ], noder);\r\n\r\n\r\n    return skylark.attach(\"domx.velm\", velm);\r\n});"]}