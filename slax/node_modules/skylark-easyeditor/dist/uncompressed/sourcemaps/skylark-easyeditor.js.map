{"version":3,"sources":["skylark-easyeditor.js"],"names":[],"mappingsfile":"../skylark-easyeditor.js","sourcesContent":["define('skylark-easyeditor/EasyEditor',[\r\n  \"skylark-langx/skylark\",\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-finder\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-domx-plugins-base\"\r\n],function(skylark, langx, browser, noder, eventer,finder, datax,$,   plugins) {\r\n\r\n\r\n    'use strict';\r\n\r\n\r\n  \tvar EasyEditor =  plugins.Plugin.inherit({\r\n\t    klassName : \"EasyEditor\",\r\n\t   \r\n\t    _construct : function( element, options ){\r\n\t        this.elem = element;\r\n\t        options = options || {};\r\n\t        this.className = options.className || 'easyeditor';\r\n\r\n\t        // 'bold', 'italic', 'link', 'h2', 'h3', 'h4', 'alignleft', 'aligncenter', 'alignright', 'quote', 'code', 'list', 'x', 'source'\r\n\t        var defaultButtons = ['bold', 'italic', 'link', 'h2', 'h3', 'h4', 'alignleft', 'aligncenter', 'alignright'];\r\n\t        this.buttons = options.buttons || defaultButtons;\r\n\t        this.buttonsHtml = options.buttonsHtml || null;\r\n\t        this.overwriteButtonSettings = options.overwriteButtonSettings || null;\r\n\t        this.css = options.css || null;\r\n\t        this.onLoaded = typeof options.onLoaded === 'function' ? options.onLoaded : null;\r\n\t        this.randomString = \"cls\"+Math.random().toString(36).substring(7);\r\n\t        this.theme = options.theme || null;\r\n\t        this.dropdown = options.dropdown || {};\r\n\t        this.characterLimit = options.characterLimit || null;\r\n\t        this.characterLimitText = options.characterLimitText || null;\r\n\t        this.characterLimitPreventKeypress = options.characterLimitPreventKeypress || false;\r\n\r\n\t        this.attachEvents();\r\n\t    },\r\n\r\n\t    // initialize\r\n\t    attachEvents: function() {\r\n\t        this.bootstrap();\r\n\t        this.addToolbar();\r\n\t        this.handleKeypress();\r\n\t        this.handleResizeImage();\r\n\t        this.utils();\r\n\r\n\t        if(this.onLoaded !== null) {\r\n\t            this.onLoaded.call(this, this);\r\n\t        }\r\n\t        \r\n\t        if (this.characterLimit) {\r\n\t            this.enableCharacterLimit();\r\n\t        }\r\n\t    },\r\n\r\n\t    // destory editor\r\n\t    detachEvents : function() {\r\n\t        var _this = this;\r\n\t        var $container = $(_this.elem).closest('.' + _this.className +'-wrapper');\r\n\t        var $toolbar = $container.find('.' + _this.className +'-toolbar');\r\n\r\n\t        $toolbar.remove();\r\n\t        $(_this.elem).removeClass(_this.className).removeAttr('contenteditable').unwrap();\r\n\t    },\r\n\r\n\t    // Adding necessary classes and attributes in editor\r\n\t    bootstrap : function() {\r\n\t        var _this = this;\r\n\t        var tag = $(_this.elem).prop('tagName').toLowerCase();\r\n\r\n\t        if(tag === 'textarea' || tag === 'input') {\r\n\t            var placeholderText = $(_this.elem).attr('placeholder') || '';\r\n\r\n\t            var marginTop = $(_this.elem).css('marginTop') || 0;\r\n\t            var marginBottom = $(_this.elem).css('marginBottom') || 0;\r\n\t            var style = '';\r\n\t            if(marginTop.length > 0 || marginBottom.length > 0) {\r\n\t                style = ' style=\"margin-top: ' + marginTop + '; margin-bottom: ' + marginBottom + '\" ';\r\n\t            }\r\n\r\n\t            $(_this.elem).after('<div id=\"' + _this.randomString + '-editor\" placeholder=\"' + placeholderText + '\">' + $(_this.elem).val() + '</div>');\r\n\t            $(_this.elem).hide().addClass(_this.randomString + '-bind');\r\n\r\n\t            _this.elem = document.getElementById(_this.randomString + '-editor');\r\n\t            $(_this.elem).attr('contentEditable', true).addClass(_this.className).wrap('<div class=\"'+ _this.className +'-wrapper\"' + style + '></div>');\r\n\t        }\r\n\t        else {\r\n\t            $(_this.elem).attr('contentEditable', true).addClass(_this.className).wrap('<div class=\"'+ _this.className +'-wrapper\"></div>');\r\n\t        }\r\n\r\n\t        this.$wrapperElem = $(_this.elem).parent();\r\n\r\n\t        if(_this.css !== null) {\r\n\t            $(_this.elem).css(_this.css);\r\n\t        }\r\n\r\n\t        this.containerClass = '.' + _this.className +'-wrapper';\r\n\r\n\t        if(typeof _this.elem === 'string') {\r\n\t            _this.elem = $(_this.elem).get(0);\r\n\t        }\r\n\r\n\t        if(_this.theme !== null) {\r\n\t            $(_this.elem).closest(_this.containerClass).addClass(_this.theme);\r\n\t        }\r\n\t    },\r\n\r\n\t    // enter and paste key handler\r\n\t    handleKeypress : function(){\r\n\t        var _this = this;\r\n\r\n\t        $(_this.elem).keydown(function(e) {\r\n\t            if(e.keyCode === 13 && _this.isSelectionInsideElement('li') === false) {\r\n\t                e.preventDefault();\r\n\r\n\t                if(e.shiftKey === true) {\r\n\t                    document.execCommand('insertHTML', false, '<br>');\r\n\t                }\r\n\t                else {\r\n\t                    document.execCommand('insertHTML', false, '<br><br>');\r\n\t                }\r\n\r\n\t                return false;\r\n\t            }\r\n\t        });\r\n\r\n\t        _this.elem.addEventListener('paste', function(e) {\r\n\t            e.preventDefault();\r\n\t            var text = e.clipboardData.getData('text/plain').replace(/\\n/ig, '<br>');\r\n\t            document.execCommand('insertHTML', false, text);\r\n\t        });\r\n\r\n\t    },\r\n\r\n\t    isSelectionInsideElement : function(tagName) {\r\n\t        var sel, containerNode;\r\n\t        tagName = tagName.toUpperCase();\r\n\t        if (window.getSelection) {\r\n\t            sel = window.getSelection();\r\n\t            if (sel.rangeCount > 0) {\r\n\t                containerNode = sel.getRangeAt(0).commonAncestorContainer;\r\n\t            }\r\n\t        } else if ( (sel = document.selection) && sel.type != \"Control\" ) {\r\n\t            containerNode = sel.createRange().parentElement();\r\n\t        }\r\n\t        while (containerNode) {\r\n\t            if (containerNode.nodeType == 1 && containerNode.tagName == tagName) {\r\n\t                return true;\r\n\t            }\r\n\t            containerNode = containerNode.parentNode;\r\n\t        }\r\n\t        return false;\r\n\t    },\r\n\r\n\t    // adding toolbar\r\n\t    addToolbar : function(){\r\n\t        var _this = this;\r\n\r\n\t        $(_this.elem).before('<div class=\"'+ _this.className +'-toolbar\"><ul></ul></div>');\r\n\t        this.$toolbarContainer = this.$wrapperElem.find('.' + _this.className +'-toolbar');\r\n\r\n\t        this.populateButtons();\r\n\t    },\r\n\r\n\t    // inejct button events\r\n\t    injectButton : function(settings){\r\n\t        var _this = this;\r\n\r\n\t        // overwritting default button settings\r\n\t        if(_this.overwriteButtonSettings !== null && _this.overwriteButtonSettings[settings.buttonIdentifier] !== undefined) {\r\n\t            var newSettings = langx.extend({}, settings, _this.overwriteButtonSettings[settings.buttonIdentifier]);\r\n\t            settings = newSettings;\r\n\t        }\r\n\r\n\t        // if button html exists overwrite default button html\r\n\t        if(_this.buttonsHtml !== null && _this.buttonsHtml[settings.buttonIdentifier] !== undefined) {\r\n\t            settings.buttonHtml = _this.buttonsHtml[settings.buttonIdentifier];\r\n\t        }\r\n\r\n\t        // if buttonTitle parameter exists\r\n\t        var buttonTitle;\r\n\t        if(settings.buttonTitle) {\r\n\t            buttonTitle = settings.buttonTitle;\r\n\t        }\r\n\t        else {\r\n\t            buttonTitle = settings.buttonIdentifier.replace(/\\W/g, ' ');\r\n\t        }\r\n\r\n\t        // adding button html\r\n\t        if(settings.buttonHtml) {\r\n\t            if(settings.childOf !== undefined) {\r\n\t                var $parentContainer = _this.$toolbarContainer.find('.toolbar-' + settings.childOf).parent('li');\r\n\r\n\t                if($parentContainer.find('ul').length === 0) {\r\n\t                    $parentContainer.append('<ul></ul>');\r\n\t                }\r\n\r\n\t                $parentContainer = $parentContainer.find('ul');\r\n\t                $parentContainer.append('<li><button type=\"button\" class=\"toolbar-'+ settings.buttonIdentifier +'\" title=\"'+ buttonTitle +'\">'+ settings.buttonHtml +'</button></li>');\r\n\t            }\r\n\t            else {\r\n\t                _this.$toolbarContainer.children('ul').append('<li><button type=\"button\" class=\"toolbar-'+ settings.buttonIdentifier +'\" title=\"'+ buttonTitle +'\">'+ settings.buttonHtml +'</button></li>');\r\n\t            }\r\n\t        }\r\n\r\n\t        // bind click event\r\n\t        if(typeof settings.clickHandler === 'function') {\r\n\t            $(_this.elem).closest(_this.containerClass).on('click', '.toolbar-'+ settings.buttonIdentifier, function(event){\r\n\t                if(typeof settings.hasChild !== undefined && settings.hasChild === true) {\r\n\t                    event.stopPropagation();\r\n\t                }\r\n\t                else {\r\n\t                    event.preventDefault();\r\n\t                }\r\n\r\n\t                settings.clickHandler.call(this, this);\r\n\t                $(_this.elem).trigger('keyup');\r\n\t            });\r\n\t        }\r\n\t    },\r\n\r\n\t    // open dropdown\r\n\t    openDropdownOf : function(identifier){\r\n\t        var _this = this;\r\n\t        $(_this.elem).closest(_this.containerClass).find('.toolbar-' + identifier).parent().children('ul').show();\r\n\t    },\r\n\r\n\t    // bidning all buttons\r\n\t    populateButtons : function(){\r\n\t        var _this = this;\r\n\r\n\t        langx.each(_this.buttons, function(index, button) {\r\n\t            if(typeof _this[button] === 'function'){\r\n\t                _this[button]();\r\n\t            }\r\n\t        });\r\n\r\n\t    },\r\n\r\n\t    // allowing resizing image\r\n\t    handleResizeImage : function(){\r\n\t        var _this = this;\r\n\r\n\t        $('html').on('click', _this.containerClass + ' figure', function(event) {\r\n\t            event.stopPropagation();\r\n\t            $(this).addClass('is-resizable');\r\n\t        });\r\n\r\n\t        $('html').on('mousemove', _this.containerClass + ' figure.is-resizable', function(event) {\r\n\t            $(this).find('img').css({ 'width' : $(this).width() + 'px' });\r\n\t        });\r\n\r\n\t        $(document).click(function() {\r\n\t            $(_this.elem).find('figure').removeClass('is-resizable');\r\n\t        });\r\n\t    },\r\n\r\n\t    // get selection\r\n\t    getSelection : function(){\r\n\t        if (window.getSelection) {\r\n\t            var selection = window.getSelection();\r\n\r\n\t            if (selection.rangeCount) {\r\n\t                return selection;\r\n\t            }\r\n\t        }\r\n\r\n\t        return false;\r\n\t    },\r\n\r\n\t    // remove formatting\r\n\t    removeFormatting : function(arg){\r\n\t        var _this = this;\r\n\t        var inFullArea = arg.inFullArea;\r\n\r\n\t        if(_this.isSelectionOutsideOfEditor() === true) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        if(inFullArea === false) {\r\n\t            var selection = _this.getSelection();\r\n\t            var selectedText = selection.toString();\r\n\r\n\t            if(selection && selectedText.length > 0) {\r\n\r\n\t                var range = selection.getRangeAt(0);\r\n\t                var $parent = $(range.commonAncestorContainer.parentNode);\r\n\r\n\t                if($parent.attr('class') === _this.className || $parent.attr('class') === _this.className + '-wrapper') {\r\n\t                    var node = document.createElement('span');\r\n\t                    $(node).attr('data-value', 'temp').html(selectedText.replace(/\\n/ig, '<br>'));\r\n\t                    range.deleteContents();\r\n\t                    range.insertNode(node);\r\n\r\n\t                    $('[data-value=\"temp\"]').contents().unwrap();\r\n\t                }\r\n\t                else {\r\n\r\n\t                    var topMostParent;\r\n\t                    var hasParentNode = false;\r\n\t                    langx.each($parent.parentsUntil(_this.elem), function(index, el) {\r\n\t                        topMostParent = el;\r\n\t                        hasParentNode = true;\r\n\t                    });\r\n\r\n\t                    if(hasParentNode === true) {\r\n\t                        $(topMostParent).html($(topMostParent).text().replace(/\\n/ig, '<br>')).contents().unwrap();\r\n\t                    }\r\n\t                    else {\r\n\t                        $parent.contents().unwrap();\r\n\t                    }\r\n\r\n\t                }\r\n\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            $(_this.elem).html($(_this.elem).text().replace(/\\n/ig, '<br>'));\r\n\t        }\r\n\r\n\t        // _this.removeEmptyTags();\r\n\t    },\r\n\r\n\t    // removing empty tags\r\n\t    removeEmptyTags : function(){\r\n\t        var _this = this;\r\n\t        $(_this.elem).html( $(_this.elem).html().replace(/(<(?!\\/)[^>]+>)+(<\\/[^>]+>)+/, '') );\r\n\t    },\r\n\r\n\t    // remove block elemenet from selection\r\n\t    removeBlockElementFromSelection : function(selection, removeBr){\r\n\t        var _this = this;\r\n\t        var result;\r\n\r\n\t        removeBr = removeBr === undefined ? false : removeBr;\r\n\t        var removeBrNode = '';\r\n\t        if(removeBr === true) {\r\n\t            removeBrNode = ', br';\r\n\t        }\r\n\r\n\t        var range = selection.getRangeAt(0);\r\n\t        var selectedHtml = range.cloneContents();\r\n\t        var temp = document.createElement('temp');\r\n\t        $(temp).html(selectedHtml);\r\n\t        $(temp).find('h1, h2, h3, h4, h5, h6, p, div' + removeBrNode).each(function() { $(this).replaceWith(this.childNodes); });\r\n\t        result = $(temp).html();\r\n\r\n\t        return result;\r\n\t    },\r\n\r\n\t    // wrap selction with a tag\r\n\t    wrapSelectionWithNodeName : function(arg){\r\n\t        var _this = this;\r\n\t        if(_this.isSelectionOutsideOfEditor() === true) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        var node = {\r\n\t            name: 'span',\r\n\t            blockElement: false,\r\n\t            style: null,\r\n\t            class: null,\r\n\t            attribute: null,\r\n\t            keepHtml: false\r\n\t        };\r\n\r\n\t        if(typeof arg === 'string') {\r\n\t            node.name = arg;\r\n\t        }\r\n\t        else {\r\n\t            node.name = arg.nodeName || node.name;\r\n\t            node.blockElement = arg.blockElement || node.blockElement;\r\n\t            node.style = arg.style || node.style;\r\n\t            node.class = arg.class || node.class;\r\n\t            node.attribute = arg.attribute || node.attribute;\r\n\t            node.keepHtml = arg.keepHtml || node.keepHtml;\r\n\t        }\r\n\r\n\t        var selection = _this.getSelection();\r\n\r\n\t        if(selection && selection.toString().length > 0 && selection.rangeCount) {\r\n\t            // checking if already wrapped\r\n\t            var isWrapped = _this.isAlreadyWrapped(selection, node);\r\n\r\n\t            // wrap node\r\n\t            var range = selection.getRangeAt(0).cloneRange();\r\n\t            var tag = document.createElement(node.name);\r\n\r\n\t                // adding necessary attribute to tag\r\n\t                if(node.style !== null || node.class !== null || node.attribute !== null) {\r\n\t                    tag = _this.addAttribute(tag, node);\r\n\t                }\r\n\r\n\t            // if selection contains html, surround contents has some problem with pre html tag and raw text selection\r\n\t            if(_this.selectionContainsHtml(range)) {\r\n\t                range = selection.getRangeAt(0);\r\n\r\n\t                if(node.keepHtml === true) {\r\n\t                    var clonedSelection = range.cloneContents();\r\n\t                    var div = document.createElement('div');\r\n\t                    div.appendChild(clonedSelection);\r\n\t                    $(tag).html(div.innerHTML);\r\n\t                }\r\n\t                else {\r\n\t                    tag.textContent = selection.toString();\r\n\t                }\r\n\r\n\t                range.deleteContents();\r\n\t                range.insertNode(tag);\r\n\r\n\t                if(range.commonAncestorContainer.localName === node.name) {\r\n\t                    $(range.commonAncestorContainer).contents().unwrap();\r\n\t                    _this.removeEmptyTags();\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                range.surroundContents(tag);\r\n\t                selection.removeAllRanges();\r\n\t                selection.addRange(range);\r\n\t            }\r\n\r\n\t            if(isWrapped === true) {\r\n\t                _this.removeWrappedDuplicateTag(tag);\r\n\t            }\r\n\r\n\t            _this.removeEmptyTags();\r\n\t            selection.removeAllRanges();\r\n\t        }\r\n\t    },\r\n\r\n\t    // wrap selection with unordered list\r\n\t    wrapSelectionWithList : function(tagname){\r\n\t        var _this = this;\r\n\t        tagname = tagname || 'ul';\r\n\r\n\t        // preventing outside selection\r\n\t        if(_this.isSelectionOutsideOfEditor() === true) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        // if text selected\r\n\t        var selection = _this.getSelection();\r\n\t        if(selection && selection.toString().length > 0 && selection.rangeCount) {\r\n\t            var selectedHtml = _this.removeBlockElementFromSelection(selection, true);\r\n\t            var listArray = selectedHtml.split('\\n').filter(function(v){return v!=='';});\r\n\t            var wrappedListHtml = langx.map(listArray, function(item) {\r\n\t                return '<li>' + langx.trim(item) + '</li>';\r\n\t            });\r\n\r\n\t            var node = document.createElement(tagname);\r\n\t            $(node).html(wrappedListHtml);\r\n\r\n\t            var range = selection.getRangeAt(0);\r\n\t            range.deleteContents();\r\n\t            range.insertNode(node);\r\n\r\n\t            selection.removeAllRanges();\r\n\t        }\r\n\r\n\t    },\r\n\r\n\t    // if selection contains html tag, surround content fails if selection contains html\r\n\t    selectionContainsHtml : function(range){\r\n\t        var _this = this;\r\n\t        if(range.startContainer.parentNode.className === _this.className + '-wrapper') return false;\r\n\t        else return true;\r\n\t    },\r\n\r\n\t    // if already wrapped with same tag\r\n\t    isAlreadyWrapped : function(selection, node){\r\n\t        var _this = this;\r\n\t        var range = selection.getRangeAt(0);\r\n\t        var el = $(range.commonAncestorContainer);\r\n\t        var result = false;\r\n\r\n\t        if( el.parent().prop('tagName').toLowerCase() === node.name && el.parent().hasClass(_this.className) === false ) {\r\n\t            result = true;\r\n\t        }\r\n\t        else if(node.blockElement === true) {\r\n\t            langx.each(el.parentsUntil(_this.elem), function(index, el) {\r\n\t                var tag = el.tagName.toLowerCase();\r\n\t                if( langx.inArray(tag, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']) !== -1 ) {\r\n\t                    result = true;\r\n\t                }\r\n\t            });\r\n\t        }\r\n\t        else {\r\n\t            langx.each(el.parentsUntil(_this.elem), function(index, el) {\r\n\t                var tag = el.tagName.toLowerCase();\r\n\t                if( tag === node.name ) {\r\n\t                    result = true;\r\n\t                }\r\n\t            });\r\n\t        }\r\n\r\n\t        return result;\r\n\t    },\r\n\r\n\t    // remove wrap if already wrapped with same tag\r\n\t    removeWrappedDuplicateTag : function(tag){\r\n\t        var _this = this;\r\n\t        var tagName = tag.tagName;\r\n\r\n\t        $(tag).unwrap();\r\n\r\n\t        if($(tag).prop('tagName') === tagName && $(tag).parent().hasClass(_this.className) === false && $(tag).parent().hasClass(_this.className + '-wrapper')) {\r\n\t            $(tag).unwrap();\r\n\t        }\r\n\t    },\r\n\r\n\t    // adding attribute in tag\r\n\t    addAttribute : function(tag, node){\r\n\t        if(node.style !== null) {\r\n\t            $(tag).attr('style', node.style);\r\n\t        }\r\n\r\n\t        if(node.class !== null) {\r\n\t            $(tag).addClass(node.class);\r\n\t        }\r\n\r\n\t        if(node.attribute !== null) {\r\n\t            if(langx.isArray(node.attribute) === true) {\r\n\t                if(langx.isArray(node.attribute[0]) !== true){\r\n\t                    node.attribute[0] = [node.attribute[0], node.attribute[1]];\r\n\t                }\r\n\t                langx.each(node.attribute,function(index,pair){\r\n\t                    $(tag).attr(pair[0], pair[1]);\r\n\t                });\r\n\t            }\r\n\t            else {\r\n\t                $(tag).attr(node.attribute);\r\n\t            }\r\n\t        }\r\n\r\n\t        return tag;\r\n\t    },\r\n\r\n\t    // insert a node into cursor point in editor\r\n\t    insertAtCaret : function(node){\r\n\t        var _this = this;\r\n\t        if(_this.isSelectionOutsideOfEditor() === true) {\r\n\t            return false;\r\n\t        }\r\n\r\n\t        if(_this.getSelection()) {\r\n\t            var range = _this.getSelection().getRangeAt(0);\r\n\t            range.insertNode(node);\r\n\t        }\r\n\t        else {\r\n\t            $(node).appendTo(_this.elem);\r\n\t        }\r\n\t    },\r\n\r\n\t    // checking if selection outside of editor or not\r\n\t    isSelectionOutsideOfEditor : function(){\r\n\t        return !this.elementContainsSelection(this.elem);\r\n\t    },\r\n\r\n        isActive : function(){\r\n            //return false;\r\n            return this.elementContainsSelection(this.elem);\r\n        },\r\n\r\n        readonly : function(readonly) {\r\n            if (readonly === undefined) {\r\n                return $(this.elem).attr('contentEditable');\r\n            } else {\r\n                $(this.elem).attr('contentEditable', readonly && true);\r\n                return this;\r\n            }\r\n        },\r\n    \r\n\r\n\t    // node contains in containers or not\r\n\t    isOrContains : function(node, container) {\r\n\t        while (node) {\r\n\t            if (node === container) {\r\n\t                return true;\r\n\t            }\r\n\t            node = node.parentNode;\r\n\t        }\r\n\t        return false;\r\n\t    },\r\n\r\n\t    // selected text is inside container\r\n\t    elementContainsSelection : function(el) {\r\n\t        var _this = this;\r\n\t        var sel;\r\n\t        if (window.getSelection) {\r\n\t            sel = window.getSelection();\r\n\t            if (sel.rangeCount > 0) {\r\n\t                for (var i = 0; i < sel.rangeCount; ++i) {\r\n\t                    if (!_this.isOrContains(sel.getRangeAt(i).commonAncestorContainer, el)) {\r\n\t                        return false;\r\n\t                    }\r\n\t                }\r\n\t                return true;\r\n\t            }\r\n\t        } else if ( (sel = document.selection) && sel.type !== \"Control\") {\r\n\t            return _this.isOrContains(sel.createRange().parentElement(), el);\r\n\t        }\r\n\t        return false;\r\n\t    },\r\n\r\n\t    // insert html chunk into editor's temp tag\r\n\t    insertHtml : function(html){\r\n\t        var _this = this;\r\n\t        $(_this.elem).find('temp').html(html);\r\n\t    },\r\n\r\n\t    // utility of editor\r\n\t    utils : function(){\r\n\t        var _this = this;\r\n\r\n\t        $('html').on('click', '.'+ _this.className +'-modal-close', function(event) {\r\n\t            event.preventDefault();\r\n\t            _this.closeModal('#' + $(this).closest('.'+ _this.className + '-modal').attr('id'));\r\n\t        });\r\n\t        \r\n\t        // binding value in textarea if present\r\n\t        if( $('.' + _this.randomString + '-bind').length > 0 ) {\r\n\t            var bindData;\r\n\t            $('html').on('click keyup', _this.elem, function() {\r\n\t                var el = _this.elem;\r\n\t                clearTimeout(bindData);\r\n\t                bindData = setTimeout(function(){ $('.' + _this.randomString + '-bind').html( $(el).html() ); }, 250);\r\n\t            });\r\n\t        }\r\n\r\n\t        $(document).click(function(event) {\r\n\t            $('.' + _this.className).closest('.' + _this.className + '-wrapper').find('.' + _this.className + '-toolbar > ul > li > ul').hide();\r\n\t        });\r\n\t    },\r\n\t    \r\n\t    // Get value of current easy editor\r\n\t    getValue : function() {\r\n\t        var _this = this;\r\n\t        \r\n\t        var html = $(_this.elem).html();\r\n\t        var plainText = $(_this.elem).text();\r\n\t        var characterCount = plainText.length;\r\n\t        var wordCount = plainText.trim().split(/\\s+/).length;\r\n\t        \r\n\t        return {\r\n\t            html: html,\r\n\t            plainText: plainText,\r\n\t            characterCount: characterCount,\r\n\t            wordCount: wordCount\r\n\t        };\r\n\t    },\r\n\t    \r\n\t    \r\n\t    // Enable character limit\r\n\t    enableCharacterLimit : function() {\r\n\t        var _this = this;\r\n\t        \r\n\t        var currentCharacterCount = _this.characterLimit - _this.getValue().characterCount;\r\n\t        $(_this.elem).after('<div class=\"'+ _this.className +'-character-remaining '+ ((currentCharacterCount <= 0) ? 'is-invalid' : 'is-valid') +'\">'+ (_this.characterLimitText ? _this.characterLimitText + ' ' + currentCharacterCount : currentCharacterCount) +'</div>');\r\n\t        \r\n\t        $('html').on('keyup', _this.elem, function(){\r\n\t            var val = _this.getValue();\r\n\t            var remainingCount = _this.characterLimit - val.characterCount;\r\n\t            var $dom = $(_this.containerClass).find('[class*=\"-character-remaining\"]');\r\n\t            \r\n\t            if (_this.characterLimitText) {\r\n\t                $dom.text(_this.characterLimitText + ' ' + remainingCount);\r\n\t            } else {\r\n\t                $dom.text(remainingCount);\r\n\t            }\r\n\t            \r\n\t            if (remainingCount <= 0) {\r\n\t                $dom.removeClass('is-valid').addClass('is-invalid');\r\n\t            } else {\r\n\t                $dom.removeClass('is-invalid').addClass('is-valid');\r\n\t            }\r\n\t        });\r\n\t        \r\n\t        $('html').on('keypress', _this.elem, function(){\r\n\t            var val = _this.getValue();\r\n\t            \r\n\t            if (_this.characterLimitPreventKeypress && _this.characterLimit <= val.characterCount) {\r\n\t                return false;\r\n\t            }\r\n\t        });\r\n\t    },\r\n\t    \r\n\r\n\t    // youtube video id from url\r\n\t    getYoutubeVideoIdFromUrl : function(url){\r\n\t        if(url.length === 0) return false;\r\n\t        var videoId = '';\r\n\t        url = url.replace(/(>|<)/gi,'').split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\r\n\t        if(url[2] !== undefined) {\r\n\t            videoId = url[2].split(/[^0-9a-z_\\-]/i);\r\n\t            videoId = videoId[0];\r\n\t        }\r\n\t        else {\r\n\t            videoId = url;\r\n\t        }\r\n\t        return videoId;\r\n\t    },\r\n\r\n\t    // opening modal window\r\n\t    openModal : function(selector){\r\n\t        var temp = document.createElement('temp');\r\n\t        temp.textContent = '.';\r\n\t        this.insertAtCaret(temp);\r\n\r\n\t        $(selector).removeClass('is-hidden');\r\n\t    },\r\n\r\n\t    // closing modal window\r\n\t    closeModal : function(selector){\r\n\t        var _this = this;\r\n\r\n\t        $(selector).addClass('is-hidden').find('input').val('');\r\n\t        $(selector).find('.' + _this.className + '-modal-content-body-loader').css('width', '0');\r\n\t        var $temp = $(this.elem).find('temp');\r\n\r\n\t        if($temp.html() === '.') {\r\n\t            $temp.remove();\r\n\t        }\r\n\t        else {\r\n\t            $temp.contents().unwrap();\r\n\t        }\r\n\r\n\t        $(this.elem).focus();\r\n\t    },\r\n\r\n\t    bold : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'bold',\r\n\t            buttonHtml: 'B',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'strong', keepHtml: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    italic : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'italic',\r\n\t            buttonHtml: 'I',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'em', keepHtml: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    h2 : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'header-2',\r\n\t            buttonHtml: 'H2',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'h2', blockElement: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    h3 : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'header-3',\r\n\t            buttonHtml: 'H3',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'h3', blockElement: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    h4 : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'header-4',\r\n\t            buttonHtml: 'H4',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'h4', blockElement: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    x : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'remove-formatting',\r\n\t            buttonHtml: 'x',\r\n\t            clickHandler: function(){\r\n\t                _this.removeFormatting({ inFullArea: false });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    alignleft : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'align-left',\r\n\t            buttonHtml: 'Align left',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: left', class: 'text-left', keepHtml: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    aligncenter : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'align-center',\r\n\t            buttonHtml: 'Align center',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: center', class: 'text-center', keepHtml: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    alignright : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'align-right',\r\n\t            buttonHtml: 'Align right',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: right', class: 'text-right', keepHtml: true });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    quote : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'quote',\r\n\t            buttonHtml: 'Quote',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'blockquote' });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    code : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'code',\r\n\t            buttonHtml: 'Code',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'pre' });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    link : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'link',\r\n\t            buttonHtml: 'Link',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithNodeName({ nodeName: 'a', attribute: ['href', prompt('Insert link', '')] });\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    list : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'list',\r\n\t            buttonHtml: 'List',\r\n\t            clickHandler: function(){\r\n\t                _this.wrapSelectionWithList();\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    },\r\n\r\n\t    source : function(){\r\n\t        var _this = this;\r\n\t        var settings = {\r\n\t            buttonIdentifier: 'source',\r\n\t            buttonHtml: 'Source',\r\n\t            clickHandler: function(thisButton){\r\n\t                var $elemContainer = $(thisButton).closest('.' + _this.className + '-wrapper');\r\n\t                var $elem = $elemContainer.find('.' + _this.className);\r\n\t                var $tempTextarea;\r\n\r\n\t                if($(thisButton).hasClass('is-view-source-mode')) {\r\n\t                    $tempTextarea = $('body > textarea.' + _this.className + '-temp');\r\n\t                    $elem.css('visibility', 'visible');\r\n\t                    $tempTextarea.remove();\r\n\t                    $(thisButton).removeClass('is-view-source-mode');\r\n\t                }\r\n\t                else {\r\n\t                    $('body').append('<textarea class=\"' + _this.className + '-temp\" style=\"position: absolute; margin: 0;\"></textarea>');\r\n\t                    $tempTextarea = $('body > textarea.' + _this.className + '-temp');\r\n\r\n\t                    $tempTextarea.css({\r\n\t                        'top' : $elem.offset().top,\r\n\t                        'left' : $elem.offset().left,\r\n\t                        'width' : $elem.outerWidth(),\r\n\t                        'height' : $elem.outerHeight()\r\n\t                    }).html( $elem.html() );\r\n\r\n\t                    if( $elem.css('border') !== undefined ) {\r\n\t                        $tempTextarea.css('border', $elem.css('border'));\r\n\t                    }\r\n\r\n\t                    $elem.css('visibility', 'hidden');\r\n\t                    $(thisButton).addClass('is-view-source-mode');\r\n\r\n\t                    $tempTextarea.on('keyup click change keypress', function() {\r\n\t                        $elem.html( $(this).val() );\r\n\t                    });\r\n\t                }\r\n\t            }\r\n\t        };\r\n\r\n\t        _this.injectButton(settings);\r\n\t    }\r\n\t});\r\n\r\n    $.fn.easyEditor = function ( options ) {\r\n        return this.each(function () {\r\n            if (!datax.data(this, 'plugin_easyEditor')) {\r\n                datax.data(this, 'plugin_easyEditor',\r\n                new EasyEditor( this, options ));\r\n            }\r\n        });\r\n    };\r\n\r\n\treturn  EasyEditor;\t\r\n});\r\n\ndefine('skylark-easyeditor/main',[\r\n    \"./EasyEditor\"\r\n], function(EasyEditor) {\r\n    return EasyEditor;\r\n});\r\n\ndefine('skylark-easyeditor', ['skylark-easyeditor/main'], function (main) { return main; });\n\n"]}