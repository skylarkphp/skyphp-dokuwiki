{"version":3,"sources":["Color.js"],"names":["define","types","klass","colors","names","hexNames","conversion","math","Math","mathRound","round","mathMin","min","mathMax","max","mathRandom","random","clamp01","val","Color","init","rgb","opts","isString","hexToRgb","this","_r","r","_g","g","_b","b","_a","isDefined","a","_roundA","_format","format","_gradientType","gradientType","isDark","getBrightness","isLight","getOriginalInput","_originalInput","getFormat","getAlpha","toRgb","setAlpha","value","parseFloat","isNaN","toHsv","hsv","rgbToHsv","h","s","v","toHsvString","toHsl","hsl","rgbToHsl","l","toHslString","toHex","allow3Char","rgbToHex","toHexString","toHex8","rgbaToHex","toHex8String","toRgbString","toPercentageRgb","bound01","toPercentageRgbString","toName","toFilter","secondColor","hex8String","secondHex8String","toNumber","toString","formatSet","formattedString","hasAlpha","lighten","amount","fromHsl","brighten","darken","desaturate","saturate","greyscale","spin","hue","analogous","results","slices","part","ret","push","complement","monochromatic","modification","fromHsv","splitcomplement","triad","tetrad","mix","color2","w1","rgb1","rgb2","p","w","w2","rgba","isValid","convertToPercentage","n","equals","color1","parse","fromRatio","fromRgba","fromRgb","hslToRgb","hsvToRgb","color","ok","strToRgb","hasOwnProperty","rgbToRgb","String","substr"],"mappings":"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","file":"../Color.js","sourcesContent":["define([\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-klass\",\r\n    \"./colors\",\r\n    \"./_names\",\r\n    \"./_hexNames\",\r\n    \"./_conversion\"\r\n],function(\r\n    types,\r\n    klass,\r\n    colors,\r\n    names,\r\n    hexNames,\r\n    conversion\r\n) {\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n     // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n         \r\n    var Color = klass({\r\n        init : function(rgb, opts) {\r\n            opts = opts || { };\r\n\r\n            //var rgb = inputToRGB(color);\r\n            //\r\n            //this._originalInput = color,\r\n            if (types.isString(rgb)) {\r\n                rgb= conversion.hexToRgb(rgb);\r\n            }\r\n            this._r = rgb.r,\r\n            this._g = rgb.g,\r\n            this._b = rgb.b,\r\n            this._a = types.isDefined(rgb.a) ? rgb.a : 1,\r\n\r\n            this._roundA = mathRound(1000 * this._a) / 1000,\r\n            this._format = opts.format || rgb.format;\r\n            this._gradientType = opts.gradientType;\r\n\r\n            // Don't let the range of [0,255] come back in [0,1].\r\n            // Potentially lose a little bit of precision here, but will fix issues where\r\n            // .5 gets interpreted as half of the total, instead of half of 1\r\n            // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n            if (this._r < 1) { this._r = mathRound(this._r); }\r\n            if (this._g < 1) { this._g = mathRound(this._g); }\r\n            if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n        },\r\n\r\n        /*\r\n         * Return a boolean indicating whether the color's perceived brightness is dark.\r\n         */\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n\r\n        /*\r\n         * Return a boolean indicating whether the color's perceived brightness is light.\r\n         */\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n\r\n        /*\r\n         * Returns the alpha value of a color, from 0-1\r\n         */\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n\r\n        /*\r\n         * Returns the perceived brightness of a color, from 0-255.\r\n         */\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n\r\n        /*\r\n         * Sets the alpha value on a current color. Accepted range is in between 0-1.\r\n         */\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n\r\n        toHsv: function() {\r\n            var hsv = conversion.rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n\r\n        toHsvString: function() {\r\n            var hsv = conversion.rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n\r\n        toHsl: function() {\r\n            var hsl = conversion.rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n\r\n        toHslString: function() {\r\n            var hsl = conversion.rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n\r\n        toHex: function(allow3Char) {\r\n            return conversion.rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n\r\n        toHex8: function() {\r\n            return conversion.rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(conversion.bound01(this._r, 255) * 100) + \"%\", g: mathRound(conversion.bound01(this._g, 255) * 100) + \"%\", b: mathRound(conversion.bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(conversion.bound01(this._r, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._g, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._b, 255) * 100) + \"%)\" :\r\n              \r\n              \"rgba(\" + mathRound(conversion.bound01(this._r, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._g, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[conversion.rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + conversion.rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n\r\n        toNumber : function() {\r\n            return (this._r << 16 ^ this._g << 8 ^ this._b << 0);\r\n        },\r\n\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        // modification methods\r\n        // ----------------------\r\n        // Thanks to less.js for some of the basics here\r\n        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n        /*\r\n         * Lighten the color a given amount, from 0 to 100. Providing 100 will always return white.\r\n         */\r\n        lighten: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.l += amount / 100;\r\n            hsl.l = clamp01(hsl.l);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Brighten the color a given amount, from 0 to 100\r\n         */\r\n        brighten: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var rgb = this.toRgb();\r\n            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n            return new Color(rgb);\r\n        },\r\n\r\n        /*\r\n         * Darken the color a given amount, from 0 to 100. Providing 100 will always return black.\r\n         */\r\n        darken: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.l -= amount / 100;\r\n            hsl.l = clamp01(hsl.l);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         *  Desaturate the color a given amount, from 0 to 100. Providing 100 will is the same as calling greyscale.\r\n         */\r\n        desaturate: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.s -= amount / 100;\r\n            hsl.s = clamp01(hsl.s);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         *  Saturate the color a given amount, from 0 to 100.\r\n         */\r\n        saturate: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.s += amount / 100;\r\n            hsl.s = clamp01(hsl.s);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Completely desaturates a color into greyscale. Same as calling desaturate(100).\r\n         */\r\n        greyscale: function() {\r\n            return this.desaturate(100);\r\n        },\r\n\r\n        /*\r\n         * Spin the hue a given amount, from -360 to 360. Calling with 0, 360, or -360 will do nothing (since it sets the hue back to what it was before).\r\n         */\r\n        spin: function(amount) {\r\n            var hsl = this.toHsl();\r\n            var hue = (mathRound(hsl.h) + amount) % 360;\r\n            hsl.h = hue < 0 ? 360 + hue : hue;\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n\r\n        // combination methods\r\n\r\n        /*\r\n         * Finds analogous colors the color.\r\n         */\r\n        analogous: function(results, slices) {\r\n            results = results || 6;\r\n            slices = slices || 30;\r\n\r\n            var hsl = this.toHsl();\r\n            var part = 360 / slices;\r\n            var ret = [this];\r\n\r\n            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n                hsl.h = (hsl.h + part) % 360;\r\n                ret.push(Color.fromHsl(hsl));\r\n            }\r\n            return ret;\r\n        },\r\n\r\n        complement: function() {\r\n            var hsl = this.toHsl();\r\n            hsl.h = (hsl.h + 180) % 360;\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Finds monochromatic colors to the color.\r\n         */\r\n        monochromatic: function(results) {\r\n            results = results || 6;\r\n            var hsv = this.toHsv();\r\n            var h = hsv.h, s = hsv.s, v = hsv.v;\r\n            var ret = [];\r\n            var modification = 1 / results;\r\n\r\n            while (results--) {\r\n                ret.push(Color.fromHsv({ h: h, s: s, v: v}));\r\n                v = (v + modification) % 1;\r\n            }\r\n\r\n            return ret;\r\n        },\r\n\r\n\r\n        /*\r\n         * Generates a split complements of the color.\r\n         */\r\n        splitcomplement: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n                Color.fromHsl({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n            ];\r\n        },\r\n\r\n        /*\r\n         * Generates a color triad of the color.\r\n         */\r\n        triad: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n            ];\r\n        },\r\n\r\n        tetrad: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n            ];\r\n        },\r\n\r\n\r\n        mix : function(color2,amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n            var rgb1 = this.toRgb();\r\n            var rgb2 = color2.toRgb();\r\n\r\n            var p = amount / 100;\r\n            var w = p * 2 - 1;\r\n            var a = rgb2.a - rgb1.a;\r\n\r\n            var w1;\r\n\r\n            if (w * a == -1) {\r\n                w1 = w;\r\n            } else {\r\n                w1 = (w + a) / (1 + w * a);\r\n            }\r\n\r\n            w1 = (w1 + 1) / 2;\r\n\r\n            var w2 = 1 - w1;\r\n\r\n            var rgba = {\r\n                r: rgb2.r * w1 + rgb1.r * w2,\r\n                g: rgb2.g * w1 + rgb1.g * w2,\r\n                b: rgb2.b * w1 + rgb1.b * w2,\r\n                a: rgb2.a * p  + rgb1.a * (1 - p)\r\n            };\r\n\r\n            return new Color(rgba);\r\n\r\n        },\r\n\r\n        isValid : function(){\r\n            return true;\r\n        }\r\n    });\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        color1 = Color.parse(color1);\r\n        color2 = Color.parse(color2);\r\n\r\n        return color1.toRgbString() == color2.toRgbString();\r\n    };\r\n    \r\n\r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n    Color.fromRgba = function(r,g,b,a) {\r\n        return new Color({\r\n            r,\r\n            g,\r\n            b,\r\n            a\r\n        })  \r\n    };\r\n\r\n    Color.fromRgb = function(r,g,b) {\r\n        return new Color({\r\n            r,\r\n            g,\r\n            b\r\n        })  \r\n    };\r\n\r\n    Color.fromHsl = function(h,s,l,a) {\r\n        var rgb = conversion.hslToRgb(h,s,l)\r\n        return new Color(rgb)  \r\n    };\r\n\r\n    Color.fromHsv = function(h,s,v,a) {\r\n        var rgb = conversion.hsvToRgb(h,s,v)\r\n        return new Color(rgb)  \r\n    }; \r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    Color.parse = function (color) {\r\n        if (color instanceof Color) {\r\n            return color;\r\n        }\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = conversion.strToRgb(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = conversion.rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = conversion.hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb =  conversion.hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n        return new Color(\r\n            {\r\n                ok: ok,\r\n                r: Math.min(255, Math.max(rgb.r, 0)),\r\n                g: Math.min(255, Math.max(rgb.g, 0)),\r\n                b: Math.min(255, Math.max(rgb.b, 0)),\r\n                a: a\r\n            },\r\n            {\r\n                format: color.format || format,                \r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    /*\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return new Color(color, opts);\r\n    };\r\n    */\r\n    return colors.Color = Color;\r\n});\r\n"]}