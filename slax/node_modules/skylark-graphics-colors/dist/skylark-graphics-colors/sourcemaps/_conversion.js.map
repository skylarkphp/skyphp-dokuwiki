{"version":3,"sources":["_conversion.js"],"names":["define","strings","names","math","Math","mathRound","round","mathMin","min","mathMax","max","random","pad2","c","length","bound01","n","indexOf","parseFloat","isOnePointZero","processPercent","isPercentage","parseInt","abs","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","rgb","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex8","hex3s","hex6s","hex8s","parseIntFromHex","val","rgbToRgb","r","g","b","rgbToHsl","h","s","l","d","hslToRgb","hue2rgb","p","q","t","rgbToHsv","v","hsvToRgb","i","floor","f","mod","rgbToHex","allow3Char","hex","toString","charAt","join","rgbaToHex","a","hexToRgb","result","exec","strToRgb","color","trim","toLowerCase","match","named","format"],"mappings":"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","file":"../_conversion.js","sourcesContent":["define([\r\n    \"skylark-langx-strings\",\r\n    \"./_names\"\r\n],function(\r\n    strings,\r\n    names\r\n){\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n            \r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\tfunction hexToRgb(hex) {\r\n\t  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\t  return result ? {\r\n\t    r: parseInt(result[1], 16),\r\n\t    g: parseInt(result[2], 16),\r\n\t    b: parseInt(result[3], 16)\r\n\t  } : null;\r\n\t}\r\n\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex3s: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6s: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8s: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n        \r\n\r\n      // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n          \r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function strToRgb(color) {\r\n\r\n        color = strings.trim(color).toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color)) || (match = matchers.hex8s.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color)) || (match = matchers.hex6s.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color)) || (match = matchers.hex3s.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n\treturn  {\r\n\t\tbound01,\r\n        rgbToRgb,\r\n\t\trgbToHsl,\r\n\t\thslToRgb,\r\n\t\trgbToHsv,\r\n\t\thsvToRgb,\r\n\t\trgbToHex,\r\n\t\trgbaToHex,\r\n\t\thexToRgb,\r\n        strToRgb\r\n\t};\r\n});"]}