{"version":3,"sources":["misc.js"],"names":["define","Color","readability","color1","color2","c1","c2","rgb1","toRgb","rgb2","brightnessA","getBrightness","brightnessB","colorDiff","Math","max","r","min","g","b","brightness","abs","color","isReadable","mostReadable","baseColor","colorList","bestColor","bestScore","bestIsReadable","i","length","readable","score"],"mappings":";;;;;;;AAAAA,QACC,WACC,SACDC,GAuEG,OACIC,YA3DJ,SAAqBC,EAAQC,GACzB,IAAIC,EAAKF,EACLG,EAAKF,EACLG,EAAOF,EAAGG,QACVC,EAAOH,EAAGE,QACVE,EAAcL,EAAGM,gBACjBC,EAAcN,EAAGK,gBACjBE,EACAC,KAAKC,IAAIR,EAAKS,EAAGP,EAAKO,GAAKF,KAAKG,IAAIV,EAAKS,EAAGP,EAAKO,GACjDF,KAAKC,IAAIR,EAAKW,EAAGT,EAAKS,GAAKJ,KAAKG,IAAIV,EAAKW,EAAGT,EAAKS,GACjDJ,KAAKC,IAAIR,EAAKY,EAAGV,EAAKU,GAAKL,KAAKG,IAAIV,EAAKY,EAAGV,EAAKU,GAGrD,OACIC,WAAYN,KAAKO,IAAIX,EAAcE,GACnCU,MAAOT,IA6CXU,WApCJ,SAAoBpB,EAAQC,GACxB,IAAIF,EAAcA,EAAYC,EAAQC,GACtC,OAAOF,EAAYkB,WAAa,KAAOlB,EAAYoB,MAAQ,KAmC3DE,aA3BJ,SAAsBC,EAAWC,GAI7B,IAHA,IAAIC,EAAY,KACZC,EAAY,EACZC,GAAiB,EACZC,EAAE,EAAGA,EAAIJ,EAAUK,OAAQD,IAAK,CAKrC,IAAI5B,EAAcA,EAAYuB,EAAWC,EAAUI,IAC/CE,EAAW9B,EAAYkB,WAAa,KAAOlB,EAAYoB,MAAQ,IAC/DW,EAAa/B,EAAYkB,WAAa,IAA9B,EAAsClB,EAAYoB,MAAQ,KAEjEU,IAAcH,GACdG,GAAYH,GAAkBI,EAAQL,IACnCI,IAAgBH,GAAmBI,EAAQL,KAC/CC,EAAiBG,EACjBJ,EAAYK,EACZN,EAAY,IAAI1B,EAAMyB,EAAUI,KAGxC,OAAOH","file":"../misc.js","sourcesContent":["define([\r\n\t\"./Color\"\r\n],function(\r\n\tColor\r\n){\r\n    // Utility Functions\r\n    // ---------------------\r\n\r\n    // Readability Functions\r\n    // ---------------------\r\n    // <http://www.w3.org/TR/AERT#color-contrast>\r\n\r\n    // `readability`\r\n    // Analyze the 2 colors and returns an object with the following properties:\r\n    //    `brightness`: difference in brightness between the two colors\r\n    //    `color`: difference in color/hue between the two colors\r\n    function readability(color1, color2) {\r\n        var c1 = color1;\r\n        var c2 = color2;\r\n        var rgb1 = c1.toRgb();\r\n        var rgb2 = c2.toRgb();\r\n        var brightnessA = c1.getBrightness();\r\n        var brightnessB = c2.getBrightness();\r\n        var colorDiff = (\r\n            Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\r\n            Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\r\n            Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\r\n        );\r\n\r\n        return {\r\n            brightness: Math.abs(brightnessA - brightnessB),\r\n            color: colorDiff\r\n        };\r\n    }\r\n\r\n    // `readable`\r\n    // http://www.w3.org/TR/AERT#color-contrast\r\n    // Ensure that foreground and background color combinations provide sufficient contrast.\r\n    // *Example*\r\n    //    Color.isReadable(\"#000\", \"#111\") => false\r\n    function isReadable(color1, color2) {\r\n        var readability = readability(color1, color2);\r\n        return readability.brightness > 125 && readability.color > 500;\r\n    }\r\n\r\n    // `mostReadable`\r\n    // Given a base color and a list of possible foreground or background\r\n    // colors for that base, returns the most readable color.\r\n    // *Example*\r\n    //    Color.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\r\n    function mostReadable(baseColor, colorList) {\r\n        var bestColor = null;\r\n        var bestScore = 0;\r\n        var bestIsReadable = false;\r\n        for (var i=0; i < colorList.length; i++) {\r\n\r\n            // We normalize both around the \"acceptable\" breaking point,\r\n            // but rank brightness constrast higher than hue.\r\n\r\n            var readability = readability(baseColor, colorList[i]);\r\n            var readable = readability.brightness > 125 && readability.color > 500;\r\n            var score = 3 * (readability.brightness / 125) + (readability.color / 500);\r\n\r\n            if ((readable && ! bestIsReadable) ||\r\n                (readable && bestIsReadable && score > bestScore) ||\r\n                ((! readable) && (! bestIsReadable) && score > bestScore)) {\r\n                bestIsReadable = readable;\r\n                bestScore = score;\r\n                bestColor = new Color(colorList[i]);\r\n            }\r\n        }\r\n        return bestColor;\r\n    }\r\n\r\n    return  {\r\n        readability,\r\n        isReadable,\r\n        mostReadable\r\n    };\r\n\t\r\n});"]}