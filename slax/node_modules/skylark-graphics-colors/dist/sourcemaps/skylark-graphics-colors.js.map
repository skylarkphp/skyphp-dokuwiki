{"version":3,"sources":["skylark-graphics-colors.js"],"names":["define","skylark","attach","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","names","o","flipped","i","hasOwnProperty","flip","strings","math","Math","mathRound","round","mathMin","min","mathMax","max","random","pad2","c","length","bound01","n","indexOf","parseFloat","isOnePointZero","processPercent","isPercentage","parseInt","abs","CSS_UNIT","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","rgb","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex8","hex3s","hex6s","hex8s","parseIntFromHex","val","rgbToRgb","r","g","b","rgbToHsl","h","s","l","d","hslToRgb","hue2rgb","p","q","t","rgbToHsv","v","hsvToRgb","floor","f","mod","rgbToHex","allow3Char","hex","toString","charAt","join","rgbaToHex","a","hexToRgb","result","exec","strToRgb","color","trim","toLowerCase","match","named","format","types","klass","colors","hexNames","conversion","mathRandom","clamp01","Color","init","opts","isString","this","_r","_g","_b","_a","isDefined","_roundA","_format","_gradientType","gradientType","isDark","getBrightness","isLight","getOriginalInput","_originalInput","getFormat","getAlpha","toRgb","setAlpha","value","isNaN","boundAlpha","toHsv","toHsvString","toHsl","toHslString","toHex","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","toPercentageRgbString","toName","toFilter","secondColor","hex8String","secondHex8String","toNumber","formatSet","formattedString","hasAlpha","needsAlphaFormat","lighten","amount","fromHsl","brighten","darken","desaturate","saturate","greyscale","spin","hue","analogous","results","slices","part","ret","push","complement","monochromatic","modification","fromHsv","splitcomplement","triad","tetrad","mix","color2","w1","rgb1","rgb2","w","w2","isValid","convertToPercentage","equals","color1","parse","fromRatio","fromRgba","fromRgb","ok","String","substr","_names","name","main"],"mappings":"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","file":"../skylark-graphics-colors.js","sourcesContent":["define('skylark-graphics-colors/colors',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"graphics.colors\",{});\r\n});\n define('skylark-graphics-colors/_names',[\r\n],function() {\r\n     // Big List of Colors\r\n    // ------------------\r\n    // <http://www.w3.org/TR/css3-color/#svg-color>\r\n    return  {\r\n        aliceblue: \"f0f8ff\",\r\n        antiquewhite: \"faebd7\",\r\n        aqua: \"0ff\",\r\n        aquamarine: \"7fffd4\",\r\n        azure: \"f0ffff\",\r\n        beige: \"f5f5dc\",\r\n        bisque: \"ffe4c4\",\r\n        black: \"000\",\r\n        blanchedalmond: \"ffebcd\",\r\n        blue: \"00f\",\r\n        blueviolet: \"8a2be2\",\r\n        brown: \"a52a2a\",\r\n        burlywood: \"deb887\",\r\n        burntsienna: \"ea7e5d\",\r\n        cadetblue: \"5f9ea0\",\r\n        chartreuse: \"7fff00\",\r\n        chocolate: \"d2691e\",\r\n        coral: \"ff7f50\",\r\n        cornflowerblue: \"6495ed\",\r\n        cornsilk: \"fff8dc\",\r\n        crimson: \"dc143c\",\r\n        cyan: \"0ff\",\r\n        darkblue: \"00008b\",\r\n        darkcyan: \"008b8b\",\r\n        darkgoldenrod: \"b8860b\",\r\n        darkgray: \"a9a9a9\",\r\n        darkgreen: \"006400\",\r\n        darkgrey: \"a9a9a9\",\r\n        darkkhaki: \"bdb76b\",\r\n        darkmagenta: \"8b008b\",\r\n        darkolivegreen: \"556b2f\",\r\n        darkorange: \"ff8c00\",\r\n        darkorchid: \"9932cc\",\r\n        darkred: \"8b0000\",\r\n        darksalmon: \"e9967a\",\r\n        darkseagreen: \"8fbc8f\",\r\n        darkslateblue: \"483d8b\",\r\n        darkslategray: \"2f4f4f\",\r\n        darkslategrey: \"2f4f4f\",\r\n        darkturquoise: \"00ced1\",\r\n        darkviolet: \"9400d3\",\r\n        deeppink: \"ff1493\",\r\n        deepskyblue: \"00bfff\",\r\n        dimgray: \"696969\",\r\n        dimgrey: \"696969\",\r\n        dodgerblue: \"1e90ff\",\r\n        firebrick: \"b22222\",\r\n        floralwhite: \"fffaf0\",\r\n        forestgreen: \"228b22\",\r\n        fuchsia: \"f0f\",\r\n        gainsboro: \"dcdcdc\",\r\n        ghostwhite: \"f8f8ff\",\r\n        gold: \"ffd700\",\r\n        goldenrod: \"daa520\",\r\n        gray: \"808080\",\r\n        green: \"008000\",\r\n        greenyellow: \"adff2f\",\r\n        grey: \"808080\",\r\n        honeydew: \"f0fff0\",\r\n        hotpink: \"ff69b4\",\r\n        indianred: \"cd5c5c\",\r\n        indigo: \"4b0082\",\r\n        ivory: \"fffff0\",\r\n        khaki: \"f0e68c\",\r\n        lavender: \"e6e6fa\",\r\n        lavenderblush: \"fff0f5\",\r\n        lawngreen: \"7cfc00\",\r\n        lemonchiffon: \"fffacd\",\r\n        lightblue: \"add8e6\",\r\n        lightcoral: \"f08080\",\r\n        lightcyan: \"e0ffff\",\r\n        lightgoldenrodyellow: \"fafad2\",\r\n        lightgray: \"d3d3d3\",\r\n        lightgreen: \"90ee90\",\r\n        lightgrey: \"d3d3d3\",\r\n        lightpink: \"ffb6c1\",\r\n        lightsalmon: \"ffa07a\",\r\n        lightseagreen: \"20b2aa\",\r\n        lightskyblue: \"87cefa\",\r\n        lightslategray: \"789\",\r\n        lightslategrey: \"789\",\r\n        lightsteelblue: \"b0c4de\",\r\n        lightyellow: \"ffffe0\",\r\n        lime: \"0f0\",\r\n        limegreen: \"32cd32\",\r\n        linen: \"faf0e6\",\r\n        magenta: \"f0f\",\r\n        maroon: \"800000\",\r\n        mediumaquamarine: \"66cdaa\",\r\n        mediumblue: \"0000cd\",\r\n        mediumorchid: \"ba55d3\",\r\n        mediumpurple: \"9370db\",\r\n        mediumseagreen: \"3cb371\",\r\n        mediumslateblue: \"7b68ee\",\r\n        mediumspringgreen: \"00fa9a\",\r\n        mediumturquoise: \"48d1cc\",\r\n        mediumvioletred: \"c71585\",\r\n        midnightblue: \"191970\",\r\n        mintcream: \"f5fffa\",\r\n        mistyrose: \"ffe4e1\",\r\n        moccasin: \"ffe4b5\",\r\n        navajowhite: \"ffdead\",\r\n        navy: \"000080\",\r\n        oldlace: \"fdf5e6\",\r\n        olive: \"808000\",\r\n        olivedrab: \"6b8e23\",\r\n        orange: \"ffa500\",\r\n        orangered: \"ff4500\",\r\n        orchid: \"da70d6\",\r\n        palegoldenrod: \"eee8aa\",\r\n        palegreen: \"98fb98\",\r\n        paleturquoise: \"afeeee\",\r\n        palevioletred: \"db7093\",\r\n        papayawhip: \"ffefd5\",\r\n        peachpuff: \"ffdab9\",\r\n        peru: \"cd853f\",\r\n        pink: \"ffc0cb\",\r\n        plum: \"dda0dd\",\r\n        powderblue: \"b0e0e6\",\r\n        purple: \"800080\",\r\n        rebeccapurple: \"663399\",\r\n        red: \"f00\",\r\n        rosybrown: \"bc8f8f\",\r\n        royalblue: \"4169e1\",\r\n        saddlebrown: \"8b4513\",\r\n        salmon: \"fa8072\",\r\n        sandybrown: \"f4a460\",\r\n        seagreen: \"2e8b57\",\r\n        seashell: \"fff5ee\",\r\n        sienna: \"a0522d\",\r\n        silver: \"c0c0c0\",\r\n        skyblue: \"87ceeb\",\r\n        slateblue: \"6a5acd\",\r\n        slategray: \"708090\",\r\n        slategrey: \"708090\",\r\n        snow: \"fffafa\",\r\n        springgreen: \"00ff7f\",\r\n        steelblue: \"4682b4\",\r\n        tan: \"d2b48c\",\r\n        teal: \"008080\",\r\n        thistle: \"d8bfd8\",\r\n        tomato: \"ff6347\",\r\n        turquoise: \"40e0d0\",\r\n        violet: \"ee82ee\",\r\n        wheat: \"f5deb3\",\r\n        white: \"fff\",\r\n        whitesmoke: \"f5f5f5\",\r\n        yellow: \"ff0\",\r\n        yellowgreen: \"9acd32\"\r\n    };\r\n\r\n\r\n});\r\n\r\n\n define('skylark-graphics-colors/_hexNames',[\r\n    \"./_names\"\r\n],function(names) {\r\n    // Utilities\r\n    // ---------\r\n\r\n    // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\r\n    function flip(o) {\r\n        var flipped = { };\r\n        for (var i in o) {\r\n            if (o.hasOwnProperty(i)) {\r\n                flipped[o[i]] = i;\r\n            }\r\n        }\r\n        return flipped;\r\n    }\r\n    return  flip(names);\r\n\r\n});\r\n\r\n\ndefine('skylark-graphics-colors/_conversion',[\r\n    \"skylark-langx-strings\",\r\n    \"./_names\"\r\n],function(\r\n    strings,\r\n    names\r\n){\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n            \r\n    // Force a hex value to have 2 characters\r\n    function pad2(c) {\r\n        return c.length == 1 ? '0' + c : '' + c;\r\n    }\r\n\r\n    // Take input from [0, n] and return it as [0, 1]\r\n    function bound01(n, max) {\r\n        if (isOnePointZero(n)) { n = \"100%\"; }\r\n\r\n        var processPercent = isPercentage(n);\r\n        n = mathMin(max, mathMax(0, parseFloat(n)));\r\n\r\n        // Automatically convert percentage into number\r\n        if (processPercent) {\r\n            n = parseInt(n * max, 10) / 100;\r\n        }\r\n\r\n        // Handle floating point rounding errors\r\n        if ((math.abs(n - max) < 0.000001)) {\r\n            return 1;\r\n        }\r\n\r\n        // Convert into [0, 1] range if it isn't already\r\n        return (n % max) / parseFloat(max);\r\n    }\r\n\r\n\r\n    // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\r\n    // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\r\n    function isOnePointZero(n) {\r\n        return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\r\n    }\r\n\r\n    // Check to see if string passed in is a percentage\r\n    function isPercentage(n) {\r\n        return typeof n === \"string\" && n.indexOf('%') != -1;\r\n    }\r\n\r\n\r\n    // Conversion Functions\r\n    // --------------------\r\n\r\n    // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\r\n    // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\r\n\r\n    // `rgbToRgb`\r\n    // Handle bounds / percentage checking to conform to CSS color spec\r\n    // <http://www.w3.org/TR/css3-color/>\r\n    // *Assumes:* r, g, b in [0, 255] or [0, 1]\r\n    // *Returns:* { r, g, b } in [0, 255]\r\n    function rgbToRgb(r, g, b){\r\n        return {\r\n            r: bound01(r, 255) * 255,\r\n            g: bound01(g, 255) * 255,\r\n            b: bound01(b, 255) * 255\r\n        };\r\n    }\r\n\r\n    // `rgbToHsl`\r\n    // Converts an RGB color value to HSL.\r\n    // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, l } in [0,1]\r\n    function rgbToHsl(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, l = (max + min) / 2;\r\n\r\n        if(max == min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            var d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n\r\n            h /= 6;\r\n        }\r\n\r\n        return { h: h, s: s, l: l };\r\n    }\r\n\r\n    // `hslToRgb`\r\n    // Converts an HSL color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n    function hslToRgb(h, s, l) {\r\n        var r, g, b;\r\n\r\n        h = bound01(h, 360);\r\n        s = bound01(s, 100);\r\n        l = bound01(l, 100);\r\n\r\n        function hue2rgb(p, q, t) {\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        if(s === 0) {\r\n            r = g = b = l; // achromatic\r\n        }\r\n        else {\r\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            var p = 2 * l - q;\r\n            r = hue2rgb(p, q, h + 1/3);\r\n            g = hue2rgb(p, q, h);\r\n            b = hue2rgb(p, q, h - 1/3);\r\n        }\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHsv`\r\n    // Converts an RGB color value to HSV\r\n    // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\r\n    // *Returns:* { h, s, v } in [0,1]\r\n    function rgbToHsv(r, g, b) {\r\n\r\n        r = bound01(r, 255);\r\n        g = bound01(g, 255);\r\n        b = bound01(b, 255);\r\n\r\n        var max = mathMax(r, g, b), min = mathMin(r, g, b);\r\n        var h, s, v = max;\r\n\r\n        var d = max - min;\r\n        s = max === 0 ? 0 : d / max;\r\n\r\n        if(max == min) {\r\n            h = 0; // achromatic\r\n        }\r\n        else {\r\n            switch(max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n        return { h: h, s: s, v: v };\r\n    }\r\n\r\n    // `hsvToRgb`\r\n    // Converts an HSV color value to RGB.\r\n    // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\r\n    // *Returns:* { r, g, b } in the set [0, 255]\r\n     function hsvToRgb(h, s, v) {\r\n\r\n        h = bound01(h, 360) * 6;\r\n        s = bound01(s, 100);\r\n        v = bound01(v, 100);\r\n\r\n        var i = math.floor(h),\r\n            f = h - i,\r\n            p = v * (1 - s),\r\n            q = v * (1 - f * s),\r\n            t = v * (1 - (1 - f) * s),\r\n            mod = i % 6,\r\n            r = [v, q, p, p, t, v][mod],\r\n            g = [t, v, v, q, p, p][mod],\r\n            b = [p, p, t, v, v, q][mod];\r\n\r\n        return { r: r * 255, g: g * 255, b: b * 255 };\r\n    }\r\n\r\n    // `rgbToHex`\r\n    // Converts an RGB color to hex\r\n    // Assumes r, g, and b are contained in the set [0, 255]\r\n    // Returns a 3 or 6 character hex\r\n    function rgbToHex(r, g, b, allow3Char) {\r\n\r\n        var hex = [\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        // Return a 3 character hex if possible\r\n        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\r\n            return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\r\n        }\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n    // `rgbaToHex`\r\n    // Converts an RGBA color plus alpha transparency to hex\r\n    // Assumes r, g, b and a are contained in the set [0, 255]\r\n    // Returns an 8 character hex\r\n    function rgbaToHex(r, g, b, a) {\r\n\r\n        var hex = [\r\n            pad2(convertDecimalToHex(a)),\r\n            pad2(mathRound(r).toString(16)),\r\n            pad2(mathRound(g).toString(16)),\r\n            pad2(mathRound(b).toString(16))\r\n        ];\r\n\r\n        return hex.join(\"\");\r\n    }\r\n\r\n\tfunction hexToRgb(hex) {\r\n\t  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\t  return result ? {\r\n\t    r: parseInt(result[1], 16),\r\n\t    g: parseInt(result[2], 16),\r\n\t    b: parseInt(result[3], 16)\r\n\t  } : null;\r\n\t}\r\n\r\n\r\n    var matchers = (function() {\r\n\r\n        // <http://www.w3.org/TR/css3-values/#integers>\r\n        var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\r\n\r\n        // <http://www.w3.org/TR/css3-values/#number-value>\r\n        var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\r\n\r\n        // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\r\n        var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\r\n\r\n        // Actual matching.\r\n        // Parentheses and commas are optional, but not required.\r\n        // Whitespace can take the place of commas or opening paren\r\n        var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n        var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\r\n\r\n        return {\r\n            rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\r\n            rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\r\n            hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\r\n            hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\r\n            hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\r\n            hsva: new RegExp(\"hsva\" + PERMISSIVE_MATCH4),\r\n            hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex3s: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\r\n            hex6s: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\r\n            hex8s: /^#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\r\n        };\r\n    })();\r\n\r\n\r\n\r\n    // Parse a base-16 hex value into a base-10 integer\r\n    function parseIntFromHex(val) {\r\n        return parseInt(val, 16);\r\n    }\r\n        \r\n\r\n      // Converts a decimal to a hex value\r\n    function convertDecimalToHex(d) {\r\n        return Math.round(parseFloat(d) * 255).toString(16);\r\n    }\r\n\r\n    // Converts a hex value to a decimal\r\n    function convertHexToDecimal(h) {\r\n        return (parseIntFromHex(h) / 255);\r\n    }\r\n          \r\n    // `stringInputToObject`\r\n    // Permissive string parsing.  Take in a number of formats, and output an object\r\n    // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\r\n    function strToRgb(color) {\r\n\r\n        color = strings.trim(color).toLowerCase();\r\n        var named = false;\r\n        if (names[color]) {\r\n            color = names[color];\r\n            named = true;\r\n        }\r\n        else if (color == 'transparent') {\r\n            return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\r\n        }\r\n\r\n        // Try to match string input using regular expressions.\r\n        // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\r\n        // Just return an object and let the conversion functions handle that.\r\n        // This way the result will be the same whether the tinycolor is initialized with string or object.\r\n        var match;\r\n        if ((match = matchers.rgb.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3] };\r\n        }\r\n        if ((match = matchers.rgba.exec(color))) {\r\n            return { r: match[1], g: match[2], b: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsl.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3] };\r\n        }\r\n        if ((match = matchers.hsla.exec(color))) {\r\n            return { h: match[1], s: match[2], l: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hsv.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3] };\r\n        }\r\n        if ((match = matchers.hsva.exec(color))) {\r\n            return { h: match[1], s: match[2], v: match[3], a: match[4] };\r\n        }\r\n        if ((match = matchers.hex8.exec(color)) || (match = matchers.hex8s.exec(color))) {\r\n            return {\r\n                a: convertHexToDecimal(match[1]),\r\n                r: parseIntFromHex(match[2]),\r\n                g: parseIntFromHex(match[3]),\r\n                b: parseIntFromHex(match[4]),\r\n                format: named ? \"name\" : \"hex8\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex6.exec(color)) || (match = matchers.hex6s.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1]),\r\n                g: parseIntFromHex(match[2]),\r\n                b: parseIntFromHex(match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n        if ((match = matchers.hex3.exec(color)) || (match = matchers.hex3s.exec(color))) {\r\n            return {\r\n                r: parseIntFromHex(match[1] + '' + match[1]),\r\n                g: parseIntFromHex(match[2] + '' + match[2]),\r\n                b: parseIntFromHex(match[3] + '' + match[3]),\r\n                format: named ? \"name\" : \"hex\"\r\n            };\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n\treturn  {\r\n\t\tbound01,\r\n        rgbToRgb,\r\n\t\trgbToHsl,\r\n\t\thslToRgb,\r\n\t\trgbToHsv,\r\n\t\thsvToRgb,\r\n\t\trgbToHex,\r\n\t\trgbaToHex,\r\n\t\thexToRgb,\r\n        strToRgb\r\n\t};\r\n});\ndefine('skylark-graphics-colors/Color',[\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-klass\",\r\n    \"./colors\",\r\n    \"./_names\",\r\n    \"./_hexNames\",\r\n    \"./_conversion\"\r\n],function(\r\n    types,\r\n    klass,\r\n    colors,\r\n    names,\r\n    hexNames,\r\n    conversion\r\n) {\r\n    var math = Math,\r\n        mathRound = math.round,\r\n        mathMin = math.min,\r\n        mathMax = math.max,\r\n        mathRandom = math.random;\r\n\r\n    // Return a valid alpha value [0,1] with all invalid values being set to 1\r\n    function boundAlpha(a) {\r\n        a = parseFloat(a);\r\n\r\n        if (isNaN(a) || a < 0 || a > 1) {\r\n            a = 1;\r\n        }\r\n\r\n        return a;\r\n    }\r\n\r\n     // Force a number between 0 and 1\r\n    function clamp01(val) {\r\n        return mathMin(1, mathMax(0, val));\r\n    }\r\n         \r\n    var Color = klass({\r\n        init : function(rgb, opts) {\r\n            opts = opts || { };\r\n\r\n            //var rgb = inputToRGB(color);\r\n            //\r\n            //this._originalInput = color,\r\n            if (types.isString(rgb)) {\r\n                rgb= conversion.hexToRgb(rgb);\r\n            }\r\n            this._r = rgb.r,\r\n            this._g = rgb.g,\r\n            this._b = rgb.b,\r\n            this._a = types.isDefined(rgb.a) ? rgb.a : 1,\r\n\r\n            this._roundA = mathRound(1000 * this._a) / 1000,\r\n            this._format = opts.format || rgb.format;\r\n            this._gradientType = opts.gradientType;\r\n\r\n            // Don't let the range of [0,255] come back in [0,1].\r\n            // Potentially lose a little bit of precision here, but will fix issues where\r\n            // .5 gets interpreted as half of the total, instead of half of 1\r\n            // If it was supposed to be 128, this was already taken care of by `inputToRgb`\r\n            if (this._r < 1) { this._r = mathRound(this._r); }\r\n            if (this._g < 1) { this._g = mathRound(this._g); }\r\n            if (this._b < 1) { this._b = mathRound(this._b); }\r\n\r\n        },\r\n\r\n        /*\r\n         * Return a boolean indicating whether the color's perceived brightness is dark.\r\n         */\r\n        isDark: function() {\r\n            return this.getBrightness() < 128;\r\n        },\r\n\r\n        /*\r\n         * Return a boolean indicating whether the color's perceived brightness is light.\r\n         */\r\n        isLight: function() {\r\n            return !this.isDark();\r\n        },\r\n\r\n        getOriginalInput: function() {\r\n          return this._originalInput;\r\n        },\r\n\r\n        getFormat: function() {\r\n            return this._format;\r\n        },\r\n\r\n        /*\r\n         * Returns the alpha value of a color, from 0-1\r\n         */\r\n        getAlpha: function() {\r\n            return this._a;\r\n        },\r\n\r\n        /*\r\n         * Returns the perceived brightness of a color, from 0-255.\r\n         */\r\n        getBrightness: function() {\r\n            var rgb = this.toRgb();\r\n            return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\r\n        },\r\n\r\n        /*\r\n         * Sets the alpha value on a current color. Accepted range is in between 0-1.\r\n         */\r\n        setAlpha: function(value) {\r\n            this._a = boundAlpha(value);\r\n            this._roundA = mathRound(1000 * this._a) / 1000;\r\n            return this;\r\n        },\r\n\r\n        toHsv: function() {\r\n            var hsv = conversion.rgbToHsv(this._r, this._g, this._b);\r\n            return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\r\n        },\r\n\r\n        toHsvString: function() {\r\n            var hsv = conversion.rgbToHsv(this._r, this._g, this._b);\r\n            var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\r\n            return (this._a == 1) ?\r\n              \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\r\n              \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\r\n        },\r\n\r\n        toHsl: function() {\r\n            var hsl = conversion.rgbToHsl(this._r, this._g, this._b);\r\n            return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\r\n        },\r\n\r\n        toHslString: function() {\r\n            var hsl = conversion.rgbToHsl(this._r, this._g, this._b);\r\n            var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\r\n            return (this._a == 1) ?\r\n              \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\r\n              \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\r\n        },\r\n\r\n        toHex: function(allow3Char) {\r\n            return conversion.rgbToHex(this._r, this._g, this._b, allow3Char);\r\n        },\r\n\r\n        toHexString: function(allow3Char) {\r\n            return '#' + this.toHex(allow3Char);\r\n        },\r\n\r\n        toHex8: function() {\r\n            return conversion.rgbaToHex(this._r, this._g, this._b, this._a);\r\n        },\r\n\r\n        toHex8String: function() {\r\n            return '#' + this.toHex8();\r\n        },\r\n\r\n        toRgb: function() {\r\n            return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\r\n        },\r\n\r\n        toRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\r\n              \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\r\n        },\r\n\r\n        toPercentageRgb: function() {\r\n            return { r: mathRound(conversion.bound01(this._r, 255) * 100) + \"%\", g: mathRound(conversion.bound01(this._g, 255) * 100) + \"%\", b: mathRound(conversion.bound01(this._b, 255) * 100) + \"%\", a: this._a };\r\n        },\r\n\r\n        toPercentageRgbString: function() {\r\n            return (this._a == 1) ?\r\n              \"rgb(\"  + mathRound(conversion.bound01(this._r, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._g, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._b, 255) * 100) + \"%)\" :\r\n              \r\n              \"rgba(\" + mathRound(conversion.bound01(this._r, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._g, 255) * 100) + \"%, \" + mathRound(conversion.bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\r\n        },\r\n\r\n        toName: function() {\r\n            if (this._a === 0) {\r\n                return \"transparent\";\r\n            }\r\n\r\n            if (this._a < 1) {\r\n                return false;\r\n            }\r\n\r\n            return hexNames[conversion.rgbToHex(this._r, this._g, this._b, true)] || false;\r\n        },\r\n\r\n        toFilter: function(secondColor) {\r\n            var hex8String = '#' + conversion.rgbaToHex(this._r, this._g, this._b, this._a);\r\n            var secondHex8String = hex8String;\r\n            var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\r\n\r\n            if (secondColor) {\r\n                var s = Color(secondColor);\r\n                secondHex8String = s.toHex8String();\r\n            }\r\n\r\n            return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\r\n        },\r\n\r\n        toNumber : function() {\r\n            return (this._r << 16 ^ this._g << 8 ^ this._b << 0);\r\n        },\r\n\r\n        toString: function(format) {\r\n            var formatSet = !!format;\r\n            format = format || this._format;\r\n\r\n            var formattedString = false;\r\n            var hasAlpha = this._a < 1 && this._a >= 0;\r\n            var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\r\n\r\n            if (needsAlphaFormat) {\r\n                // Special case for \"transparent\", all other non-alpha formats\r\n                // will return rgba when there is transparency.\r\n                if (format === \"name\" && this._a === 0) {\r\n                    return this.toName();\r\n                }\r\n                return this.toRgbString();\r\n            }\r\n            if (format === \"rgb\") {\r\n                formattedString = this.toRgbString();\r\n            }\r\n            if (format === \"prgb\") {\r\n                formattedString = this.toPercentageRgbString();\r\n            }\r\n            if (format === \"hex\" || format === \"hex6\") {\r\n                formattedString = this.toHexString();\r\n            }\r\n            if (format === \"hex3\") {\r\n                formattedString = this.toHexString(true);\r\n            }\r\n            if (format === \"hex8\") {\r\n                formattedString = this.toHex8String();\r\n            }\r\n            if (format === \"name\") {\r\n                formattedString = this.toName();\r\n            }\r\n            if (format === \"hsl\") {\r\n                formattedString = this.toHslString();\r\n            }\r\n            if (format === \"hsv\") {\r\n                formattedString = this.toHsvString();\r\n            }\r\n\r\n            return formattedString || this.toHexString();\r\n        },\r\n\r\n        // modification methods\r\n        // ----------------------\r\n        // Thanks to less.js for some of the basics here\r\n        // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\r\n\r\n        /*\r\n         * Lighten the color a given amount, from 0 to 100. Providing 100 will always return white.\r\n         */\r\n        lighten: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.l += amount / 100;\r\n            hsl.l = clamp01(hsl.l);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Brighten the color a given amount, from 0 to 100\r\n         */\r\n        brighten: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var rgb = this.toRgb();\r\n            rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\r\n            rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\r\n            rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\r\n            return new Color(rgb);\r\n        },\r\n\r\n        /*\r\n         * Darken the color a given amount, from 0 to 100. Providing 100 will always return black.\r\n         */\r\n        darken: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.l -= amount / 100;\r\n            hsl.l = clamp01(hsl.l);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         *  Desaturate the color a given amount, from 0 to 100. Providing 100 will is the same as calling greyscale.\r\n         */\r\n        desaturate: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.s -= amount / 100;\r\n            hsl.s = clamp01(hsl.s);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         *  Saturate the color a given amount, from 0 to 100.\r\n         */\r\n        saturate: function(amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 10);\r\n            var hsl = this.toHsl();\r\n            hsl.s += amount / 100;\r\n            hsl.s = clamp01(hsl.s);\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Completely desaturates a color into greyscale. Same as calling desaturate(100).\r\n         */\r\n        greyscale: function() {\r\n            return this.desaturate(100);\r\n        },\r\n\r\n        /*\r\n         * Spin the hue a given amount, from -360 to 360. Calling with 0, 360, or -360 will do nothing (since it sets the hue back to what it was before).\r\n         */\r\n        spin: function(amount) {\r\n            var hsl = this.toHsl();\r\n            var hue = (mathRound(hsl.h) + amount) % 360;\r\n            hsl.h = hue < 0 ? 360 + hue : hue;\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n\r\n        // combination methods\r\n\r\n        /*\r\n         * Finds analogous colors the color.\r\n         */\r\n        analogous: function(results, slices) {\r\n            results = results || 6;\r\n            slices = slices || 30;\r\n\r\n            var hsl = this.toHsl();\r\n            var part = 360 / slices;\r\n            var ret = [this];\r\n\r\n            for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\r\n                hsl.h = (hsl.h + part) % 360;\r\n                ret.push(Color.fromHsl(hsl));\r\n            }\r\n            return ret;\r\n        },\r\n\r\n        complement: function() {\r\n            var hsl = this.toHsl();\r\n            hsl.h = (hsl.h + 180) % 360;\r\n            return Color.fromHsl(hsl);\r\n        },\r\n\r\n        /*\r\n         * Finds monochromatic colors to the color.\r\n         */\r\n        monochromatic: function(results) {\r\n            results = results || 6;\r\n            var hsv = this.toHsv();\r\n            var h = hsv.h, s = hsv.s, v = hsv.v;\r\n            var ret = [];\r\n            var modification = 1 / results;\r\n\r\n            while (results--) {\r\n                ret.push(Color.fromHsv({ h: h, s: s, v: v}));\r\n                v = (v + modification) % 1;\r\n            }\r\n\r\n            return ret;\r\n        },\r\n\r\n\r\n        /*\r\n         * Generates a split complements of the color.\r\n         */\r\n        splitcomplement: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\r\n                Color.fromHsl({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\r\n            ];\r\n        },\r\n\r\n        /*\r\n         * Generates a color triad of the color.\r\n         */\r\n        triad: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\r\n            ];\r\n        },\r\n\r\n        tetrad: function() {\r\n            var hsl = this.toHsl();\r\n            var h = hsl.h;\r\n            return [\r\n                this,\r\n                Color.fromHsl({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\r\n                Color.fromHsl({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\r\n            ];\r\n        },\r\n\r\n\r\n        mix : function(color2,amount) {\r\n            amount = (amount === 0) ? 0 : (amount || 50);\r\n\r\n            var rgb1 = this.toRgb();\r\n            var rgb2 = color2.toRgb();\r\n\r\n            var p = amount / 100;\r\n            var w = p * 2 - 1;\r\n            var a = rgb2.a - rgb1.a;\r\n\r\n            var w1;\r\n\r\n            if (w * a == -1) {\r\n                w1 = w;\r\n            } else {\r\n                w1 = (w + a) / (1 + w * a);\r\n            }\r\n\r\n            w1 = (w1 + 1) / 2;\r\n\r\n            var w2 = 1 - w1;\r\n\r\n            var rgba = {\r\n                r: rgb2.r * w1 + rgb1.r * w2,\r\n                g: rgb2.g * w1 + rgb1.g * w2,\r\n                b: rgb2.b * w1 + rgb1.b * w2,\r\n                a: rgb2.a * p  + rgb1.a * (1 - p)\r\n            };\r\n\r\n            return new Color(rgba);\r\n\r\n        },\r\n\r\n        isValid : function(){\r\n            return true;\r\n        }\r\n    });\r\n\r\n    // `equals`\r\n    // Can be called with any Color input\r\n    Color.equals = function (color1, color2) {\r\n        if (!color1 || !color2) { return false; }\r\n        color1 = Color.parse(color1);\r\n        color2 = Color.parse(color2);\r\n\r\n        return color1.toRgbString() == color2.toRgbString();\r\n    };\r\n    \r\n\r\n    Color.random = function() {\r\n        return Color.fromRatio({\r\n            r: mathRandom(),\r\n            g: mathRandom(),\r\n            b: mathRandom()\r\n        });\r\n    };\r\n\r\n    Color.fromRgba = function(r,g,b,a) {\r\n        return new Color({\r\n            r,\r\n            g,\r\n            b,\r\n            a\r\n        })  \r\n    };\r\n\r\n    Color.fromRgb = function(r,g,b) {\r\n        return new Color({\r\n            r,\r\n            g,\r\n            b\r\n        })  \r\n    };\r\n\r\n    Color.fromHsl = function(h,s,l,a) {\r\n        var rgb = conversion.hslToRgb(h,s,l)\r\n        return new Color(rgb)  \r\n    };\r\n\r\n    Color.fromHsv = function(h,s,v,a) {\r\n        var rgb = conversion.hsvToRgb(h,s,v)\r\n        return new Color(rgb)  \r\n    }; \r\n\r\n    // Replace a decimal with it's percentage value\r\n    function convertToPercentage(n) {\r\n        if (n <= 1) {\r\n            n = (n * 100) + \"%\";\r\n        }\r\n\r\n        return n;\r\n    }\r\n\r\n    // Given a string or object, convert that input to RGB\r\n    // Possible string inputs:\r\n    //\r\n    //     \"red\"\r\n    //     \"#f00\" or \"f00\"\r\n    //     \"#ff0000\" or \"ff0000\"\r\n    //     \"#ff000000\" or \"ff000000\"\r\n    //     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\r\n    //     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\r\n    //     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\r\n    //     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\r\n    //     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\r\n    //     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\r\n    //     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\r\n    //\r\n    Color.parse = function (color) {\r\n        if (color instanceof Color) {\r\n            return color;\r\n        }\r\n\r\n        var rgb = { r: 0, g: 0, b: 0 };\r\n        var a = 1;\r\n        var ok = false;\r\n        var format = false;\r\n\r\n        if (typeof color == \"string\") {\r\n            color = conversion.strToRgb(color);\r\n        }\r\n\r\n        if (typeof color == \"object\") {\r\n            if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\r\n                rgb = conversion.rgbToRgb(color.r, color.g, color.b);\r\n                ok = true;\r\n                format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.v = convertToPercentage(color.v);\r\n                rgb = conversion.hsvToRgb(color.h, color.s, color.v);\r\n                ok = true;\r\n                format = \"hsv\";\r\n            }\r\n            else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\r\n                color.s = convertToPercentage(color.s);\r\n                color.l = convertToPercentage(color.l);\r\n                rgb =  conversion.hslToRgb(color.h, color.s, color.l);\r\n                ok = true;\r\n                format = \"hsl\";\r\n            }\r\n\r\n            if (color.hasOwnProperty(\"a\")) {\r\n                a = color.a;\r\n            }\r\n        }\r\n\r\n        return new Color(\r\n            {\r\n                ok: ok,\r\n                r: Math.min(255, Math.max(rgb.r, 0)),\r\n                g: Math.min(255, Math.max(rgb.g, 0)),\r\n                b: Math.min(255, Math.max(rgb.b, 0)),\r\n                a: a\r\n            },\r\n            {\r\n                format: color.format || format,                \r\n            }\r\n        );\r\n\r\n    }\r\n\r\n    /*\r\n    // If input is an object, force 1 into \"1.0\" to handle ratios properly\r\n    // String input requires \"1.0\" as input, so 1 will be treated as 1\r\n    Color.fromRatio = function(color, opts) {\r\n        if (typeof color == \"object\") {\r\n            var newColor = {};\r\n            for (var i in color) {\r\n                if (color.hasOwnProperty(i)) {\r\n                    if (i === \"a\") {\r\n                        newColor[i] = color[i];\r\n                    }\r\n                    else {\r\n                        newColor[i] = convertToPercentage(color[i]);\r\n                    }\r\n                }\r\n            }\r\n            color = newColor;\r\n        }\r\n\r\n        return new Color(color, opts);\r\n    };\r\n    */\r\n    return colors.Color = Color;\r\n});\r\n\ndefine('skylark-graphics-colors/named',[\r\n\t\"./colors\",\r\n\t\"./Color\",\r\n\t\"./_names\"\r\n],function(\r\n\tColor,\r\n\tparse,\r\n\t_names\r\n){\r\n\tvar named = {};\r\n\r\n\tfor (var name in _names) {\r\n\t\tnamed[name] = Color.parse(_names[name]);\r\n\t}\r\n\r\n\treturn colors.named = named;\r\n});\ndefine('skylark-graphics-colors/main',[\r\n\t\"./colors\",\r\n    \"./Color\",\r\n    \"./named\"\r\n], function(colors) {\r\n\treturn colors;\r\n});\ndefine('skylark-graphics-colors', ['skylark-graphics-colors/main'], function (main) { return main; });\n\n"]}