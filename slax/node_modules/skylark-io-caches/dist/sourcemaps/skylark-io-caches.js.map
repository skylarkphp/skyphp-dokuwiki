{"version":3,"sources":["skylark-io-caches.js"],"names":["define","skylark","caches","attach","storages","types","mixin","datetimes","cookie","get","name","sKey","this","has","unescape","document","replace","RegExp","escape","test","list","values","split","i","length","remove","path","set","value","expires","domain","secure","type","date","Date","now","setTime","getTime","expire","parseMilliSeconds","toGMTString","Emitter","Deferred","requestFileSystem","window","webkitRequestFileSystem","resolveLocalFileSystemURL","webkitResolveLocalFileSystemURL","MozBlobBuilder","WebKitBlobBuilder","BlobBuilder","errorHandler","e","msg","code","FileError","QUOTA_EXCEEDED_ERR","NOT_FOUND_ERR","SECURITY_ERR","INVALID_MODIFICATION_ERR","INVALID_STATE_ERR","LocalFileSystem","inherit","_fs","_isPersisted","_cwd","init","fs","root","readfileAsArrayBuffer","callback","errback","getFile","fileEntry","file","reader","FileReader","onloadend","result","readAsArrayBuffer","readfileAsDataURL","readAsDataURL","readfileAsText","readAsText","writefile","contents","self","folders","slice","mkdir","join","create","createWriter","fileWriter","truncated","onwriteend","truncate","position","onerror","blob","Blob","write","rmfile","readdir","getDirectory","dirEntry","dirReader","createReader","entries","readEntries","results","concat","Array","prototype","call","map","entry","isDirectory","folderParts","createDir","rootDir","exclusive","Error","rmdir","removeRecursively","copy","src","dest","cwd","copyTo","move","moveTo","chdir","onchdir","fullPath","importFromHost","files","deferred","f","promise","exportToHost","isSupported","request","size","isPersisted","typ","PERSISTENT","TEMPORARY","d","resolve","reject","requestLocalFileSystem","strings","storage","localStorage","key","val","undefined","setItem","serializeValue","defaultVal","deserializeValue","getItem","removeItem","clear","vaules","local","sessiionStorage","session","sessionStorage","main"],"mappings":"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","file":"../skylark-io-caches.js","sourcesContent":["define('skylark-io-caches/caches',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\t\"use strict\";\r\n\tlet caches = skylark.attach(\"io.caches\");\r\n\tcaches.storages =  caches.storages || {};\r\n\treturn caches;\r\n});\ndefine('skylark-io-caches/clipboard',[\r\n\t\"./caches\"\r\n],function(caches){\r\n\t\r\n});\ndefine('skylark-io-caches/cookie',[\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-objects/mixin\",\r\n    \"skylark-langx-datetimes\",\r\n    \"./caches\"\r\n], function(types,mixin,datetimes,caches) {\r\n\t\"use strict\";\r\n\r\n    function cookie() {\r\n        return cookie;\r\n    }\r\n\r\n    mixin(cookie, {\r\n\t\tget : function(name) {\r\n\t\t    if (!sKey || !this.has(name)) { return null; }\r\n\t\t\t\treturn unescape(document.cookie.replace(new RegExp(\"(?:^|.*;\\\\s*)\" + escape(name).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\\\\s*((?:[^;](?!;))*[^;]?).*\"),\"$1\"));\r\n\r\n\t\t},\r\n\r\n\t\thas : function(name) {\r\n\t\t\treturn (new RegExp(\"(?:^|;\\\\s*)\" + escape(name).replace(/[\\-\\.\\+\\*]/g, \"\\\\$&\") + \"\\\\s*\\\\=\")).test(document.cookie);\r\n\t\t},\r\n\r\n\r\n\t\tlist : function() {\r\n\t\t    var values = document.cookie.replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\").split(/\\s*(?:\\=[^;]*)?;\\s*/);\r\n\t\t    for (var i = 0; i < values.length; i++) { \r\n\t\t    \tvalues[i] = unescape(values[i]); \r\n\t\t    }\r\n\t\t    return values;\r\n\t\t},\r\n\r\n\t\tremove : function(name,path) {\r\n\t\t    if (!name || !this.has(name)) { \r\n\t\t    \treturn; \r\n\t\t   \t}\r\n\t\t    document.cookie = escape(name) + \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" + (path ? \"; path=\" + path : \"\");\r\n\t\t},\r\n\r\n\t\tset: function (name, value, expires, path, domain, secure) {\r\n\t\t    if (!name || /^(?:expires|max\\-age|path|domain|secure)$/i.test(name)) { return; }\r\n\r\n\t\t\tvar type = types.type(expires);\r\n\t\t\tif (type === 'number') {\r\n\t\t\t\tvar date = Date.now();\r\n\t\t\t\tdate.setTime(date.getTime() + (expire * 24 * 60 * 60 * 1000));\r\n\t\t\t\texpires = date;\r\n\t\t\t} else if (type === 'string') {\r\n\t\t\t\texpires = new Date(Date.now() + datetimes.parseMilliSeconds(expires));\r\n\t\t\t}\r\n\r\n\t\t    document.cookie = escape(name) + \"=\" + escape(value) + (expires? \"; domain=\" + expires.toGMTString()  : \"\") + (domain ? \"; domain=\" + domain : \"\") + (path ? \"; path=\" + path : \"\") + (secure ? \"; secure\" : \"\");\r\n\t\t  }\t\r\n    });\r\n\r\n\r\n    return caches.cookie = cookie;\r\n\r\n});\r\n\r\n\ndefine('skylark-io-caches/local-file-system',[\r\n    \"skylark-langx-objects/mixin\",\r\n    \"skylark-langx-events/Emitter\",\r\n    \"skylark-langx-async/Deferred\",\r\n    \"./caches\"\r\n], function(mixin,Emitter,Deferred,caches) {\r\n\t\"use strict\";\r\n\r\n\tvar requestFileSystem =  window.requestFileSystem || window.webkitRequestFileSystem,\r\n\t\tresolveLocalFileSystemURL = window.resolveLocalFileSystemURL || window.webkitResolveLocalFileSystemURL,\r\n     \tBlobBuilder = window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder;\r\n\r\n\r\n\tfunction errorHandler(e) {\r\n\t  var msg = '';\r\n\r\n\t  switch (e.code) {\r\n\t    case FileError.QUOTA_EXCEEDED_ERR:\r\n\t      msg = 'QUOTA_EXCEEDED_ERR';\r\n\t      break;\r\n\t    case FileError.NOT_FOUND_ERR:\r\n\t      msg = 'NOT_FOUND_ERR';\r\n\t      break;\r\n\t    case FileError.SECURITY_ERR:\r\n\t      msg = 'SECURITY_ERR';\r\n\t      break;\r\n\t    case FileError.INVALID_MODIFICATION_ERR:\r\n\t      msg = 'INVALID_MODIFICATION_ERR';\r\n\t      break;\r\n\t    case FileError.INVALID_STATE_ERR:\r\n\t      msg = 'INVALID_STATE_ERR';\r\n\t      break;\r\n\t    default:\r\n\t      msg = 'Unknown Error';\r\n\t      break;\r\n\t  };\r\n\r\n\t  return msg;\r\n\t}\r\n\t\r\n\tvar LocalFileSystem = Emitter.inherit({\r\n\t\t_fs : null,\r\n\t\t_isPersisted : true,\r\n\t\t_cwd : null,\r\n\r\n\t\tinit:\tfunction (fs) {\r\n\t\t\tthis._fs = fs;\r\n\t\t\tthis._cwd = fs.root;\r\n\t\t},\r\n\t\t\t\r\n\r\n\t\treadfileAsArrayBuffer :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsArrayBuffer(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treadfileAsDataURL :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsDataURL(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treadfileAsText :  function (path,callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.file(function (file) {\r\n\t\t        var reader = new FileReader();\r\n\t\t        reader.onloadend = function () {\r\n\t\t          callback(null, this.result);\r\n\t\t        };\r\n\t\t        reader.readAsText(file);\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\twritefile : function (path, contents, callback,errback) {\r\n\t\t    var self = this,\r\n\t\t    \tfolders = path.split('/');\r\n\t\t    folders = folders.slice(0, folders.length - 1);\r\n\r\n\t\t    this.mkdir(folders.join('/'),function(){\r\n\t\t\t    self._cwd.getFile(path, {create: true}, function (fileEntry) {\r\n\t\t\t      fileEntry.createWriter(function (fileWriter) {\r\n\t\t\t        var truncated = false;\r\n\t\t\t        fileWriter.onwriteend = function () {\r\n\t\t\t          if (!truncated) {\r\n\t\t\t            truncated = true;\r\n\t\t\t            this.truncate(this.position);\r\n\t\t\t            return;\r\n\t\t\t          }\r\n\t\t\t          callback && callback();\r\n\t\t\t        };\r\n\t\t\t        fileWriter.onerror = errback;\r\n\t\t\t        // TODO: find a way to write as binary too\r\n\t\t\t        var blob = contents;\r\n\t\t\t        if (!blob instanceof Blob) {\r\n\t\t\t        \tblob = new Blob([contents], {type: 'text/plain'});\r\n\t\t\t        } \r\n\t\t\t        fileWriter.write(blob);\r\n\t\t\t      }, errback);\r\n\t\t\t    }, errback);\r\n\r\n\t\t    });\r\n\t\t},\r\n\r\n\t\trmfile : function (path, callback,errback) {\r\n\t\t    this._cwd.getFile(path, {}, function (fileEntry) {\r\n\t\t      fileEntry.remove(function () {\r\n\t\t        callback();\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\treaddir : function (path, callback,errback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      var dirReader = dirEntry.createReader();\r\n\t\t      var entries = [];\r\n\t\t      readEntries();\r\n\t\t      function readEntries() {\r\n\t\t        dirReader.readEntries(function (results) {\r\n\t\t          if (!results.length) {\r\n\t\t            callback(null, entries);\r\n\t\t          }\r\n\t\t          else {\r\n\t\t            entries = entries.concat(\r\n\t\t            \tArray.prototype.slice.call(results).map(\r\n\t\t            \t\tfunction (entry) {\r\n\t\t              \t\t\treturn entry.name + (entry.isDirectory ? \"/\" : \"\");\r\n\t\t            \t\t}\r\n\t\t            \t)\r\n\t\t            );\r\n\t\t            readEntries();\r\n\t\t          }\r\n\t\t        }, errback);\r\n\t\t      }\r\n\t\t    }, errback);\r\n\t\t},\r\n\r\n\t\tmkdir : function (path, callback,errback) {\r\n\t\t    var folderParts = path.split('/');\r\n\r\n\t\t    var createDir = function(rootDir, folders) {\r\n\t\t      // Throw out './' or '/' and move on. Prevents: '/foo/.//bar'.\r\n\t\t      if (folders[0] == '.' || folders[0] == '') {\r\n\t\t        folders = folders.slice(1);\r\n\t\t      }\r\n\r\n\t\t      if (folders.length ==0) {\r\n\t\t      \tcallback(rootDir);\r\n\t\t      \treturn;\r\n\t\t      }\r\n\t\t      rootDir.getDirectory(folders[0], {create: true, exclusive: false},\r\n\t\t        function (dirEntry) {\r\n\t\t          if (dirEntry.isDirectory) { // TODO: check shouldn't be necessary.\r\n\t\t            // Recursively add the new subfolder if we have more to create and\r\n\t\t            // There was more than one folder to create.\r\n\t\t            if (folders.length && folderParts.length != 1) {\r\n\t\t              createDir(dirEntry, folders.slice(1));\r\n\t\t            } else {\r\n\t\t              // Return the last directory that was created.\r\n\t\t              if (callback) callback(dirEntry);\r\n\t\t            }\r\n\t\t          } else {\r\n\t\t            var e = new Error(path + ' is not a directory');\r\n\t\t            if (errback) {\r\n\t\t              errback(e);\r\n\t\t            } else {\r\n\t\t              throw e;\r\n\t\t            }\r\n\t\t          }\r\n\t\t        },\r\n\t\t        function(e) {\r\n\t\t            if (errback) {\r\n\t\t              errback(e);\r\n\t\t            } else {\r\n\t\t              throw e;\r\n\t\t            }\r\n\t\t        }\r\n\t\t      );\r\n\t\t    };\r\n\r\n\t\t    createDir(this._cwd, folderParts);\r\n\r\n\t\t},\r\n\r\n\t\trmdir : function (path, callback,errback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      dirEntry.removeRecursively(function () {\r\n\t\t        callback();\r\n\t\t      }, errback);\r\n\t\t    }, errback);\r\n\t\t  },\r\n\r\n\t\tcopy : function (src, dest, callback) {\r\n\t\t    // TODO: make sure works for cases where dest includes and excludes file name.\r\n\t\t    this._cwd.getFile(src, {}, function(fileEntry) {\r\n\t\t      cwd.getDirectory(dest, {}, function(dirEntry) {\r\n\t\t        fileEntry.copyTo(dirEntry, function () {\r\n\t\t          callback();\r\n\t\t        }, callback);\r\n\t\t      }, callback);\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\tmove : function(src, dest, callback) {\r\n\t\t    // TODO: handle more cases like file renames and moving/renaming directories\r\n\t\t    this._cwd.getFile(src, {}, function(fileEntry) {\r\n\t\t      cwd.getDirectory(dest, {}, function(dirEntry) {\r\n\t\t        fileEntry.moveTo(dirEntry, function () {\r\n\t\t          callback();\r\n\t\t        }, callback);\r\n\t\t      }, callback);\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\tchdir : function (path, callback) {\r\n\t\t    this._cwd.getDirectory(path, {}, function (dirEntry) {\r\n\t\t      cwd = dirEntry;\r\n\t\t      if (fs.onchdir) {\r\n\t\t        fs.onchdir(cwd.fullPath);\r\n\t\t      }\r\n\t\t      callback();\r\n\t\t    }, callback);\r\n\t\t},\r\n\r\n\t\timportFromHost : function(files) {\r\n\t\t    // Duplicate each file the user selected to the app's fs.\r\n\t\t    var deferred = new Deferred();\r\n\t\t    for (var i = 0, file; file = files[i]; ++i) {\r\n\t\t        (function(f) {\r\n\t\t\t        cwd.getFile(file.name, {create: true, exclusive: true}, function(fileEntry) {\r\n\t\t\t          fileEntry.createWriter(function(fileWriter) {\r\n\t\t\t            fileWriter.write(f); // Note: write() can take a File or Blob object.\r\n\t\t\t          }, errorHandler);\r\n\t\t\t        }, errorHandler);\r\n\t\t     \t})(file);\r\n \t   \t \t}\r\n  \t\t    return deferred.promise;\r\n\t\t  },\r\n\r\n\t\t  exportToHost : function() {\r\n\r\n\t\t  }\r\n\t\r\n\t});\r\n\t\r\n\r\n\r\n    function localfs() {\r\n        return localfs;\r\n    }\r\n\r\n    mixin(LocalFileSystem, {\r\n        isSupported : function() {\r\n            return !!requestFileSystem;\r\n        },\r\n        request : function(size,isPersisted){\r\n        \tsize = size || 1024 * 1024 * 10;\r\n        \tvar typ = isPersisted ? PERSISTENT : TEMPORARY,\r\n        \t\td = new Deferred();\r\n            requestFileSystem(typ, size, function(_fs) {\r\n                var fs = new LocalFileSystem(_fs,!!isPersisted);\r\n                d.resolve(fs);\r\n            }, function(e) {\r\n            \td.reject(e);\r\n            });\r\n\r\n            return d.promise;\r\n        }\r\n    });\r\n    \r\n    caches.requestLocalFileSystem = LocalFileSystem.request;\r\n\r\n\treturn caches.LocalFileSystem = LocalFileSystem;\r\n});\ndefine('skylark-io-caches/storages/local',[\r\n    \"skylark-langx-objects/mixin\",\r\n    \"skylark-langx-strings\",\r\n    \"../caches\"\r\n], function(mixin,strings,caches) {\r\n    \"use strict\";\r\n\r\n\r\n    var storage  = null;\r\n\r\n    try {\r\n        storage = window[\"localStorage\"];\r\n    } catch (e){\r\n\r\n    }\r\n\r\n    function localStorage() {\r\n        return localStorage;\r\n    }\r\n\r\n    mixin(localStorage, {\r\n        isSupported : function() {\r\n            return !!storage;\r\n        },\r\n\r\n        set : function(key, val) {\r\n            if (val === undefined) { \r\n                return this.remove(key) \r\n            }\r\n            storage.setItem(key, strings.serializeValue(val));\r\n            return val\r\n        },\r\n\r\n        get : function(key, defaultVal) {\r\n            var val = strings.deserializeValue(storage.getItem(key))\r\n            return (val === undefined ? defaultVal : val)\r\n        },\r\n\r\n        remove : function(key) { \r\n            storage.removeItem(key) \r\n        },\r\n\r\n        clear : function() { \r\n            storage.clear() \r\n        },\r\n\r\n        list : function() {\r\n            var vaules = {}\r\n            for (var i=0; i<storage.length; i++) {\r\n                vaules[key] = storage.key(i)\r\n            }\r\n\r\n            return values;\r\n        }\r\n    });\r\n\r\n    return  caches.storages.local = localStorage;\r\n\r\n});\r\n\r\n\ndefine('skylark-io-caches/storages/session',[\r\n    \"skylark-langx-objects/mixin\",\r\n    \"skylark-langx-strings\",\r\n    \"../caches\"\r\n], function(mixin,strings,caches) {\r\n    \"use strict\";\r\n\r\n    var storage  = null;\r\n\r\n    try {\r\n        storage = window[\"sessiionStorage\"];\r\n    } catch (e){\r\n\r\n    }\r\n\r\n    function sessiionStorage() {\r\n        return sessiionStorage;\r\n    }\r\n\r\n    mixin(sessiionStorage, {\r\n        isSupported : function() {\r\n            return !!storage;\r\n        },\r\n\r\n        set : function(key, val) {\r\n            if (val === undefined) { \r\n                return this.remove(key) \r\n            }\r\n            storage.setItem(key, strings.serializeValue(val));\r\n            return val\r\n        },\r\n\r\n        get : function(key, defaultVal) {\r\n            var val = strings.deserializeValue(storage.getItem(key))\r\n            return (val === undefined ? defaultVal : val)\r\n        },\r\n\r\n        remove : function(key) { \r\n            storage.removeItem(key) \r\n        },\r\n\r\n        clear : function() { \r\n            storage.clear() \r\n        },\r\n\r\n        list : function() {\r\n            var vaules = {}\r\n            for (var i=0; i<storage.length; i++) {\r\n                vaules[key] = storage.key(i)\r\n            }\r\n\r\n            return values;\r\n        }\r\n    });\r\n\r\n    return  caches.storages.session = sessionStorage;\r\n\r\n});\r\n\r\n\ndefine('skylark-io-caches/main',[\r\n\t\"./caches\",\r\n\t\"./clipboard\",\r\n\t\"./cookie\",\r\n\t\"./local-file-system\",\r\n\t\"./storages/local\",\r\n\t\"./storages/session\"\r\n],function(caches) {\r\n\t\"use strict\";\r\n\t\r\n\treturn caches;\r\n});\ndefine('skylark-io-caches', ['skylark-io-caches/main'], function (main) { return main; });\n\n"]}