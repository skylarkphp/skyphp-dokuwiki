/**
 * skylark-io-streams - The stream features enhancement for skylark utils.
 * @author Hudaokeji Co.,Ltd
 * @version v0.9.0
 * @link www.skylarkjs.org
 * @license MIT
 */
define(["./streams","./decode-stream"],function(t,e){var r=new Int32Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),i=new Int32Array([3,4,5,6,7,8,9,10,65547,65549,65551,65553,131091,131095,131099,131103,196643,196651,196659,196667,262211,262227,262243,262259,327811,327843,327875,327907,258,258,258]),a=new Int32Array([1,2,3,4,65541,65543,131081,131085,196625,196633,262177,262193,327745,327777,393345,393409,459009,459137,524801,525057,590849,591361,657409,658433,724993,727041,794625,798721,868353,876545]),n=[new Int32Array([459008,524368,524304,524568,459024,524400,524336,590016,459016,524384,524320,589984,524288,524416,524352,590048,459012,524376,524312,589968,459028,524408,524344,590032,459020,524392,524328,59e4,524296,524424,524360,590064,459010,524372,524308,524572,459026,524404,524340,590024,459018,524388,524324,589992,524292,524420,524356,590056,459014,524380,524316,589976,459030,524412,524348,590040,459022,524396,524332,590008,524300,524428,524364,590072,459009,524370,524306,524570,459025,524402,524338,590020,459017,524386,524322,589988,524290,524418,524354,590052,459013,524378,524314,589972,459029,524410,524346,590036,459021,524394,524330,590004,524298,524426,524362,590068,459011,524374,524310,524574,459027,524406,524342,590028,459019,524390,524326,589996,524294,524422,524358,590060,459015,524382,524318,589980,459031,524414,524350,590044,459023,524398,524334,590012,524302,524430,524366,590076,459008,524369,524305,524569,459024,524401,524337,590018,459016,524385,524321,589986,524289,524417,524353,590050,459012,524377,524313,589970,459028,524409,524345,590034,459020,524393,524329,590002,524297,524425,524361,590066,459010,524373,524309,524573,459026,524405,524341,590026,459018,524389,524325,589994,524293,524421,524357,590058,459014,524381,524317,589978,459030,524413,524349,590042,459022,524397,524333,590010,524301,524429,524365,590074,459009,524371,524307,524571,459025,524403,524339,590022,459017,524387,524323,589990,524291,524419,524355,590054,459013,524379,524315,589974,459029,524411,524347,590038,459021,524395,524331,590006,524299,524427,524363,590070,459011,524375,524311,524575,459027,524407,524343,590030,459019,524391,524327,589998,524295,524423,524359,590062,459015,524383,524319,589982,459031,524415,524351,590046,459023,524399,524335,590014,524303,524431,524367,590078,459008,524368,524304,524568,459024,524400,524336,590017,459016,524384,524320,589985,524288,524416,524352,590049,459012,524376,524312,589969,459028,524408,524344,590033,459020,524392,524328,590001,524296,524424,524360,590065,459010,524372,524308,524572,459026,524404,524340,590025,459018,524388,524324,589993,524292,524420,524356,590057,459014,524380,524316,589977,459030,524412,524348,590041,459022,524396,524332,590009,524300,524428,524364,590073,459009,524370,524306,524570,459025,524402,524338,590021,459017,524386,524322,589989,524290,524418,524354,590053,459013,524378,524314,589973,459029,524410,524346,590037,459021,524394,524330,590005,524298,524426,524362,590069,459011,524374,524310,524574,459027,524406,524342,590029,459019,524390,524326,589997,524294,524422,524358,590061,459015,524382,524318,589981,459031,524414,524350,590045,459023,524398,524334,590013,524302,524430,524366,590077,459008,524369,524305,524569,459024,524401,524337,590019,459016,524385,524321,589987,524289,524417,524353,590051,459012,524377,524313,589971,459028,524409,524345,590035,459020,524393,524329,590003,524297,524425,524361,590067,459010,524373,524309,524573,459026,524405,524341,590027,459018,524389,524325,589995,524293,524421,524357,590059,459014,524381,524317,589979,459030,524413,524349,590043,459022,524397,524333,590011,524301,524429,524365,590075,459009,524371,524307,524571,459025,524403,524339,590023,459017,524387,524323,589991,524291,524419,524355,590055,459013,524379,524315,589975,459029,524411,524347,590039,459021,524395,524331,590007,524299,524427,524363,590071,459011,524375,524311,524575,459027,524407,524343,590031,459019,524391,524327,589999,524295,524423,524359,590063,459015,524383,524319,589983,459031,524415,524351,590047,459023,524399,524335,590015,524303,524431,524367,590079]),9],o=[new Int32Array([327680,327696,327688,327704,327684,327700,327692,327708,327682,327698,327690,327706,327686,327702,327694,0,327681,327697,327689,327705,327685,327701,327693,327709,327683,327699,327691,327707,327687,327703,327695,0]),5],s=e.inherit({klassName:"FlateStream",_construct:function(t,r){this.str=t,this.dict=t.dict;var i=t.getByte(),a=t.getByte();if(-1===i||-1===a)throw new util.FormatError(`Invalid header in flate stream: ${i}, ${a}`);if(8!=(15&i))throw new util.FormatError(`Unknown compression method in flate stream: ${i}, ${a}`);if(((i<<8)+a)%31!=0)throw new util.FormatError(`Bad FCHECK in flate stream: ${i}, ${a}`);if(32&a)throw new util.FormatError(`FDICT bit set in flate stream: ${i}, ${a}`);this.codeSize=0,this.codeBuf=0,e.prototype._construct.call(this,r)},getBits:function(t){for(var e,r=this.str,i=this.codeSize,a=this.codeBuf;i<t;){if(-1===(e=r.getByte()))throw new util.FormatError("Bad encoding in flate stream");a|=e<<i,i+=8}return e=a&(1<<t)-1,this.codeBuf=a>>t,this.codeSize=i-=t,e},getCode:function(t){for(var e,r=this.str,i=t[0],a=t[1],n=this.codeSize,o=this.codeBuf;n<a&&-1!==(e=r.getByte());)o|=e<<n,n+=8;var s=i[o&(1<<a)-1],f=s>>16,h=65535&s;if(f<1||n<f)throw new util.FormatError("Bad encoding in flate stream");return this.codeBuf=o>>f,this.codeSize=n-f,h},generateHuffmanTable:function(t){var e,r=t.length,i=0;for(e=0;e<r;++e)t[e]>i&&(i=t[e]);for(var a=1<<i,n=new Int32Array(a),o=1,s=0,f=2;o<=i;++o,s<<=1,f<<=1)for(var h=0;h<r;++h)if(t[h]===o){var l=0,u=s;for(e=0;e<o;++e)l=l<<1|1&u,u>>=1;for(e=l;e<a;e+=f)n[e]=o<<16|h;++s}return[n,i]},readBlock:function(){var t,e,s=this.str,f=this.getBits(3);if(1&f&&(this.eof=!0),0!==(f>>=1)){var h,l;if(1===f)h=n,l=o;else{if(2!==f)throw new util.FormatError("Unknown block type in flate stream");var u,d=this.getBits(5)+257,c=this.getBits(5)+1,g=this.getBits(4)+4,B=new Uint8Array(r.length);for(u=0;u<g;++u)B[r[u]]=this.getBits(3);var m=this.generateHuffmanTable(B);e=0,u=0;for(var w,v,y,b=d+c,F=new Uint8Array(b);u<b;){var E=this.getCode(m);if(16===E)w=2,v=3,y=e;else if(17===E)w=3,v=3,y=e=0;else{if(18!==E){F[u++]=e=E;continue}w=7,v=11,y=e=0}for(var k=this.getBits(w)+v;k-- >0;)F[u++]=y}h=this.generateHuffmanTable(F.subarray(0,d)),l=this.generateHuffmanTable(F.subarray(d,b))}for(var A=(t=this.buffer)?t.length:0,I=this.bufferLength;;){var S=this.getCode(h);if(S<256)I+1>=A&&(A=(t=this.ensureBuffer(I+1)).length),t[I++]=S;else{if(256===S)return void(this.bufferLength=I);var $=(S=i[S-=257])>>16;$>0&&($=this.getBits($)),e=(65535&S)+$,S=this.getCode(l),($=(S=a[S])>>16)>0&&($=this.getBits($));var C=(65535&S)+$;I+e>=A&&(A=(t=this.ensureBuffer(I+e)).length);for(var p=0;p<e;++p,++I)t[I]=t[I-C]}}}else{var z;if(-1===(z=s.getByte()))throw new util.FormatError("Bad block header in flate stream");var H=z;if(-1===(z=s.getByte()))throw new util.FormatError("Bad block header in flate stream");if(H|=z<<8,-1===(z=s.getByte()))throw new util.FormatError("Bad block header in flate stream");var T=z;if(-1===(z=s.getByte()))throw new util.FormatError("Bad block header in flate stream");if((T|=z<<8)!==(65535&~H)&&(0!==H||0!==T))throw new util.FormatError("Bad uncompressed block length in flate stream");this.codeBuf=0,this.codeSize=0;const e=this.bufferLength,r=e+H;if(t=this.ensureBuffer(r),this.bufferLength=r,0===H)-1===s.peekByte()&&(this.eof=!0);else{const r=s.getBytes(H);t.set(r,e),r.length<H&&(this.eof=!0)}}}});return t.FlateStream=s});
//# sourceMappingURL=sourcemaps/flate-stream.js.map
