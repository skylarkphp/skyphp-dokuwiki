{"version":3,"sources":["_stream.js"],"names":["define","events","streams","Stream","Emitter","inherit","klassName","_construct","arrayBuffer","start","length","dict","this","bytes","Uint8Array","pos","end","get","getByte","getUint16","b0","b1","getInt32","[object Object]","forceClamped","strEnd","subarray","Uint8ClampedArray","peekByte","peekedByte","getBytes","begin","skip","n","reset","moveStart","makeSubStream","buffer"],"mappings":";;;;;;;AAAAA,QACI,uBACA,aACD,SAASC,EAAOC,GAEf,IAAIC,EAASF,EAAOG,QAAQC,SACxBC,UAAW,SAEXC,WAAY,SAASC,EAAaC,EAAOC,EAAQC,GAC7CC,KAAKC,MAAQL,aAAuBM,WAAaN,EAAc,IAAIM,WAAWN,GAC9EI,KAAKH,MAAQA,GAAS,EACtBG,KAAKG,IAAMH,KAAKH,MAChBG,KAAKI,IAAMP,EAAQC,GAAUE,KAAKC,MAAMH,OACxCE,KAAKD,KAAOA,GAIhBD,QACCO,IAAM,WACC,OAAOL,KAAKI,IAAMJ,KAAKH,QAI/BS,QAAS,WACL,OAAIN,KAAKG,KAAOH,KAAKI,KACT,EAELJ,KAAKC,MAAMD,KAAKG,QAG3BI,UAAW,WACP,IAAIC,EAAKR,KAAKM,UACVG,EAAKT,KAAKM,UACd,OAAY,IAARE,IAAqB,IAARC,GACL,GAEJD,GAAM,GAAKC,GAGvBC,SAAU,WAKN,OAJSV,KAAKM,WAIA,KAHLN,KAAKM,WAGa,KAFlBN,KAAKM,WAE0B,GAD/BN,KAAKM,WAIlBK,SAASb,EAAQc,GAAe,GAC5B,IAAIX,EAAQD,KAAKC,MACbE,EAAMH,KAAKG,IACXU,EAASb,KAAKI,IAClB,IAAKN,EAAQ,CACT,MAAMgB,EAAWb,EAAMa,SAASX,EAAKU,GACrC,OAAOD,EAAe,IAAIG,kBAAkBD,GAAYA,EAE5D,IAAIV,EAAMD,EAAML,EACZM,EAAMS,IACNT,EAAMS,GAEVb,KAAKG,IAAMC,EACX,MAAMU,EAAWb,EAAMa,SAASX,EAAKC,GACrC,OAAOQ,EAAe,IAAIG,kBAAkBD,GAAYA,GAG5DE,SAAU,WACN,IAAIC,EAAajB,KAAKM,UAItB,OAHoB,IAAhBW,GACAjB,KAAKG,MAEFc,GAGXN,UAAUb,EAAQc,GAAe,GAC7B,IAAIX,EAAQD,KAAKkB,SAASpB,EAAQc,GAElC,OADAZ,KAAKG,KAAOF,EAAMH,OACXG,GAGXU,aAAaQ,EAAOf,GAOhB,OANIe,EAAQ,IACRA,EAAQ,GAERf,EAAMJ,KAAKI,MACXA,EAAMJ,KAAKI,KAERJ,KAAKC,MAAMa,SAASK,EAAOf,IAGtCgB,KAAM,SAAqBC,GAClBA,IACDA,EAAI,GAERrB,KAAKG,KAAOkB,GAGhBC,MAAO,WACHtB,KAAKG,IAAMH,KAAKH,OAGpB0B,UAAW,WACPvB,KAAKH,MAAQG,KAAKG,KAGtBqB,cAAe,SAA8B3B,EAAOC,EAAQC,GACxD,OAAO,IAAIR,EAAOS,KAAKC,MAAMwB,OAAQ5B,EAAOC,EAAQC,MAI5D,OAAOT,EAAQC,OAASA","file":"../_stream.js","sourcesContent":["define([\r\n    \"skylark-langx-events\",\r\n    \"./streams\"\r\n], function(events,streams) {\r\n\r\n   \tvar Stream = events.Emitter.inherit({\r\n        klassName: \"Stream\",\r\n        \r\n        _construct: function(arrayBuffer, start, length, dict) {\r\n            this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\r\n            this.start = start || 0;\r\n            this.pos = this.start;\r\n            this.end = start + length || this.bytes.length;\r\n            this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n                return this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end) {\r\n                return -1;\r\n            }\r\n            return this.bytes[this.pos++];\r\n        },\r\n\r\n        getUint16: function Stream_getUint16() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            if (b0 === -1 || b1 === -1) {\r\n                return -1;\r\n            }\r\n            return (b0 << 8) + b1;\r\n        },\r\n\r\n        getInt32: function Stream_getInt32() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            var b2 = this.getByte();\r\n            var b3 = this.getByte();\r\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n        },\r\n\r\n        getBytes(length, forceClamped = false) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n            if (!length) {\r\n                const subarray = bytes.subarray(pos, strEnd);\r\n                return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n            }\r\n            var end = pos + length;\r\n            if (end > strEnd) {\r\n                end = strEnd;\r\n            }\r\n            this.pos = end;\r\n            const subarray = bytes.subarray(pos, end);\r\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n        },\r\n\r\n        peekByte: function Stream_peekByte() {\r\n            var peekedByte = this.getByte();\r\n            if (peekedByte !== -1) {\r\n                this.pos--;\r\n            }\r\n            return peekedByte;\r\n        },\r\n\r\n        peekBytes(length, forceClamped = false) {\r\n            var bytes = this.getBytes(length, forceClamped);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n\r\n        getByteRange(begin, end) {\r\n            if (begin < 0) {\r\n                begin = 0;\r\n            }\r\n            if (end > this.end) {\r\n                end = this.end;\r\n            }\r\n            return this.bytes.subarray(begin, end);\r\n        },\r\n\r\n        skip: function Stream_skip(n) {\r\n            if (!n) {\r\n                n = 1;\r\n            }\r\n            this.pos += n;\r\n        },\r\n\r\n        reset: function Stream_reset() {\r\n            this.pos = this.start;\r\n        },\r\n\r\n        moveStart: function Stream_moveStart() {\r\n            this.start = this.pos;\r\n        },\r\n        \r\n        makeSubStream: function Stream_makeSubStream(start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        }\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n"]}