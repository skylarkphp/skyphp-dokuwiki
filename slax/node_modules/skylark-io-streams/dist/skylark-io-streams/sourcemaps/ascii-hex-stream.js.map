{"version":3,"sources":["ascii-hex-stream.js"],"names":["define","streams","DecodeStream","AsciiHexStream","inherit","klassName","_construct","str","maybeLength","this","dict","firstDigit","prototype","call","readBlock","bytes","getBytes","length","maxDecodeLength","buffer","ensureBuffer","bufferLength","i","ii","digit","ch","eof"],"mappings":";;;;;;;AAAAA,QACI,YACA,mBACD,SAASC,EAASC,GAEjB,IAAIC,EAAiBD,EAAaE,SAC9BC,UAAY,iBAEZC,WAAa,SAAwBC,EAAKC,GACtCC,KAAKF,IAAMA,EACXE,KAAKC,KAAOH,EAAIG,KAChBD,KAAKE,YAAc,EACfH,IACAA,GAAc,IAGlBN,EAAaU,UAAUN,WAAWO,KAAKJ,KAAKD,IAGhDM,UAAY,WACR,IACIC,EAAQN,KAAKF,IAAIS,SADK,KAE1B,GAAKD,EAAME,OAAX,CAQA,IAJA,IAAIC,EAAkBH,EAAME,OAAS,GAAK,EACtCE,EAASV,KAAKW,aAAaX,KAAKY,aAAeH,GAC/CG,EAAeZ,KAAKY,aACpBV,EAAaF,KAAKE,WACbW,EAAI,EAAGC,EAAKR,EAAME,OAAQK,EAAIC,EAAID,IAAK,CAC5C,IAAmBE,EAAfC,EAAKV,EAAMO,GACf,GAAIG,GAAM,IAAMA,GAAM,GAClBD,EAAa,GAALC,MACL,CAAA,KAAIA,GAAM,IAAMA,GAAM,IAAMA,GAAM,IAAMA,GAAM,KAE9C,CAAA,GAAW,KAAPA,EAAW,CAClBhB,KAAKiB,KAAM,EACX,MAEA,SALAF,EAAoB,GAAN,GAALC,GAOTd,EAAa,EACbA,EAAaa,GAEbL,EAAOE,KAAkBV,GAAc,EAAIa,EAC3Cb,GAAc,GAGlBA,GAAc,GAAKF,KAAKiB,MACxBP,EAAOE,KAAkBV,GAAc,EACvCA,GAAc,GAElBF,KAAKE,WAAaA,EAClBF,KAAKY,aAAeA,OA/BhBZ,KAAKiB,KAAM,KAmCvB,OAAOzB,EAAQE,eAAiBA","file":"../ascii-hex-stream.js","sourcesContent":["define([\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var AsciiHexStream = DecodeStream.inherit({\r\n        klassName : \"AsciiHexStream\",\r\n\r\n        _construct : function AsciiHexStream(str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.firstDigit = -1;\r\n            if (maybeLength) {\r\n                maybeLength = 0.5 * maybeLength;\r\n            }\r\n\r\n            DecodeStream.prototype._construct.call(this,maybeLength);          \r\n        },\r\n\r\n        readBlock : function AsciiHexStream_readBlock() {\r\n            var UPSTREAM_BLOCK_SIZE = 8000;\r\n            var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\r\n            if (!bytes.length) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var maxDecodeLength = bytes.length + 1 >> 1;\r\n            var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\r\n            var bufferLength = this.bufferLength;\r\n            var firstDigit = this.firstDigit;\r\n            for (var i = 0, ii = bytes.length; i < ii; i++) {\r\n                var ch = bytes[i], digit;\r\n                if (ch >= 48 && ch <= 57) {\r\n                    digit = ch & 15;\r\n                } else if (ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102) {\r\n                    digit = (ch & 15) + 9;\r\n                } else if (ch === 62) {\r\n                    this.eof = true;\r\n                    break;\r\n                } else {\r\n                    continue;\r\n                }\r\n                if (firstDigit < 0) {\r\n                    firstDigit = digit;\r\n                } else {\r\n                    buffer[bufferLength++] = firstDigit << 4 | digit;\r\n                    firstDigit = -1;\r\n                }\r\n            }\r\n            if (firstDigit >= 0 && this.eof) {\r\n                buffer[bufferLength++] = firstDigit << 4;\r\n                firstDigit = -1;\r\n            }\r\n            this.firstDigit = firstDigit;\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.AsciiHexStream = AsciiHexStream;\r\n});\r\n"]}