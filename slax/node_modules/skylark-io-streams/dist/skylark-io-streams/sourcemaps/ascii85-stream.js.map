{"version":3,"sources":["ascii85-stream.js"],"names":["define","chars","streams","DecodeStream","Ascii85Stream","inherit","klassName","_construct","str","this","dict","input","Uint8Array","maybeLength","prototype","call","readBlock","c","getByte","isWhiteSpace","buffer","i","bufferLength","ensureBuffer","eof","t"],"mappings":";;;;;;;AAAAA,QACI,sBACA,YACA,mBACD,SAASC,EAAOC,EAASC,GAGxB,IAAIC,EAAgBD,EAAaE,SAC7BC,UAAY,gBAEZC,WAAa,SAASC,GAClBC,KAAKD,IAAMA,EACXC,KAAKC,KAAOF,EAAIE,KAChBD,KAAKE,MAAQ,IAAIC,WAAW,GACxBC,cACAA,aAAc,IAElBV,EAAaW,UAAUP,WAAWQ,KAAKN,KAAMI,cAGjDG,UAAY,WAMR,IALA,IAGIR,EAAMC,KAAKD,IACXS,EAAIT,EAAIU,UACLjB,EAAMkB,aAAaF,IACtBA,EAAIT,EAAIU,UAEZ,IANU,IAMND,GARa,MAQAA,EAAjB,CAIA,IAAsCG,EAClCC,EADAC,EAAeb,KAAKa,aAExB,GAbmB,MAafL,EAAoB,CAEpB,IADAG,EAASX,KAAKc,aAAaD,EAAe,GACrCD,EAAI,EAAGA,EAAI,IAAKA,EACjBD,EAAOE,EAAeD,GAAK,EAE/BZ,KAAKa,cAAgB,MAClB,CACH,IAAIX,EAAQF,KAAKE,MAEjB,IADAA,EAAM,GAAKM,EACNI,EAAI,EAAGA,EAAI,IAAKA,EAAG,CAEpB,IADAJ,EAAIT,EAAIU,UACDjB,EAAMkB,aAAaF,IACtBA,EAAIT,EAAIU,UAGZ,GADAP,EAAMU,GAAKJ,GA1BT,IA2BEA,GA7BK,MA6BQA,EACb,MAKR,GAFAG,EAASX,KAAKc,aAAaD,EAAeD,EAAI,GAC9CZ,KAAKa,cAAgBD,EAAI,EACrBA,EAAI,EAAG,CACP,KAAOA,EAAI,IAAKA,EACZV,EAAMU,GAAK,IAEfZ,KAAKe,KAAM,EAEf,IAAIC,EAAI,EACR,IAAKJ,EAAI,EAAGA,EAAI,IAAKA,EACjBI,EAAQ,GAAJA,GAAUd,EAAMU,GAAK,IAE7B,IAAKA,EAAI,EAAGA,GAAK,IAAKA,EAClBD,EAAOE,EAAeD,GAAS,IAAJI,EAC3BA,IAAM,QAtCVhB,KAAKe,KAAM,KA6CvB,OAAOtB,EAAQE,cAAgBA","file":"../ascii85-stream.js","sourcesContent":["define([\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n\r\n    var Ascii85Stream = DecodeStream.inherit({\r\n        klassName : \"Ascii85Stream\",\r\n\r\n        _construct : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.input = new Uint8Array(5);\r\n            if (maybeLength) {\r\n                maybeLength = 0.8 * maybeLength;\r\n            }\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function Ascii85Stream_readBlock() {\r\n            var TILDA_CHAR = 126;\r\n            var Z_LOWER_CHAR = 122;\r\n            var EOF = -1;\r\n            var str = this.str;\r\n            var c = str.getByte();\r\n            while (chars.isWhiteSpace(c)) {\r\n                c = str.getByte();\r\n            }\r\n            if (c === EOF || c === TILDA_CHAR) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var bufferLength = this.bufferLength, buffer;\r\n            var i;\r\n            if (c === Z_LOWER_CHAR) {\r\n                buffer = this.ensureBuffer(bufferLength + 4);\r\n                for (i = 0; i < 4; ++i) {\r\n                    buffer[bufferLength + i] = 0;\r\n                }\r\n                this.bufferLength += 4;\r\n            } else {\r\n                var input = this.input;\r\n                input[0] = c;\r\n                for (i = 1; i < 5; ++i) {\r\n                    c = str.getByte();\r\n                    while (chars.isWhiteSpace(c)) {\r\n                        c = str.getByte();\r\n                    }\r\n                    input[i] = c;\r\n                    if (c === EOF || c === TILDA_CHAR) {\r\n                        break;\r\n                    }\r\n                }\r\n                buffer = this.ensureBuffer(bufferLength + i - 1);\r\n                this.bufferLength += i - 1;\r\n                if (i < 5) {\r\n                    for (; i < 5; ++i) {\r\n                        input[i] = 33 + 84;\r\n                    }\r\n                    this.eof = true;\r\n                }\r\n                var t = 0;\r\n                for (i = 0; i < 5; ++i) {\r\n                    t = t * 85 + (input[i] - 33);\r\n                }\r\n                for (i = 3; i >= 0; --i) {\r\n                    buffer[bufferLength + i] = t & 255;\r\n                    t >>= 8;\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return streams.Ascii85Stream = Ascii85Stream;\r\n\r\n});\r\n"]}