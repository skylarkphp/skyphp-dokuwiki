{"version":3,"sources":["decode-stream.js"],"names":["define","events","chars","streams","emptyBuffer","Uint8Array","DecodeStream","Emitter","inherit","klassName","_construct","maybeMinBufferLength","this","_rawMinBufferLength","pos","bufferLength","eof","buffer","minBufferLength","length","get","Error","isEmpty","readBlock","ensureBuffer","requested","byteLength","size","buffer2","set","getByte","getUint16","b0","b1","getInt32","[object Object]","forceClamped","end","bufEnd","subarray","Uint8ClampedArray","peekByte","peekedByte","bytes","getBytes","makeSubStream","start","dict","Stream","begin","skip","n","reset","getBaseStreams","str"],"mappings":";;;;;;;AAAAA,QACI,uBACA,sBACA,aACD,SAASC,EAAQC,EAAOC,GACvB,IAAIC,EAAc,IAAIC,WAAW,GAG7BC,EAAeL,EAAOM,QAAQC,SAC9BC,UAAY,eAEZC,WAAa,SAASC,GAOlB,GANAC,KAAKC,oBAAsBF,GAAwB,EACnDC,KAAKE,IAAM,EACXF,KAAKG,aAAe,EACpBH,KAAKI,KAAM,EACXJ,KAAKK,OAASb,EACdQ,KAAKM,gBAAkB,IACnBP,EACA,KAAOC,KAAKM,gBAAkBP,GAC1BC,KAAKM,iBAAmB,GAIpCC,QACIC,IAAM,WAEF,MAAM,IAAIC,MAAM,2CAIxBC,SACIF,IAAM,WACF,MAAQR,KAAKI,KAA6B,IAAtBJ,KAAKG,cACrBH,KAAKW,YAET,OAA6B,IAAtBX,KAAKG,eAIpBS,aAAc,SAAmCC,GAC7C,IAAIR,EAASL,KAAKK,OAClB,GAAIQ,GAAaR,EAAOS,WACpB,OAAOT,EAGX,IADA,IAAIU,EAAOf,KAAKM,gBACTS,EAAOF,GACVE,GAAQ,EAEZ,IAAIC,EAAU,IAAIvB,WAAWsB,GAE7B,OADAC,EAAQC,IAAIZ,GACLL,KAAKK,OAASW,GAEzBE,QAAS,WAEL,IADA,IAAIhB,EAAMF,KAAKE,IACRF,KAAKG,cAAgBD,GAAK,CAC7B,GAAIF,KAAKI,IACL,OAAQ,EAEZJ,KAAKW,YAET,OAAOX,KAAKK,OAAOL,KAAKE,QAE5BiB,UAAW,WACP,IAAIC,EAAKpB,KAAKkB,UACVG,EAAKrB,KAAKkB,UACd,OAAY,IAARE,IAAqB,IAARC,GACL,GAEJD,GAAM,GAAKC,GAEvBC,SAAU,WAKN,OAJStB,KAAKkB,WAIA,KAHLlB,KAAKkB,WAGa,KAFlBlB,KAAKkB,WAE0B,GAD/BlB,KAAKkB,WAGlBK,SAAShB,EAAQiB,GAAe,GAC5B,IAAIC,EAAKvB,EAAMF,KAAKE,IACpB,GAAIK,EAAQ,CAGR,IAFAP,KAAKY,aAAaV,EAAMK,GACxBkB,EAAMvB,EAAMK,GACJP,KAAKI,KAAOJ,KAAKG,aAAesB,GACpCzB,KAAKW,YAET,IAAIe,EAAS1B,KAAKG,aACdsB,EAAMC,IACND,EAAMC,OAEP,CACH,MAAQ1B,KAAKI,KACTJ,KAAKW,YAETc,EAAMzB,KAAKG,aAEfH,KAAKE,IAAMuB,EACX,MAAME,EAAW3B,KAAKK,OAAOsB,SAASzB,EAAKuB,GAC3C,OAAOD,GAAkBG,aAAoBC,kBAAuDD,EAAlC,IAAIC,kBAAkBD,IAE5FE,SAAU,WACN,IAAIC,EAAa9B,KAAKkB,UAItB,OAHoB,IAAhBY,GACA9B,KAAKE,MAEF4B,GAEXP,UAAUhB,EAAQiB,GAAe,GAC7B,IAAIO,EAAQ/B,KAAKgC,SAASzB,EAAQiB,GAElC,OADAxB,KAAKE,KAAO6B,EAAMxB,OACXwB,GAEXE,cAAe,SAAoCC,EAAO3B,EAAQ4B,GAE9D,IADA,IAAIV,EAAMS,EAAQ3B,EACXP,KAAKG,cAAgBsB,IAAQzB,KAAKI,KACrCJ,KAAKW,YAET,OAAO,IAAIyB,OAAOpC,KAAKK,OAAQ6B,EAAO3B,EAAQ4B,IAElDZ,aAAac,EAAOZ,GAChB,MAAM,IAAIhB,MAAM,8CAGpB6B,KAAM,SAA2BC,GACxBA,IACDA,EAAI,GAERvC,KAAKE,KAAOqC,GAEhBC,MAAO,WACHxC,KAAKE,IAAM,GAEfuC,eAAgB,WACZ,OAAIzC,KAAK0C,KAAO1C,KAAK0C,IAAID,eACdzC,KAAK0C,IAAID,uBAO5B,OAAOlD,EAAQG,aAAeA","file":"../decode-stream.js","sourcesContent":["define([\r\n    \"skylark-langx-events\",\r\n    \"skylark-langx-chars\",\r\n    \"./streams\"\r\n], function(events, chars, streams) {\r\n    var emptyBuffer = new Uint8Array(0);\r\n\r\n\r\n    var DecodeStream = events.Emitter.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        _construct : function(maybeMinBufferLength) {\r\n            this._rawMinBufferLength = maybeMinBufferLength || 0;\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = emptyBuffer;\r\n            this.minBufferLength = 512;\r\n            if (maybeMinBufferLength) {\r\n                while (this.minBufferLength < maybeMinBufferLength) {\r\n                    this.minBufferLength *= 2;\r\n                }\r\n            }\r\n        },\r\n        length : {\r\n            get : function () {\r\n                //util.unreachable('Should not access DecodeStream.length');    \r\n                throw new Error('Should not access DecodeStream.length') ;               \r\n            }\r\n        },\r\n\r\n        isEmpty : {\r\n            get : function () {\r\n                while (!this.eof && this.bufferLength === 0) {\r\n                    this.readBlock();\r\n                }\r\n                return this.bufferLength === 0;\r\n            }\r\n        },\r\n\r\n        ensureBuffer: function DecodeStream_ensureBuffer(requested) {\r\n            var buffer = this.buffer;\r\n            if (requested <= buffer.byteLength) {\r\n                return buffer;\r\n            }\r\n            var size = this.minBufferLength;\r\n            while (size < requested) {\r\n                size *= 2;\r\n            }\r\n            var buffer2 = new Uint8Array(size);\r\n            buffer2.set(buffer);\r\n            return this.buffer = buffer2;\r\n        },\r\n        getByte: function DecodeStream_getByte() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof) {\r\n                    return -1;\r\n                }\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getUint16: function DecodeStream_getUint16() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            if (b0 === -1 || b1 === -1) {\r\n                return -1;\r\n            }\r\n            return (b0 << 8) + b1;\r\n        },\r\n        getInt32: function DecodeStream_getInt32() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            var b2 = this.getByte();\r\n            var b3 = this.getByte();\r\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n        },\r\n        getBytes(length, forceClamped = false) {\r\n            var end, pos = this.pos;\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n                while (!this.eof && this.bufferLength < end) {\r\n                    this.readBlock();\r\n                }\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd) {\r\n                    end = bufEnd;\r\n                }\r\n            } else {\r\n                while (!this.eof) {\r\n                    this.readBlock();\r\n                }\r\n                end = this.bufferLength;\r\n            }\r\n            this.pos = end;\r\n            const subarray = this.buffer.subarray(pos, end);\r\n            return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\r\n        },\r\n        peekByte: function DecodeStream_peekByte() {\r\n            var peekedByte = this.getByte();\r\n            if (peekedByte !== -1) {\r\n                this.pos--;\r\n            }\r\n            return peekedByte;\r\n        },\r\n        peekBytes(length, forceClamped = false) {\r\n            var bytes = this.getBytes(length, forceClamped);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n        makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof) {\r\n                this.readBlock();\r\n            }\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        getByteRange(begin, end) {\r\n            throw new Error(\"Should not call DecodeStream.getByteRange\") ;               \r\n            //util.unreachable('Should not call DecodeStream.getByteRange');\r\n        },\r\n        skip: function DecodeStream_skip(n) {\r\n            if (!n) {\r\n                n = 1;\r\n            }\r\n            this.pos += n;\r\n        },\r\n        reset: function DecodeStream_reset() {\r\n            this.pos = 0;\r\n        },\r\n        getBaseStreams: function DecodeStream_getBaseStreams() {\r\n            if (this.str && this.str.getBaseStreams) {\r\n                return this.str.getBaseStreams();\r\n            }\r\n            return [];\r\n        }\r\n\r\n    });\r\n\r\n    return streams.DecodeStream = DecodeStream;\r\n\r\n});\r\n"]}