{"version":3,"sources":["decrypt-stream.js"],"names":["define","streams","DecodeStream","DecryptStream","inherit","klassName","_construct","str","maybeLength","decrypt","this","dict","nextChunk","initialized","prototype","call","readBlock","chunk","getBytes","length","hasMoreData","i","bufferLength","n","buffer","ensureBuffer","eof"],"mappings":";;;;;;;AAAAA,QACI,YACA,mBACD,SAASC,EAASC,GAEjB,IAGIC,EAAgBD,EAAaE,SAC7BC,UAAY,gBAEZC,WAAa,SAAUC,EAAKC,EAAaC,GACrCC,KAAKH,IAAMA,EACXG,KAAKC,KAAOJ,EAAII,KAChBD,KAAKD,QAAUA,EACfC,KAAKE,UAAY,KACjBF,KAAKG,aAAc,EAEnBX,EAAaY,UAAUR,WAAWS,KAAKL,KAAMF,IAGjDQ,UAAY,WACR,IAAIC,EAOJ,GANIP,KAAKG,YACLI,EAAQP,KAAKE,WAEbK,EAAQP,KAAKH,IAAIW,SArBb,KAsBJR,KAAKG,aAAc,GAElBI,GAA0B,IAAjBA,EAAME,OAApB,CAIAT,KAAKE,UAAYF,KAAKH,IAAIW,SA5BlB,KA6BR,IAAIE,EAAcV,KAAKE,WAAaF,KAAKE,UAAUO,OAAS,EAE5DF,GAAQR,EADMC,KAAKD,SACHQ,GAAQG,GACxB,IACIC,EADAC,EAAeZ,KAAKY,aACjBC,EAAIN,EAAME,OACbK,EAASd,KAAKe,aAAaH,EAAeC,GAC9C,IAAKF,EAAI,EAAGA,EAAIE,EAAGF,IACfG,EAAOF,KAAkBL,EAAMI,GAEnCX,KAAKY,aAAeA,OAbhBZ,KAAKgB,KAAM,KAiBvB,OAAOzB,EAAQE,cAAgBA","file":"../decrypt-stream.js","sourcesContent":["define([\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var chunkSize = 512;\r\n\r\n\r\n    var DecryptStream = DecodeStream.inherit({\r\n        klassName : \"DecryptStream\",\r\n\r\n        _construct : function (str, maybeLength, decrypt) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.decrypt = decrypt;\r\n            this.nextChunk = null;\r\n            this.initialized = false;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        readBlock : function DecryptStream_readBlock() {\r\n            var chunk;\r\n            if (this.initialized) {\r\n                chunk = this.nextChunk;\r\n            } else {\r\n                chunk = this.str.getBytes(chunkSize);\r\n                this.initialized = true;\r\n            }\r\n            if (!chunk || chunk.length === 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            this.nextChunk = this.str.getBytes(chunkSize);\r\n            var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\r\n            var decrypt = this.decrypt;\r\n            chunk = decrypt(chunk, !hasMoreData);\r\n            var bufferLength = this.bufferLength;\r\n            var i, n = chunk.length;\r\n            var buffer = this.ensureBuffer(bufferLength + n);\r\n            for (i = 0; i < n; i++) {\r\n                buffer[bufferLength++] = chunk[i];\r\n            }\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.DecryptStream = DecryptStream;\r\n});\r\n"]}