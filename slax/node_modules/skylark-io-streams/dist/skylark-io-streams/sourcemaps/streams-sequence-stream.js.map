{"version":3,"sources":["streams-sequence-stream.js"],"names":["define","chars","streams","DecodeStream","StreamsSequenceStream","inherit","klassName","_construct","_streams","this","maybeLength","i","ii","length","stream","_rawMinBufferLength","prototype","call","readBlock","shift","chunk","getBytes","bufferLength","newLength","ensureBuffer","set","eof","getBaseStreams","baseStreams","push"],"mappings":";;;;;;;AAAAA,QACI,sBACA,YACA,mBACD,SAASC,EAAOC,EAASC,GAGxB,IAAIC,EAAwBD,EAAaE,SACrCC,UAAY,wBAEZC,WAAa,SAASC,GAClBC,KAAKP,QAAUM,EACf,IAAIE,EAAc,EAClB,IAAK,IAAIC,EAAI,EAAGC,EAAKJ,EAASK,OAAQF,EAAIC,EAAID,IAAK,CAC/C,MAAMG,EAASN,EAASG,GAEpBD,GADAI,aAAkBX,EACHW,EAAOC,oBAEPD,EAAOD,OAG9BV,EAAaa,UAAUT,WAAWU,KAAKR,KAAMC,IAGjDQ,UAAY,WACR,IAAIV,EAAWC,KAAKP,QACpB,GAAuB,IAAnBA,EAAQW,OAAZ,CAIaL,EAASW,QAAtB,IACIC,EAAQZ,EAASa,WACjBC,EAAeb,KAAKa,aACpBC,EAAYD,EAAeF,EAAMP,OACxBJ,KAAKe,aAAaD,GACxBE,IAAIL,EAAOE,GAClBb,KAAKa,aAAeC,OAThBd,KAAKiB,KAAM,GAYnBC,eAAiB,WAEb,IADA,IAAIC,KACKjB,EAAI,EAAGC,EAAKH,KAAKP,QAAQW,OAAQF,EAAIC,EAAID,IAAK,CACnD,IAAIG,EAASL,KAAKP,QAAQS,GACtBG,EAAOa,gBACPC,EAAYC,QAAQf,EAAOa,kBAGnC,OAAOC,KAIf,OAAO1B,EAAQE,sBAAwBA","file":"../streams-sequence-stream.js","sourcesContent":["define([\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n\r\n    var StreamsSequenceStream = DecodeStream.inherit({\r\n        klassName : \"StreamsSequenceStream\",\r\n\r\n        _construct : function(_streams) {\r\n            this.streams = _streams;\r\n            let maybeLength = 0;\r\n            for (let i = 0, ii = _streams.length; i < ii; i++) {\r\n                const stream = _streams[i];\r\n                if (stream instanceof DecodeStream) {\r\n                    maybeLength += stream._rawMinBufferLength;\r\n                } else {\r\n                    maybeLength += stream.length;\r\n                }\r\n            }\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function streamSequenceStreamReadBlock() {\r\n            var _streams = this.streams;\r\n            if (streams.length === 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var stream = _streams.shift();\r\n            var chunk = _streams.getBytes();\r\n            var bufferLength = this.bufferLength;\r\n            var newLength = bufferLength + chunk.length;\r\n            var buffer = this.ensureBuffer(newLength);\r\n            buffer.set(chunk, bufferLength);\r\n            this.bufferLength = newLength;\r\n        },\r\n\r\n        getBaseStreams : function StreamsSequenceStream_getBaseStreams() {\r\n            var baseStreams = [];\r\n            for (var i = 0, ii = this.streams.length; i < ii; i++) {\r\n                var stream = this.streams[i];\r\n                if (stream.getBaseStreams) {\r\n                    baseStreams.push(...stream.getBaseStreams());\r\n                }\r\n            }\r\n            return baseStreams;\r\n        }\r\n    });\r\n\r\n    return streams.StreamsSequenceStream = StreamsSequenceStream;\r\n\r\n});\r\n"]}