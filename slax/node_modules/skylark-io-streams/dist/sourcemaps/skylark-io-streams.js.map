{"version":3,"sources":["skylark-io-streams.js"],"names":["define","skylark","attach","events","chars","streams","emptyBuffer","Uint8Array","DecodeStream","Emitter","inherit","klassName","_construct","maybeMinBufferLength","this","_rawMinBufferLength","pos","bufferLength","eof","buffer","minBufferLength","length","get","Error","isEmpty","readBlock","ensureBuffer","requested","byteLength","size","buffer2","set","getByte","getUint16","b0","b1","getInt32","b2","b3","[object Object]","forceClamped","end","bufEnd","subarray","Uint8ClampedArray","peekByte","peekedByte","bytes","getBytes","makeSubStream","start","dict","Stream","begin","skip","n","reset","getBaseStreams","str","Ascii85Stream","input","maybeLength","prototype","call","c","isWhiteSpace","i","t","AsciiHexStream","firstDigit","maxDecodeLength","ii","digit","ch","arrayBuffer","strEnd","moveStart","ChunkedStream","numChunks","numChunksLoaded","charCodeAt","stream","getMissingChunks","chunks","chunk","loadedChunks","push","allChunksLoaded","_","onReceiveData","assert","chunkSize","beginChunk","Math","floor","endChunk","onReceiveInitialData","data","initialDataLength","ensureRange","MissingDataException","nextEmptyChunk","hasChunk","peekBytes","getByteRange","ChunkedStreamSubstream","Object","create","missingChunks","subStream","DecryptStream","decrypt","nextChunk","initialized","hasMoreData","FakeStream","codeLenCodeMap","Int32Array","lengthDecode","distDecode","fixedLitCodeTab","fixedDistCodeTab","FlateStream","cmf","flg","util","FormatError","codeSize","codeBuf","getBits","bits","b","getCode","table","codes","maxLen","code","codeLen","codeVal","generateHuffmanTable","lengths","len","val","code2","hdr","litCodeTable","distCodeTable","numLitCodes","numDistCodes","numCodeLenCodes","codeLenCodeLengths","codeLenCodeTab","bitsLength","bitsOffset","what","codeLengths","repeatLength","limit","code1","dist","k","blockLen","check","block","LZWStream","earlyChange","cachedData","bitsCached","lzwState","codeLength","nextCode","dictionaryValues","dictionaryLengths","Uint16Array","dictionaryPrevCodes","currentSequence","currentSequenceLength","readBits","lastCode","j","q","estimatedDecodedSize","blockSize","prevCode","decodedLength","currentBufferLength","hasPrev","min","log","NullStream","PredictorStream","params","primitives","isDict","predictor","readBlockTiff","readBlockPng","colors","columns","pixBytes","rowBytes","rawBytes","inbuf","outbuf","inbits","outbits","bytesPerPixel","sum","compArray","bitMask","kk","prevRow","up","upLeft","left","p","pa","pb","pc","RunLengthStream","repeatHeader","source","StreamsSequenceStream","_streams","shift","newLength","baseStreams","StringStream","main"],"mappings":"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AAI,KAAA,EACAuB,EAAA3B,KAAAG,aAIA,OADAH,KAAAE,IAAAyB,EACA3B,KAAAK,OAAAwB,SAAA3B,EAAAyB,MAKA,OAAApC,EAAA8G,WAAAA,IAGAnH,EAAA,mCACA,YACA,mBACA,SAAAK,EAAAG,GAEA,IAAA4G,EAAA,IAAAC,YACA,GACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,GACA,EACA,GACA,EACA,GACA,EACA,GACA,EACA,KAEAC,EAAA,IAAAD,YACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,IACA,IACA,MAEAE,EAAA,IAAAF,YACA,EACA,EACA,EACA,EACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SAEAG,GACA,IAAAH,YACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,KACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SAEA,GAEAI,GACA,IAAAJ,YACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,EACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,IAEA,GAIAK,EAAAlH,EAAAE,SACAC,UAAA,cAEAC,WAAA,SAAA8C,EAAAG,GACA/C,KAAA4C,IAAAA,EACA5C,KAAAqC,KAAAO,EAAAP,KACA,IAAAwE,EAAAjE,EAAA1B,UACA4F,EAAAlE,EAAA1B,UACA,IAAA,IAAA2F,IAAA,IAAAC,EACA,MAAA,IAAAC,KAAAC,+CAAAH,MAAAC,KAEA,GAAA,IAAA,G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","file":"../skylark-io-streams.js","sourcesContent":["define('skylark-io-streams/streams',[\r\n    \"skylark-langx-ns\"\r\n], function(skylark) {\r\n\r\n    return skylark.attach(\"io.streams\");\r\n});\r\n\ndefine('skylark-io-streams/decode-stream',[\r\n    \"skylark-langx-events\",\r\n    \"skylark-langx-chars\",\r\n    \"./streams\"\r\n], function(events, chars, streams) {\r\n    var emptyBuffer = new Uint8Array(0);\r\n\r\n\r\n    var DecodeStream = events.Emitter.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        _construct : function(maybeMinBufferLength) {\r\n            this._rawMinBufferLength = maybeMinBufferLength || 0;\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = emptyBuffer;\r\n            this.minBufferLength = 512;\r\n            if (maybeMinBufferLength) {\r\n                while (this.minBufferLength < maybeMinBufferLength) {\r\n                    this.minBufferLength *= 2;\r\n                }\r\n            }\r\n        },\r\n        length : {\r\n            get : function () {\r\n                //util.unreachable('Should not access DecodeStream.length');    \r\n                throw new Error('Should not access DecodeStream.length') ;               \r\n            }\r\n        },\r\n\r\n        isEmpty : {\r\n            get : function () {\r\n                while (!this.eof && this.bufferLength === 0) {\r\n                    this.readBlock();\r\n                }\r\n                return this.bufferLength === 0;\r\n            }\r\n        },\r\n\r\n        ensureBuffer: function DecodeStream_ensureBuffer(requested) {\r\n            var buffer = this.buffer;\r\n            if (requested <= buffer.byteLength) {\r\n                return buffer;\r\n            }\r\n            var size = this.minBufferLength;\r\n            while (size < requested) {\r\n                size *= 2;\r\n            }\r\n            var buffer2 = new Uint8Array(size);\r\n            buffer2.set(buffer);\r\n            return this.buffer = buffer2;\r\n        },\r\n        getByte: function DecodeStream_getByte() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof) {\r\n                    return -1;\r\n                }\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getUint16: function DecodeStream_getUint16() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            if (b0 === -1 || b1 === -1) {\r\n                return -1;\r\n            }\r\n            return (b0 << 8) + b1;\r\n        },\r\n        getInt32: function DecodeStream_getInt32() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            var b2 = this.getByte();\r\n            var b3 = this.getByte();\r\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n        },\r\n        getBytes(length, forceClamped = false) {\r\n            var end, pos = this.pos;\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n                while (!this.eof && this.bufferLength < end) {\r\n                    this.readBlock();\r\n                }\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd) {\r\n                    end = bufEnd;\r\n                }\r\n            } else {\r\n                while (!this.eof) {\r\n                    this.readBlock();\r\n                }\r\n                end = this.bufferLength;\r\n            }\r\n            this.pos = end;\r\n            const subarray = this.buffer.subarray(pos, end);\r\n            return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\r\n        },\r\n        peekByte: function DecodeStream_peekByte() {\r\n            var peekedByte = this.getByte();\r\n            if (peekedByte !== -1) {\r\n                this.pos--;\r\n            }\r\n            return peekedByte;\r\n        },\r\n        peekBytes(length, forceClamped = false) {\r\n            var bytes = this.getBytes(length, forceClamped);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n        makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof) {\r\n                this.readBlock();\r\n            }\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        getByteRange(begin, end) {\r\n            throw new Error(\"Should not call DecodeStream.getByteRange\") ;               \r\n            //util.unreachable('Should not call DecodeStream.getByteRange');\r\n        },\r\n        skip: function DecodeStream_skip(n) {\r\n            if (!n) {\r\n                n = 1;\r\n            }\r\n            this.pos += n;\r\n        },\r\n        reset: function DecodeStream_reset() {\r\n            this.pos = 0;\r\n        },\r\n        getBaseStreams: function DecodeStream_getBaseStreams() {\r\n            if (this.str && this.str.getBaseStreams) {\r\n                return this.str.getBaseStreams();\r\n            }\r\n            return [];\r\n        }\r\n\r\n    });\r\n\r\n    return streams.DecodeStream = DecodeStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/ascii85-stream',[\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n\r\n    var Ascii85Stream = DecodeStream.inherit({\r\n        klassName : \"Ascii85Stream\",\r\n\r\n        _construct : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.input = new Uint8Array(5);\r\n            if (maybeLength) {\r\n                maybeLength = 0.8 * maybeLength;\r\n            }\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function Ascii85Stream_readBlock() {\r\n            var TILDA_CHAR = 126;\r\n            var Z_LOWER_CHAR = 122;\r\n            var EOF = -1;\r\n            var str = this.str;\r\n            var c = str.getByte();\r\n            while (chars.isWhiteSpace(c)) {\r\n                c = str.getByte();\r\n            }\r\n            if (c === EOF || c === TILDA_CHAR) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var bufferLength = this.bufferLength, buffer;\r\n            var i;\r\n            if (c === Z_LOWER_CHAR) {\r\n                buffer = this.ensureBuffer(bufferLength + 4);\r\n                for (i = 0; i < 4; ++i) {\r\n                    buffer[bufferLength + i] = 0;\r\n                }\r\n                this.bufferLength += 4;\r\n            } else {\r\n                var input = this.input;\r\n                input[0] = c;\r\n                for (i = 1; i < 5; ++i) {\r\n                    c = str.getByte();\r\n                    while (chars.isWhiteSpace(c)) {\r\n                        c = str.getByte();\r\n                    }\r\n                    input[i] = c;\r\n                    if (c === EOF || c === TILDA_CHAR) {\r\n                        break;\r\n                    }\r\n                }\r\n                buffer = this.ensureBuffer(bufferLength + i - 1);\r\n                this.bufferLength += i - 1;\r\n                if (i < 5) {\r\n                    for (; i < 5; ++i) {\r\n                        input[i] = 33 + 84;\r\n                    }\r\n                    this.eof = true;\r\n                }\r\n                var t = 0;\r\n                for (i = 0; i < 5; ++i) {\r\n                    t = t * 85 + (input[i] - 33);\r\n                }\r\n                for (i = 3; i >= 0; --i) {\r\n                    buffer[bufferLength + i] = t & 255;\r\n                    t >>= 8;\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return streams.Ascii85Stream = Ascii85Stream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/ascii-hex-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var AsciiHexStream = DecodeStream.inherit({\r\n        klassName : \"AsciiHexStream\",\r\n\r\n        _construct : function AsciiHexStream(str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.firstDigit = -1;\r\n            if (maybeLength) {\r\n                maybeLength = 0.5 * maybeLength;\r\n            }\r\n\r\n            DecodeStream.prototype._construct.call(this,maybeLength);          \r\n        },\r\n\r\n        readBlock : function AsciiHexStream_readBlock() {\r\n            var UPSTREAM_BLOCK_SIZE = 8000;\r\n            var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\r\n            if (!bytes.length) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var maxDecodeLength = bytes.length + 1 >> 1;\r\n            var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\r\n            var bufferLength = this.bufferLength;\r\n            var firstDigit = this.firstDigit;\r\n            for (var i = 0, ii = bytes.length; i < ii; i++) {\r\n                var ch = bytes[i], digit;\r\n                if (ch >= 48 && ch <= 57) {\r\n                    digit = ch & 15;\r\n                } else if (ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102) {\r\n                    digit = (ch & 15) + 9;\r\n                } else if (ch === 62) {\r\n                    this.eof = true;\r\n                    break;\r\n                } else {\r\n                    continue;\r\n                }\r\n                if (firstDigit < 0) {\r\n                    firstDigit = digit;\r\n                } else {\r\n                    buffer[bufferLength++] = firstDigit << 4 | digit;\r\n                    firstDigit = -1;\r\n                }\r\n            }\r\n            if (firstDigit >= 0 && this.eof) {\r\n                buffer[bufferLength++] = firstDigit << 4;\r\n                firstDigit = -1;\r\n            }\r\n            this.firstDigit = firstDigit;\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.AsciiHexStream = AsciiHexStream;\r\n});\r\n\ndefine('skylark-io-streams/_stream',[\r\n    \"skylark-langx-events\",\r\n    \"./streams\"\r\n], function(events,streams) {\r\n\r\n   \tvar Stream = events.Emitter.inherit({\r\n        klassName: \"Stream\",\r\n        \r\n        _construct: function(arrayBuffer, start, length, dict) {\r\n            this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\r\n            this.start = start || 0;\r\n            this.pos = this.start;\r\n            this.end = start + length || this.bytes.length;\r\n            this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n                return this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end) {\r\n                return -1;\r\n            }\r\n            return this.bytes[this.pos++];\r\n        },\r\n\r\n        getUint16: function Stream_getUint16() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            if (b0 === -1 || b1 === -1) {\r\n                return -1;\r\n            }\r\n            return (b0 << 8) + b1;\r\n        },\r\n\r\n        getInt32: function Stream_getInt32() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            var b2 = this.getByte();\r\n            var b3 = this.getByte();\r\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n        },\r\n\r\n        getBytes(length, forceClamped = false) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n            if (!length) {\r\n                const subarray = bytes.subarray(pos, strEnd);\r\n                return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n            }\r\n            var end = pos + length;\r\n            if (end > strEnd) {\r\n                end = strEnd;\r\n            }\r\n            this.pos = end;\r\n            const subarray = bytes.subarray(pos, end);\r\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n        },\r\n\r\n        peekByte: function Stream_peekByte() {\r\n            var peekedByte = this.getByte();\r\n            if (peekedByte !== -1) {\r\n                this.pos--;\r\n            }\r\n            return peekedByte;\r\n        },\r\n\r\n        peekBytes(length, forceClamped = false) {\r\n            var bytes = this.getBytes(length, forceClamped);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n\r\n        getByteRange(begin, end) {\r\n            if (begin < 0) {\r\n                begin = 0;\r\n            }\r\n            if (end > this.end) {\r\n                end = this.end;\r\n            }\r\n            return this.bytes.subarray(begin, end);\r\n        },\r\n\r\n        skip: function Stream_skip(n) {\r\n            if (!n) {\r\n                n = 1;\r\n            }\r\n            this.pos += n;\r\n        },\r\n\r\n        reset: function Stream_reset() {\r\n            this.pos = this.start;\r\n        },\r\n\r\n        moveStart: function Stream_moveStart() {\r\n            this.start = this.pos;\r\n        },\r\n        \r\n        makeSubStream: function Stream_makeSubStream(start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        }\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n\ndefine('skylark-io-streams/chunked-stream',[\r\n    \"./streams\",\r\n    \"./_stream\"\r\n], function(streams,Stream) {\r\n\r\n\r\n    var ChunkedStream = Stream.inherit({\r\n        klassName : \"ChunkedStream\",\r\n\r\n        \"numChunks\": 0,\r\n        \"numChunksLoaded\": 0,\r\n\r\n        _construct : function(str) {\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n            DecodeStream.prototype._construct.call(bytes);          \r\n            this.dict = stream.dict;\r\n        },\r\n\r\n        \"numChunks\": function() {\r\n\r\n        },\r\n\r\n\r\n        getMissingChunks: function ChunkedStream_getMissingChunks() {\r\n            var chunks = [];\r\n            for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    chunks.push(chunk);\r\n                }\r\n            }\r\n            return chunks;\r\n        },\r\n\r\n        getBaseStreams: function ChunkedStream_getBaseStreams() {\r\n            return [this];\r\n        },\r\n\r\n        allChunksLoaded: function ChunkedStream_allChunksLoaded() {\r\n            var _ = this._;\r\n            return _.numChunksLoaded === _.numChunks;\r\n        },\r\n\r\n        onReceiveData: function(begin, chunk) {\r\n            var end = begin + chunk.byteLength;\r\n\r\n            assert(begin % this.chunkSize === 0, 'Bad begin offset: ' + begin);\r\n            // Using this.length is inaccurate here since this.start can be moved\r\n            // See ChunkedStream.moveStart()\r\n            var length = this.bytes.length;\r\n            assert(end % this.chunkSize === 0 || end === length,\r\n                'Bad end offset: ' + end);\r\n\r\n            this.bytes.set(new Uint8Array(chunk), begin);\r\n            var chunkSize = this.chunkSize;\r\n            var beginChunk = Math.floor(begin / chunkSize);\r\n            var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n\r\n            for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    this.loadedChunks[chunk] = true;\r\n                    ++this.numChunksLoaded;\r\n                }\r\n            }\r\n        },\r\n\r\n        onReceiveInitialData: function(data) {\r\n            this.bytes.set(data);\r\n            this.initialDataLength = data.length;\r\n            var endChunk = this.end === data.length ?\r\n                this.numChunks : Math.floor(data.length / this.chunkSize);\r\n            for (var i = 0; i < endChunk; i++) {\r\n                this.loadedChunks[i] = true;\r\n                ++this.numChunksLoaded;\r\n            }\r\n        },\r\n\r\n        ensureRange: function ChunkedStream_ensureRange(begin, end) {\r\n            if (begin >= end) {\r\n                return;\r\n            }\r\n\r\n            if (end <= this.initialDataLength) {\r\n                return;\r\n            }\r\n\r\n            var chunkSize = this.chunkSize;\r\n            var beginChunk = Math.floor(begin / chunkSize);\r\n            var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n            for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    throw new MissingDataException(begin, end);\r\n                }\r\n            }\r\n        },\r\n\r\n        nextEmptyChunk: function ChunkedStream_nextEmptyChunk(beginChunk) {\r\n            for (var chunk = beginChunk, n = this.numChunks; chunk < n; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    return chunk;\r\n                }\r\n            }\r\n            // Wrap around to beginning\r\n            for (var chunk = 0; chunk < beginChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    return chunk;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        hasChunk: function ChunkedStream_hasChunk(chunk) {\r\n            return chunk in this._.loadedChunks;\r\n        },\r\n\r\n        getByte: function ChunkedStream_getByte() {\r\n            var pos = this.pos;\r\n            if (pos >= this.end) {\r\n                return -1;\r\n            }\r\n            this.ensureRange(pos, pos + 1);\r\n            return this.bytes[this.pos++];\r\n        },\r\n\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function ChunkedStream_getBytes(length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length) {\r\n                this.ensureRange(pos, strEnd);\r\n                return bytes.subarray(pos, strEnd);\r\n            }\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n            this.ensureRange(pos, end);\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        peekBytes: function ChunkedStream_peekBytes(length) {\r\n            var bytes = this.getBytes(length);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n\r\n        getByteRange: function ChunkedStream_getBytes(begin, end) {\r\n            this.ensureRange(begin, end);\r\n            return this.bytes.subarray(begin, end);\r\n        },\r\n\r\n        skip: function ChunkedStream_skip(n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n\r\n        reset: function ChunkedStream_reset() {\r\n            this.pos = this.start;\r\n        },\r\n\r\n        moveStart: function ChunkedStream_moveStart() {\r\n            this.start = this.pos;\r\n        },\r\n\r\n        makeSubStream: function ChunkedStream_makeSubStream(start, length, dict) {\r\n            function ChunkedStreamSubstream() {}\r\n            ChunkedStreamSubstream.prototype = Object.create(this);\r\n            ChunkedStreamSubstream.prototype.getMissingChunks = function() {\r\n                var chunkSize = this.chunkSize;\r\n                var beginChunk = Math.floor(this.start / chunkSize);\r\n                var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\r\n                var missingChunks = [];\r\n                for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                    if (!(chunk in this.loadedChunks)) {\r\n                        missingChunks.push(chunk);\r\n                    }\r\n                }\r\n                return missingChunks;\r\n            };\r\n            var subStream = new ChunkedStreamSubstream();\r\n            subStream.pos = subStream.start = start;\r\n            subStream.end = start + length || this.end;\r\n            subStream.dict = dict;\r\n            return subStream;\r\n        }\r\n    });\r\n\r\n    return streams.ChunkedStream = ChunkedStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/decrypt-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var chunkSize = 512;\r\n\r\n\r\n    var DecryptStream = DecodeStream.inherit({\r\n        klassName : \"DecryptStream\",\r\n\r\n        _construct : function (str, maybeLength, decrypt) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.decrypt = decrypt;\r\n            this.nextChunk = null;\r\n            this.initialized = false;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        readBlock : function DecryptStream_readBlock() {\r\n            var chunk;\r\n            if (this.initialized) {\r\n                chunk = this.nextChunk;\r\n            } else {\r\n                chunk = this.str.getBytes(chunkSize);\r\n                this.initialized = true;\r\n            }\r\n            if (!chunk || chunk.length === 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            this.nextChunk = this.str.getBytes(chunkSize);\r\n            var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\r\n            var decrypt = this.decrypt;\r\n            chunk = decrypt(chunk, !hasMoreData);\r\n            var bufferLength = this.bufferLength;\r\n            var i, n = chunk.length;\r\n            var buffer = this.ensureBuffer(bufferLength + n);\r\n            for (i = 0; i < n; i++) {\r\n                buffer[bufferLength++] = chunk[i];\r\n            }\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.DecryptStream = DecryptStream;\r\n});\r\n\ndefine('skylark-io-streams/fake-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var FakeStream = DecodeStream.inherit({\r\n        klassName : \"FakeStream\",\r\n\r\n        _construct : function(stream) {\r\n            this.dict = stream.dict;\r\n            DecodeStream.prototype._construct.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var bufferLength = this.bufferLength;\r\n            bufferLength += 1024;\r\n            var buffer = this.ensureBuffer(bufferLength);\r\n            this.bufferLength = bufferLength;\r\n        },\r\n\r\n        getBytes : function (length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                this.eof = true;\r\n                end = this.bufferLength;\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        }\r\n\r\n    });\r\n\r\n    return streams.FakeStream = FakeStream;\r\n});\r\n\ndefine('skylark-io-streams/flate-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n    \r\n    var codeLenCodeMap = new Int32Array([\r\n        16,\r\n        17,\r\n        18,\r\n        0,\r\n        8,\r\n        7,\r\n        9,\r\n        6,\r\n        10,\r\n        5,\r\n        11,\r\n        4,\r\n        12,\r\n        3,\r\n        13,\r\n        2,\r\n        14,\r\n        1,\r\n        15\r\n    ]);\r\n    var lengthDecode = new Int32Array([\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        65547,\r\n        65549,\r\n        65551,\r\n        65553,\r\n        131091,\r\n        131095,\r\n        131099,\r\n        131103,\r\n        196643,\r\n        196651,\r\n        196659,\r\n        196667,\r\n        262211,\r\n        262227,\r\n        262243,\r\n        262259,\r\n        327811,\r\n        327843,\r\n        327875,\r\n        327907,\r\n        258,\r\n        258,\r\n        258\r\n    ]);\r\n    var distDecode = new Int32Array([\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        65541,\r\n        65543,\r\n        131081,\r\n        131085,\r\n        196625,\r\n        196633,\r\n        262177,\r\n        262193,\r\n        327745,\r\n        327777,\r\n        393345,\r\n        393409,\r\n        459009,\r\n        459137,\r\n        524801,\r\n        525057,\r\n        590849,\r\n        591361,\r\n        657409,\r\n        658433,\r\n        724993,\r\n        727041,\r\n        794625,\r\n        798721,\r\n        868353,\r\n        876545\r\n    ]);\r\n    var fixedLitCodeTab = [\r\n        new Int32Array([\r\n            459008,\r\n            524368,\r\n            524304,\r\n            524568,\r\n            459024,\r\n            524400,\r\n            524336,\r\n            590016,\r\n            459016,\r\n            524384,\r\n            524320,\r\n            589984,\r\n            524288,\r\n            524416,\r\n            524352,\r\n            590048,\r\n            459012,\r\n            524376,\r\n            524312,\r\n            589968,\r\n            459028,\r\n            524408,\r\n            524344,\r\n            590032,\r\n            459020,\r\n            524392,\r\n            524328,\r\n            590000,\r\n            524296,\r\n            524424,\r\n            524360,\r\n            590064,\r\n            459010,\r\n            524372,\r\n            524308,\r\n            524572,\r\n            459026,\r\n            524404,\r\n            524340,\r\n            590024,\r\n            459018,\r\n            524388,\r\n            524324,\r\n            589992,\r\n            524292,\r\n            524420,\r\n            524356,\r\n            590056,\r\n            459014,\r\n            524380,\r\n            524316,\r\n            589976,\r\n            459030,\r\n            524412,\r\n            524348,\r\n            590040,\r\n            459022,\r\n            524396,\r\n            524332,\r\n            590008,\r\n            524300,\r\n            524428,\r\n            524364,\r\n            590072,\r\n            459009,\r\n            524370,\r\n            524306,\r\n            524570,\r\n            459025,\r\n            524402,\r\n            524338,\r\n            590020,\r\n            459017,\r\n            524386,\r\n            524322,\r\n            589988,\r\n            524290,\r\n            524418,\r\n            524354,\r\n            590052,\r\n            459013,\r\n            524378,\r\n            524314,\r\n            589972,\r\n            459029,\r\n            524410,\r\n            524346,\r\n            590036,\r\n            459021,\r\n            524394,\r\n            524330,\r\n            590004,\r\n            524298,\r\n            524426,\r\n            524362,\r\n            590068,\r\n            459011,\r\n            524374,\r\n            524310,\r\n            524574,\r\n            459027,\r\n            524406,\r\n            524342,\r\n            590028,\r\n            459019,\r\n            524390,\r\n            524326,\r\n            589996,\r\n            524294,\r\n            524422,\r\n            524358,\r\n            590060,\r\n            459015,\r\n            524382,\r\n            524318,\r\n            589980,\r\n            459031,\r\n            524414,\r\n            524350,\r\n            590044,\r\n            459023,\r\n            524398,\r\n            524334,\r\n            590012,\r\n            524302,\r\n            524430,\r\n            524366,\r\n            590076,\r\n            459008,\r\n            524369,\r\n            524305,\r\n            524569,\r\n            459024,\r\n            524401,\r\n            524337,\r\n            590018,\r\n            459016,\r\n            524385,\r\n            524321,\r\n            589986,\r\n            524289,\r\n            524417,\r\n            524353,\r\n            590050,\r\n            459012,\r\n            524377,\r\n            524313,\r\n            589970,\r\n            459028,\r\n            524409,\r\n            524345,\r\n            590034,\r\n            459020,\r\n            524393,\r\n            524329,\r\n            590002,\r\n            524297,\r\n            524425,\r\n            524361,\r\n            590066,\r\n            459010,\r\n            524373,\r\n            524309,\r\n            524573,\r\n            459026,\r\n            524405,\r\n            524341,\r\n            590026,\r\n            459018,\r\n            524389,\r\n            524325,\r\n            589994,\r\n            524293,\r\n            524421,\r\n            524357,\r\n            590058,\r\n            459014,\r\n            524381,\r\n            524317,\r\n            589978,\r\n            459030,\r\n            524413,\r\n            524349,\r\n            590042,\r\n            459022,\r\n            524397,\r\n            524333,\r\n            590010,\r\n            524301,\r\n            524429,\r\n            524365,\r\n            590074,\r\n            459009,\r\n            524371,\r\n            524307,\r\n            524571,\r\n            459025,\r\n            524403,\r\n            524339,\r\n            590022,\r\n            459017,\r\n            524387,\r\n            524323,\r\n            589990,\r\n            524291,\r\n            524419,\r\n            524355,\r\n            590054,\r\n            459013,\r\n            524379,\r\n            524315,\r\n            589974,\r\n            459029,\r\n            524411,\r\n            524347,\r\n            590038,\r\n            459021,\r\n            524395,\r\n            524331,\r\n            590006,\r\n            524299,\r\n            524427,\r\n            524363,\r\n            590070,\r\n            459011,\r\n            524375,\r\n            524311,\r\n            524575,\r\n            459027,\r\n            524407,\r\n            524343,\r\n            590030,\r\n            459019,\r\n            524391,\r\n            524327,\r\n            589998,\r\n            524295,\r\n            524423,\r\n            524359,\r\n            590062,\r\n            459015,\r\n            524383,\r\n            524319,\r\n            589982,\r\n            459031,\r\n            524415,\r\n            524351,\r\n            590046,\r\n            459023,\r\n            524399,\r\n            524335,\r\n            590014,\r\n            524303,\r\n            524431,\r\n            524367,\r\n            590078,\r\n            459008,\r\n            524368,\r\n            524304,\r\n            524568,\r\n            459024,\r\n            524400,\r\n            524336,\r\n            590017,\r\n            459016,\r\n            524384,\r\n            524320,\r\n            589985,\r\n            524288,\r\n            524416,\r\n            524352,\r\n            590049,\r\n            459012,\r\n            524376,\r\n            524312,\r\n            589969,\r\n            459028,\r\n            524408,\r\n            524344,\r\n            590033,\r\n            459020,\r\n            524392,\r\n            524328,\r\n            590001,\r\n            524296,\r\n            524424,\r\n            524360,\r\n            590065,\r\n            459010,\r\n            524372,\r\n            524308,\r\n            524572,\r\n            459026,\r\n            524404,\r\n            524340,\r\n            590025,\r\n            459018,\r\n            524388,\r\n            524324,\r\n            589993,\r\n            524292,\r\n            524420,\r\n            524356,\r\n            590057,\r\n            459014,\r\n            524380,\r\n            524316,\r\n            589977,\r\n            459030,\r\n            524412,\r\n            524348,\r\n            590041,\r\n            459022,\r\n            524396,\r\n            524332,\r\n            590009,\r\n            524300,\r\n            524428,\r\n            524364,\r\n            590073,\r\n            459009,\r\n            524370,\r\n            524306,\r\n            524570,\r\n            459025,\r\n            524402,\r\n            524338,\r\n            590021,\r\n            459017,\r\n            524386,\r\n            524322,\r\n            589989,\r\n            524290,\r\n            524418,\r\n            524354,\r\n            590053,\r\n            459013,\r\n            524378,\r\n            524314,\r\n            589973,\r\n            459029,\r\n            524410,\r\n            524346,\r\n            590037,\r\n            459021,\r\n            524394,\r\n            524330,\r\n            590005,\r\n            524298,\r\n            524426,\r\n            524362,\r\n            590069,\r\n            459011,\r\n            524374,\r\n            524310,\r\n            524574,\r\n            459027,\r\n            524406,\r\n            524342,\r\n            590029,\r\n            459019,\r\n            524390,\r\n            524326,\r\n            589997,\r\n            524294,\r\n            524422,\r\n            524358,\r\n            590061,\r\n            459015,\r\n            524382,\r\n            524318,\r\n            589981,\r\n            459031,\r\n            524414,\r\n            524350,\r\n            590045,\r\n            459023,\r\n            524398,\r\n            524334,\r\n            590013,\r\n            524302,\r\n            524430,\r\n            524366,\r\n            590077,\r\n            459008,\r\n            524369,\r\n            524305,\r\n            524569,\r\n            459024,\r\n            524401,\r\n            524337,\r\n            590019,\r\n            459016,\r\n            524385,\r\n            524321,\r\n            589987,\r\n            524289,\r\n            524417,\r\n            524353,\r\n            590051,\r\n            459012,\r\n            524377,\r\n            524313,\r\n            589971,\r\n            459028,\r\n            524409,\r\n            524345,\r\n            590035,\r\n            459020,\r\n            524393,\r\n            524329,\r\n            590003,\r\n            524297,\r\n            524425,\r\n            524361,\r\n            590067,\r\n            459010,\r\n            524373,\r\n            524309,\r\n            524573,\r\n            459026,\r\n            524405,\r\n            524341,\r\n            590027,\r\n            459018,\r\n            524389,\r\n            524325,\r\n            589995,\r\n            524293,\r\n            524421,\r\n            524357,\r\n            590059,\r\n            459014,\r\n            524381,\r\n            524317,\r\n            589979,\r\n            459030,\r\n            524413,\r\n            524349,\r\n            590043,\r\n            459022,\r\n            524397,\r\n            524333,\r\n            590011,\r\n            524301,\r\n            524429,\r\n            524365,\r\n            590075,\r\n            459009,\r\n            524371,\r\n            524307,\r\n            524571,\r\n            459025,\r\n            524403,\r\n            524339,\r\n            590023,\r\n            459017,\r\n            524387,\r\n            524323,\r\n            589991,\r\n            524291,\r\n            524419,\r\n            524355,\r\n            590055,\r\n            459013,\r\n            524379,\r\n            524315,\r\n            589975,\r\n            459029,\r\n            524411,\r\n            524347,\r\n            590039,\r\n            459021,\r\n            524395,\r\n            524331,\r\n            590007,\r\n            524299,\r\n            524427,\r\n            524363,\r\n            590071,\r\n            459011,\r\n            524375,\r\n            524311,\r\n            524575,\r\n            459027,\r\n            524407,\r\n            524343,\r\n            590031,\r\n            459019,\r\n            524391,\r\n            524327,\r\n            589999,\r\n            524295,\r\n            524423,\r\n            524359,\r\n            590063,\r\n            459015,\r\n            524383,\r\n            524319,\r\n            589983,\r\n            459031,\r\n            524415,\r\n            524351,\r\n            590047,\r\n            459023,\r\n            524399,\r\n            524335,\r\n            590015,\r\n            524303,\r\n            524431,\r\n            524367,\r\n            590079\r\n        ]),\r\n        9\r\n    ];\r\n    var fixedDistCodeTab = [\r\n        new Int32Array([\r\n            327680,\r\n            327696,\r\n            327688,\r\n            327704,\r\n            327684,\r\n            327700,\r\n            327692,\r\n            327708,\r\n            327682,\r\n            327698,\r\n            327690,\r\n            327706,\r\n            327686,\r\n            327702,\r\n            327694,\r\n            0,\r\n            327681,\r\n            327697,\r\n            327689,\r\n            327705,\r\n            327685,\r\n            327701,\r\n            327693,\r\n            327709,\r\n            327683,\r\n            327699,\r\n            327691,\r\n            327707,\r\n            327687,\r\n            327703,\r\n            327695,\r\n            0\r\n        ]),\r\n        5\r\n    ];\r\n\r\n\r\n    var FlateStream = DecodeStream.inherit({\r\n        klassName : \"FlateStream\",\r\n\r\n        _construct :function (str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            var cmf = str.getByte();\r\n            var flg = str.getByte();\r\n            if (cmf === -1 || flg === -1) {\r\n                throw new util.FormatError(`Invalid header in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            if ((cmf & 15) !== 8) {\r\n                throw new util.FormatError(`Unknown compression method in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            if (((cmf << 8) + flg) % 31 !== 0) {\r\n                throw new util.FormatError(`Bad FCHECK in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            if (flg & 32) {\r\n                throw new util.FormatError(`FDICT bit set in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            this.codeSize = 0;\r\n            this.codeBuf = 0;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        getBits : function FlateStream_getBits(bits) {\r\n            var str = this.str;\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var b;\r\n            while (codeSize < bits) {\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad encoding in flate stream');\r\n                }\r\n                codeBuf |= b << codeSize;\r\n                codeSize += 8;\r\n            }\r\n            b = codeBuf & (1 << bits) - 1;\r\n            this.codeBuf = codeBuf >> bits;\r\n            this.codeSize = codeSize -= bits;\r\n            return b;\r\n        },\r\n\r\n        getCode : function FlateStream_getCode(table) {\r\n            var str = this.str;\r\n            var codes = table[0];\r\n            var maxLen = table[1];\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var b;\r\n            while (codeSize < maxLen) {\r\n                if ((b = str.getByte()) === -1) {\r\n                    break;\r\n                }\r\n                codeBuf |= b << codeSize;\r\n                codeSize += 8;\r\n            }\r\n            var code = codes[codeBuf & (1 << maxLen) - 1];\r\n            var codeLen = code >> 16;\r\n            var codeVal = code & 65535;\r\n            if (codeLen < 1 || codeSize < codeLen) {\r\n                throw new util.FormatError('Bad encoding in flate stream');\r\n            }\r\n            this.codeBuf = codeBuf >> codeLen;\r\n            this.codeSize = codeSize - codeLen;\r\n            return codeVal;\r\n        },\r\n\r\n        generateHuffmanTable : function flateStreamGenerateHuffmanTable(lengths) {\r\n            var n = lengths.length;\r\n            var maxLen = 0;\r\n            var i;\r\n            for (i = 0; i < n; ++i) {\r\n                if (lengths[i] > maxLen) {\r\n                    maxLen = lengths[i];\r\n                }\r\n            }\r\n            var size = 1 << maxLen;\r\n            var codes = new Int32Array(size);\r\n            for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\r\n                for (var val = 0; val < n; ++val) {\r\n                    if (lengths[val] === len) {\r\n                        var code2 = 0;\r\n                        var t = code;\r\n                        for (i = 0; i < len; ++i) {\r\n                            code2 = code2 << 1 | t & 1;\r\n                            t >>= 1;\r\n                        }\r\n                        for (i = code2; i < size; i += skip) {\r\n                            codes[i] = len << 16 | val;\r\n                        }\r\n                        ++code;\r\n                    }\r\n                }\r\n            }\r\n            return [\r\n                codes,\r\n                maxLen\r\n            ];\r\n        },\r\n\r\n        readBlock : function FlateStream_readBlock() {\r\n            var buffer, len;\r\n            var str = this.str;\r\n            var hdr = this.getBits(3);\r\n            if (hdr & 1) {\r\n                this.eof = true;\r\n            }\r\n            hdr >>= 1;\r\n            if (hdr === 0) {\r\n                var b;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                var blockLen = b;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                blockLen |= b << 8;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                var check = b;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                check |= b << 8;\r\n                if (check !== (~blockLen & 65535) && (blockLen !== 0 || check !== 0)) {\r\n                    throw new util.FormatError('Bad uncompressed block length in flate stream');\r\n                }\r\n                this.codeBuf = 0;\r\n                this.codeSize = 0;\r\n                const bufferLength = this.bufferLength, end = bufferLength + blockLen;\r\n                buffer = this.ensureBuffer(end);\r\n                this.bufferLength = end;\r\n                if (blockLen === 0) {\r\n                    if (str.peekByte() === -1) {\r\n                        this.eof = true;\r\n                    }\r\n                } else {\r\n                    const block = str.getBytes(blockLen);\r\n                    buffer.set(block, bufferLength);\r\n                    if (block.length < blockLen) {\r\n                        this.eof = true;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            var litCodeTable;\r\n            var distCodeTable;\r\n            if (hdr === 1) {\r\n                litCodeTable = fixedLitCodeTab;\r\n                distCodeTable = fixedDistCodeTab;\r\n            } else if (hdr === 2) {\r\n                var numLitCodes = this.getBits(5) + 257;\r\n                var numDistCodes = this.getBits(5) + 1;\r\n                var numCodeLenCodes = this.getBits(4) + 4;\r\n                var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\r\n                var i;\r\n                for (i = 0; i < numCodeLenCodes; ++i) {\r\n                    codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\r\n                }\r\n                var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\r\n                len = 0;\r\n                i = 0;\r\n                var codes = numLitCodes + numDistCodes;\r\n                var codeLengths = new Uint8Array(codes);\r\n                var bitsLength, bitsOffset, what;\r\n                while (i < codes) {\r\n                    var code = this.getCode(codeLenCodeTab);\r\n                    if (code === 16) {\r\n                        bitsLength = 2;\r\n                        bitsOffset = 3;\r\n                        what = len;\r\n                    } else if (code === 17) {\r\n                        bitsLength = 3;\r\n                        bitsOffset = 3;\r\n                        what = len = 0;\r\n                    } else if (code === 18) {\r\n                        bitsLength = 7;\r\n                        bitsOffset = 11;\r\n                        what = len = 0;\r\n                    } else {\r\n                        codeLengths[i++] = len = code;\r\n                        continue;\r\n                    }\r\n                    var repeatLength = this.getBits(bitsLength) + bitsOffset;\r\n                    while (repeatLength-- > 0) {\r\n                        codeLengths[i++] = what;\r\n                    }\r\n                }\r\n                litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\r\n                distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\r\n            } else {\r\n                throw new util.FormatError('Unknown block type in flate stream');\r\n            }\r\n            buffer = this.buffer;\r\n            var limit = buffer ? buffer.length : 0;\r\n            var pos = this.bufferLength;\r\n            while (true) {\r\n                var code1 = this.getCode(litCodeTable);\r\n                if (code1 < 256) {\r\n                    if (pos + 1 >= limit) {\r\n                        buffer = this.ensureBuffer(pos + 1);\r\n                        limit = buffer.length;\r\n                    }\r\n                    buffer[pos++] = code1;\r\n                    continue;\r\n                }\r\n                if (code1 === 256) {\r\n                    this.bufferLength = pos;\r\n                    return;\r\n                }\r\n                code1 -= 257;\r\n                code1 = lengthDecode[code1];\r\n                var code2 = code1 >> 16;\r\n                if (code2 > 0) {\r\n                    code2 = this.getBits(code2);\r\n                }\r\n                len = (code1 & 65535) + code2;\r\n                code1 = this.getCode(distCodeTable);\r\n                code1 = distDecode[code1];\r\n                code2 = code1 >> 16;\r\n                if (code2 > 0) {\r\n                    code2 = this.getBits(code2);\r\n                }\r\n                var dist = (code1 & 65535) + code2;\r\n                if (pos + len >= limit) {\r\n                    buffer = this.ensureBuffer(pos + len);\r\n                    limit = buffer.length;\r\n                }\r\n                for (var k = 0; k < len; ++k, ++pos) {\r\n                    buffer[pos] = buffer[pos - dist];\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return streams.FlateStream = FlateStream;\r\n});\r\n\ndefine('skylark-io-streams/lzw-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var LZWStream = DecodeStream.inherit({\r\n        klassName : \"LZWStream\",\r\n\r\n        _construct : function (str, maybeLength, earlyChange) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.cachedData = 0;\r\n            this.bitsCached = 0;\r\n            var maxLzwDictionarySize = 4096;\r\n            var lzwState = {\r\n                earlyChange,\r\n                codeLength: 9,\r\n                nextCode: 258,\r\n                dictionaryValues: new Uint8Array(maxLzwDictionarySize),\r\n                dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\r\n                dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\r\n                currentSequence: new Uint8Array(maxLzwDictionarySize),\r\n                currentSequenceLength: 0\r\n            };\r\n            for (var i = 0; i < 256; ++i) {\r\n                lzwState.dictionaryValues[i] = i;\r\n                lzwState.dictionaryLengths[i] = 1;\r\n            }\r\n            this.lzwState = lzwState;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        readBits: function LZWStream_readBits(n) {\r\n            var bitsCached = this.bitsCached;\r\n            var cachedData = this.cachedData;\r\n            while (bitsCached < n) {\r\n                var c = this.str.getByte();\r\n                if (c === -1) {\r\n                    this.eof = true;\r\n                    return null;\r\n                }\r\n                cachedData = cachedData << 8 | c;\r\n                bitsCached += 8;\r\n            }\r\n            this.bitsCached = bitsCached -= n;\r\n            this.cachedData = cachedData;\r\n            this.lastCode = null;\r\n            return cachedData >>> bitsCached & (1 << n) - 1;\r\n        },\r\n\r\n        readBlock : function LZWStream_readBlock() {\r\n            var blockSize = 512;\r\n            var estimatedDecodedSize = blockSize * 2, decodedSizeDelta = blockSize;\r\n            var i, j, q;\r\n            var lzwState = this.lzwState;\r\n            if (!lzwState) {\r\n                return;\r\n            }\r\n            var earlyChange = lzwState.earlyChange;\r\n            var nextCode = lzwState.nextCode;\r\n            var dictionaryValues = lzwState.dictionaryValues;\r\n            var dictionaryLengths = lzwState.dictionaryLengths;\r\n            var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\r\n            var codeLength = lzwState.codeLength;\r\n            var prevCode = lzwState.prevCode;\r\n            var currentSequence = lzwState.currentSequence;\r\n            var currentSequenceLength = lzwState.currentSequenceLength;\r\n            var decodedLength = 0;\r\n            var currentBufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n            for (i = 0; i < blockSize; i++) {\r\n                var code = this.readBits(codeLength);\r\n                var hasPrev = currentSequenceLength > 0;\r\n                if (code < 256) {\r\n                    currentSequence[0] = code;\r\n                    currentSequenceLength = 1;\r\n                } else if (code >= 258) {\r\n                    if (code < nextCode) {\r\n                        currentSequenceLength = dictionaryLengths[code];\r\n                        for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\r\n                            currentSequence[j] = dictionaryValues[q];\r\n                            q = dictionaryPrevCodes[q];\r\n                        }\r\n                    } else {\r\n                        currentSequence[currentSequenceLength++] = currentSequence[0];\r\n                    }\r\n                } else if (code === 256) {\r\n                    codeLength = 9;\r\n                    nextCode = 258;\r\n                    currentSequenceLength = 0;\r\n                    continue;\r\n                } else {\r\n                    this.eof = true;\r\n                    delete this.lzwState;\r\n                    break;\r\n                }\r\n                if (hasPrev) {\r\n                    dictionaryPrevCodes[nextCode] = prevCode;\r\n                    dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\r\n                    dictionaryValues[nextCode] = currentSequence[0];\r\n                    nextCode++;\r\n                    codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\r\n                }\r\n                prevCode = code;\r\n                decodedLength += currentSequenceLength;\r\n                if (estimatedDecodedSize < decodedLength) {\r\n                    do {\r\n                        estimatedDecodedSize += decodedSizeDelta;\r\n                    } while (estimatedDecodedSize < decodedLength);\r\n                    buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n                }\r\n                for (j = 0; j < currentSequenceLength; j++) {\r\n                    buffer[currentBufferLength++] = currentSequence[j];\r\n                }\r\n            }\r\n            lzwState.nextCode = nextCode;\r\n            lzwState.codeLength = codeLength;\r\n            lzwState.prevCode = prevCode;\r\n            lzwState.currentSequenceLength = currentSequenceLength;\r\n            this.bufferLength = currentBufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.LZWStream = LZWStream;\r\n});\r\n\ndefine('skylark-io-streams/null-stream',[\r\n    \"./streams\",\r\n    \"./_stream\"\r\n], function( streams, Stream) {\r\n\r\n    var NullStream = Stream.inherit({\r\n        klassName : \"NullStream\",\r\n\r\n        _construct : function() {\r\n            Stream.prototype._construct.call(this, new Uint8Array(0));        \r\n        }\r\n    });\r\n\r\n\r\n    return streams.NullStream = NullStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/predictor-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n\r\n    var PredictorStream = DecodeStream.inherit({\r\n        klassName : \"PredictorStream\",\r\n\r\n        _construct : function (str, maybeLength, params) {\r\n            if (!primitives.isDict(params)) {\r\n                return str;\r\n            }\r\n            var predictor = this.predictor = params.get('Predictor') || 1;\r\n            if (predictor <= 1) {\r\n                return str;\r\n            }\r\n            if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\r\n                //throw new util.FormatError(`Unsupported predictor: ${ predictor }`);\r\n                throw new Error(`Unsupported predictor: ${ predictor }`);\r\n            }\r\n            if (predictor === 2) {\r\n                this.readBlock = this.readBlockTiff;\r\n            } else {\r\n                this.readBlock = this.readBlockPng;\r\n            }\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            var colors = this.colors = params.get('Colors') || 1;\r\n            var bits = this.bits = params.get('BitsPerComponent') || 8;\r\n            var columns = this.columns = params.get('Columns') || 1;\r\n            this.pixBytes = colors * bits + 7 >> 3;\r\n            this.rowBytes = columns * colors * bits + 7 >> 3;\r\n            DecodeStream.call(this, maybeLength);\r\n            return this;\r\n        },\r\n\r\n        readBlockTiff : function predictorStreamReadBlockTiff() {\r\n            var rowBytes = this.rowBytes;\r\n            var bufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n            var bits = this.bits;\r\n            var colors = this.colors;\r\n            var rawBytes = this.str.getBytes(rowBytes);\r\n            this.eof = !rawBytes.length;\r\n            if (this.eof) {\r\n                return;\r\n            }\r\n            var inbuf = 0, outbuf = 0;\r\n            var inbits = 0, outbits = 0;\r\n            var pos = bufferLength;\r\n            var i;\r\n            if (bits === 1 && colors === 1) {\r\n                for (i = 0; i < rowBytes; ++i) {\r\n                    var c = rawBytes[i] ^ inbuf;\r\n                    c ^= c >> 1;\r\n                    c ^= c >> 2;\r\n                    c ^= c >> 4;\r\n                    inbuf = (c & 1) << 7;\r\n                    buffer[pos++] = c;\r\n                }\r\n            } else if (bits === 8) {\r\n                for (i = 0; i < colors; ++i) {\r\n                    buffer[pos++] = rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    buffer[pos] = buffer[pos - colors] + rawBytes[i];\r\n                    pos++;\r\n                }\r\n            } else if (bits === 16) {\r\n                var bytesPerPixel = colors * 2;\r\n                for (i = 0; i < bytesPerPixel; ++i) {\r\n                    buffer[pos++] = rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; i += 2) {\r\n                    var sum = ((rawBytes[i] & 255) << 8) + (rawBytes[i + 1] & 255) + ((buffer[pos - bytesPerPixel] & 255) << 8) + (buffer[pos - bytesPerPixel + 1] & 255);\r\n                    buffer[pos++] = sum >> 8 & 255;\r\n                    buffer[pos++] = sum & 255;\r\n                }\r\n            } else {\r\n                var compArray = new Uint8Array(colors + 1);\r\n                var bitMask = (1 << bits) - 1;\r\n                var j = 0, k = bufferLength;\r\n                var columns = this.columns;\r\n                for (i = 0; i < columns; ++i) {\r\n                    for (var kk = 0; kk < colors; ++kk) {\r\n                        if (inbits < bits) {\r\n                            inbuf = inbuf << 8 | rawBytes[j++] & 255;\r\n                            inbits += 8;\r\n                        }\r\n                        compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\r\n                        inbits -= bits;\r\n                        outbuf = outbuf << bits | compArray[kk];\r\n                        outbits += bits;\r\n                        if (outbits >= 8) {\r\n                            buffer[k++] = outbuf >> outbits - 8 & 255;\r\n                            outbits -= 8;\r\n                        }\r\n                    }\r\n                }\r\n                if (outbits > 0) {\r\n                    buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\r\n                }\r\n            }\r\n            this.bufferLength += rowBytes;\r\n        },\r\n\r\n        readBlockPng : function predictorStreamReadBlockPng() {\r\n            var rowBytes = this.rowBytes;\r\n            var pixBytes = this.pixBytes;\r\n            var predictor = this.str.getByte();\r\n            var rawBytes = this.str.getBytes(rowBytes);\r\n            this.eof = !rawBytes.length;\r\n            if (this.eof) {\r\n                return;\r\n            }\r\n            var bufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n            var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\r\n            if (prevRow.length === 0) {\r\n                prevRow = new Uint8Array(rowBytes);\r\n            }\r\n            var i, j = bufferLength, up, c;\r\n            switch (predictor) {\r\n            case 0:\r\n                for (i = 0; i < rowBytes; ++i) {\r\n                    buffer[j++] = rawBytes[i];\r\n                }\r\n                break;\r\n            case 1:\r\n                for (i = 0; i < pixBytes; ++i) {\r\n                    buffer[j++] = rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 255;\r\n                    j++;\r\n                }\r\n                break;\r\n            case 2:\r\n                for (i = 0; i < rowBytes; ++i) {\r\n                    buffer[j++] = prevRow[i] + rawBytes[i] & 255;\r\n                }\r\n                break;\r\n            case 3:\r\n                for (i = 0; i < pixBytes; ++i) {\r\n                    buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 255;\r\n                    j++;\r\n                }\r\n                break;\r\n            case 4:\r\n                for (i = 0; i < pixBytes; ++i) {\r\n                    up = prevRow[i];\r\n                    c = rawBytes[i];\r\n                    buffer[j++] = up + c;\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    up = prevRow[i];\r\n                    var upLeft = prevRow[i - pixBytes];\r\n                    var left = buffer[j - pixBytes];\r\n                    var p = left + up - upLeft;\r\n                    var pa = p - left;\r\n                    if (pa < 0) {\r\n                        pa = -pa;\r\n                    }\r\n                    var pb = p - up;\r\n                    if (pb < 0) {\r\n                        pb = -pb;\r\n                    }\r\n                    var pc = p - upLeft;\r\n                    if (pc < 0) {\r\n                        pc = -pc;\r\n                    }\r\n                    c = rawBytes[i];\r\n                    if (pa <= pb && pa <= pc) {\r\n                        buffer[j++] = left + c;\r\n                    } else if (pb <= pc) {\r\n                        buffer[j++] = up + c;\r\n                    } else {\r\n                        buffer[j++] = upLeft + c;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                //throw new util.FormatError(`Unsupported predictor: ${ predictor }`);\r\n                throw new Error(`Unsupported predictor: ${ predictor }`);\r\n            }\r\n            this.bufferLength += rowBytes;\r\n        }\r\n    });\r\n\r\n    return streams.PredictorStream = PredictorStream;\r\n});\r\n\ndefine('skylark-io-streams/run-length-stream',[\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n    var RunLengthStream = DecodeStream.inherit({\r\n        klassName : \"RunLengthStream\",\r\n\r\n        _construct : function (str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function RunLengthStream_readBlock() {\r\n            var repeatHeader = this.str.getBytes(2);\r\n            if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var buffer;\r\n            var bufferLength = this.bufferLength;\r\n            var n = repeatHeader[0];\r\n            if (n < 128) {\r\n                buffer = this.ensureBuffer(bufferLength + n + 1);\r\n                buffer[bufferLength++] = repeatHeader[1];\r\n                if (n > 0) {\r\n                    var source = this.str.getBytes(n);\r\n                    buffer.set(source, bufferLength);\r\n                    bufferLength += n;\r\n                }\r\n            } else {\r\n                n = 257 - n;\r\n                var b = repeatHeader[1];\r\n                buffer = this.ensureBuffer(bufferLength + n + 1);\r\n                for (var i = 0; i < n; i++) {\r\n                    buffer[bufferLength++] = b;\r\n                }\r\n            }\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.RunLengthStream = RunLengthStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/streams-sequence-stream',[\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n\r\n    var StreamsSequenceStream = DecodeStream.inherit({\r\n        klassName : \"StreamsSequenceStream\",\r\n\r\n        _construct : function(_streams) {\r\n            this.streams = _streams;\r\n            let maybeLength = 0;\r\n            for (let i = 0, ii = _streams.length; i < ii; i++) {\r\n                const stream = _streams[i];\r\n                if (stream instanceof DecodeStream) {\r\n                    maybeLength += stream._rawMinBufferLength;\r\n                } else {\r\n                    maybeLength += stream.length;\r\n                }\r\n            }\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function streamSequenceStreamReadBlock() {\r\n            var _streams = this.streams;\r\n            if (streams.length === 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var stream = _streams.shift();\r\n            var chunk = _streams.getBytes();\r\n            var bufferLength = this.bufferLength;\r\n            var newLength = bufferLength + chunk.length;\r\n            var buffer = this.ensureBuffer(newLength);\r\n            buffer.set(chunk, bufferLength);\r\n            this.bufferLength = newLength;\r\n        },\r\n\r\n        getBaseStreams : function StreamsSequenceStream_getBaseStreams() {\r\n            var baseStreams = [];\r\n            for (var i = 0, ii = this.streams.length; i < ii; i++) {\r\n                var stream = this.streams[i];\r\n                if (stream.getBaseStreams) {\r\n                    baseStreams.push(...stream.getBaseStreams());\r\n                }\r\n            }\r\n            return baseStreams;\r\n        }\r\n    });\r\n\r\n    return streams.StreamsSequenceStream = StreamsSequenceStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/string-stream',[\r\n    \"./streams\",\r\n    \"./_stream\"\r\n], function(streams, Stream) {\r\n\r\n    var StringStream = Stream.inherit({\r\n        klassName : \"StringStream\",\r\n\r\n        _construct : function(str) {\r\n            //const bytes = util.stringToBytes(str);\r\n            //TODO: chartCodeAt() >255\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n\r\n            Stream.prototype._construct.call(this,bytes);          \r\n        }\r\n    });\r\n\r\n\r\n    return streams.StringStream = StringStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/main',[\r\n    \"./streams\",\r\n    \"./ascii85-stream\",\r\n    \"./ascii-hex-stream\",\r\n    \"./chunked-stream\",\r\n    \"./decode-stream\",\r\n    \"./decrypt-stream\",\r\n    \"./fake-stream\",\r\n    \"./flate-stream\",\r\n    \"./lzw-stream\",\r\n    \"./null-stream\",\r\n    \"./predictor-stream\",\r\n    \"./run-length-stream\",\r\n    \"./_stream\",\r\n    \"./streams-sequence-stream\",\r\n    \"./string-stream\"\r\n], function(streams) {\r\n\r\n\treturn streams;\r\n});\ndefine('skylark-io-streams', ['skylark-io-streams/main'], function (main) { return main; });\n\n"]}