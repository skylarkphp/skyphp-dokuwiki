{"version":3,"sources":["skylark-io-streams.js"],"names":[],"mappingsfile":"../skylark-io-streams.js","sourcesContent":["define('skylark-io-streams/streams',[\r\n    \"skylark-langx-ns\"\r\n], function(skylark) {\r\n\r\n    return skylark.attach(\"io.streams\");\r\n});\r\n\ndefine('skylark-io-streams/decode-stream',[\r\n    \"skylark-langx-events\",\r\n    \"skylark-langx-chars\",\r\n    \"./streams\"\r\n], function(events, chars, streams) {\r\n    var emptyBuffer = new Uint8Array(0);\r\n\r\n\r\n    var DecodeStream = events.Emitter.inherit({\r\n        klassName : \"DecodeStream\",\r\n\r\n        _construct : function(maybeMinBufferLength) {\r\n            this._rawMinBufferLength = maybeMinBufferLength || 0;\r\n            this.pos = 0;\r\n            this.bufferLength = 0;\r\n            this.eof = false;\r\n            this.buffer = emptyBuffer;\r\n            this.minBufferLength = 512;\r\n            if (maybeMinBufferLength) {\r\n                while (this.minBufferLength < maybeMinBufferLength) {\r\n                    this.minBufferLength *= 2;\r\n                }\r\n            }\r\n        },\r\n        length : {\r\n            get : function () {\r\n                //util.unreachable('Should not access DecodeStream.length');    \r\n                throw new Error('Should not access DecodeStream.length') ;               \r\n            }\r\n        },\r\n\r\n        isEmpty : {\r\n            get : function () {\r\n                while (!this.eof && this.bufferLength === 0) {\r\n                    this.readBlock();\r\n                }\r\n                return this.bufferLength === 0;\r\n            }\r\n        },\r\n\r\n        ensureBuffer: function DecodeStream_ensureBuffer(requested) {\r\n            var buffer = this.buffer;\r\n            if (requested <= buffer.byteLength) {\r\n                return buffer;\r\n            }\r\n            var size = this.minBufferLength;\r\n            while (size < requested) {\r\n                size *= 2;\r\n            }\r\n            var buffer2 = new Uint8Array(size);\r\n            buffer2.set(buffer);\r\n            return this.buffer = buffer2;\r\n        },\r\n        getByte: function DecodeStream_getByte() {\r\n            var pos = this.pos;\r\n            while (this.bufferLength <= pos) {\r\n                if (this.eof) {\r\n                    return -1;\r\n                }\r\n                this.readBlock();\r\n            }\r\n            return this.buffer[this.pos++];\r\n        },\r\n        getUint16: function DecodeStream_getUint16() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            if (b0 === -1 || b1 === -1) {\r\n                return -1;\r\n            }\r\n            return (b0 << 8) + b1;\r\n        },\r\n        getInt32: function DecodeStream_getInt32() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            var b2 = this.getByte();\r\n            var b3 = this.getByte();\r\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n        },\r\n        getBytes(length, forceClamped = false) {\r\n            var end, pos = this.pos;\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n                while (!this.eof && this.bufferLength < end) {\r\n                    this.readBlock();\r\n                }\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd) {\r\n                    end = bufEnd;\r\n                }\r\n            } else {\r\n                while (!this.eof) {\r\n                    this.readBlock();\r\n                }\r\n                end = this.bufferLength;\r\n            }\r\n            this.pos = end;\r\n            const subarray = this.buffer.subarray(pos, end);\r\n            return forceClamped && !(subarray instanceof Uint8ClampedArray) ? new Uint8ClampedArray(subarray) : subarray;\r\n        },\r\n        peekByte: function DecodeStream_peekByte() {\r\n            var peekedByte = this.getByte();\r\n            if (peekedByte !== -1) {\r\n                this.pos--;\r\n            }\r\n            return peekedByte;\r\n        },\r\n        peekBytes(length, forceClamped = false) {\r\n            var bytes = this.getBytes(length, forceClamped);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n        makeSubStream: function DecodeStream_makeSubStream(start, length, dict) {\r\n            var end = start + length;\r\n            while (this.bufferLength <= end && !this.eof) {\r\n                this.readBlock();\r\n            }\r\n            return new Stream(this.buffer, start, length, dict);\r\n        },\r\n        getByteRange(begin, end) {\r\n            throw new Error(\"Should not call DecodeStream.getByteRange\") ;               \r\n            //util.unreachable('Should not call DecodeStream.getByteRange');\r\n        },\r\n        skip: function DecodeStream_skip(n) {\r\n            if (!n) {\r\n                n = 1;\r\n            }\r\n            this.pos += n;\r\n        },\r\n        reset: function DecodeStream_reset() {\r\n            this.pos = 0;\r\n        },\r\n        getBaseStreams: function DecodeStream_getBaseStreams() {\r\n            if (this.str && this.str.getBaseStreams) {\r\n                return this.str.getBaseStreams();\r\n            }\r\n            return [];\r\n        }\r\n\r\n    });\r\n\r\n    return streams.DecodeStream = DecodeStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/ascii85-stream',[\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n\r\n    var Ascii85Stream = DecodeStream.inherit({\r\n        klassName : \"Ascii85Stream\",\r\n\r\n        _construct : function(str) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.input = new Uint8Array(5);\r\n            if (maybeLength) {\r\n                maybeLength = 0.8 * maybeLength;\r\n            }\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function Ascii85Stream_readBlock() {\r\n            var TILDA_CHAR = 126;\r\n            var Z_LOWER_CHAR = 122;\r\n            var EOF = -1;\r\n            var str = this.str;\r\n            var c = str.getByte();\r\n            while (chars.isWhiteSpace(c)) {\r\n                c = str.getByte();\r\n            }\r\n            if (c === EOF || c === TILDA_CHAR) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var bufferLength = this.bufferLength, buffer;\r\n            var i;\r\n            if (c === Z_LOWER_CHAR) {\r\n                buffer = this.ensureBuffer(bufferLength + 4);\r\n                for (i = 0; i < 4; ++i) {\r\n                    buffer[bufferLength + i] = 0;\r\n                }\r\n                this.bufferLength += 4;\r\n            } else {\r\n                var input = this.input;\r\n                input[0] = c;\r\n                for (i = 1; i < 5; ++i) {\r\n                    c = str.getByte();\r\n                    while (chars.isWhiteSpace(c)) {\r\n                        c = str.getByte();\r\n                    }\r\n                    input[i] = c;\r\n                    if (c === EOF || c === TILDA_CHAR) {\r\n                        break;\r\n                    }\r\n                }\r\n                buffer = this.ensureBuffer(bufferLength + i - 1);\r\n                this.bufferLength += i - 1;\r\n                if (i < 5) {\r\n                    for (; i < 5; ++i) {\r\n                        input[i] = 33 + 84;\r\n                    }\r\n                    this.eof = true;\r\n                }\r\n                var t = 0;\r\n                for (i = 0; i < 5; ++i) {\r\n                    t = t * 85 + (input[i] - 33);\r\n                }\r\n                for (i = 3; i >= 0; --i) {\r\n                    buffer[bufferLength + i] = t & 255;\r\n                    t >>= 8;\r\n                }\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return streams.Ascii85Stream = Ascii85Stream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/ascii-hex-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var AsciiHexStream = DecodeStream.inherit({\r\n        klassName : \"AsciiHexStream\",\r\n\r\n        _construct : function AsciiHexStream(str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.firstDigit = -1;\r\n            if (maybeLength) {\r\n                maybeLength = 0.5 * maybeLength;\r\n            }\r\n\r\n            DecodeStream.prototype._construct.call(this,maybeLength);          \r\n        },\r\n\r\n        readBlock : function AsciiHexStream_readBlock() {\r\n            var UPSTREAM_BLOCK_SIZE = 8000;\r\n            var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);\r\n            if (!bytes.length) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var maxDecodeLength = bytes.length + 1 >> 1;\r\n            var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\r\n            var bufferLength = this.bufferLength;\r\n            var firstDigit = this.firstDigit;\r\n            for (var i = 0, ii = bytes.length; i < ii; i++) {\r\n                var ch = bytes[i], digit;\r\n                if (ch >= 48 && ch <= 57) {\r\n                    digit = ch & 15;\r\n                } else if (ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102) {\r\n                    digit = (ch & 15) + 9;\r\n                } else if (ch === 62) {\r\n                    this.eof = true;\r\n                    break;\r\n                } else {\r\n                    continue;\r\n                }\r\n                if (firstDigit < 0) {\r\n                    firstDigit = digit;\r\n                } else {\r\n                    buffer[bufferLength++] = firstDigit << 4 | digit;\r\n                    firstDigit = -1;\r\n                }\r\n            }\r\n            if (firstDigit >= 0 && this.eof) {\r\n                buffer[bufferLength++] = firstDigit << 4;\r\n                firstDigit = -1;\r\n            }\r\n            this.firstDigit = firstDigit;\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.AsciiHexStream = AsciiHexStream;\r\n});\r\n\ndefine('skylark-io-streams/_stream',[\r\n    \"skylark-langx-events\",\r\n    \"./streams\"\r\n], function(events,streams) {\r\n\r\n   \tvar Stream = events.Emitter.inherit({\r\n        klassName: \"Stream\",\r\n        \r\n        _construct: function(arrayBuffer, start, length, dict) {\r\n            this.bytes = arrayBuffer instanceof Uint8Array ? arrayBuffer : new Uint8Array(arrayBuffer);\r\n            this.start = start || 0;\r\n            this.pos = this.start;\r\n            this.end = start + length || this.bytes.length;\r\n            this.dict = dict;\r\n        },\r\n\r\n\r\n        length : {\r\n        \tget : function() {\r\n                return this.end - this.start;\r\n        \t}\r\n        },\r\n\r\n        getByte: function () {\r\n            if (this.pos >= this.end) {\r\n                return -1;\r\n            }\r\n            return this.bytes[this.pos++];\r\n        },\r\n\r\n        getUint16: function Stream_getUint16() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            if (b0 === -1 || b1 === -1) {\r\n                return -1;\r\n            }\r\n            return (b0 << 8) + b1;\r\n        },\r\n\r\n        getInt32: function Stream_getInt32() {\r\n            var b0 = this.getByte();\r\n            var b1 = this.getByte();\r\n            var b2 = this.getByte();\r\n            var b3 = this.getByte();\r\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\r\n        },\r\n\r\n        getBytes(length, forceClamped = false) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n            if (!length) {\r\n                const subarray = bytes.subarray(pos, strEnd);\r\n                return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n            }\r\n            var end = pos + length;\r\n            if (end > strEnd) {\r\n                end = strEnd;\r\n            }\r\n            this.pos = end;\r\n            const subarray = bytes.subarray(pos, end);\r\n            return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\r\n        },\r\n\r\n        peekByte: function Stream_peekByte() {\r\n            var peekedByte = this.getByte();\r\n            if (peekedByte !== -1) {\r\n                this.pos--;\r\n            }\r\n            return peekedByte;\r\n        },\r\n\r\n        peekBytes(length, forceClamped = false) {\r\n            var bytes = this.getBytes(length, forceClamped);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n\r\n        getByteRange(begin, end) {\r\n            if (begin < 0) {\r\n                begin = 0;\r\n            }\r\n            if (end > this.end) {\r\n                end = this.end;\r\n            }\r\n            return this.bytes.subarray(begin, end);\r\n        },\r\n\r\n        skip: function Stream_skip(n) {\r\n            if (!n) {\r\n                n = 1;\r\n            }\r\n            this.pos += n;\r\n        },\r\n\r\n        reset: function Stream_reset() {\r\n            this.pos = this.start;\r\n        },\r\n\r\n        moveStart: function Stream_moveStart() {\r\n            this.start = this.pos;\r\n        },\r\n        \r\n        makeSubStream: function Stream_makeSubStream(start, length, dict) {\r\n            return new Stream(this.bytes.buffer, start, length, dict);\r\n        }\r\n    });\r\n    \r\n    return streams.Stream = Stream;\r\n\t\r\n});\r\n\ndefine('skylark-io-streams/chunked-stream',[\r\n    \"./streams\",\r\n    \"./_stream\"\r\n], function(streams,Stream) {\r\n\r\n\r\n    var ChunkedStream = Stream.inherit({\r\n        klassName : \"ChunkedStream\",\r\n\r\n        \"numChunks\": 0,\r\n        \"numChunksLoaded\": 0,\r\n\r\n        _construct : function(str) {\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n            DecodeStream.prototype._construct.call(bytes);          \r\n            this.dict = stream.dict;\r\n        },\r\n\r\n        \"numChunks\": function() {\r\n\r\n        },\r\n\r\n\r\n        getMissingChunks: function ChunkedStream_getMissingChunks() {\r\n            var chunks = [];\r\n            for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    chunks.push(chunk);\r\n                }\r\n            }\r\n            return chunks;\r\n        },\r\n\r\n        getBaseStreams: function ChunkedStream_getBaseStreams() {\r\n            return [this];\r\n        },\r\n\r\n        allChunksLoaded: function ChunkedStream_allChunksLoaded() {\r\n            var _ = this._;\r\n            return _.numChunksLoaded === _.numChunks;\r\n        },\r\n\r\n        onReceiveData: function(begin, chunk) {\r\n            var end = begin + chunk.byteLength;\r\n\r\n            assert(begin % this.chunkSize === 0, 'Bad begin offset: ' + begin);\r\n            // Using this.length is inaccurate here since this.start can be moved\r\n            // See ChunkedStream.moveStart()\r\n            var length = this.bytes.length;\r\n            assert(end % this.chunkSize === 0 || end === length,\r\n                'Bad end offset: ' + end);\r\n\r\n            this.bytes.set(new Uint8Array(chunk), begin);\r\n            var chunkSize = this.chunkSize;\r\n            var beginChunk = Math.floor(begin / chunkSize);\r\n            var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n\r\n            for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    this.loadedChunks[chunk] = true;\r\n                    ++this.numChunksLoaded;\r\n                }\r\n            }\r\n        },\r\n\r\n        onReceiveInitialData: function(data) {\r\n            this.bytes.set(data);\r\n            this.initialDataLength = data.length;\r\n            var endChunk = this.end === data.length ?\r\n                this.numChunks : Math.floor(data.length / this.chunkSize);\r\n            for (var i = 0; i < endChunk; i++) {\r\n                this.loadedChunks[i] = true;\r\n                ++this.numChunksLoaded;\r\n            }\r\n        },\r\n\r\n        ensureRange: function ChunkedStream_ensureRange(begin, end) {\r\n            if (begin >= end) {\r\n                return;\r\n            }\r\n\r\n            if (end <= this.initialDataLength) {\r\n                return;\r\n            }\r\n\r\n            var chunkSize = this.chunkSize;\r\n            var beginChunk = Math.floor(begin / chunkSize);\r\n            var endChunk = Math.floor((end - 1) / chunkSize) + 1;\r\n            for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    throw new MissingDataException(begin, end);\r\n                }\r\n            }\r\n        },\r\n\r\n        nextEmptyChunk: function ChunkedStream_nextEmptyChunk(beginChunk) {\r\n            for (var chunk = beginChunk, n = this.numChunks; chunk < n; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    return chunk;\r\n                }\r\n            }\r\n            // Wrap around to beginning\r\n            for (var chunk = 0; chunk < beginChunk; ++chunk) {\r\n                if (!(chunk in this.loadedChunks)) {\r\n                    return chunk;\r\n                }\r\n            }\r\n            return null;\r\n        },\r\n\r\n        hasChunk: function ChunkedStream_hasChunk(chunk) {\r\n            return chunk in this._.loadedChunks;\r\n        },\r\n\r\n        getByte: function ChunkedStream_getByte() {\r\n            var pos = this.pos;\r\n            if (pos >= this.end) {\r\n                return -1;\r\n            }\r\n            this.ensureRange(pos, pos + 1);\r\n            return this.bytes[this.pos++];\r\n        },\r\n\r\n        // returns subarray of original buffer\r\n        // should only be read\r\n        getBytes: function ChunkedStream_getBytes(length) {\r\n            var bytes = this.bytes;\r\n            var pos = this.pos;\r\n            var strEnd = this.end;\r\n\r\n            if (!length) {\r\n                this.ensureRange(pos, strEnd);\r\n                return bytes.subarray(pos, strEnd);\r\n            }\r\n\r\n            var end = pos + length;\r\n            if (end > strEnd)\r\n                end = strEnd;\r\n            this.ensureRange(pos, end);\r\n\r\n            this.pos = end;\r\n            return bytes.subarray(pos, end);\r\n        },\r\n\r\n        peekBytes: function ChunkedStream_peekBytes(length) {\r\n            var bytes = this.getBytes(length);\r\n            this.pos -= bytes.length;\r\n            return bytes;\r\n        },\r\n\r\n        getByteRange: function ChunkedStream_getBytes(begin, end) {\r\n            this.ensureRange(begin, end);\r\n            return this.bytes.subarray(begin, end);\r\n        },\r\n\r\n        skip: function ChunkedStream_skip(n) {\r\n            if (!n)\r\n                n = 1;\r\n            this.pos += n;\r\n        },\r\n\r\n        reset: function ChunkedStream_reset() {\r\n            this.pos = this.start;\r\n        },\r\n\r\n        moveStart: function ChunkedStream_moveStart() {\r\n            this.start = this.pos;\r\n        },\r\n\r\n        makeSubStream: function ChunkedStream_makeSubStream(start, length, dict) {\r\n            function ChunkedStreamSubstream() {}\r\n            ChunkedStreamSubstream.prototype = Object.create(this);\r\n            ChunkedStreamSubstream.prototype.getMissingChunks = function() {\r\n                var chunkSize = this.chunkSize;\r\n                var beginChunk = Math.floor(this.start / chunkSize);\r\n                var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;\r\n                var missingChunks = [];\r\n                for (var chunk = beginChunk; chunk < endChunk; ++chunk) {\r\n                    if (!(chunk in this.loadedChunks)) {\r\n                        missingChunks.push(chunk);\r\n                    }\r\n                }\r\n                return missingChunks;\r\n            };\r\n            var subStream = new ChunkedStreamSubstream();\r\n            subStream.pos = subStream.start = start;\r\n            subStream.end = start + length || this.end;\r\n            subStream.dict = dict;\r\n            return subStream;\r\n        }\r\n    });\r\n\r\n    return streams.ChunkedStream = ChunkedStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/decrypt-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var chunkSize = 512;\r\n\r\n\r\n    var DecryptStream = DecodeStream.inherit({\r\n        klassName : \"DecryptStream\",\r\n\r\n        _construct : function (str, maybeLength, decrypt) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.decrypt = decrypt;\r\n            this.nextChunk = null;\r\n            this.initialized = false;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        readBlock : function DecryptStream_readBlock() {\r\n            var chunk;\r\n            if (this.initialized) {\r\n                chunk = this.nextChunk;\r\n            } else {\r\n                chunk = this.str.getBytes(chunkSize);\r\n                this.initialized = true;\r\n            }\r\n            if (!chunk || chunk.length === 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            this.nextChunk = this.str.getBytes(chunkSize);\r\n            var hasMoreData = this.nextChunk && this.nextChunk.length > 0;\r\n            var decrypt = this.decrypt;\r\n            chunk = decrypt(chunk, !hasMoreData);\r\n            var bufferLength = this.bufferLength;\r\n            var i, n = chunk.length;\r\n            var buffer = this.ensureBuffer(bufferLength + n);\r\n            for (i = 0; i < n; i++) {\r\n                buffer[bufferLength++] = chunk[i];\r\n            }\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.DecryptStream = DecryptStream;\r\n});\r\n\ndefine('skylark-io-streams/fake-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var FakeStream = DecodeStream.inherit({\r\n        klassName : \"FakeStream\",\r\n\r\n        _construct : function(stream) {\r\n            this.dict = stream.dict;\r\n            DecodeStream.prototype._construct.call(this);          \r\n        },\r\n\r\n        readBlock : function() {\r\n            var bufferLength = this.bufferLength;\r\n            bufferLength += 1024;\r\n            var buffer = this.ensureBuffer(bufferLength);\r\n            this.bufferLength = bufferLength;\r\n        },\r\n\r\n        getBytes : function (length) {\r\n            var end, pos = this.pos;\r\n\r\n            if (length) {\r\n                this.ensureBuffer(pos + length);\r\n                end = pos + length;\r\n\r\n                while (!this.eof && this.bufferLength < end)\r\n                    this.readBlock();\r\n\r\n                var bufEnd = this.bufferLength;\r\n                if (end > bufEnd)\r\n                    end = bufEnd;\r\n            } else {\r\n                this.eof = true;\r\n                end = this.bufferLength;\r\n            }\r\n\r\n            this.pos = end;\r\n            return this.buffer.subarray(pos, end);\r\n        }\r\n\r\n    });\r\n\r\n    return streams.FakeStream = FakeStream;\r\n});\r\n\ndefine('skylark-io-streams/flate-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n    \r\n    var codeLenCodeMap = new Int32Array([\r\n        16,\r\n        17,\r\n        18,\r\n        0,\r\n        8,\r\n        7,\r\n        9,\r\n        6,\r\n        10,\r\n        5,\r\n        11,\r\n        4,\r\n        12,\r\n        3,\r\n        13,\r\n        2,\r\n        14,\r\n        1,\r\n        15\r\n    ]);\r\n    var lengthDecode = new Int32Array([\r\n        3,\r\n        4,\r\n        5,\r\n        6,\r\n        7,\r\n        8,\r\n        9,\r\n        10,\r\n        65547,\r\n        65549,\r\n        65551,\r\n        65553,\r\n        131091,\r\n        131095,\r\n        131099,\r\n        131103,\r\n        196643,\r\n        196651,\r\n        196659,\r\n        196667,\r\n        262211,\r\n        262227,\r\n        262243,\r\n        262259,\r\n        327811,\r\n        327843,\r\n        327875,\r\n        327907,\r\n        258,\r\n        258,\r\n        258\r\n    ]);\r\n    var distDecode = new Int32Array([\r\n        1,\r\n        2,\r\n        3,\r\n        4,\r\n        65541,\r\n        65543,\r\n        131081,\r\n        131085,\r\n        196625,\r\n        196633,\r\n        262177,\r\n        262193,\r\n        327745,\r\n        327777,\r\n        393345,\r\n        393409,\r\n        459009,\r\n        459137,\r\n        524801,\r\n        525057,\r\n        590849,\r\n        591361,\r\n        657409,\r\n        658433,\r\n        724993,\r\n        727041,\r\n        794625,\r\n        798721,\r\n        868353,\r\n        876545\r\n    ]);\r\n    var fixedLitCodeTab = [\r\n        new Int32Array([\r\n            459008,\r\n            524368,\r\n            524304,\r\n            524568,\r\n            459024,\r\n            524400,\r\n            524336,\r\n            590016,\r\n            459016,\r\n            524384,\r\n            524320,\r\n            589984,\r\n            524288,\r\n            524416,\r\n            524352,\r\n            590048,\r\n            459012,\r\n            524376,\r\n            524312,\r\n            589968,\r\n            459028,\r\n            524408,\r\n            524344,\r\n            590032,\r\n            459020,\r\n            524392,\r\n            524328,\r\n            590000,\r\n            524296,\r\n            524424,\r\n            524360,\r\n            590064,\r\n            459010,\r\n            524372,\r\n            524308,\r\n            524572,\r\n            459026,\r\n            524404,\r\n            524340,\r\n            590024,\r\n            459018,\r\n            524388,\r\n            524324,\r\n            589992,\r\n            524292,\r\n            524420,\r\n            524356,\r\n            590056,\r\n            459014,\r\n            524380,\r\n            524316,\r\n            589976,\r\n            459030,\r\n            524412,\r\n            524348,\r\n            590040,\r\n            459022,\r\n            524396,\r\n            524332,\r\n            590008,\r\n            524300,\r\n            524428,\r\n            524364,\r\n            590072,\r\n            459009,\r\n            524370,\r\n            524306,\r\n            524570,\r\n            459025,\r\n            524402,\r\n            524338,\r\n            590020,\r\n            459017,\r\n            524386,\r\n            524322,\r\n            589988,\r\n            524290,\r\n            524418,\r\n            524354,\r\n            590052,\r\n            459013,\r\n            524378,\r\n            524314,\r\n            589972,\r\n            459029,\r\n            524410,\r\n            524346,\r\n            590036,\r\n            459021,\r\n            524394,\r\n            524330,\r\n            590004,\r\n            524298,\r\n            524426,\r\n            524362,\r\n            590068,\r\n            459011,\r\n            524374,\r\n            524310,\r\n            524574,\r\n            459027,\r\n            524406,\r\n            524342,\r\n            590028,\r\n            459019,\r\n            524390,\r\n            524326,\r\n            589996,\r\n            524294,\r\n            524422,\r\n            524358,\r\n            590060,\r\n            459015,\r\n            524382,\r\n            524318,\r\n            589980,\r\n            459031,\r\n            524414,\r\n            524350,\r\n            590044,\r\n            459023,\r\n            524398,\r\n            524334,\r\n            590012,\r\n            524302,\r\n            524430,\r\n            524366,\r\n            590076,\r\n            459008,\r\n            524369,\r\n            524305,\r\n            524569,\r\n            459024,\r\n            524401,\r\n            524337,\r\n            590018,\r\n            459016,\r\n            524385,\r\n            524321,\r\n            589986,\r\n            524289,\r\n            524417,\r\n            524353,\r\n            590050,\r\n            459012,\r\n            524377,\r\n            524313,\r\n            589970,\r\n            459028,\r\n            524409,\r\n            524345,\r\n            590034,\r\n            459020,\r\n            524393,\r\n            524329,\r\n            590002,\r\n            524297,\r\n            524425,\r\n            524361,\r\n            590066,\r\n            459010,\r\n            524373,\r\n            524309,\r\n            524573,\r\n            459026,\r\n            524405,\r\n            524341,\r\n            590026,\r\n            459018,\r\n            524389,\r\n            524325,\r\n            589994,\r\n            524293,\r\n            524421,\r\n            524357,\r\n            590058,\r\n            459014,\r\n            524381,\r\n            524317,\r\n            589978,\r\n            459030,\r\n            524413,\r\n            524349,\r\n            590042,\r\n            459022,\r\n            524397,\r\n            524333,\r\n            590010,\r\n            524301,\r\n            524429,\r\n            524365,\r\n            590074,\r\n            459009,\r\n            524371,\r\n            524307,\r\n            524571,\r\n            459025,\r\n            524403,\r\n            524339,\r\n            590022,\r\n            459017,\r\n            524387,\r\n            524323,\r\n            589990,\r\n            524291,\r\n            524419,\r\n            524355,\r\n            590054,\r\n            459013,\r\n            524379,\r\n            524315,\r\n            589974,\r\n            459029,\r\n            524411,\r\n            524347,\r\n            590038,\r\n            459021,\r\n            524395,\r\n            524331,\r\n            590006,\r\n            524299,\r\n            524427,\r\n            524363,\r\n            590070,\r\n            459011,\r\n            524375,\r\n            524311,\r\n            524575,\r\n            459027,\r\n            524407,\r\n            524343,\r\n            590030,\r\n            459019,\r\n            524391,\r\n            524327,\r\n            589998,\r\n            524295,\r\n            524423,\r\n            524359,\r\n            590062,\r\n            459015,\r\n            524383,\r\n            524319,\r\n            589982,\r\n            459031,\r\n            524415,\r\n            524351,\r\n            590046,\r\n            459023,\r\n            524399,\r\n            524335,\r\n            590014,\r\n            524303,\r\n            524431,\r\n            524367,\r\n            590078,\r\n            459008,\r\n            524368,\r\n            524304,\r\n            524568,\r\n            459024,\r\n            524400,\r\n            524336,\r\n            590017,\r\n            459016,\r\n            524384,\r\n            524320,\r\n            589985,\r\n            524288,\r\n            524416,\r\n            524352,\r\n            590049,\r\n            459012,\r\n            524376,\r\n            524312,\r\n            589969,\r\n            459028,\r\n            524408,\r\n            524344,\r\n            590033,\r\n            459020,\r\n            524392,\r\n            524328,\r\n            590001,\r\n            524296,\r\n            524424,\r\n            524360,\r\n            590065,\r\n            459010,\r\n            524372,\r\n            524308,\r\n            524572,\r\n            459026,\r\n            524404,\r\n            524340,\r\n            590025,\r\n            459018,\r\n            524388,\r\n            524324,\r\n            589993,\r\n            524292,\r\n            524420,\r\n            524356,\r\n            590057,\r\n            459014,\r\n            524380,\r\n            524316,\r\n            589977,\r\n            459030,\r\n            524412,\r\n            524348,\r\n            590041,\r\n            459022,\r\n            524396,\r\n            524332,\r\n            590009,\r\n            524300,\r\n            524428,\r\n            524364,\r\n            590073,\r\n            459009,\r\n            524370,\r\n            524306,\r\n            524570,\r\n            459025,\r\n            524402,\r\n            524338,\r\n            590021,\r\n            459017,\r\n            524386,\r\n            524322,\r\n            589989,\r\n            524290,\r\n            524418,\r\n            524354,\r\n            590053,\r\n            459013,\r\n            524378,\r\n            524314,\r\n            589973,\r\n            459029,\r\n            524410,\r\n            524346,\r\n            590037,\r\n            459021,\r\n            524394,\r\n            524330,\r\n            590005,\r\n            524298,\r\n            524426,\r\n            524362,\r\n            590069,\r\n            459011,\r\n            524374,\r\n            524310,\r\n            524574,\r\n            459027,\r\n            524406,\r\n            524342,\r\n            590029,\r\n            459019,\r\n            524390,\r\n            524326,\r\n            589997,\r\n            524294,\r\n            524422,\r\n            524358,\r\n            590061,\r\n            459015,\r\n            524382,\r\n            524318,\r\n            589981,\r\n            459031,\r\n            524414,\r\n            524350,\r\n            590045,\r\n            459023,\r\n            524398,\r\n            524334,\r\n            590013,\r\n            524302,\r\n            524430,\r\n            524366,\r\n            590077,\r\n            459008,\r\n            524369,\r\n            524305,\r\n            524569,\r\n            459024,\r\n            524401,\r\n            524337,\r\n            590019,\r\n            459016,\r\n            524385,\r\n            524321,\r\n            589987,\r\n            524289,\r\n            524417,\r\n            524353,\r\n            590051,\r\n            459012,\r\n            524377,\r\n            524313,\r\n            589971,\r\n            459028,\r\n            524409,\r\n            524345,\r\n            590035,\r\n            459020,\r\n            524393,\r\n            524329,\r\n            590003,\r\n            524297,\r\n            524425,\r\n            524361,\r\n            590067,\r\n            459010,\r\n            524373,\r\n            524309,\r\n            524573,\r\n            459026,\r\n            524405,\r\n            524341,\r\n            590027,\r\n            459018,\r\n            524389,\r\n            524325,\r\n            589995,\r\n            524293,\r\n            524421,\r\n            524357,\r\n            590059,\r\n            459014,\r\n            524381,\r\n            524317,\r\n            589979,\r\n            459030,\r\n            524413,\r\n            524349,\r\n            590043,\r\n            459022,\r\n            524397,\r\n            524333,\r\n            590011,\r\n            524301,\r\n            524429,\r\n            524365,\r\n            590075,\r\n            459009,\r\n            524371,\r\n            524307,\r\n            524571,\r\n            459025,\r\n            524403,\r\n            524339,\r\n            590023,\r\n            459017,\r\n            524387,\r\n            524323,\r\n            589991,\r\n            524291,\r\n            524419,\r\n            524355,\r\n            590055,\r\n            459013,\r\n            524379,\r\n            524315,\r\n            589975,\r\n            459029,\r\n            524411,\r\n            524347,\r\n            590039,\r\n            459021,\r\n            524395,\r\n            524331,\r\n            590007,\r\n            524299,\r\n            524427,\r\n            524363,\r\n            590071,\r\n            459011,\r\n            524375,\r\n            524311,\r\n            524575,\r\n            459027,\r\n            524407,\r\n            524343,\r\n            590031,\r\n            459019,\r\n            524391,\r\n            524327,\r\n            589999,\r\n            524295,\r\n            524423,\r\n            524359,\r\n            590063,\r\n            459015,\r\n            524383,\r\n            524319,\r\n            589983,\r\n            459031,\r\n            524415,\r\n            524351,\r\n            590047,\r\n            459023,\r\n            524399,\r\n            524335,\r\n            590015,\r\n            524303,\r\n            524431,\r\n            524367,\r\n            590079\r\n        ]),\r\n        9\r\n    ];\r\n    var fixedDistCodeTab = [\r\n        new Int32Array([\r\n            327680,\r\n            327696,\r\n            327688,\r\n            327704,\r\n            327684,\r\n            327700,\r\n            327692,\r\n            327708,\r\n            327682,\r\n            327698,\r\n            327690,\r\n            327706,\r\n            327686,\r\n            327702,\r\n            327694,\r\n            0,\r\n            327681,\r\n            327697,\r\n            327689,\r\n            327705,\r\n            327685,\r\n            327701,\r\n            327693,\r\n            327709,\r\n            327683,\r\n            327699,\r\n            327691,\r\n            327707,\r\n            327687,\r\n            327703,\r\n            327695,\r\n            0\r\n        ]),\r\n        5\r\n    ];\r\n\r\n\r\n    var FlateStream = DecodeStream.inherit({\r\n        klassName : \"FlateStream\",\r\n\r\n        _construct :function (str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            var cmf = str.getByte();\r\n            var flg = str.getByte();\r\n            if (cmf === -1 || flg === -1) {\r\n                throw new util.FormatError(`Invalid header in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            if ((cmf & 15) !== 8) {\r\n                throw new util.FormatError(`Unknown compression method in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            if (((cmf << 8) + flg) % 31 !== 0) {\r\n                throw new util.FormatError(`Bad FCHECK in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            if (flg & 32) {\r\n                throw new util.FormatError(`FDICT bit set in flate stream: ${ cmf }, ${ flg }`);\r\n            }\r\n            this.codeSize = 0;\r\n            this.codeBuf = 0;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        getBits : function FlateStream_getBits(bits) {\r\n            var str = this.str;\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var b;\r\n            while (codeSize < bits) {\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad encoding in flate stream');\r\n                }\r\n                codeBuf |= b << codeSize;\r\n                codeSize += 8;\r\n            }\r\n            b = codeBuf & (1 << bits) - 1;\r\n            this.codeBuf = codeBuf >> bits;\r\n            this.codeSize = codeSize -= bits;\r\n            return b;\r\n        },\r\n\r\n        getCode : function FlateStream_getCode(table) {\r\n            var str = this.str;\r\n            var codes = table[0];\r\n            var maxLen = table[1];\r\n            var codeSize = this.codeSize;\r\n            var codeBuf = this.codeBuf;\r\n            var b;\r\n            while (codeSize < maxLen) {\r\n                if ((b = str.getByte()) === -1) {\r\n                    break;\r\n                }\r\n                codeBuf |= b << codeSize;\r\n                codeSize += 8;\r\n            }\r\n            var code = codes[codeBuf & (1 << maxLen) - 1];\r\n            var codeLen = code >> 16;\r\n            var codeVal = code & 65535;\r\n            if (codeLen < 1 || codeSize < codeLen) {\r\n                throw new util.FormatError('Bad encoding in flate stream');\r\n            }\r\n            this.codeBuf = codeBuf >> codeLen;\r\n            this.codeSize = codeSize - codeLen;\r\n            return codeVal;\r\n        },\r\n\r\n        generateHuffmanTable : function flateStreamGenerateHuffmanTable(lengths) {\r\n            var n = lengths.length;\r\n            var maxLen = 0;\r\n            var i;\r\n            for (i = 0; i < n; ++i) {\r\n                if (lengths[i] > maxLen) {\r\n                    maxLen = lengths[i];\r\n                }\r\n            }\r\n            var size = 1 << maxLen;\r\n            var codes = new Int32Array(size);\r\n            for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\r\n                for (var val = 0; val < n; ++val) {\r\n                    if (lengths[val] === len) {\r\n                        var code2 = 0;\r\n                        var t = code;\r\n                        for (i = 0; i < len; ++i) {\r\n                            code2 = code2 << 1 | t & 1;\r\n                            t >>= 1;\r\n                        }\r\n                        for (i = code2; i < size; i += skip) {\r\n                            codes[i] = len << 16 | val;\r\n                        }\r\n                        ++code;\r\n                    }\r\n                }\r\n            }\r\n            return [\r\n                codes,\r\n                maxLen\r\n            ];\r\n        },\r\n\r\n        readBlock : function FlateStream_readBlock() {\r\n            var buffer, len;\r\n            var str = this.str;\r\n            var hdr = this.getBits(3);\r\n            if (hdr & 1) {\r\n                this.eof = true;\r\n            }\r\n            hdr >>= 1;\r\n            if (hdr === 0) {\r\n                var b;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                var blockLen = b;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                blockLen |= b << 8;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                var check = b;\r\n                if ((b = str.getByte()) === -1) {\r\n                    throw new util.FormatError('Bad block header in flate stream');\r\n                }\r\n                check |= b << 8;\r\n                if (check !== (~blockLen & 65535) && (blockLen !== 0 || check !== 0)) {\r\n                    throw new util.FormatError('Bad uncompressed block length in flate stream');\r\n                }\r\n                this.codeBuf = 0;\r\n                this.codeSize = 0;\r\n                const bufferLength = this.bufferLength, end = bufferLength + blockLen;\r\n                buffer = this.ensureBuffer(end);\r\n                this.bufferLength = end;\r\n                if (blockLen === 0) {\r\n                    if (str.peekByte() === -1) {\r\n                        this.eof = true;\r\n                    }\r\n                } else {\r\n                    const block = str.getBytes(blockLen);\r\n                    buffer.set(block, bufferLength);\r\n                    if (block.length < blockLen) {\r\n                        this.eof = true;\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            var litCodeTable;\r\n            var distCodeTable;\r\n            if (hdr === 1) {\r\n                litCodeTable = fixedLitCodeTab;\r\n                distCodeTable = fixedDistCodeTab;\r\n            } else if (hdr === 2) {\r\n                var numLitCodes = this.getBits(5) + 257;\r\n                var numDistCodes = this.getBits(5) + 1;\r\n                var numCodeLenCodes = this.getBits(4) + 4;\r\n                var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\r\n                var i;\r\n                for (i = 0; i < numCodeLenCodes; ++i) {\r\n                    codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\r\n                }\r\n                var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\r\n                len = 0;\r\n                i = 0;\r\n                var codes = numLitCodes + numDistCodes;\r\n                var codeLengths = new Uint8Array(codes);\r\n                var bitsLength, bitsOffset, what;\r\n                while (i < codes) {\r\n                    var code = this.getCode(codeLenCodeTab);\r\n                    if (code === 16) {\r\n                        bitsLength = 2;\r\n                        bitsOffset = 3;\r\n                        what = len;\r\n                    } else if (code === 17) {\r\n                        bitsLength = 3;\r\n                        bitsOffset = 3;\r\n                        what = len = 0;\r\n                    } else if (code === 18) {\r\n                        bitsLength = 7;\r\n                        bitsOffset = 11;\r\n                        what = len = 0;\r\n                    } else {\r\n                        codeLengths[i++] = len = code;\r\n                        continue;\r\n                    }\r\n                    var repeatLength = this.getBits(bitsLength) + bitsOffset;\r\n                    while (repeatLength-- > 0) {\r\n                        codeLengths[i++] = what;\r\n                    }\r\n                }\r\n                litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\r\n                distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\r\n            } else {\r\n                throw new util.FormatError('Unknown block type in flate stream');\r\n            }\r\n            buffer = this.buffer;\r\n            var limit = buffer ? buffer.length : 0;\r\n            var pos = this.bufferLength;\r\n            while (true) {\r\n                var code1 = this.getCode(litCodeTable);\r\n                if (code1 < 256) {\r\n                    if (pos + 1 >= limit) {\r\n                        buffer = this.ensureBuffer(pos + 1);\r\n                        limit = buffer.length;\r\n                    }\r\n                    buffer[pos++] = code1;\r\n                    continue;\r\n                }\r\n                if (code1 === 256) {\r\n                    this.bufferLength = pos;\r\n                    return;\r\n                }\r\n                code1 -= 257;\r\n                code1 = lengthDecode[code1];\r\n                var code2 = code1 >> 16;\r\n                if (code2 > 0) {\r\n                    code2 = this.getBits(code2);\r\n                }\r\n                len = (code1 & 65535) + code2;\r\n                code1 = this.getCode(distCodeTable);\r\n                code1 = distDecode[code1];\r\n                code2 = code1 >> 16;\r\n                if (code2 > 0) {\r\n                    code2 = this.getBits(code2);\r\n                }\r\n                var dist = (code1 & 65535) + code2;\r\n                if (pos + len >= limit) {\r\n                    buffer = this.ensureBuffer(pos + len);\r\n                    limit = buffer.length;\r\n                }\r\n                for (var k = 0; k < len; ++k, ++pos) {\r\n                    buffer[pos] = buffer[pos - dist];\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return streams.FlateStream = FlateStream;\r\n});\r\n\ndefine('skylark-io-streams/lzw-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n    var LZWStream = DecodeStream.inherit({\r\n        klassName : \"LZWStream\",\r\n\r\n        _construct : function (str, maybeLength, earlyChange) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            this.cachedData = 0;\r\n            this.bitsCached = 0;\r\n            var maxLzwDictionarySize = 4096;\r\n            var lzwState = {\r\n                earlyChange,\r\n                codeLength: 9,\r\n                nextCode: 258,\r\n                dictionaryValues: new Uint8Array(maxLzwDictionarySize),\r\n                dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\r\n                dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\r\n                currentSequence: new Uint8Array(maxLzwDictionarySize),\r\n                currentSequenceLength: 0\r\n            };\r\n            for (var i = 0; i < 256; ++i) {\r\n                lzwState.dictionaryValues[i] = i;\r\n                lzwState.dictionaryLengths[i] = 1;\r\n            }\r\n            this.lzwState = lzwState;\r\n\r\n            DecodeStream.prototype._construct.call(this, maybeLength);\r\n        },\r\n\r\n        readBits: function LZWStream_readBits(n) {\r\n            var bitsCached = this.bitsCached;\r\n            var cachedData = this.cachedData;\r\n            while (bitsCached < n) {\r\n                var c = this.str.getByte();\r\n                if (c === -1) {\r\n                    this.eof = true;\r\n                    return null;\r\n                }\r\n                cachedData = cachedData << 8 | c;\r\n                bitsCached += 8;\r\n            }\r\n            this.bitsCached = bitsCached -= n;\r\n            this.cachedData = cachedData;\r\n            this.lastCode = null;\r\n            return cachedData >>> bitsCached & (1 << n) - 1;\r\n        },\r\n\r\n        readBlock : function LZWStream_readBlock() {\r\n            var blockSize = 512;\r\n            var estimatedDecodedSize = blockSize * 2, decodedSizeDelta = blockSize;\r\n            var i, j, q;\r\n            var lzwState = this.lzwState;\r\n            if (!lzwState) {\r\n                return;\r\n            }\r\n            var earlyChange = lzwState.earlyChange;\r\n            var nextCode = lzwState.nextCode;\r\n            var dictionaryValues = lzwState.dictionaryValues;\r\n            var dictionaryLengths = lzwState.dictionaryLengths;\r\n            var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\r\n            var codeLength = lzwState.codeLength;\r\n            var prevCode = lzwState.prevCode;\r\n            var currentSequence = lzwState.currentSequence;\r\n            var currentSequenceLength = lzwState.currentSequenceLength;\r\n            var decodedLength = 0;\r\n            var currentBufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n            for (i = 0; i < blockSize; i++) {\r\n                var code = this.readBits(codeLength);\r\n                var hasPrev = currentSequenceLength > 0;\r\n                if (code < 256) {\r\n                    currentSequence[0] = code;\r\n                    currentSequenceLength = 1;\r\n                } else if (code >= 258) {\r\n                    if (code < nextCode) {\r\n                        currentSequenceLength = dictionaryLengths[code];\r\n                        for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\r\n                            currentSequence[j] = dictionaryValues[q];\r\n                            q = dictionaryPrevCodes[q];\r\n                        }\r\n                    } else {\r\n                        currentSequence[currentSequenceLength++] = currentSequence[0];\r\n                    }\r\n                } else if (code === 256) {\r\n                    codeLength = 9;\r\n                    nextCode = 258;\r\n                    currentSequenceLength = 0;\r\n                    continue;\r\n                } else {\r\n                    this.eof = true;\r\n                    delete this.lzwState;\r\n                    break;\r\n                }\r\n                if (hasPrev) {\r\n                    dictionaryPrevCodes[nextCode] = prevCode;\r\n                    dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\r\n                    dictionaryValues[nextCode] = currentSequence[0];\r\n                    nextCode++;\r\n                    codeLength = nextCode + earlyChange & nextCode + earlyChange - 1 ? codeLength : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\r\n                }\r\n                prevCode = code;\r\n                decodedLength += currentSequenceLength;\r\n                if (estimatedDecodedSize < decodedLength) {\r\n                    do {\r\n                        estimatedDecodedSize += decodedSizeDelta;\r\n                    } while (estimatedDecodedSize < decodedLength);\r\n                    buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\r\n                }\r\n                for (j = 0; j < currentSequenceLength; j++) {\r\n                    buffer[currentBufferLength++] = currentSequence[j];\r\n                }\r\n            }\r\n            lzwState.nextCode = nextCode;\r\n            lzwState.codeLength = codeLength;\r\n            lzwState.prevCode = prevCode;\r\n            lzwState.currentSequenceLength = currentSequenceLength;\r\n            this.bufferLength = currentBufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.LZWStream = LZWStream;\r\n});\r\n\ndefine('skylark-io-streams/null-stream',[\r\n    \"./streams\",\r\n    \"./_stream\"\r\n], function( streams, Stream) {\r\n\r\n    var NullStream = Stream.inherit({\r\n        klassName : \"NullStream\",\r\n\r\n        _construct : function() {\r\n            Stream.prototype._construct.call(this, new Uint8Array(0));        \r\n        }\r\n    });\r\n\r\n\r\n    return streams.NullStream = NullStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/predictor-stream',[\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(streams, DecodeStream) {\r\n\r\n\r\n    var PredictorStream = DecodeStream.inherit({\r\n        klassName : \"PredictorStream\",\r\n\r\n        _construct : function (str, maybeLength, params) {\r\n            if (!primitives.isDict(params)) {\r\n                return str;\r\n            }\r\n            var predictor = this.predictor = params.get('Predictor') || 1;\r\n            if (predictor <= 1) {\r\n                return str;\r\n            }\r\n            if (predictor !== 2 && (predictor < 10 || predictor > 15)) {\r\n                //throw new util.FormatError(`Unsupported predictor: ${ predictor }`);\r\n                throw new Error(`Unsupported predictor: ${ predictor }`);\r\n            }\r\n            if (predictor === 2) {\r\n                this.readBlock = this.readBlockTiff;\r\n            } else {\r\n                this.readBlock = this.readBlockPng;\r\n            }\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            var colors = this.colors = params.get('Colors') || 1;\r\n            var bits = this.bits = params.get('BitsPerComponent') || 8;\r\n            var columns = this.columns = params.get('Columns') || 1;\r\n            this.pixBytes = colors * bits + 7 >> 3;\r\n            this.rowBytes = columns * colors * bits + 7 >> 3;\r\n            DecodeStream.call(this, maybeLength);\r\n            return this;\r\n        },\r\n\r\n        readBlockTiff : function predictorStreamReadBlockTiff() {\r\n            var rowBytes = this.rowBytes;\r\n            var bufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n            var bits = this.bits;\r\n            var colors = this.colors;\r\n            var rawBytes = this.str.getBytes(rowBytes);\r\n            this.eof = !rawBytes.length;\r\n            if (this.eof) {\r\n                return;\r\n            }\r\n            var inbuf = 0, outbuf = 0;\r\n            var inbits = 0, outbits = 0;\r\n            var pos = bufferLength;\r\n            var i;\r\n            if (bits === 1 && colors === 1) {\r\n                for (i = 0; i < rowBytes; ++i) {\r\n                    var c = rawBytes[i] ^ inbuf;\r\n                    c ^= c >> 1;\r\n                    c ^= c >> 2;\r\n                    c ^= c >> 4;\r\n                    inbuf = (c & 1) << 7;\r\n                    buffer[pos++] = c;\r\n                }\r\n            } else if (bits === 8) {\r\n                for (i = 0; i < colors; ++i) {\r\n                    buffer[pos++] = rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    buffer[pos] = buffer[pos - colors] + rawBytes[i];\r\n                    pos++;\r\n                }\r\n            } else if (bits === 16) {\r\n                var bytesPerPixel = colors * 2;\r\n                for (i = 0; i < bytesPerPixel; ++i) {\r\n                    buffer[pos++] = rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; i += 2) {\r\n                    var sum = ((rawBytes[i] & 255) << 8) + (rawBytes[i + 1] & 255) + ((buffer[pos - bytesPerPixel] & 255) << 8) + (buffer[pos - bytesPerPixel + 1] & 255);\r\n                    buffer[pos++] = sum >> 8 & 255;\r\n                    buffer[pos++] = sum & 255;\r\n                }\r\n            } else {\r\n                var compArray = new Uint8Array(colors + 1);\r\n                var bitMask = (1 << bits) - 1;\r\n                var j = 0, k = bufferLength;\r\n                var columns = this.columns;\r\n                for (i = 0; i < columns; ++i) {\r\n                    for (var kk = 0; kk < colors; ++kk) {\r\n                        if (inbits < bits) {\r\n                            inbuf = inbuf << 8 | rawBytes[j++] & 255;\r\n                            inbits += 8;\r\n                        }\r\n                        compArray[kk] = compArray[kk] + (inbuf >> inbits - bits) & bitMask;\r\n                        inbits -= bits;\r\n                        outbuf = outbuf << bits | compArray[kk];\r\n                        outbits += bits;\r\n                        if (outbits >= 8) {\r\n                            buffer[k++] = outbuf >> outbits - 8 & 255;\r\n                            outbits -= 8;\r\n                        }\r\n                    }\r\n                }\r\n                if (outbits > 0) {\r\n                    buffer[k++] = (outbuf << 8 - outbits) + (inbuf & (1 << 8 - outbits) - 1);\r\n                }\r\n            }\r\n            this.bufferLength += rowBytes;\r\n        },\r\n\r\n        readBlockPng : function predictorStreamReadBlockPng() {\r\n            var rowBytes = this.rowBytes;\r\n            var pixBytes = this.pixBytes;\r\n            var predictor = this.str.getByte();\r\n            var rawBytes = this.str.getBytes(rowBytes);\r\n            this.eof = !rawBytes.length;\r\n            if (this.eof) {\r\n                return;\r\n            }\r\n            var bufferLength = this.bufferLength;\r\n            var buffer = this.ensureBuffer(bufferLength + rowBytes);\r\n            var prevRow = buffer.subarray(bufferLength - rowBytes, bufferLength);\r\n            if (prevRow.length === 0) {\r\n                prevRow = new Uint8Array(rowBytes);\r\n            }\r\n            var i, j = bufferLength, up, c;\r\n            switch (predictor) {\r\n            case 0:\r\n                for (i = 0; i < rowBytes; ++i) {\r\n                    buffer[j++] = rawBytes[i];\r\n                }\r\n                break;\r\n            case 1:\r\n                for (i = 0; i < pixBytes; ++i) {\r\n                    buffer[j++] = rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    buffer[j] = buffer[j - pixBytes] + rawBytes[i] & 255;\r\n                    j++;\r\n                }\r\n                break;\r\n            case 2:\r\n                for (i = 0; i < rowBytes; ++i) {\r\n                    buffer[j++] = prevRow[i] + rawBytes[i] & 255;\r\n                }\r\n                break;\r\n            case 3:\r\n                for (i = 0; i < pixBytes; ++i) {\r\n                    buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    buffer[j] = (prevRow[i] + buffer[j - pixBytes] >> 1) + rawBytes[i] & 255;\r\n                    j++;\r\n                }\r\n                break;\r\n            case 4:\r\n                for (i = 0; i < pixBytes; ++i) {\r\n                    up = prevRow[i];\r\n                    c = rawBytes[i];\r\n                    buffer[j++] = up + c;\r\n                }\r\n                for (; i < rowBytes; ++i) {\r\n                    up = prevRow[i];\r\n                    var upLeft = prevRow[i - pixBytes];\r\n                    var left = buffer[j - pixBytes];\r\n                    var p = left + up - upLeft;\r\n                    var pa = p - left;\r\n                    if (pa < 0) {\r\n                        pa = -pa;\r\n                    }\r\n                    var pb = p - up;\r\n                    if (pb < 0) {\r\n                        pb = -pb;\r\n                    }\r\n                    var pc = p - upLeft;\r\n                    if (pc < 0) {\r\n                        pc = -pc;\r\n                    }\r\n                    c = rawBytes[i];\r\n                    if (pa <= pb && pa <= pc) {\r\n                        buffer[j++] = left + c;\r\n                    } else if (pb <= pc) {\r\n                        buffer[j++] = up + c;\r\n                    } else {\r\n                        buffer[j++] = upLeft + c;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                //throw new util.FormatError(`Unsupported predictor: ${ predictor }`);\r\n                throw new Error(`Unsupported predictor: ${ predictor }`);\r\n            }\r\n            this.bufferLength += rowBytes;\r\n        }\r\n    });\r\n\r\n    return streams.PredictorStream = PredictorStream;\r\n});\r\n\ndefine('skylark-io-streams/run-length-stream',[\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n    var RunLengthStream = DecodeStream.inherit({\r\n        klassName : \"RunLengthStream\",\r\n\r\n        _construct : function (str, maybeLength) {\r\n            this.str = str;\r\n            this.dict = str.dict;\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function RunLengthStream_readBlock() {\r\n            var repeatHeader = this.str.getBytes(2);\r\n            if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var buffer;\r\n            var bufferLength = this.bufferLength;\r\n            var n = repeatHeader[0];\r\n            if (n < 128) {\r\n                buffer = this.ensureBuffer(bufferLength + n + 1);\r\n                buffer[bufferLength++] = repeatHeader[1];\r\n                if (n > 0) {\r\n                    var source = this.str.getBytes(n);\r\n                    buffer.set(source, bufferLength);\r\n                    bufferLength += n;\r\n                }\r\n            } else {\r\n                n = 257 - n;\r\n                var b = repeatHeader[1];\r\n                buffer = this.ensureBuffer(bufferLength + n + 1);\r\n                for (var i = 0; i < n; i++) {\r\n                    buffer[bufferLength++] = b;\r\n                }\r\n            }\r\n            this.bufferLength = bufferLength;\r\n        }\r\n    });\r\n\r\n    return streams.RunLengthStream = RunLengthStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/streams-sequence-stream',[\r\n    \"skylark-langx-chars\",\r\n    \"./streams\",\r\n    \"./decode-stream\"\r\n], function(chars, streams, DecodeStream) {\r\n\r\n\r\n    var StreamsSequenceStream = DecodeStream.inherit({\r\n        klassName : \"StreamsSequenceStream\",\r\n\r\n        _construct : function(_streams) {\r\n            this.streams = _streams;\r\n            let maybeLength = 0;\r\n            for (let i = 0, ii = _streams.length; i < ii; i++) {\r\n                const stream = _streams[i];\r\n                if (stream instanceof DecodeStream) {\r\n                    maybeLength += stream._rawMinBufferLength;\r\n                } else {\r\n                    maybeLength += stream.length;\r\n                }\r\n            }\r\n            DecodeStream.prototype._construct.call(this, maybeLength);       \r\n        },\r\n\r\n        readBlock : function streamSequenceStreamReadBlock() {\r\n            var _streams = this.streams;\r\n            if (streams.length === 0) {\r\n                this.eof = true;\r\n                return;\r\n            }\r\n            var stream = _streams.shift();\r\n            var chunk = _streams.getBytes();\r\n            var bufferLength = this.bufferLength;\r\n            var newLength = bufferLength + chunk.length;\r\n            var buffer = this.ensureBuffer(newLength);\r\n            buffer.set(chunk, bufferLength);\r\n            this.bufferLength = newLength;\r\n        },\r\n\r\n        getBaseStreams : function StreamsSequenceStream_getBaseStreams() {\r\n            var baseStreams = [];\r\n            for (var i = 0, ii = this.streams.length; i < ii; i++) {\r\n                var stream = this.streams[i];\r\n                if (stream.getBaseStreams) {\r\n                    baseStreams.push(...stream.getBaseStreams());\r\n                }\r\n            }\r\n            return baseStreams;\r\n        }\r\n    });\r\n\r\n    return streams.StreamsSequenceStream = StreamsSequenceStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/string-stream',[\r\n    \"./streams\",\r\n    \"./_stream\"\r\n], function(streams, Stream) {\r\n\r\n    var StringStream = Stream.inherit({\r\n        klassName : \"StringStream\",\r\n\r\n        _construct : function(str) {\r\n            //const bytes = util.stringToBytes(str);\r\n            //TODO: chartCodeAt() >255\r\n            var length = str.length;\r\n            var bytes = new Uint8Array(length);\r\n            for (var n = 0; n < length; ++n)\r\n                bytes[n] = str.charCodeAt(n);\r\n\r\n            Stream.prototype._construct.call(this,bytes);          \r\n        }\r\n    });\r\n\r\n\r\n    return streams.StringStream = StringStream;\r\n\r\n});\r\n\ndefine('skylark-io-streams/main',[\r\n    \"./streams\",\r\n    \"./ascii85-stream\",\r\n    \"./ascii-hex-stream\",\r\n    \"./chunked-stream\",\r\n    \"./decode-stream\",\r\n    \"./decrypt-stream\",\r\n    \"./fake-stream\",\r\n    \"./flate-stream\",\r\n    \"./lzw-stream\",\r\n    \"./null-stream\",\r\n    \"./predictor-stream\",\r\n    \"./run-length-stream\",\r\n    \"./_stream\",\r\n    \"./streams-sequence-stream\",\r\n    \"./string-stream\"\r\n], function(streams) {\r\n\r\n\treturn streams;\r\n});\ndefine('skylark-io-streams', ['skylark-io-streams/main'], function (main) { return main; });\n\n"]}