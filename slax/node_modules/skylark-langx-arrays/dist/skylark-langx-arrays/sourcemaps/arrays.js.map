{"version":3,"sources":["arrays.js"],"names":["define","skylark","types","objects","filter","Array","prototype","find","isArrayLike","baseFindIndex","array","predicate","fromIndex","fromRight","length","index","baseIsNaN","value","flatten","result","i","item","j","push","makeArray","obj","offset","startWith","concat","slice","call","attach","baseIndexOf","compact","first","items","n","func","grep","callback","out","each","inArray","indexOf","toArray","last","arr","merge","second","l","undefined","forEach","fn","map","elements","key","values","reduce","initialValue","uniq","idx"],"mappings":"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","file":"../arrays.js","sourcesContent":["define([\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n    var filter = Array.prototype.filter,\r\n        find = Array.prototype.find,\r\n        isArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function filter2(array,func) {\r\n      return filter.call(array,func);\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function indexOf(array,item) {\r\n      return array.indexOf(item);\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n    function last(arr) {\r\n        return arr[arr.length - 1];     \r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    function find2(array,func) {\r\n      return find.call(array,func);\r\n    }\r\n\r\n    return skylark.attach(\"langx.arrays\",{\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        filter : filter2,\r\n\r\n        find : find2,\r\n        \r\n        flatten: flatten,\r\n\r\n        grep: grep,\r\n\r\n        inArray: inArray,\r\n\r\n        indexOf : indexOf,\r\n\r\n        makeArray: makeArray, // \r\n\r\n        toArray : makeArray,\r\n\r\n        last : last,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        reduce : reduce,\r\n\r\n        uniq : uniq\r\n\r\n    });\r\n});"]}