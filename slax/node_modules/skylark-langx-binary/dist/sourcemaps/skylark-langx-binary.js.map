{"version":3,"sources":["skylark-langx-binary.js"],"names":["define","skylark","attach","fromBase64","str","a","b","c","d","encoding","length","arraybuffer","ArrayBuffer","view","Uint8Array","i","j","indexOf","charAt","fromBinaryString","charCodeAt","fromBuffer","buffer","array","readInt8","data","offset","readUint16","readUint32","binary","main"],"mappings":";;;;;;;g4BAAAA,EAAA,+BACA,oBACA,SAAAC,GACA,aAWA,OAAAA,EAAAC,OAAA,gBACAC,WAkBA,SAAAC,GAQA,IAPA,IAKAC,EAAAC,EAAAC,EAAAC,EALAC,EAAA,mEACAC,EAAAN,EAAAM,OAAA,EAAA,EACAC,EAAA,IAAAC,YAAAF,GACAG,EAAA,IAAAC,WAAAH,GAIAI,EAAA,EAAAC,EAAA,EAAAD,EAAAL,EAAAK,GAAA,EAEAV,EAAAI,EAAAQ,QAAAb,EAAAc,OAAAF,MACAV,EAAAG,EAAAQ,QAAAb,EAAAc,OAAAF,MACAT,EAAAE,EAAAQ,QAAAb,EAAAc,OAAAF,MACAR,EAAAC,EAAAQ,QAAAb,EAAAc,OAAAF,MAEAH,EAAAE,GAAAV,GAAA,EAAAC,GAAA,EACA,KAAAC,IAEAM,EAAAE,EAAA,IAAA,GAAAT,IAAA,EAAAC,GAAA,GAEA,KAAAC,IAEAK,EAAAE,EAAA,IAAA,EAAAR,IAAA,EAAAC,GAIA,OAAAG,GA3CAQ,iBAHA,SAAAf,GAKA,IAJA,IAAAM,EAAAN,EAAAM,OACAC,EAAA,IAAAC,YAAAF,GACAG,EAAA,IAAAC,WAAAH,GAEAI,EAAA,EAAAA,EAAAL,EAAAK,IAEAF,EAAAE,GAAAX,EAAAgB,WAAAL,GAGA,OAAAJ,GANAU,WAoDA,SAAAC,GAIA,IAHA,IAAAC,EAAA,IAAAX,YAAAU,EAAAZ,QACAG,EAAA,IAAAC,WAAAS,GAEAR,EAAA,EAAAA,EAAAO,EAAAZ,OAAAK,IAEAF,EAAAE,GAAAO,EAAAP,GAGA,OAAAQ,GA5DAC,SAfA,SAAAC,EAAAC,GACA,OAAAD,EAAAC,IAAA,IAAA,IAeAC,WAbA,SAAAF,EAAAC,GACA,OAAAD,EAAAC,IAAA,EAAAD,EAAAC,EAAA,IAaAE,WAXA,SAAAH,EAAAC,GACA,OAAAD,EAAAC,IAAA,GAAAD,EAAAC,EAAA,IAAA,GAAAD,EAAAC,EAAA,IAAA,EAAAD,EAAAC,EAAA,MAAA,OAaA1B,EAAA,6BACA,YACA,SAAA6B,GACA,OAAAA,IAEA7B,EAAA,wBAAA,6BAAA,SAAA8B,GAAA,OAAAA","file":"../skylark-langx-binary.js","sourcesContent":["define('skylark-langx-binary/binary',[\r\n  \"skylark-langx-ns\",\r\n],function(skylark){\r\n\t\"use strict\";\r\n\r\n\r\n\t/**\r\n\t * Create arraybuffer from binary string\r\n\t *\r\n\t * @method fromBinaryString\r\n\t * @param {String} str\r\n\t * @return {Arraybuffer} data\r\n\t */\r\n\tfunction fromBinaryString(str) {\r\n\t\tvar length = str.length;\r\n\t\tvar arraybuffer = new ArrayBuffer(length);\r\n\t\tvar view = new Uint8Array(arraybuffer);\r\n\r\n\t\tfor(var i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tview[i] = str.charCodeAt(i);\r\n\t\t}\r\n\r\n\t\treturn arraybuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * Create arraybuffer from base64 string\r\n\t *\r\n\t * @method fromBase64\r\n\t * @param {String} base64\r\n\t * @return {Arraybuffer} data\r\n\t */\r\n\tfunction fromBase64(str){\r\n\t\tvar encoding = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n\t\tvar length = str.length / 4 * 3;\r\n\t\tvar arraybuffer = new ArrayBuffer(length);\r\n\t\tvar view = new Uint8Array(arraybuffer);\r\n\r\n\t\tvar a, b, c, d;\r\n\r\n\t\tfor(var i = 0, j = 0; i < length; i += 3)\r\n\t\t{\r\n\t\t\ta = encoding.indexOf(str.charAt(j++));\r\n\t\t\tb = encoding.indexOf(str.charAt(j++));\r\n\t\t\tc = encoding.indexOf(str.charAt(j++));\r\n\t\t\td = encoding.indexOf(str.charAt(j++));\r\n\r\n\t\t\tview[i] = (a << 2) | (b >> 4);\r\n\t\t\tif(c !== 64)\r\n\t\t\t{\r\n\t\t\t\tview[i+1] = ((b & 15) << 4) | (c >> 2);\r\n\t\t\t}\r\n\t\t\tif(d !== 64)\r\n\t\t\t{\r\n\t\t\t\tview[i+2] = ((c & 3) << 6) | d;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn arraybuffer;\r\n\t}\r\n\r\n\t/**\r\n\t * Create arraybuffer from Nodejs buffer\r\n\t *\r\n\t * @method fromBuffer\r\n\t * @param {Buffer} buffer\r\n\t * @return {Arraybuffer} data\r\n\t */\r\n\tfunction fromBuffer(buffer)\t{\r\n\t\tvar array = new ArrayBuffer(buffer.length);\r\n\t\tvar view = new Uint8Array(array);\r\n\r\n\t\tfor(var i = 0; i < buffer.length; i++)\r\n\t\t{\r\n\t\t\tview[i] = buffer[i];\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\r\n\t\t//Faster but the results is failing the \"instanceof ArrayBuffer\" test\r\n\t\t//return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength);\r\n\t}\r\n\r\n    function readInt8(data, offset) {\r\n        return data[offset] << 24 >> 24;\r\n    }\r\n    function readUint16(data, offset) {\r\n        return data[offset] << 8 | data[offset + 1];\r\n    }\r\n    function readUint32(data, offset) {\r\n        return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\r\n    }\r\n\r\n\r\n\treturn skylark.attach(\"langx.binary\",{\r\n\t\tfromBase64,\r\n\t\tfromBinaryString,\r\n\t\tfromBuffer,\r\n\t\treadInt8,\r\n\t\treadUint16,\r\n\t\treadUint32\r\n\t});\r\n});\ndefine('skylark-langx-binary/main',[\r\n\t\"./binary\"\r\n],function(binary){\r\n\treturn binary;\r\n});\ndefine('skylark-langx-binary', ['skylark-langx-binary/main'], function (main) { return main; });\n\n"]}