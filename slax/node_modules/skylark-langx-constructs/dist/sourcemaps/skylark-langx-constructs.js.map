{"version":3,"sources":["skylark-langx-constructs.js"],"names":["define","skylark","attach","constructs","inherit","ctor","base","TypeError","prototype","Object","create","constructor","value","writable","configurable","setPrototypeOf","types","objects","arrays","uniq","has","mixin","isArray","isDefined","createClass","_constructor","this","_construct","apply","arguments","init","props","parent","mixins","options","innerParent","result","forEach","Error","clss","unshift","superclass","concat","filter","cls","clsMixines","i","length","serialMixins","newCtor","xtor","Function","__mixin__","mergeMixins","klassName","__mixins__","partial","proto","_super","noOverrided","overrides","name","prop","fn","superFn","tmp","overrided","ret","isPlainObject","defineProperty","extendClass","f1","klass","main"],"mappings":"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","file":"../skylark-langx-constructs.js","sourcesContent":["define('skylark-langx-constructs/constructs',[\r\n  \"skylark-langx-ns\"\r\n],function(skylark){\r\n\r\n    return skylark.attach(\"langx.constructs\",{});\r\n});\ndefine('skylark-langx-constructs/inherit',[\r\n\t\"./constructs\"\r\n],function(constructs){\r\n\r\n    function inherit(ctor,base) {\r\n        ///var f = function() {};\r\n        ///f.prototype = base.prototype;\r\n        ///\r\n        ///ctor.prototype = new f();\r\n\r\n\t    if ((typeof base !== \"function\") && base) {\r\n\t      throw new TypeError(\"Super expression must either be null or a function\");\r\n\t    }\r\n\r\n\t    ctor.prototype = Object.create(base && base.prototype, {\r\n\t      constructor: {\r\n\t        value: ctor,\r\n\t        writable: true,\r\n\t        configurable: true\r\n\t      }\r\n\t    });\r\n\r\n\t    if (base) {\r\n\t    \t//tor.__proto__ = base;\r\n\t    \tObject.setPrototypeOf(ctor, base);\r\n\t    } \r\n    }\r\n\r\n    return constructs.inherit = inherit\r\n});\ndefine('skylark-langx-constructs/klass',[\r\n  \"skylark-langx-ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"./constructs\",\r\n  \"./inherit\"\r\n],function(skylark,types,objects,arrays,constructs,inherit){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n\r\n                inherit(xtor,newCtor)\r\n                //xtor.prototype = Object.create(newCtor.prototype);\r\n                //xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ///ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ///ctor.prototype.constructor = ctor;\r\n  \r\n            // And make this class extendable\r\n            ///ctor.__proto__ = innerParent;\r\n\r\n            inherit(ctor,innerParent);\r\n\r\n            ctor.superclass = parent;\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return constructs.klass = createClass;\r\n});\ndefine('skylark-langx-constructs/main',[\r\n\t\"./constructs\",\r\n\t\"./inherit\",\r\n\t\"./klass\"\r\n],function(constructs){\r\n\treturn constructs;\r\n});\ndefine('skylark-langx-constructs', ['skylark-langx-constructs/main'], function (main) { return main; });\n\n"]}