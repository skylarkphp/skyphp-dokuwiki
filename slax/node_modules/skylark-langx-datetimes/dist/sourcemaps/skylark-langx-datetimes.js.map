{"version":3,"sources":["skylark-langx-datetimes.js"],"names":["define","skylark","attach","parseMilliSeconds","str","strs","split","number","parseInt","isNaN","trim","replace","types","datetimes","pdfDateStringRegex","toDate","input","isString","RegExp","matches","exec","year","month","day","hour","minute","second","universalTimeRelation","offsetHour","offsetMinute","Date","UTC","main"],"mappings":";;;;;;;g4BAAAA,EAAA,qCACA,oBACA,SAAAC,GA2DA,OAAAA,EAAAC,OAAA,mBACAC,kBA3DA,SAAAC,GAEA,IAAAC,EAAAD,EAAAE,MAAA,KACAC,EAAAC,SAAAH,EAAA,IAEA,GAAAI,MAAAF,GACA,OAAA,EAKA,OAAAF,EAAA,GAAAK,OAAAC,QAAA,MAAA,KACA,IAAA,UACA,IAAA,SACA,IAAA,MACA,IAAA,KACA,IAAA,IACA,OAAA,IAAAJ,EACA,IAAA,QACA,IAAA,OACA,IAAA,KACA,IAAA,KACA,IAAA,IACA,IAAA,IACA,OAfA,KAeAA,EACA,IAAA,UACA,IAAA,SACA,IAAA,MACA,IAAA,KACA,IAAA,IACA,OAAA,IAAAA,EACA,IAAA,OACA,IAAA,MACA,IAAA,KACA,IAAA,KACA,IAAA,IACA,OAAA,MAAAA,EACA,IAAA,SACA,IAAA,QACA,IAAA,KACA,IAAA,IACA,OAAA,QAAAA,EACA,IAAA,QACA,IAAA,OACA,IAAA,IACA,IAAA,IACA,OAAA,OAAAA,EACA,IAAA,QACA,IAAA,OACA,IAAA,OACA,IAAA,KACA,IAAA,IACA,OAAA,QAAAA,EACA,QACA,OAAA,QAQAP,EAAA,mCACA,sBACA,eACA,SAAAY,EAAAC,GAxDA,IAAAC,EAmEA,OAAAD,EAAAE,OAjEA,SAAAC,GACA,IAAAA,IAAAJ,EAAAK,SAAAD,GACA,OAAA,KAIAF,IACAA,EAAA,IAAAI,OACA,6FAkBA,MAAAC,EAAAL,EAAAM,KAAAJ,GACA,IAAAG,EACA,OAAA,KAKA,MAAAE,EAAAb,SAAAW,EAAA,GAAA,IACA,IAAAG,EAAAd,SAAAW,EAAA,GAAA,IACAG,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EAAA,EACA,IAAAC,EAAAf,SAAAW,EAAA,GAAA,IACAI,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EACA,IAAAC,EAAAhB,SAAAW,EAAA,GAAA,IACAK,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EACA,IAAAC,EAAAjB,SAAAW,EAAA,GAAA,IACAM,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EACA,IAAAC,EAAAlB,SAAAW,EAAA,GAAA,IACAO,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EACA,MAAAC,EAAAR,EAAA,IAAA,IACA,IAAAS,EAAApB,SAAAW,EAAA,GAAA,IACAS,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EACA,IAAAC,EAAArB,SAAAW,EAAA,GAAA,KAAA,EACAU,EAAAA,GAAA,GAAAA,GAAA,GAAAA,EAAA,EAMA,MAAAF,GACAH,GAAAI,EACAH,GAAAI,GACA,MAAAF,IACAH,GAAAI,EACAH,GAAAI,GAGA,OAAA,IAAAC,KAAAA,KAAAC,IAAAV,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,OAMA1B,EAAA,gCACA,cACA,aACA,SAAAa,GACA,OAAAA,IAEAb,EAAA,2BAAA,gCAAA,SAAAgC,GAAA,OAAAA","file":"../skylark-langx-datetimes.js","sourcesContent":["define('skylark-langx-datetimes/datetimes',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n     function parseMilliSeconds(str) {\r\n\r\n        var strs = str.split(' ');\r\n        var number = parseInt(strs[0]);\r\n\r\n        if (isNaN(number)){\r\n            return 0;\r\n        }\r\n\r\n        var min = 60000 * 60;\r\n\r\n        switch (strs[1].trim().replace(/\\./g, '')) {\r\n            case 'minutes':\r\n            case 'minute':\r\n            case 'min':\r\n            case 'mm':\r\n            case 'm':\r\n                return 60000 * number;\r\n            case 'hours':\r\n            case 'hour':\r\n            case 'HH':\r\n            case 'hh':\r\n            case 'h':\r\n            case 'H':\r\n                return min * number;\r\n            case 'seconds':\r\n            case 'second':\r\n            case 'sec':\r\n            case 'ss':\r\n            case 's':\r\n                return 1000 * number;\r\n            case 'days':\r\n            case 'day':\r\n            case 'DD':\r\n            case 'dd':\r\n            case 'd':\r\n                return (min * 24) * number;\r\n            case 'months':\r\n            case 'month':\r\n            case 'MM':\r\n            case 'M':\r\n                return (min * 24 * 28) * number;\r\n            case 'weeks':\r\n            case 'week':\r\n            case 'W':\r\n            case 'w':\r\n                return (min * 24 * 7) * number;\r\n            case 'years':\r\n            case 'year':\r\n            case 'yyyy':\r\n            case 'yy':\r\n            case 'y':\r\n                return (min * 24 * 365) * number;\r\n            default:\r\n                return 0;\r\n        }\r\n    };\r\n\t\r\n\treturn skylark.attach(\"langx.datetimes\",{\r\n\t\tparseMilliSeconds\r\n\t});\r\n});\ndefine('skylark-langx-datetimes/to_date',[\r\n\t\"skylark-langx-types\",\r\n    \"./datetimes\"\r\n],function(types,datetimes){\r\n\r\n//original :pdf.js-2.7.750/src/display/display_utils.js\r\n\r\n  /**\r\nclass PDFDateString {\r\n   * Convert a PDF date string to a JavaScript `Date` object.\r\n   *\r\n   * The PDF date string format is described in section 7.9.4 of the official\r\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\r\n   * edition) Adobe describes the same format including a trailing apostrophe.\r\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\r\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\r\n   *\r\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\r\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\r\n   * parts of the date string).\r\n   *\r\n   * @param {string} input\r\n   * @returns {Date|null}\r\n   *\r\n  static toDateObject(input) {\r\n   **/\r\n\r\n\r\n\tlet pdfDateStringRegex;\r\n\r\n\tfunction toDate(input) {\r\n    if (!input || !types.isString(input)) {\r\n      return null;\r\n    }\r\n\r\n    // Lazily initialize the regular expression.\r\n    if (!pdfDateStringRegex) {\r\n      pdfDateStringRegex = new RegExp(\r\n        \"^D:\" + // Prefix (required)\r\n          \"(\\\\d{4})\" + // Year (required)\r\n          \"(\\\\d{2})?\" + // Month (optional)\r\n          \"(\\\\d{2})?\" + // Day (optional)\r\n          \"(\\\\d{2})?\" + // Hour (optional)\r\n          \"(\\\\d{2})?\" + // Minute (optional)\r\n          \"(\\\\d{2})?\" + // Second (optional)\r\n          \"([Z|+|-])?\" + // Universal time relation (optional)\r\n          \"(\\\\d{2})?\" + // Offset hour (optional)\r\n          \"'?\" + // Splitting apostrophe (optional)\r\n          \"(\\\\d{2})?\" + // Offset minute (optional)\r\n          \"'?\" // Trailing apostrophe (optional)\r\n      );\r\n    }\r\n\r\n    // Optional fields that don't satisfy the requirements from the regular\r\n    // expression (such as incorrect digit counts or numbers that are out of\r\n    // range) will fall back the defaults from the specification.\r\n    const matches = pdfDateStringRegex.exec(input);\r\n    if (!matches) {\r\n      return null;\r\n    }\r\n\r\n    // JavaScript's `Date` object expects the month to be between 0 and 11\r\n    // instead of 1 and 12, so we have to correct for that.\r\n    const year = parseInt(matches[1], 10);\r\n    let month = parseInt(matches[2], 10);\r\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\r\n    let day = parseInt(matches[3], 10);\r\n    day = day >= 1 && day <= 31 ? day : 1;\r\n    let hour = parseInt(matches[4], 10);\r\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\r\n    let minute = parseInt(matches[5], 10);\r\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\r\n    let second = parseInt(matches[6], 10);\r\n    second = second >= 0 && second <= 59 ? second : 0;\r\n    const universalTimeRelation = matches[7] || \"Z\";\r\n    let offsetHour = parseInt(matches[8], 10);\r\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\r\n    let offsetMinute = parseInt(matches[9], 10) || 0;\r\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\r\n\r\n    // Universal time relation 'Z' means that the local time is equal to the\r\n    // universal time, whereas the relations '+'/'-' indicate that the local\r\n    // time is later respectively earlier than the universal time. Every date\r\n    // is normalized to universal time.\r\n    if (universalTimeRelation === \"-\") {\r\n      hour += offsetHour;\r\n      minute += offsetMinute;\r\n    } else if (universalTimeRelation === \"+\") {\r\n      hour -= offsetHour;\r\n      minute -= offsetMinute;\r\n    }\r\n\r\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\r\n  }\r\n\r\n  return datetimes.toDate = toDate;\r\n\r\n});\ndefine('skylark-langx-datetimes/main',[\r\n\t\"./datetimes\",\r\n\t\"./to_date\"\r\n],function(datetimes){\r\n\treturn datetimes;\r\n});\ndefine('skylark-langx-datetimes', ['skylark-langx-datetimes/main'], function (main) { return main; });\n\n"]}