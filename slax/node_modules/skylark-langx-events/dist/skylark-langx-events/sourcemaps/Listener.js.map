{"version":3,"sources":["listener.js"],"names":["define","types","objects","arrays","klass","events","Event","Array","prototype","slice","compact","isUndefined","isDefined","isBoolean","isPlainObject","isFunction","isString","isEmptyObject","Listener","mixin","safeMixin","listenTo","obj","event","selector","callback","one","this","callbacks","name","match","name1","selector1","on","listening","listeningTo","_listeningTo","i","length","push","listeningEvents","listeningEvent","indexOf","listenToOnce","unlistenTo","eventName","j","off"],"mappings":"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","file":"../listener.js","sourcesContent":["define([\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-klass\",\r\n  \"./events\",\r\n  \"./event\"\r\n],function(types,objects,arrays,klass,events,Event){\r\n    var slice = Array.prototype.slice,\r\n        compact = arrays.compact,\r\n        isDefined = types.isDefined,\r\n        isUndefined = types.isUndefined,\r\n        isPlainObject = types.isPlainObject,\r\n        isFunction = types.isFunction,\r\n        isBoolean = types.isBoolean,\r\n        isString = types.isString,\r\n        isEmptyObject = types.isEmptyObject,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin;\r\n\r\n\r\n    var Listener = klass({\r\n\r\n        listenTo: function(obj, event, selector,callback, /*used internally*/ one) {\r\n            if (!obj) {\r\n                return this;\r\n            }\r\n\r\n            if (types.isPlainObject(event)){\r\n                //listenTo(obj,callbacks,one)\r\n                if (types.isBoolean(selector)) {\r\n                    one = selector;\r\n                    selector = null;\r\n                } else if (types.isBoolean(callback)) {\r\n                    one = callback;\r\n                }\r\n                var callbacks = event;\r\n                for (var name in callbacks) {\r\n\r\n                    var match = name.match( /^([\\w:-]*)\\s*(.*)$/ );\r\n                    var name1 = match[ 1 ];\r\n                    var selector1 = match[ 2 ] || selector;\r\n\r\n                    if (selector1) {\r\n                        this.listenTo(obj,name1,selector1,callbacks[name],one);\r\n                    } else {\r\n                        this.listenTo(obj,name1,callbacks[name],one);\r\n                    }\r\n\r\n                }\r\n                return this;\r\n            }\r\n\r\n            if (isBoolean(callback)) {\r\n                one = callback;\r\n                callback = selector;\r\n                selector = null;\r\n            } else if (isBoolean(selector)) {\r\n                one = selector;\r\n                callback = selector = null;\r\n            } else if (isUndefined(callback)){\r\n                one = false;\r\n                callback = selector;\r\n                selector = null;\r\n            }\r\n\r\n\r\n\r\n            if (!callback) {\r\n                callback = \"handleEvent\";\r\n            }\r\n            \r\n            // Bind callbacks on obj,\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            if (one) {\r\n                if (selector) {\r\n                    obj.one(event, selector,callback, this);\r\n                } else {\r\n                    obj.one(event, callback, this);\r\n                }\r\n            } else {\r\n                 if (selector) {\r\n                    obj.on(event, selector, callback, this);\r\n                } else {\r\n                    obj.on(event, callback, this);\r\n                }\r\n            }\r\n\r\n            //keep track of them on listening.\r\n            var listeningTo = this._listeningTo || (this._listeningTo = []),\r\n                listening;\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                if (listeningTo[i].obj == obj) {\r\n                    listening = listeningTo[i];\r\n                    break;\r\n                }\r\n            }\r\n            if (!listening) {\r\n                listeningTo.push(\r\n                    listening = {\r\n                        obj: obj,\r\n                        events: {}\r\n                    }\r\n                );\r\n            }\r\n            var listeningEvents = listening.events,\r\n                listeningEvent = listeningEvents[event] = listeningEvents[event] || [];\r\n            if (listeningEvent.indexOf(callback) == -1) {\r\n                listeningEvent.push(callback);\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        listenToOnce: function(obj, event,selector, callback) {\r\n            return this.listenTo(obj, event,selector, callback, 1);\r\n        },\r\n\r\n        unlistenTo: function(obj, event, callback) {\r\n            var listeningTo = this._listeningTo;\r\n            if (!listeningTo) {\r\n                return this;\r\n            }\r\n\r\n            if (isString(callback)) {\r\n                callback = this[callback];\r\n            }\r\n\r\n            for (var i = 0; i < listeningTo.length; i++) {\r\n                var listening = listeningTo[i];\r\n\r\n                if (obj && obj != listening.obj) {\r\n                    continue;\r\n                }\r\n\r\n                var listeningEvents = listening.events;\r\n\r\n                for (var eventName in listeningEvents) {\r\n                    if (event && event != eventName) {\r\n                        continue;\r\n                    }\r\n\r\n                    var listeningEvent = listeningEvents[eventName];\r\n\r\n                    if (!listeningEvent) { \r\n                        continue;\r\n                    }\r\n\r\n                    for (var j = 0; j < listeningEvent.length; j++) {\r\n                        if (!callback || callback == listeningEvent[i]) {\r\n                            listening.obj.off(eventName, listeningEvent[i], this);\r\n                            listeningEvent[i] = null;\r\n                        }\r\n                    }\r\n\r\n                    listeningEvent = listeningEvents[eventName] = compact(listeningEvent);\r\n\r\n                    if (isEmptyObject(listeningEvent)) {\r\n                        listeningEvents[eventName] = null;\r\n                    }\r\n\r\n                }\r\n\r\n                if (isEmptyObject(listeningEvents)) {\r\n                    listeningTo[i] = null;\r\n                }\r\n            }\r\n\r\n            listeningTo = this._listeningTo = compact(listeningTo);\r\n            if (isEmptyObject(listeningTo)) {\r\n                this._listeningTo = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n    });\r\n\r\n    return events.Listener = Listener;\r\n\r\n})"]}