{"version":3,"sources":["negate.js"],"names":["define","funcs","negate","predicate","TypeError","args","apply","this"],"mappings":";;;;;;;AAAAA,QACC,WACC,SAASC,GA4BP,OAAOA,EAAMC,OAVb,SAAgBC,GACd,GAAyB,mBAAdA,EACT,MAAM,IAAIC,UAAU,uBAEtB,OAAO,YAAYC,GACjB,OAAQF,EAAUG,MAAMC,KAAMF","file":"../negate.js","sourcesContent":["define([\r\n\t\"./funcs\"\r\n],function(funcs){\r\n   \r\n    /**\r\n     * Creates a function that negates the result of the predicate `func`. The\r\n     * `func` predicate is invoked with the `this` binding and arguments of the\r\n     * created function.\r\n     * @category Function\r\n     * @param {Function} predicate The predicate to negate.\r\n     * @returns {Function} Returns the new negated function.\r\n     * @example\r\n     *\r\n     * function isEven(n) {\r\n     *   return n % 2 == 0\r\n     * }\r\n     *\r\n     * filter([1, 2, 3, 4, 5, 6], negate(isEven))\r\n     * // => [1, 3, 5]\r\n     */\r\n    function negate(predicate) {\r\n      if (typeof predicate !== 'function') {\r\n        throw new TypeError('Expected a function')\r\n      }\r\n      return function(...args) {\r\n        return !predicate.apply(this, args)\r\n      }\r\n    }\r\n\r\n\r\n    return funcs.negate = negate;\r\n\r\n})"]}