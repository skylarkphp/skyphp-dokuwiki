{"version":3,"sources":["template.js"],"names":["define","objects","funcs","proxy","Array","prototype","slice","templateSettings","evaluate","interpolate","escape","noMatch","escapes","'","\\","\r","\n","\t"," "," ","escaper","template","text","data","settings","render","defaults","matcher","RegExp","source","join","index","replace","match","offset","length","variable","Function","e","this","call","argument"],"mappings":";;;;;;;AAAAA,QACE,wBACA,UACA,WACA,SAASC,EAAQC,EAAMC,GAETC,MAAMC,UAAUC,MAA5B,IAIIC,GACAC,SAAU,kBACVC,YAAa,mBACbC,OAAQ,oBAMRC,EAAU,OAKVC,GACFC,IAAU,IACVC,KAAU,KACVC,KAAU,IACVC,KAAU,IACVC,KAAU,IACVC,SAAU,QACVC,SAAU,SAGRC,EAAU,+BAGd,SAASC,EAASC,EAAMC,EAAMC,GAC1B,IAAIC,EACJD,EAAWvB,EAAQyB,YAAaF,EAASjB,GAGzC,IAAIoB,EAAUC,SACXJ,EAASd,QAAUC,GAASkB,QAC5BL,EAASf,aAAeE,GAASkB,QACjCL,EAAShB,UAAYG,GAASkB,QAC/BC,KAAK,KAAO,KAAM,KAGhBC,EAAQ,EACRF,EAAS,SACbP,EAAKU,QAAQL,EAAS,SAASM,EAAOvB,EAAQD,EAAaD,EAAU0B,GAcnE,OAbAL,GAAUP,EAAKhB,MAAMyB,EAAOG,GACvBF,QAAQZ,EAAS,SAASa,GAAS,MAAO,KAAOrB,EAAQqB,KAE1DvB,IACFmB,GAAU,cAAgBnB,EAAS,kCAEjCD,IACFoB,GAAU,cAAgBpB,EAAc,wBAEtCD,IACFqB,GAAU,OAASrB,EAAW,YAEhCuB,EAAQG,EAASD,EAAME,OAChBF,IAETJ,GAAU,OAGLL,EAASY,WAAUP,EAAS,mBAAqBA,EAAS,OAE/DA,EAAS,4FAEPA,EAAS,gBAEX,IACEJ,EAAS,IAAIY,SAASb,EAASY,UAAY,MAAO,IAAKP,GACvD,MAAOS,GAEP,MADAA,EAAET,OAASA,EACLS,EAGR,GAAIf,EACF,OAAOE,EAAOF,EAAKgB,MAErB,IAAIlB,EAAWlB,EAAM,SAASoB,GAC5B,OAAOE,EAAOe,KAAKD,KAAMhB,EAAKgB,OAC9BA,MAGEE,EAAWjB,EAASY,UAAY,MAGpC,OAFAf,EAASQ,OAAS,YAAcY,EAAW,OAASZ,EAAS,IAEtDR,EAKX,OAFAA,EAASd,iBAAmBL,EAAMK,iBAAmBA,EAE9CL,EAAMmB,SAAWA","file":"../template.js","sourcesContent":["define([\r\n  \"skylark-langx-objects\",\r\n  \"./funcs\",\r\n  \"./proxy\"\r\n],function(objects,funcs,proxy){\r\n    //ref : underscore\r\n    var slice = Array.prototype.slice;\r\n   \r\n    // By default, Underscore uses ERB-style template delimiters, change the\r\n    // following template settings to use alternative delimiters.\r\n    var templateSettings = {\r\n        evaluate: /<%([\\s\\S]+?)%>/g,\r\n        interpolate: /<%=([\\s\\S]+?)%>/g,\r\n        escape: /<%-([\\s\\S]+?)%>/g\r\n    };\r\n\r\n    // When customizing `templateSettings`, if you don't want to define an\r\n    // interpolation, evaluation or escaping regex, we need one that is\r\n    // guaranteed not to match.\r\n    var noMatch = /(.)^/;\r\n\r\n\r\n    // Certain characters need to be escaped so that they can be put into a\r\n    // string literal.\r\n    var escapes = {\r\n      \"'\":      \"'\",\r\n      '\\\\':     '\\\\',\r\n      '\\r':     'r',\r\n      '\\n':     'n',\r\n      '\\t':     't',\r\n      '\\u2028': 'u2028',\r\n      '\\u2029': 'u2029'\r\n    };\r\n\r\n    var escaper = /\\\\|'|\\r|\\n|\\t|\\u2028|\\u2029/g;\r\n\r\n\r\n    function template(text, data, settings) {\r\n        var render;\r\n        settings = objects.defaults({}, settings,templateSettings);\r\n\r\n        // Combine delimiters into one regular expression via alternation.\r\n        var matcher = RegExp([\r\n          (settings.escape || noMatch).source,\r\n          (settings.interpolate || noMatch).source,\r\n          (settings.evaluate || noMatch).source\r\n        ].join('|') + '|$', 'g');\r\n\r\n        // Compile the template source, escaping string literals appropriately.\r\n        var index = 0;\r\n        var source = \"__p+='\";\r\n        text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n          source += text.slice(index, offset)\r\n              .replace(escaper, function(match) { return '\\\\' + escapes[match]; });\r\n\r\n          if (escape) {\r\n            source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n          }\r\n          if (interpolate) {\r\n            source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n          }\r\n          if (evaluate) {\r\n            source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n          }\r\n          index = offset + match.length;\r\n          return match;\r\n        });\r\n        source += \"';\\n\";\r\n\r\n        // If a variable is not specified, place data values in local scope.\r\n        if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n        source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n          \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n          source + 'return __p;\\n';\r\n\r\n        try {\r\n          render = new Function(settings.variable || 'obj', '_', source);\r\n        } catch (e) {\r\n          e.source = source;\r\n          throw e;\r\n        }\r\n\r\n        if (data) {\r\n          return render(data,this)\r\n        }\r\n        var template = proxy(function(data) {\r\n          return render.call(this, data,this);\r\n        },this);\r\n\r\n        // Provide the compiled source as a convenience for precompilation.\r\n        var argument = settings.variable || 'obj';\r\n        template.source = 'function(' + argument + '){\\n' + source + '}';\r\n\r\n        return template;\r\n    }\r\n\r\n    template.templateSettings = funcs.templateSettings = templateSettings;\r\n\r\n    return funcs.template = template;\r\n\r\n})"]}