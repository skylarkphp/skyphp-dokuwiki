{"version":3,"sources":["Logger.js"],"names":["define","objects","klass","logging","levels","history","Logger","_level","_construct","name","this","_logByType","type","level","args","lvl","lvlRegExp","RegExp","unshift","toUpperCase","push","concat","splice","length","window","console","fn","info","log","test","Array","isArray","LogByTypeFactory","hasOwnProperty","Error","error","warn","debug","createLogger","subname","mixin","prototype","enable","filter","fname","historyItem","clear","disable","root"],"mappings":";;;;;;;AAAAA,QACI,wBACA,iCACA,YACA,YACF,SAASC,EAAQC,EAAMC,EAAQC,GAC7B,aAEA,IAAIC,KA2BJ,IAAIC,EAASJ,GACTK,OAAS,OAETC,WAAa,SAASC,GAClBC,KAAKD,KAAOA,EAEZC,KAAKC,WA/BY,CAACF,GAAS,CAACG,EAAMC,EAAOC,KAC7C,MAAMC,EAAMX,EAAOS,GACbG,EAAY,IAAIC,YAAaF,OAKnC,GAJa,UAATH,GACAE,EAAKI,QAAQN,EAAKO,cAAgB,KAEtCL,EAAKI,QAAQT,EAAO,KAChBJ,EAAS,CACTA,EAAQe,QAAQC,OAAOP,IACvB,MAAMQ,EAASjB,EAAQkB,OAAS,IAChClB,EAAQiB,OAAO,EAAGA,EAAS,EAAIA,EAAS,GAE5C,IAAKE,OAAOC,QACR,OAEJ,IAAIC,EAAKF,OAAOC,QAAQb,GACnBc,GAAe,UAATd,IACPc,EAAKF,OAAOC,QAAQE,MAAQH,OAAOC,QAAQG,KAE1CF,GAAOX,GAAQC,EAAUa,KAAKjB,IAGnCc,EAAGI,MAAMC,QAAQjB,GAAQ,QAAU,QAAQU,OAAOC,QAASX,IASrCkB,CAAiBvB,IAGvCI,MAAQ,SAASE,GACb,GAAmB,iBAARA,EAAkB,CACzB,IAAKX,EAAO6B,eAAelB,GACvB,MAAM,IAAImB,UAAWnB,+BAEzBL,KAAKH,OAASQ,EAElB,OAAOL,KAAKH,QAGhB4B,MAAQ,YAAYrB,GAChBJ,KAAKC,WAAW,QAASD,KAAKH,OAAQO,IAG1CsB,KAAO,YAAYtB,GACfJ,KAAKC,WAAW,OAAQD,KAAKH,OAAQO,IAGzCuB,MAAQ,YAAYvB,GAChBJ,KAAKC,WAAW,QAASD,KAAKH,OAAQO,IAG1Ca,KAAO,YAAYb,GACfJ,KAAKC,WAAW,OAAQD,KAAKH,OAAQO,IAGzCT,QAAU,WACN,OAAOA,KAAagB,OAAOhB,OAG/BiC,aAAe,SAASC,GACpB,OAAO,IAAIjC,EAAOI,KAAKD,KAAOC,KAAKD,KAAQ,KAAO8B,EAAUA,MAiCpE,OA3BAtC,EAAQuC,MAAMlC,EAAOmC,UAAUpC,SAC3BqC,OAAS,WACU,OAAZrC,IACCA,OAIRsC,OAAS,SAASC,GACd,OAAQvC,OAAesC,OAAOE,GACnB,IAAI5B,YAAa2B,OAAYf,KAAKgB,EAAY,MAG7DC,MAAQ,WACAzC,IACAA,EAAQkB,OAAS,IAGzBwB,QAAU,WACU,OAAZ1C,IACAA,EAAQkB,OAAS,EACjBlB,EAAU,SAKtBC,EAAO0C,KAAO,IAAI1C,EAAO,IAElBH,EAAQG,OAASA","file":"../Logger.js","sourcesContent":["define([\r\n    \"skylark-langx-objects\",\r\n    \"skylark-langx-constructs/klass\",\r\n    \"./logging\",\r\n    \"./levels\"\r\n],function(objects,klass,logging,levels){\r\n    'use strict';\r\n\r\n    let history = [];\r\n \r\n    const LogByTypeFactory = (name) => (type, level, args) => {\r\n        const lvl = levels[level];\r\n        const lvlRegExp = new RegExp(`^(${ lvl })$`);\r\n        if (type !== 'debug') {\r\n            args.unshift(type.toUpperCase() + ':');\r\n        }\r\n        args.unshift(name + ':');\r\n        if (history) {\r\n            history.push([].concat(args));\r\n            const splice = history.length - 1000;\r\n            history.splice(0, splice > 0 ? splice : 0);\r\n        }\r\n        if (!window.console) {\r\n            return;\r\n        }\r\n        let fn = window.console[type];\r\n        if (!fn && type === 'debug') {\r\n            fn = window.console.info || window.console.log;\r\n        }\r\n        if (!fn || !lvl || !lvlRegExp.test(type)) {\r\n            return;\r\n        }\r\n        fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);\r\n    };\r\n\r\n    var Logger = klass({\r\n        _level : \"info\",\r\n\r\n        _construct : function(name) {\r\n            this.name = name;\r\n\r\n            this._logByType = LogByTypeFactory(name);\r\n        },\r\n\r\n        level : function(lvl) {\r\n            if (typeof lvl === 'string') {\r\n                if (!levels.hasOwnProperty(lvl)) {\r\n                    throw new Error(`\"${ lvl }\" in not a valid log level`);\r\n                }\r\n                this._level = lvl;\r\n            }\r\n            return this._level;\r\n        },\r\n\r\n        error : function(...args){ \r\n            this._logByType('error', this._level, args);\r\n        },\r\n\r\n        warn : function(...args){ \r\n            this._logByType('warn', this._level, args);\r\n        },\r\n\r\n        debug : function(...args){ \r\n            this._logByType('debug', this._level, args);\r\n        },\r\n\r\n        info : function(...args){ \r\n            this._logByType('info', this._level, args);\r\n        },\r\n\r\n        history : function() {\r\n            return history ? [].concat(history) : [];\r\n        },\r\n\r\n        createLogger : function(subname) {\r\n            return new Logger(this.name ? this.name  + ': ' + subname : subname);   \r\n        }\r\n\r\n    });\r\n\r\n\r\n    objects.mixin(Logger.prototype.history,{\r\n        enable : function() {\r\n           if (history === null) {\r\n                history = [];\r\n            }            \r\n        },\r\n        \r\n        filter : function(fname) {\r\n            return (history || []).filter(historyItem => {\r\n                return new RegExp(`.*${ fname }.*`).test(historyItem[0]);\r\n            });\r\n        },\r\n        clear : function() {\r\n            if (history) {\r\n                history.length = 0;\r\n            }\r\n        },\r\n        disable : function()  {\r\n            if (history !== null) {\r\n                history.length = 0;\r\n                history = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    Logger.root = new Logger(\"\");\r\n\r\n    return logging.Logger = Logger;\r\n\r\n});"]}