{"version":3,"sources":["skylark-langx-logging.js"],"names":[],"mappingsfile":"../skylark-langx-logging.js","sourcesContent":["define('skylark-langx-logging/logging',[\r\n  \"skylark-langx-ns\"\r\n],function(skylark){\r\n\r\n\r\n    return skylark.attach(\"langx.logging\",{\r\n\r\n    });\r\n});\ndefine('skylark-langx-logging/levels',[\r\n\t\"./logging\"\r\n],function(logging){\r\n    return logging.levels = {\r\n\t    all: 'debug|info|warn|error',\r\n\t    off: '',\r\n\t    debug: 'debug|info|warn|error',\r\n\t    info: 'info|warn|error',\r\n\t    warn: 'warn|error',\r\n\t    error: 'error',\r\n\t    DEFAULT: \"info\"\r\n    };\t\r\n});\ndefine('skylark-langx-logging/Logger',[\r\n    \"skylark-langx-objects\",\r\n    \"skylark-langx-constructs/klass\",\r\n    \"./logging\",\r\n    \"./levels\"\r\n],function(objects,klass,logging,levels){\r\n    'use strict';\r\n\r\n    let history = [];\r\n \r\n    const LogByTypeFactory = (name) => (type, level, args) => {\r\n        const lvl = levels[level];\r\n        const lvlRegExp = new RegExp(`^(${ lvl })$`);\r\n        if (type !== 'debug') {\r\n            args.unshift(type.toUpperCase() + ':');\r\n        }\r\n        args.unshift(name + ':');\r\n        if (history) {\r\n            history.push([].concat(args));\r\n            const splice = history.length - 1000;\r\n            history.splice(0, splice > 0 ? splice : 0);\r\n        }\r\n        if (!window.console) {\r\n            return;\r\n        }\r\n        let fn = window.console[type];\r\n        if (!fn && type === 'debug') {\r\n            fn = window.console.info || window.console.log;\r\n        }\r\n        if (!fn || !lvl || !lvlRegExp.test(type)) {\r\n            return;\r\n        }\r\n        fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);\r\n    };\r\n\r\n    var Logger = klass({\r\n        _level : \"info\",\r\n\r\n        _construct : function(name) {\r\n            this.name = name;\r\n\r\n            this._logByType = LogByTypeFactory(name);\r\n        },\r\n\r\n        level : function(lvl) {\r\n            if (typeof lvl === 'string') {\r\n                if (!levels.hasOwnProperty(lvl)) {\r\n                    throw new Error(`\"${ lvl }\" in not a valid log level`);\r\n                }\r\n                this._level = lvl;\r\n            }\r\n            return this._level;\r\n        },\r\n\r\n        error : function(...args){ \r\n            this._logByType('error', this._level, args);\r\n        },\r\n\r\n        warn : function(...args){ \r\n            this._logByType('warn', this._level, args);\r\n        },\r\n\r\n        debug : function(...args){ \r\n            this._logByType('debug', this._level, args);\r\n        },\r\n\r\n        info : function(...args){ \r\n            this._logByType('info', this._level, args);\r\n        },\r\n\r\n        history : function() {\r\n            return history ? [].concat(history) : [];\r\n        },\r\n\r\n        createLogger : function(subname) {\r\n            return new Logger(this.name ? this.name  + ': ' + subname : subname);   \r\n        }\r\n\r\n    });\r\n\r\n\r\n    objects.mixin(Logger.prototype.history,{\r\n        enable : function() {\r\n           if (history === null) {\r\n                history = [];\r\n            }            \r\n        },\r\n        \r\n        filter : function(fname) {\r\n            return (history || []).filter(historyItem => {\r\n                return new RegExp(`.*${ fname }.*`).test(historyItem[0]);\r\n            });\r\n        },\r\n        clear : function() {\r\n            if (history) {\r\n                history.length = 0;\r\n            }\r\n        },\r\n        disable : function()  {\r\n            if (history !== null) {\r\n                history.length = 0;\r\n                history = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    Logger.root = new Logger(\"\");\r\n\r\n    return logging.Logger = Logger;\r\n\r\n});\ndefine('skylark-langx-logging/main',[\r\n\t\"./logging\",\r\n\t\"./Logger\"\r\n],function(logging,Logger){\r\n\tlet rootLogger = Logger.root;\r\n\r\n\tlogging.debug = function(...args) {\r\n\t\trootLogger.debug(...args);\r\n\t};\r\n\r\n\tlogging.info = function(...args) {\r\n\t\trootLogger.debug(...args);\r\n\t};\r\n\r\n\tlogging.warn = function(...args) {\r\n\t\trootLogger.debug(...args);\r\n\t};\r\n\r\n\tlogging.error = function(...args) {\r\n\t\trootLogger.debug(...args);\r\n\t};\r\n\r\n\r\n\treturn logging;\r\n});\ndefine('skylark-langx-logging', ['skylark-langx-logging/main'], function (main) { return main; });\n\n"]}