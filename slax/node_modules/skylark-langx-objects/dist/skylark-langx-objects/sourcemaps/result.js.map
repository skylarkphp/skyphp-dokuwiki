{"version":3,"sources":["result.js"],"names":["define","types","objects","isArray","isFunction","result","obj","path","fallback","split","length","call","i","prop"],"mappings":";;;;;;;AAAAA,QACC,sBACA,aACC,SAASC,EAAMC,GAChB,IAAIC,EAAUF,EAAME,QACnBC,EAAaH,EAAMG,WAsBjB,OAAOF,EAAQG,OApBf,SAAgBC,EAAKC,EAAMC,GAClBL,EAAQI,KACTA,EAAOA,EAAKE,MAAM,MAEtB,IAAIC,EAASH,EAAKG,OAClB,IAAKA,EACH,OAAON,EAAWI,GAAYA,EAASG,KAAKL,GAAOE,EAErD,IAAK,IAAII,EAAI,EAAGA,EAAIF,EAAQE,IAAK,CAC/B,IAAIC,EAAc,MAAPP,OAAc,EAASA,EAAIC,EAAKK,SAC9B,IAATC,IACFA,EAAOL,EACPI,EAAIF,GAENJ,EAAMF,EAAWS,GAAQA,EAAKF,KAAKL,GAAOO,EAG5C,OAAOP","file":"../result.js","sourcesContent":["define([\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n\tvar isArray = types.isArray,\r\n\t\tisFunction = types.isFunction;\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    return objects.result = result;\r\n\t\r\n});"]}