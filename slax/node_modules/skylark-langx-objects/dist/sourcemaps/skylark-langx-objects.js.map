{"version":3,"sources":["skylark-langx-objects.js"],"names":["define","skylark","types","keysFunc","defaults","hasOwnProperty","Object","prototype","isObject","Array","slice","isBoolean","isFunction","isPlainObject","isArray","isArrayLike","isString","toInteger","allKeys","obj","keys","key","push","has","path","call","length","i","attach","arguments","index","source","l","isMatch","object","attrs","removeItem","items","item","idx","indexOf","splice","this","values","objects","clone","src","checkCloneMethod","copy","undefined","each","callback","isForEach","value","undef","_mixin","target","deep","safe","args","params","shift","pop","sources","_parseMixinArgs","mixin","apply","forEach","extend","arg","includes","collection","fromIndex","guard","nativeMax","baseIndexOf","eq","deepEq","SymbolProto","Symbol","a","b","aStack","bStack","type","className","toString","valueOf","areArrays","aCtor","constructor","bCtor","isEqual","omit","prop1","prop2","result","pn","pick","fallback","split","prop","safeMixin","scall","method","arg1","arg2","shadow","defineProperty","enumerable","configurable","writable","main"],"mappings":"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","file":"../skylark-langx-objects.js","sourcesContent":["define('skylark-langx-objects/objects',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n    var hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n        isObject = types.isObject,\r\n        isPlainObject = types.isPlainObject,\r\n        isArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = types.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = allKeys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n\r\n    return skylark.attach(\"langx.objects\",{\r\n        allKeys: allKeys,\r\n\r\n        attach : skylark.attach,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        has: has,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        removeItem: removeItem,\r\n\r\n        values: values\r\n    });\r\n\r\n\r\n});\ndefine('skylark-langx-objects/clone',[\r\n    \"skylark-langx-types\",\r\n    \"./objects\"\r\n],function(types,objects) {\r\n    var isPlainObject = types.isPlainObject,\r\n        isArray = types.isArray;\r\n\r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    return objects.clone = clone;\r\n});\ndefine('skylark-langx-objects/each',[\r\n    \"./objects\"\r\n],function(objects) {\r\n\r\n    function each(obj, callback,isForEach) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if ((isForEach ? callback.call(value, value, key) : callback.call(value, key, value) ) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if ((isForEach ? callback.call(value, value, i) : callback.call(value, i, value) )=== false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    return objects.each = each;\r\n});\ndefine('skylark-langx-objects/_mixin',[\r\n    \"skylark-langx-types\",\r\n    \"./objects\"\r\n],function(types,objects) {\r\n\r\n    var isPlainObject = types.isPlainObject;\r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            // if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n            //    if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n            if (deep && isPlainObject(source[key])) {\r\n                if (!isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                //if (isArray(source[key]) && !isArray(target[key])) {\r\n                //    target[key] = [];\r\n                //}\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    return _mixin;\r\n});\ndefine('skylark-langx-objects/_parse_mixin_args',[\r\n    \"skylark-langx-types\",\r\n    \"./objects\"\r\n],function(types,objects) {\r\n\r\n    var slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean;\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n    \r\n    return _parseMixinArgs;\r\n});\ndefine('skylark-langx-objects/mixin',[\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\",\r\n  \"./_mixin\",\r\n  \"./_parse_mixin_args\"\r\n],function(types,objects,_mixin,_parseMixinArgs) {\r\n\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n\r\n    return objects.mixin = mixin;\r\n\t\r\n});\ndefine('skylark-langx-objects/extend',[\r\n    \"./objects\",\r\n    \"./mixin\"\r\n],function(objects,mixin) {\r\n    var slice = Array.prototype.slice;\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    return objects.extend = extend;\r\n});\ndefine('skylark-langx-objects/includes',[\r\n    \"./objects\"\r\n],function(objects) {\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n\r\n    return objects.includes = includes;\r\n});\ndefine('skylark-langx-objects/is-equal',[\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n    var isFunction = types.isFunction;\r\n\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    return objects.isEqual = isEqual;\r\n\t\r\n});\ndefine('skylark-langx-objects/omit',[\r\n    \"./objects\"\r\n],function(objects) {\r\n\r\n   // Return a copy of the object without the blacklisted properties.\r\n    function omit(obj, prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = mixin({},obj);\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                delete result[pn];\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n    \r\n    return objects.omit = omit;\r\n});\ndefine('skylark-langx-objects/pick',[\r\n    \"./objects\"\r\n],function(objects) {\r\n\r\n   // Return a copy of the object only containing the whitelisted properties.\r\n    function pick(obj,prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = {};\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                result[pn] = obj[pn];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    \r\n    return objects.pick = pick;\r\n});\ndefine('skylark-langx-objects/result',[\r\n\t\"skylark-langx-types\",\r\n\t\"./objects\"\r\n],function(types,objects) {\r\n\tvar isArray = types.isArray,\r\n\t\tisFunction = types.isFunction;\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    return objects.result = result;\r\n\t\r\n});\ndefine('skylark-langx-objects/safe-mixin',[\r\n\t\"./objects\",\r\n  \"./_mixin\",\r\n  \"./_parse_mixin_args\"\r\n],function(objects,_mixin,_parseMixinArgs) {\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    return objects.safeMixin = safeMixin;\r\n});\ndefine('skylark-langx-objects/scall',[\r\n    \"./objects\"\r\n],function(objects) {\r\n\r\n    function scall(obj,method,arg1,arg2) {\r\n        if (obj && obj[method]) {\r\n            var args = slice.call(arguments, 2);\r\n\r\n            return obj[method].apply(obj,args);\r\n        }\r\n    }\r\n\r\n    return objects.scall = scall;\r\n});\n define('skylark-langx-objects/shadow',[\r\n\t\"./objects\"\r\n],function(objects) {\r\n\r\n    function shadow(obj, prop, value) {\r\n        Object.defineProperty(obj, prop, {\r\n            value,\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false\r\n        });\r\n        return value;\r\n    }\r\n\r\n    return objects.shadow = shadow;\r\n});\ndefine('skylark-langx-objects/main',[\r\n\t\"./objects\",\r\n\t\"./clone\",\r\n\t\"./each\",\r\n\t\"./extend\",\r\n\t\"./includes\",\r\n\t\"./is-equal\",\r\n\t\"./mixin\",\r\n\t\"./omit\",\r\n\t\"./pick\",\r\n\t\"./result\",\r\n\t\"./safe-mixin\",\r\n\t\"./scall\",\r\n\t\"./shadow\"\r\n],function(objects){\r\n\treturn objects;\r\n});\ndefine('skylark-langx-objects', ['skylark-langx-objects/main'], function (main) { return main; });\n\n"]}