{"version":3,"sources":["skylark-langx-strings.js"],"names":["define","skylark","escapeCharMap","Object","freeze","&","<",">","\"","'","`","=","replaceChar","c","escapeChars","NullCharactersRegExp","idCounter","template","id","data","name","string","line","body","func","map","escapeHTML","me","arguments","callee","cache","test","get","variable","replace","Function","_","stash","call","context","ret","document","getElementById","innerHTML","attach","camelCase","str","a","toUpperCase","dasherize","toLowerCase","deserializeValue","value","JSON","parse","e","String","toString","generateUUID","r","Math","random","v","ltrim","lowerFirst","charAt","slice","rtrim","serializeValue","stringify","substitute","transform","thisObject","getObject","key","match","retVal","getValue","keys","obj","_k","pop","split","reverse","window","proxy","format","slugify","from","i","l","length","RegExp","trim","prototype","trimNull","warn","uniqueId","prefix","upperFirst","strings","base64","decode","input","binary","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","this","_keyStr","indexOf","fromCharCode","utftext","c1","c2","charCodeAt","c3","_utf8_decode","encode","n","_utf8_encode","isNaN","main"],"mappings":"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","file":"../skylark-langx-strings.js","sourcesContent":["define('skylark-langx-strings/strings',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n    // add default escape function for escaping HTML entities\r\n    var escapeCharMap = Object.freeze({\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#x27;',\r\n        '`': '&#x60;',\r\n        '=': '&#x3D;',\r\n    });\r\n    function replaceChar(c) {\r\n        return escapeCharMap[c];\r\n    }\r\n    var escapeChars = /[&<>\"'`=]/g;\r\n\r\n\r\n     /*\r\n     * Converts camel case into dashes.\r\n     * @param {String} str\r\n     * @return {String}\r\n     * @exapmle marginTop -> margin-top\r\n     */\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function escapeHTML(str) {\r\n        if (str == null) {\r\n            return '';\r\n        }\r\n        if (!str) {\r\n            return String(str);\r\n        }\r\n\r\n        return str.toString().replace(escapeChars, replaceChar);\r\n    }\r\n\r\n    function generateUUID() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0;\r\n            var v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n\r\n    const NullCharactersRegExp = /\\x00/g;\r\n\r\n    /**\r\n     * @param {string} str\r\n     */\r\n    function trimNull(str) {\r\n      if (typeof str !== \"string\") {\r\n        warn(\"The argument for removeNullCharacters must be a string.\");\r\n        return str;\r\n      }\r\n      return str.replace(NullCharactersRegExp, \"\");\r\n    }\r\n\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n    var idCounter = 0;\r\n    function uniqueId (prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n\r\n    /**\r\n     * https://github.com/cho45/micro-template.js\r\n     * (c) cho45 http://cho45.github.com/mit-license\r\n     */\r\n    function template (id, data) {\r\n\r\n        function include(name, args) {\r\n            var stash = {};\r\n            for (var key in template.context.stash) if (template.context.stash.hasOwnProperty(key)) {\r\n                stash[key] = template.context.stash[key];\r\n            }\r\n            if (args) for (var key in args) if (args.hasOwnProperty(key)) {\r\n                stash[key] = args[key];\r\n            }\r\n            var context = template.context;\r\n            context.ret += template(name, stash);\r\n            template.context = context;\r\n        }\r\n\r\n        function wrapper(name, fun) {\r\n            var current = template.context.ret;\r\n            template.context.ret = '';\r\n            fun.apply(template.context);\r\n            var content = template.context.ret;\r\n            var orig_content = template.context.stash.content;\r\n            template.context.stash.content = content;\r\n            template.context.ret = current + template(name, template.context.stash);\r\n            template.context.stash.content = orig_content;\r\n        }\r\n\r\n        var me = arguments.callee;\r\n        if (!me.cache[id]) me.cache[id] = (function () {\r\n            var name = id, string = /^[\\w\\-]+$/.test(id) ? me.get(id): (name = 'template(string)', id); // no warnings\r\n            var line = 1, body = (\r\n                \"try { \" +\r\n                    (me.variable ?  \"var \" + me.variable + \" = this.stash;\" : \"with (this.stash) { \") +\r\n                        \"this.ret += '\"  +\r\n                        string.\r\n                            replace(/<%/g, '\\x11').replace(/%>/g, '\\x13'). // if you want other tag, just edit this line\r\n                            replace(/'(?![^\\x11\\x13]+?\\x13)/g, '\\\\x27').\r\n                            replace(/^\\s*|\\s*$/g, '').\r\n                            replace(/\\n|\\r\\n/g, function () { return \"';\\nthis.line = \" + (++line) + \"; this.ret += '\\\\n\" }).\r\n                            replace(/\\x11=raw(.+?)\\x13/g, \"' + ($1) + '\").\r\n                            replace(/\\x11=(.+?)\\x13/g, \"' + this.escapeHTML($1) + '\").\r\n                            replace(/\\x11(.+?)\\x13/g, \"'; $1; this.ret += '\") +\r\n                    \"'; \" + (me.variable ? \"\" : \"}\") + \"return this.ret;\" +\r\n                \"} catch (e) { throw 'TemplateError: ' + e + ' (on \" + name + \"' + ' line ' + this.line + ')'; } \" +\r\n                \"//@ sourceURL=\" + name + \"\\n\" // source map\r\n            ).replace(/this\\.ret \\+= '';/g, '');\r\n            var func = new Function(body);\r\n            var map  = { '&' : '&amp;', '<' : '&lt;', '>' : '&gt;', '\\x22' : '&#x22;', '\\x27' : '&#x27;' };\r\n            var escapeHTML = function (string) { return (''+string).replace(/[&<>\\'\\\"]/g, function (_) { return map[_] }) };\r\n            return function (stash) { return func.call(me.context = { escapeHTML: escapeHTML, line: 1, ret : '', stash: stash }) };\r\n        })();\r\n        return data ? me.cache[id](data) : me.cache[id];\r\n    }\r\n\r\n    template.cache = {};\r\n    \r\n\r\n    template.get = function (id) {\r\n        return document.getElementById(id).innerHTML;\r\n    };\r\n\r\n\r\n    function ltrim(str) {\r\n        return str.replace(/^\\s+/, '');\r\n    }\r\n    \r\n    function rtrim(str) {\r\n        return str.replace(/\\s+$/, '');\r\n    }\r\n\r\n    // Slugify a string\r\n    function slugify(str) {\r\n        str = str.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        // Make the string lowercase\r\n        str = str.toLowerCase();\r\n\r\n        // Remove accents, swap ñ for n, etc\r\n        var from = \"ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;\";\r\n        var to   = \"AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------\";\r\n        for (var i=0, l=from.length ; i<l ; i++) {\r\n            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\r\n        }\r\n\r\n        // Remove invalid chars\r\n        //str = str.replace(/[^a-z0-9 -]/g, '') \r\n        // Collapse whitespace and replace by -\r\n        str = str.replace(/\\s+/g, '-') \r\n        // Collapse dashes\r\n        .replace(/-+/g, '-'); \r\n\r\n        return str;\r\n    }    \r\n\r\n    // return boolean if string 'true' or string 'false', or if a parsable string which is a number\r\n    // also supports JSON object and/or arrays parsing\r\n    function toType(str) {\r\n        var type = typeof str;\r\n        if (type !== 'string') {\r\n            return str;\r\n        }\r\n        var nb = parseFloat(str);\r\n        if (!isNaN(nb) && isFinite(str)) {\r\n            return nb;\r\n        }\r\n        if (str === 'false') {\r\n            return false;\r\n        }\r\n        if (str === 'true') {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            str = JSON.parse(str);\r\n        } catch (e) {}\r\n\r\n        return str;\r\n    }\r\n\r\n\treturn skylark.attach(\"langx.strings\",{\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n        dasherize: dasherize,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        escapeHTML : escapeHTML,\r\n\r\n        generateUUID : generateUUID,\r\n\r\n        ltrim : ltrim,\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        rtrim : rtrim,\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n\r\n        substitute: substitute,\r\n\r\n        slugify : slugify,\r\n\r\n        //template : template,\r\n\r\n        trim: trim,\r\n\r\n        trimNull,\r\n\r\n        uniqueId: uniqueId,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }\r\n\t}) ; \r\n\r\n});\ndefine('skylark-langx-strings/base64',[\r\n\t\"./strings\"\r\n],function(strings) {\r\n\r\n\t// private property\r\n\tconst _keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\n\r\n\t// private method for UTF-8 encoding\r\n\tfunction _utf8_encode(string) {\r\n\t\tstring = string.replace(/\\r\\n/g,\"\\n\");\r\n\t\tvar utftext = \"\";\r\n\r\n\t\tfor (var n = 0; n < string.length; n++) {\r\n\r\n\t\t\tvar c = string.charCodeAt(n);\r\n\r\n\t\t\tif (c < 128) {\r\n\t\t\t\tutftext += String.fromCharCode(c);\r\n\t\t\t}\r\n\t\t\telse if((c > 127) && (c < 2048)) {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 6) | 192);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tutftext += String.fromCharCode((c >> 12) | 224);\r\n\t\t\t\tutftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n\t\t\t\tutftext += String.fromCharCode((c & 63) | 128);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn utftext;\r\n\t}\r\n\r\n\t// private method for UTF-8 decoding\r\n\tfunction _utf8_decode(utftext) {\r\n\t\tvar string = \"\";\r\n\t\tvar i = 0;\r\n\t\tvar c = c1 = c2 = 0;\r\n\r\n\t\twhile ( i < utftext.length ) {\r\n\r\n\t\t\tc = utftext.charCodeAt(i);\r\n\r\n\t\t\tif (c < 128) {\r\n\t\t\t\tstring += String.fromCharCode(c);\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\telse if((c > 191) && (c < 224)) {\r\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\r\n\t\t\t\tstring += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n\t\t\t\ti += 2;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tc2 = utftext.charCodeAt(i+1);\r\n\t\t\t\tc3 = utftext.charCodeAt(i+2);\r\n\t\t\t\tstring += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n\t\t\t\ti += 3;\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn string;\r\n\t}\r\n\r\n\t// public method for encoding\r\n\tfunction encode(input, binary) {\r\n\t\tbinary = (binary != null) ? binary : false;\r\n\t\tvar output = \"\";\r\n\t\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\r\n\t\tvar i = 0;\r\n\r\n\t\tif (!binary)\r\n\t\t{\r\n\t\t\tinput = _utf8_encode(input);\r\n\t\t}\r\n\r\n\t\twhile (i < input.length) {\r\n\r\n\t\t\tchr1 = input.charCodeAt(i++);\r\n\t\t\tchr2 = input.charCodeAt(i++);\r\n\t\t\tchr3 = input.charCodeAt(i++);\r\n\r\n\t\t\tenc1 = chr1 >> 2;\r\n\t\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n\t\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n\t\t\tenc4 = chr3 & 63;\r\n\r\n\t\t\tif (isNaN(chr2)) {\r\n\t\t\t\tenc3 = enc4 = 64;\r\n\t\t\t} else if (isNaN(chr3)) {\r\n\t\t\t\tenc4 = 64;\r\n\t\t\t}\r\n\r\n\t\t\toutput = output +\r\n\t\t\tthis._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +\r\n\t\t\tthis._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\t}\r\n\r\n\t// public method for decoding\r\n\tfunction decode(input, binary) {\r\n\t\tbinary = (binary != null) ? binary : false;\r\n\t\tvar output = \"\";\r\n\t\tvar chr1, chr2, chr3;\r\n\t\tvar enc1, enc2, enc3, enc4;\r\n\t\tvar i = 0;\r\n\r\n\t\tinput = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\r\n\r\n\t\twhile (i < input.length) {\r\n\r\n\t\t\tenc1 = this._keyStr.indexOf(input.charAt(i++));\r\n\t\t\tenc2 = this._keyStr.indexOf(input.charAt(i++));\r\n\t\t\tenc3 = this._keyStr.indexOf(input.charAt(i++));\r\n\t\t\tenc4 = this._keyStr.indexOf(input.charAt(i++));\r\n\r\n\t\t\tchr1 = (enc1 << 2) | (enc2 >> 4);\r\n\t\t\tchr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n\t\t\tchr3 = ((enc3 & 3) << 6) | enc4;\r\n\r\n\t\t\toutput = output + String.fromCharCode(chr1);\r\n\r\n\t\t\tif (enc3 != 64) {\r\n\t\t\t\toutput = output + String.fromCharCode(chr2);\r\n\t\t\t}\r\n\t\t\tif (enc4 != 64) {\r\n\t\t\t\toutput = output + String.fromCharCode(chr3);\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif (!binary) {\r\n\t\t\toutput = _utf8_decode(output);\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\r\n\treturn strings.base64 = {\r\n\t\tdecode,\r\n\t\tencode\r\n\t};\r\n\t\r\n});\ndefine('skylark-langx-strings/main',[\r\n\t\"./strings\",\r\n\t\"./base64\"\r\n],function(strings){\r\n\treturn strings;\r\n});\ndefine('skylark-langx-strings', ['skylark-langx-strings/main'], function (main) { return main; });\n\n"]}