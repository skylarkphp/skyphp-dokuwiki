{"version":3,"sources":["Xhr.js"],"names":["define","skylark","types","objects","arrays","funcs","Deferred","Evented","isCrossOrigin","http","each","mixin","noop","isArray","isFunction","isPlainObject","type","getAbsoluteUrl","url","a","document","createElement","href","Xhr","jsonpID","key","name","rscript","scriptTypeRE","xmlTypeRE","jsonType","htmlType","blankRE","XhrDefaultOptions","async","beforeSend","success","error","complete","context","global","accepts","script","json","xml","html","text","crossDomain","timeout","processData","cache","traditional","xhrFields","mimeToDataType","mime","split","test","appendQuery","query","replace","serializeData","options","data","param","toUpperCase","undefined","serialize","params","obj","scope","t","array","hash","value","add","this","push","encodeURIComponent","join","inherit","klassName","_request","args","_","self","xhr","XMLHttpRequest","call","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","password","deferred","contentType","indexOf","overrideMimeType","responseType","finish","onloadend","onabort","onprogress","ontimeout","result","status","startsWith","getResponseHeader","eval","responseText","responseXML","JSON","parse","response","e","reject","resolve","Error","statusText","evt","notify","open","toLowerCase","setRequestHeader","send","promise","abort","request","get","post","patch","put","del","init","forEach","defaultOptions"],"mappings":"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","file":"../Xhr.js","sourcesContent":["define([\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-funcs\",\r\n  \"skylark-langx-async/Deferred\",\r\n  \"skylark-langx-emitter/Evented\",\r\n  \"skylark-langx-urls/isCrossOrigin\",\r\n  \"./http\"\r\n],function(skylark,types,objects,arrays,funcs,Deferred,Evented,isCrossOrigin,http){\r\n\r\n    var each = objects.each,\r\n        mixin = objects.mixin,\r\n        noop = funcs.noop,\r\n        isArray = types.isArray,\r\n        isFunction = types.isFunction,\r\n        isPlainObject = types.isPlainObject,\r\n        type = types.type;\r\n \r\n     var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n   \r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: false,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            traditional : false,\r\n            \r\n            xhrFields : {\r\n                ///withCredentials : false\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                if (type(options.data) != \"string\") {\r\n                    options.data = param(options.data, options.traditional);\r\n                }\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n        \r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) {\r\n                  value = value();\r\n                }\r\n                if (value == null) {\r\n                  value = \"\";\r\n                }\r\n                this.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n            };\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                if (options.beforeSend) {\r\n                    options.beforeSend.call(this, xhr, options);\r\n                }                \r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = options.contentType || (isFormData ? false : 'application/x-www-form-urlencoded');\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                if (dataType == \"blob\" || dataType == \"arraybuffer\") {\r\n                    xhr.responseType = dataType;\r\n                }\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        //result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(xhr.responseText);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(xhr.responseText) ? null : JSON.parse(xhr.responseText);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = xhr.response; // new Blob([xhr.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.response;\r\n                            } else {\r\n                                //if (dataType == \"text\" || dataType==\"html\")\r\n                                result = xhr.responseText;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n                \r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.notify(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = value;\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    if (!isCrossOrigin(url)) {// for s02\r\n                      xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest'); \r\n                    }\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n    return http.Xhr = Xhr;  \r\n});"]}