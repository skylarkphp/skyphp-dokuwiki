{"version":3,"sources":["skylark-texts-markdown.js"],"names":["define","skylark","attach","block","newline","code","fences","noop","hr","heading","nptable","lheading","blockquote","list","html","def","table","paragraph","text","Lexer","options","this","tokens","links","marked","defaults","rules","normal","gfm","tables","bullet","item","replace","source","_tag","merge","lex","src","lexer","prototype","token","top","bq","next","loose","cap","bull","b","space","i","l","exec","substring","length","push","type","pedantic","lang","depth","header","split","align","cells","test","ordered","match","indexOf","RegExp","smartLists","slice","join","charAt","sanitize","pre","toLowerCase","href","title","Error","charCodeAt","inline","escape","autolink","url","tag","link","reflink","nolink","strong","em","br","del","InlineLexer","renderer","Renderer","breaks","Parser","encode","regex","opt","self","name","val","obj","target","key","arguments","Object","hasOwnProperty","call","callback","pending","highlight","e","done","err","out","parse","escaped","message","silent","_inside","_href","output","mangle","inLink","outputLink","codespan","smartypants","image","ch","Math","random","toString","langPrefix","quote","level","raw","headerPrefix","xhtml","body","listitem","tablerow","content","tablecell","flags","prot","decodeURIComponent","_","n","String","fromCharCode","parseInt","parser","reverse","tok","pop","peek","parseText","row","cell","j","setOptions","inlineLexer","langx","markdown","mixin","repeat","character","count","Array","blockElements","isBlock","node","nodeName","voidElements","isVoid","voidSelector","Rules","_keep","_remove","blankRule","replacement","blankReplacement","keepReplacement","defaultRule","defaultReplacement","array","findRule","rule","filterValue","filter","isArray","TypeError","remove","nextSibling","parentNode","removeChild","prev","current","isPre","firstChild","lineBreak","hLevel","Number","headingStyle","underline","parent","lastElementChild","listItem","prefix","bulletListMarker","start","getAttribute","index","children","indentedCodeBlock","codeBlockStyle","textContent","fencedCodeBlock","className","language","fence","horizontalRule","inlineLink","linkStyle","referenceLink","reference","linkReferenceStyle","id","references","append","emphasis","trim","emDelimiter","strongDelimiter","hasSiblings","previousSibling","isCodeBlock","delimiter","leadingSpace","trailingSpace","matches","alt","titlePart","add","unshift","keep","forNode","isBlank","forEach","fn","root","window","JSDOM","_htmlParser","HTMLParser","DOMParser","canParse","parseFromString","canParseHTMLNatively","require","string","document","RootNode","input","doc","getElementById","cloneNode","element","prevText","prevVoid","nodeType","data","substr","nextNode","collapseWhitespace","Node","isCode","querySelector","hasVoid","flankingWhitespace","leading","trailing","hasLeading","hasTrailing","isFlankedByWhitespace","side","sibling","regExp","isFlanked","nodeValue","reduce","leadingNewLinesRegExp","trailingNewLinesRegExp","escapes","TurndownService","outerHTML","destination","extend","process","childNodes","whitespace","string1","string2","newlines","maxNewlines","separator","sort","turndown","canConvert","use","plugin","addRule","accumulator","Turndown","main"],"mappings":"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","file":"../skylark-texts-markdown.js","sourcesContent":["define('skylark-texts-markdown/markdown',[\r\n    \"skylark-langx/skylark\"\r\n], function(skylark) {\r\n\t\r\n\treturn skylark.attach(\"markups.markdown\",{});\r\n});\ndefine('skylark-texts-markdown/primitives/marked',[],function() {\r\n  /**\r\n   * marked - a markdown parser\r\n   * Copyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\r\n   * https://github.com/chjj/marked\r\n   */\r\n\r\n  /**\r\n   * Block-Level Grammar\r\n   */\r\n\r\n  var block = {\r\n    newline: /^\\n+/,\r\n    code: /^( {4}[^\\n]+\\n*)+/,\r\n    fences: noop,\r\n    hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\r\n    heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\r\n    nptable: noop,\r\n    lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\r\n    blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\r\n    list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\r\n    html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\r\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\r\n    table: noop,\r\n    paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\r\n    text: /^[^\\n]+/\r\n  };\r\n\r\n  block.bullet = /(?:[*+-]|\\d+\\.)/;\r\n  block.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\r\n  block.item = replace(block.item, 'gm')\r\n    (/bull/g, block.bullet)\r\n    ();\r\n\r\n  block.list = replace(block.list)\r\n    (/bull/g, block.bullet)\r\n    ('hr', '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))')\r\n    ('def', '\\\\n+(?=' + block.def.source + ')')\r\n    ();\r\n\r\n  block.blockquote = replace(block.blockquote)\r\n    ('def', block.def)\r\n    ();\r\n\r\n  block._tag = '(?!(?:'\r\n    + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code'\r\n    + '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo'\r\n    + '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b';\r\n\r\n  block.html = replace(block.html)\r\n    ('comment', /<!--[\\s\\S]*?-->/)\r\n    ('closed', /<(tag)[\\s\\S]+?<\\/\\1>/)\r\n    ('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)\r\n    (/tag/g, block._tag)\r\n    ();\r\n\r\n  block.paragraph = replace(block.paragraph)\r\n    ('hr', block.hr)\r\n    ('heading', block.heading)\r\n    ('lheading', block.lheading)\r\n    ('blockquote', block.blockquote)\r\n    ('tag', '<' + block._tag)\r\n    ('def', block.def)\r\n    ();\r\n\r\n  /**\r\n   * Normal Block Grammar\r\n   */\r\n\r\n  block.normal = merge({}, block);\r\n\r\n  /**\r\n   * GFM Block Grammar\r\n   */\r\n\r\n  block.gfm = merge({}, block.normal, {\r\n    fences: /^ *(`{3,}|~{3,}) *(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n+|$)/,\r\n    paragraph: /^/\r\n  });\r\n\r\n  block.gfm.paragraph = replace(block.paragraph)\r\n    ('(?!', '(?!'\r\n      + block.gfm.fences.source.replace('\\\\1', '\\\\2') + '|'\r\n      + block.list.source.replace('\\\\1', '\\\\3') + '|')\r\n    ();\r\n\r\n  /**\r\n   * GFM + Tables Block Grammar\r\n   */\r\n\r\n  block.tables = merge({}, block.gfm, {\r\n    nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\r\n    table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\r\n  });\r\n\r\n  /**\r\n   * Block Lexer\r\n   */\r\n\r\n  function Lexer(options) {\r\n    this.tokens = [];\r\n    this.tokens.links = {};\r\n    this.options = options || marked.defaults;\r\n    this.rules = block.normal;\r\n\r\n    if (this.options.gfm) {\r\n      if (this.options.tables) {\r\n        this.rules = block.tables;\r\n      } else {\r\n        this.rules = block.gfm;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expose Block Rules\r\n   */\r\n\r\n  Lexer.rules = block;\r\n\r\n  /**\r\n   * Static Lex Method\r\n   */\r\n\r\n  Lexer.lex = function(src, options) {\r\n    var lexer = new Lexer(options);\r\n    return lexer.lex(src);\r\n  };\r\n\r\n  /**\r\n   * Preprocessing\r\n   */\r\n\r\n  Lexer.prototype.lex = function(src) {\r\n    src = src\r\n      .replace(/\\r\\n|\\r/g, '\\n')\r\n      .replace(/\\t/g, '    ')\r\n      .replace(/\\u00a0/g, ' ')\r\n      .replace(/\\u2424/g, '\\n');\r\n\r\n    return this.token(src, true);\r\n  };\r\n\r\n  /**\r\n   * Lexing\r\n   */\r\n\r\n  Lexer.prototype.token = function(src, top, bq) {\r\n    var src = src.replace(/^ +$/gm, '')\r\n      , next\r\n      , loose\r\n      , cap\r\n      , bull\r\n      , b\r\n      , item\r\n      , space\r\n      , i\r\n      , l;\r\n\r\n    while (src) {\r\n      // newline\r\n      if (cap = this.rules.newline.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        if (cap[0].length > 1) {\r\n          this.tokens.push({\r\n            type: 'space'\r\n          });\r\n        }\r\n      }\r\n\r\n      // code\r\n      if (cap = this.rules.code.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        cap = cap[0].replace(/^ {4}/gm, '');\r\n        this.tokens.push({\r\n          type: 'code',\r\n          text: !this.options.pedantic\r\n            ? cap.replace(/\\n+$/, '')\r\n            : cap\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // fences (gfm)\r\n      if (cap = this.rules.fences.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: 'code',\r\n          lang: cap[2],\r\n          text: cap[3]\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // heading\r\n      if (cap = this.rules.heading.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: 'heading',\r\n          depth: cap[1].length,\r\n          text: cap[2]\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // table no leading pipe (gfm)\r\n      if (top && (cap = this.rules.nptable.exec(src))) {\r\n        src = src.substring(cap[0].length);\r\n\r\n        item = {\r\n          type: 'table',\r\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\r\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n          cells: cap[3].replace(/\\n$/, '').split('\\n')\r\n        };\r\n\r\n        for (i = 0; i < item.align.length; i++) {\r\n          if (/^ *-+: *$/.test(item.align[i])) {\r\n            item.align[i] = 'right';\r\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n            item.align[i] = 'center';\r\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n            item.align[i] = 'left';\r\n          } else {\r\n            item.align[i] = null;\r\n          }\r\n        }\r\n\r\n        for (i = 0; i < item.cells.length; i++) {\r\n          item.cells[i] = item.cells[i].split(/ *\\| */);\r\n        }\r\n\r\n        this.tokens.push(item);\r\n\r\n        continue;\r\n      }\r\n\r\n      // lheading\r\n      if (cap = this.rules.lheading.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: 'heading',\r\n          depth: cap[2] === '=' ? 1 : 2,\r\n          text: cap[1]\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // hr\r\n      if (cap = this.rules.hr.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: 'hr'\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // blockquote\r\n      if (cap = this.rules.blockquote.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n\r\n        this.tokens.push({\r\n          type: 'blockquote_start'\r\n        });\r\n\r\n        cap = cap[0].replace(/^ *> ?/gm, '');\r\n\r\n        // Pass `top` to keep the current\r\n        // \"toplevel\" state. This is exactly\r\n        // how markdown.pl works.\r\n        this.token(cap, top, true);\r\n\r\n        this.tokens.push({\r\n          type: 'blockquote_end'\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      // list\r\n      if (cap = this.rules.list.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        bull = cap[2];\r\n\r\n        this.tokens.push({\r\n          type: 'list_start',\r\n          ordered: bull.length > 1\r\n        });\r\n\r\n        // Get each top-level item.\r\n        cap = cap[0].match(this.rules.item);\r\n\r\n        next = false;\r\n        l = cap.length;\r\n        i = 0;\r\n\r\n        for (; i < l; i++) {\r\n          item = cap[i];\r\n\r\n          // Remove the list item's bullet\r\n          // so it is seen as the next token.\r\n          space = item.length;\r\n          item = item.replace(/^ *([*+-]|\\d+\\.) +/, '');\r\n\r\n          // Outdent whatever the\r\n          // list item contains. Hacky.\r\n          if (~item.indexOf('\\n ')) {\r\n            space -= item.length;\r\n            item = !this.options.pedantic\r\n              ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\r\n              : item.replace(/^ {1,4}/gm, '');\r\n          }\r\n\r\n          // Determine whether the next list item belongs here.\r\n          // Backpedal if it does not belong in this list.\r\n          if (this.options.smartLists && i !== l - 1) {\r\n            b = block.bullet.exec(cap[i + 1])[0];\r\n            if (bull !== b && !(bull.length > 1 && b.length > 1)) {\r\n              src = cap.slice(i + 1).join('\\n') + src;\r\n              i = l - 1;\r\n            }\r\n          }\r\n\r\n          // Determine whether item is loose or not.\r\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\r\n          // for discount behavior.\r\n          loose = next || /\\n\\n(?!\\s*$)/.test(item);\r\n          if (i !== l - 1) {\r\n            next = item.charAt(item.length - 1) === '\\n';\r\n            if (!loose) loose = next;\r\n          }\r\n\r\n          this.tokens.push({\r\n            type: loose\r\n              ? 'loose_item_start'\r\n              : 'list_item_start'\r\n          });\r\n\r\n          // Recurse.\r\n          this.token(item, false, bq);\r\n\r\n          this.tokens.push({\r\n            type: 'list_item_end'\r\n          });\r\n        }\r\n\r\n        this.tokens.push({\r\n          type: 'list_end'\r\n        });\r\n\r\n        continue;\r\n      }\r\n\r\n      // html\r\n      if (cap = this.rules.html.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: this.options.sanitize\r\n            ? 'paragraph'\r\n            : 'html',\r\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\r\n          text: cap[0]\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // def\r\n      if ((!bq && top) && (cap = this.rules.def.exec(src))) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.links[cap[1].toLowerCase()] = {\r\n          href: cap[2],\r\n          title: cap[3]\r\n        };\r\n        continue;\r\n      }\r\n\r\n      // table (gfm)\r\n      if (top && (cap = this.rules.table.exec(src))) {\r\n        src = src.substring(cap[0].length);\r\n\r\n        item = {\r\n          type: 'table',\r\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\r\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\r\n          cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\r\n        };\r\n\r\n        for (i = 0; i < item.align.length; i++) {\r\n          if (/^ *-+: *$/.test(item.align[i])) {\r\n            item.align[i] = 'right';\r\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\r\n            item.align[i] = 'center';\r\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\r\n            item.align[i] = 'left';\r\n          } else {\r\n            item.align[i] = null;\r\n          }\r\n        }\r\n\r\n        for (i = 0; i < item.cells.length; i++) {\r\n          item.cells[i] = item.cells[i]\r\n            .replace(/^ *\\| *| *\\| *$/g, '')\r\n            .split(/ *\\| */);\r\n        }\r\n\r\n        this.tokens.push(item);\r\n\r\n        continue;\r\n      }\r\n\r\n      // top-level paragraph\r\n      if (top && (cap = this.rules.paragraph.exec(src))) {\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: 'paragraph',\r\n          text: cap[1].charAt(cap[1].length - 1) === '\\n'\r\n            ? cap[1].slice(0, -1)\r\n            : cap[1]\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // text\r\n      if (cap = this.rules.text.exec(src)) {\r\n        // Top-level should never reach here.\r\n        src = src.substring(cap[0].length);\r\n        this.tokens.push({\r\n          type: 'text',\r\n          text: cap[0]\r\n        });\r\n        continue;\r\n      }\r\n\r\n      if (src) {\r\n        throw new\r\n          Error('Infinite loop on byte: ' + src.charCodeAt(0));\r\n      }\r\n    }\r\n\r\n    return this.tokens;\r\n  };\r\n\r\n  /**\r\n   * Inline-Level Grammar\r\n   */\r\n\r\n  var inline = {\r\n    escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\r\n    autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\r\n    url: noop,\r\n    tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\r\n    link: /^!?\\[(inside)\\]\\(href\\)/,\r\n    reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\r\n    nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\r\n    strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\r\n    em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\r\n    code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\r\n    br: /^ {2,}\\n(?!\\s*$)/,\r\n    del: noop,\r\n    text: /^[\\s\\S]+?(?=[\\\\<!\\[_*`]| {2,}\\n|$)/\r\n  };\r\n\r\n  inline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\r\n  inline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\r\n\r\n  inline.link = replace(inline.link)\r\n    ('inside', inline._inside)\r\n    ('href', inline._href)\r\n    ();\r\n\r\n  inline.reflink = replace(inline.reflink)\r\n    ('inside', inline._inside)\r\n    ();\r\n\r\n  /**\r\n   * Normal Inline Grammar\r\n   */\r\n\r\n  inline.normal = merge({}, inline);\r\n\r\n  /**\r\n   * Pedantic Inline Grammar\r\n   */\r\n\r\n  inline.pedantic = merge({}, inline.normal, {\r\n    strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\r\n    em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\r\n  });\r\n\r\n  /**\r\n   * GFM Inline Grammar\r\n   */\r\n\r\n  inline.gfm = merge({}, inline.normal, {\r\n    escape: replace(inline.escape)('])', '~|])')(),\r\n    url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\r\n    del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\r\n    text: replace(inline.text)\r\n      (']|', '~]|')\r\n      ('|', '|https?://|')\r\n      ()\r\n  });\r\n\r\n  /**\r\n   * GFM + Line Breaks Inline Grammar\r\n   */\r\n\r\n  inline.breaks = merge({}, inline.gfm, {\r\n    br: replace(inline.br)('{2,}', '*')(),\r\n    text: replace(inline.gfm.text)('{2,}', '*')()\r\n  });\r\n\r\n  /**\r\n   * Inline Lexer & Compiler\r\n   */\r\n\r\n  function InlineLexer(links, options) {\r\n    this.options = options || marked.defaults;\r\n    this.links = links;\r\n    this.rules = inline.normal;\r\n    this.renderer = this.options.renderer || new Renderer;\r\n    this.renderer.options = this.options;\r\n\r\n    if (!this.links) {\r\n      throw new\r\n        Error('Tokens array requires a `links` property.');\r\n    }\r\n\r\n    if (this.options.gfm) {\r\n      if (this.options.breaks) {\r\n        this.rules = inline.breaks;\r\n      } else {\r\n        this.rules = inline.gfm;\r\n      }\r\n    } else if (this.options.pedantic) {\r\n      this.rules = inline.pedantic;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expose Inline Rules\r\n   */\r\n\r\n  InlineLexer.rules = inline;\r\n\r\n  /**\r\n   * Static Lexing/Compiling Method\r\n   */\r\n\r\n  InlineLexer.output = function(src, links, options) {\r\n    var inline = new InlineLexer(links, options);\r\n    return inline.output(src);\r\n  };\r\n\r\n  /**\r\n   * Lexing/Compiling\r\n   */\r\n\r\n  InlineLexer.prototype.output = function(src) {\r\n    var out = ''\r\n      , link\r\n      , text\r\n      , href\r\n      , cap;\r\n\r\n    while (src) {\r\n      // escape\r\n      if (cap = this.rules.escape.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += cap[1];\r\n        continue;\r\n      }\r\n\r\n      // autolink\r\n      if (cap = this.rules.autolink.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        if (cap[2] === '@') {\r\n          text = cap[1].charAt(6) === ':'\r\n            ? this.mangle(cap[1].substring(7))\r\n            : this.mangle(cap[1]);\r\n          href = this.mangle('mailto:') + text;\r\n        } else {\r\n          text = escape(cap[1]);\r\n          href = text;\r\n        }\r\n        out += this.renderer.link(href, null, text);\r\n        continue;\r\n      }\r\n\r\n      // url (gfm)\r\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\r\n        src = src.substring(cap[0].length);\r\n        text = escape(cap[1]);\r\n        href = text;\r\n        out += this.renderer.link(href, null, text);\r\n        continue;\r\n      }\r\n\r\n      // tag\r\n      if (cap = this.rules.tag.exec(src)) {\r\n        if (!this.inLink && /^<a /i.test(cap[0])) {\r\n          this.inLink = true;\r\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\r\n          this.inLink = false;\r\n        }\r\n        src = src.substring(cap[0].length);\r\n        out += this.options.sanitize\r\n          ? escape(cap[0])\r\n          : cap[0];\r\n        continue;\r\n      }\r\n\r\n      // link\r\n      if (cap = this.rules.link.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        this.inLink = true;\r\n        out += this.outputLink(cap, {\r\n          href: cap[2],\r\n          title: cap[3]\r\n        });\r\n        this.inLink = false;\r\n        continue;\r\n      }\r\n\r\n      // reflink, nolink\r\n      if ((cap = this.rules.reflink.exec(src))\r\n          || (cap = this.rules.nolink.exec(src))) {\r\n        src = src.substring(cap[0].length);\r\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\r\n        link = this.links[link.toLowerCase()];\r\n        if (!link || !link.href) {\r\n          out += cap[0].charAt(0);\r\n          src = cap[0].substring(1) + src;\r\n          continue;\r\n        }\r\n        this.inLink = true;\r\n        out += this.outputLink(cap, link);\r\n        this.inLink = false;\r\n        continue;\r\n      }\r\n\r\n      // strong\r\n      if (cap = this.rules.strong.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += this.renderer.strong(this.output(cap[2] || cap[1]));\r\n        continue;\r\n      }\r\n\r\n      // em\r\n      if (cap = this.rules.em.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += this.renderer.em(this.output(cap[2] || cap[1]));\r\n        continue;\r\n      }\r\n\r\n      // code\r\n      if (cap = this.rules.code.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += this.renderer.codespan(escape(cap[2], true));\r\n        continue;\r\n      }\r\n\r\n      // br\r\n      if (cap = this.rules.br.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += this.renderer.br();\r\n        continue;\r\n      }\r\n\r\n      // del (gfm)\r\n      if (cap = this.rules.del.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += this.renderer.del(this.output(cap[1]));\r\n        continue;\r\n      }\r\n\r\n      // text\r\n      if (cap = this.rules.text.exec(src)) {\r\n        src = src.substring(cap[0].length);\r\n        out += escape(this.smartypants(cap[0]));\r\n        continue;\r\n      }\r\n\r\n      if (src) {\r\n        throw new\r\n          Error('Infinite loop on byte: ' + src.charCodeAt(0));\r\n      }\r\n    }\r\n\r\n    return out;\r\n  };\r\n\r\n  /**\r\n   * Compile Link\r\n   */\r\n\r\n  InlineLexer.prototype.outputLink = function(cap, link) {\r\n    var href = escape(link.href)\r\n      , title = link.title ? escape(link.title) : null;\r\n\r\n    return cap[0].charAt(0) !== '!'\r\n      ? this.renderer.link(href, title, this.output(cap[1]))\r\n      : this.renderer.image(href, title, escape(cap[1]));\r\n  };\r\n\r\n  /**\r\n   * Smartypants Transformations\r\n   */\r\n\r\n  InlineLexer.prototype.smartypants = function(text) {\r\n    if (!this.options.smartypants) return text;\r\n    return text\r\n      // em-dashes\r\n      .replace(/--/g, '\\u2014')\r\n      // opening singles\r\n      .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\r\n      // closing singles & apostrophes\r\n      .replace(/'/g, '\\u2019')\r\n      // opening doubles\r\n      .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\r\n      // closing doubles\r\n      .replace(/\"/g, '\\u201d')\r\n      // ellipses\r\n      .replace(/\\.{3}/g, '\\u2026');\r\n  };\r\n\r\n  /**\r\n   * Mangle Links\r\n   */\r\n\r\n  InlineLexer.prototype.mangle = function(text) {\r\n    var out = ''\r\n      , l = text.length\r\n      , i = 0\r\n      , ch;\r\n\r\n    for (; i < l; i++) {\r\n      ch = text.charCodeAt(i);\r\n      if (Math.random() > 0.5) {\r\n        ch = 'x' + ch.toString(16);\r\n      }\r\n      out += '&#' + ch + ';';\r\n    }\r\n\r\n    return out;\r\n  };\r\n\r\n  /**\r\n   * Renderer\r\n   */\r\n\r\n  function Renderer(options) {\r\n    this.options = options || {};\r\n  }\r\n\r\n  Renderer.prototype.code = function(code, lang, escaped) {\r\n    if (this.options.highlight) {\r\n      var out = this.options.highlight(code, lang);\r\n      if (out != null && out !== code) {\r\n        escaped = true;\r\n        code = out;\r\n      }\r\n    }\r\n\r\n    if (!lang) {\r\n      return '<pre><code>'\r\n        + (escaped ? code : escape(code, true))\r\n        + '\\n</code></pre>';\r\n    }\r\n\r\n    return '<pre><code class=\"'\r\n      + this.options.langPrefix\r\n      + escape(lang, true)\r\n      + '\">'\r\n      + (escaped ? code : escape(code, true))\r\n      + '\\n</code></pre>\\n';\r\n  };\r\n\r\n  Renderer.prototype.blockquote = function(quote) {\r\n    return '<blockquote>\\n' + quote + '</blockquote>\\n';\r\n  };\r\n\r\n  Renderer.prototype.html = function(html) {\r\n    return html;\r\n  };\r\n\r\n  Renderer.prototype.heading = function(text, level, raw) {\r\n    return '<h'\r\n      + level\r\n      + ' id=\"'\r\n      + this.options.headerPrefix\r\n      + raw.toLowerCase().replace(/[^\\w]+/g, '-')\r\n      + '\">'\r\n      + text\r\n      + '</h'\r\n      + level\r\n      + '>\\n';\r\n  };\r\n\r\n  Renderer.prototype.hr = function() {\r\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\r\n  };\r\n\r\n  Renderer.prototype.list = function(body, ordered) {\r\n    var type = ordered ? 'ol' : 'ul';\r\n    return '<' + type + '>\\n' + body + '</' + type + '>\\n';\r\n  };\r\n\r\n  Renderer.prototype.listitem = function(text) {\r\n    return '<li>' + text + '</li>\\n';\r\n  };\r\n\r\n  Renderer.prototype.paragraph = function(text) {\r\n    return '<p>' + text + '</p>\\n';\r\n  };\r\n\r\n  Renderer.prototype.table = function(header, body) {\r\n    return '<table>\\n'\r\n      + '<thead>\\n'\r\n      + header\r\n      + '</thead>\\n'\r\n      + '<tbody>\\n'\r\n      + body\r\n      + '</tbody>\\n'\r\n      + '</table>\\n';\r\n  };\r\n\r\n  Renderer.prototype.tablerow = function(content) {\r\n    return '<tr>\\n' + content + '</tr>\\n';\r\n  };\r\n\r\n  Renderer.prototype.tablecell = function(content, flags) {\r\n    var type = flags.header ? 'th' : 'td';\r\n    var tag = flags.align\r\n      ? '<' + type + ' style=\"text-align:' + flags.align + '\">'\r\n      : '<' + type + '>';\r\n    return tag + content + '</' + type + '>\\n';\r\n  };\r\n\r\n  // span level renderer\r\n  Renderer.prototype.strong = function(text) {\r\n    return '<strong>' + text + '</strong>';\r\n  };\r\n\r\n  Renderer.prototype.em = function(text) {\r\n    return '<em>' + text + '</em>';\r\n  };\r\n\r\n  Renderer.prototype.codespan = function(text) {\r\n    return '<code>' + text + '</code>';\r\n  };\r\n\r\n  Renderer.prototype.br = function() {\r\n    return this.options.xhtml ? '<br/>' : '<br>';\r\n  };\r\n\r\n  Renderer.prototype.del = function(text) {\r\n    return '<del>' + text + '</del>';\r\n  };\r\n\r\n  Renderer.prototype.link = function(href, title, text) {\r\n    if (this.options.sanitize) {\r\n      try {\r\n        var prot = decodeURIComponent(unescape(href))\r\n          .replace(/[^\\w:]/g, '')\r\n          .toLowerCase();\r\n      } catch (e) {\r\n        return '';\r\n      }\r\n      if (prot.indexOf('javascript:') === 0) {\r\n        return '';\r\n      }\r\n    }\r\n    var out = '<a href=\"' + href + '\"';\r\n    if (title) {\r\n      out += ' title=\"' + title + '\"';\r\n    }\r\n    out += '>' + text + '</a>';\r\n    return out;\r\n  };\r\n\r\n  Renderer.prototype.image = function(href, title, text) {\r\n    var out = '<img src=\"' + href + '\" alt=\"' + text + '\"';\r\n    if (title) {\r\n      out += ' title=\"' + title + '\"';\r\n    }\r\n    out += this.options.xhtml ? '/>' : '>';\r\n    return out;\r\n  };\r\n\r\n  /**\r\n   * Parsing & Compiling\r\n   */\r\n\r\n  function Parser(options) {\r\n    this.tokens = [];\r\n    this.token = null;\r\n    this.options = options || marked.defaults;\r\n    this.options.renderer = this.options.renderer || new Renderer;\r\n    this.renderer = this.options.renderer;\r\n    this.renderer.options = this.options;\r\n  }\r\n\r\n  /**\r\n   * Static Parse Method\r\n   */\r\n\r\n  Parser.parse = function(src, options, renderer) {\r\n    var parser = new Parser(options, renderer);\r\n    return parser.parse(src);\r\n  };\r\n\r\n  /**\r\n   * Parse Loop\r\n   */\r\n\r\n  Parser.prototype.parse = function(src) {\r\n    this.inline = new InlineLexer(src.links, this.options, this.renderer);\r\n    this.tokens = src.reverse();\r\n\r\n    var out = '';\r\n    while (this.next()) {\r\n      out += this.tok();\r\n    }\r\n\r\n    return out;\r\n  };\r\n\r\n  /**\r\n   * Next Token\r\n   */\r\n\r\n  Parser.prototype.next = function() {\r\n    return this.token = this.tokens.pop();\r\n  };\r\n\r\n  /**\r\n   * Preview Next Token\r\n   */\r\n\r\n  Parser.prototype.peek = function() {\r\n    return this.tokens[this.tokens.length - 1] || 0;\r\n  };\r\n\r\n  /**\r\n   * Parse Text Tokens\r\n   */\r\n\r\n  Parser.prototype.parseText = function() {\r\n    var body = this.token.text;\r\n\r\n    while (this.peek().type === 'text') {\r\n      body += '\\n' + this.next().text;\r\n    }\r\n\r\n    return this.inline.output(body);\r\n  };\r\n\r\n  /**\r\n   * Parse Current Token\r\n   */\r\n\r\n  Parser.prototype.tok = function() {\r\n    switch (this.token.type) {\r\n      case 'space': {\r\n        return '';\r\n      }\r\n      case 'hr': {\r\n        return this.renderer.hr();\r\n      }\r\n      case 'heading': {\r\n        return this.renderer.heading(\r\n          this.inline.output(this.token.text),\r\n          this.token.depth,\r\n          this.token.text);\r\n      }\r\n      case 'code': {\r\n        return this.renderer.code(this.token.text,\r\n          this.token.lang,\r\n          this.token.escaped);\r\n      }\r\n      case 'table': {\r\n        var header = ''\r\n          , body = ''\r\n          , i\r\n          , row\r\n          , cell\r\n          , flags\r\n          , j;\r\n\r\n        // header\r\n        cell = '';\r\n        for (i = 0; i < this.token.header.length; i++) {\r\n          flags = { header: true, align: this.token.align[i] };\r\n          cell += this.renderer.tablecell(\r\n            this.inline.output(this.token.header[i]),\r\n            { header: true, align: this.token.align[i] }\r\n          );\r\n        }\r\n        header += this.renderer.tablerow(cell);\r\n\r\n        for (i = 0; i < this.token.cells.length; i++) {\r\n          row = this.token.cells[i];\r\n\r\n          cell = '';\r\n          for (j = 0; j < row.length; j++) {\r\n            cell += this.renderer.tablecell(\r\n              this.inline.output(row[j]),\r\n              { header: false, align: this.token.align[j] }\r\n            );\r\n          }\r\n\r\n          body += this.renderer.tablerow(cell);\r\n        }\r\n        return this.renderer.table(header, body);\r\n      }\r\n      case 'blockquote_start': {\r\n        var body = '';\r\n\r\n        while (this.next().type !== 'blockquote_end') {\r\n          body += this.tok();\r\n        }\r\n\r\n        return this.renderer.blockquote(body);\r\n      }\r\n      case 'list_start': {\r\n        var body = ''\r\n          , ordered = this.token.ordered;\r\n\r\n        while (this.next().type !== 'list_end') {\r\n          body += this.tok();\r\n        }\r\n\r\n        return this.renderer.list(body, ordered);\r\n      }\r\n      case 'list_item_start': {\r\n        var body = '';\r\n\r\n        while (this.next().type !== 'list_item_end') {\r\n          body += this.token.type === 'text'\r\n            ? this.parseText()\r\n            : this.tok();\r\n        }\r\n\r\n        return this.renderer.listitem(body);\r\n      }\r\n      case 'loose_item_start': {\r\n        var body = '';\r\n\r\n        while (this.next().type !== 'list_item_end') {\r\n          body += this.tok();\r\n        }\r\n\r\n        return this.renderer.listitem(body);\r\n      }\r\n      case 'html': {\r\n        var html = !this.token.pre && !this.options.pedantic\r\n          ? this.inline.output(this.token.text)\r\n          : this.token.text;\r\n        return this.renderer.html(html);\r\n      }\r\n      case 'paragraph': {\r\n        return this.renderer.paragraph(this.inline.output(this.token.text));\r\n      }\r\n      case 'text': {\r\n        return this.renderer.paragraph(this.parseText());\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Helpers\r\n   */\r\n\r\n  function escape(html, encode) {\r\n    return html\r\n      .replace(!encode ? /&(?!#?\\w+;)/g : /&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#39;');\r\n  }\r\n\r\n  function unescape(html) {\r\n    return html.replace(/&([#\\w]+);/g, function(_, n) {\r\n      n = n.toLowerCase();\r\n      if (n === 'colon') return ':';\r\n      if (n.charAt(0) === '#') {\r\n        return n.charAt(1) === 'x'\r\n          ? String.fromCharCode(parseInt(n.substring(2), 16))\r\n          : String.fromCharCode(+n.substring(1));\r\n      }\r\n      return '';\r\n    });\r\n  }\r\n\r\n  function replace(regex, opt) {\r\n    regex = regex.source;\r\n    opt = opt || '';\r\n    return function self(name, val) {\r\n      if (!name) return new RegExp(regex, opt);\r\n      val = val.source || val;\r\n      val = val.replace(/(^|[^\\[])\\^/g, '$1');\r\n      regex = regex.replace(name, val);\r\n      return self;\r\n    };\r\n  }\r\n\r\n  function noop() {}\r\n  noop.exec = noop;\r\n\r\n  function merge(obj) {\r\n    var i = 1\r\n      , target\r\n      , key;\r\n\r\n    for (; i < arguments.length; i++) {\r\n      target = arguments[i];\r\n      for (key in target) {\r\n        if (Object.prototype.hasOwnProperty.call(target, key)) {\r\n          obj[key] = target[key];\r\n        }\r\n      }\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n\r\n  /**\r\n   * Marked\r\n   */\r\n\r\n  function marked(src, opt, callback) {\r\n    if (callback || typeof opt === 'function') {\r\n      if (!callback) {\r\n        callback = opt;\r\n        opt = null;\r\n      }\r\n\r\n      opt = merge({}, marked.defaults, opt || {});\r\n\r\n      var highlight = opt.highlight\r\n        , tokens\r\n        , pending\r\n        , i = 0;\r\n\r\n      try {\r\n        tokens = Lexer.lex(src, opt)\r\n      } catch (e) {\r\n        return callback(e);\r\n      }\r\n\r\n      pending = tokens.length;\r\n\r\n      var done = function(err) {\r\n        if (err) {\r\n          opt.highlight = highlight;\r\n          return callback(err);\r\n        }\r\n\r\n        var out;\r\n\r\n        try {\r\n          out = Parser.parse(tokens, opt);\r\n        } catch (e) {\r\n          err = e;\r\n        }\r\n\r\n        opt.highlight = highlight;\r\n\r\n        return err\r\n          ? callback(err)\r\n          : callback(null, out);\r\n      };\r\n\r\n      if (!highlight || highlight.length < 3) {\r\n        return done();\r\n      }\r\n\r\n      delete opt.highlight;\r\n\r\n      if (!pending) return done();\r\n\r\n      for (; i < tokens.length; i++) {\r\n        (function(token) {\r\n          if (token.type !== 'code') {\r\n            return --pending || done();\r\n          }\r\n          return highlight(token.text, token.lang, function(err, code) {\r\n            if (err) return done(err);\r\n            if (code == null || code === token.text) {\r\n              return --pending || done();\r\n            }\r\n            token.text = code;\r\n            token.escaped = true;\r\n            --pending || done();\r\n          });\r\n        })(tokens[i]);\r\n      }\r\n\r\n      return;\r\n    }\r\n    try {\r\n      if (opt) opt = merge({}, marked.defaults, opt);\r\n      return Parser.parse(Lexer.lex(src, opt), opt);\r\n    } catch (e) {\r\n      e.message += '\\nPlease report this to https://github.com/chjj/marked.';\r\n      if ((opt || marked.defaults).silent) {\r\n        return '<p>An error occured:</p><pre>'\r\n          + escape(e.message + '', true)\r\n          + '</pre>';\r\n      }\r\n      throw e;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Options\r\n   */\r\n\r\n  marked.options =\r\n  marked.setOptions = function(opt) {\r\n    merge(marked.defaults, opt);\r\n    return marked;\r\n  };\r\n\r\n  marked.defaults = {\r\n    gfm: true,\r\n    tables: true,\r\n    breaks: false,\r\n    pedantic: false,\r\n    sanitize: false,\r\n    smartLists: false,\r\n    silent: false,\r\n    highlight: null,\r\n    langPrefix: 'lang-',\r\n    smartypants: false,\r\n    headerPrefix: '',\r\n    renderer: new Renderer,\r\n    xhtml: false\r\n  };\r\n\r\n  /**\r\n   * Expose\r\n   */\r\n\r\n  marked.Parser = Parser;\r\n  marked.parser = Parser.parse;\r\n\r\n  marked.Renderer = Renderer;\r\n\r\n  marked.Lexer = Lexer;\r\n  marked.lexer = Lexer.lex;\r\n\r\n  marked.InlineLexer = InlineLexer;\r\n  marked.inlineLexer = InlineLexer.output;\r\n\r\n  marked.parse = marked;\r\n\r\n  return marked;\r\n});\ndefine('skylark-texts-markdown/Parser',[\r\n\t\"skylark-langx/langx\",\r\n    \"./markdown\",\r\n    \"./primitives/marked\"\r\n], function(langx,markdown, marked) {\r\n\tvar Parser = marked.Parser;\r\n\r\n   langx.mixin(Parser,marked);\r\n\r\n   return Parser ;\r\n});\ndefine('skylark-texts-markdown/primitives/turndown',[],function () { \r\n  'use strict';\r\n\r\n  // original version : 5.0.1\r\n  function extend (destination) {\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      var source = arguments[i];\r\n      for (var key in source) {\r\n        if (source.hasOwnProperty(key)) destination[key] = source[key];\r\n      }\r\n    }\r\n    return destination\r\n  }\r\n\r\n  function repeat (character, count) {\r\n    return Array(count + 1).join(character)\r\n  }\r\n\r\n  var blockElements = [\r\n    'address', 'article', 'aside', 'audio', 'blockquote', 'body', 'canvas',\r\n    'center', 'dd', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption',\r\n    'figure', 'footer', 'form', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n    'header', 'hgroup', 'hr', 'html', 'isindex', 'li', 'main', 'menu', 'nav',\r\n    'noframes', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table',\r\n    'tbody', 'td', 'tfoot', 'th', 'thead', 'tr', 'ul'\r\n  ];\r\n\r\n  function isBlock (node) {\r\n    return blockElements.indexOf(node.nodeName.toLowerCase()) !== -1\r\n  }\r\n\r\n  var voidElements = [\r\n    'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input',\r\n    'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'\r\n  ];\r\n\r\n  function isVoid (node) {\r\n    return voidElements.indexOf(node.nodeName.toLowerCase()) !== -1\r\n  }\r\n\r\n  var voidSelector = voidElements.join();\r\n  function hasVoid (node) {\r\n    return node.querySelector && node.querySelector(voidSelector)\r\n  }\r\n\r\n  var rules = {};\r\n\r\n  rules.paragraph = {\r\n    filter: 'p',\r\n\r\n    replacement: function (content) {\r\n      return '\\n\\n' + content + '\\n\\n'\r\n    }\r\n  };\r\n\r\n  rules.lineBreak = {\r\n    filter: 'br',\r\n\r\n    replacement: function (content, node, options) {\r\n      return options.br + '\\n'\r\n    }\r\n  };\r\n\r\n  rules.heading = {\r\n    filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n\r\n    replacement: function (content, node, options) {\r\n      var hLevel = Number(node.nodeName.charAt(1));\r\n\r\n      if (options.headingStyle === 'setext' && hLevel < 3) {\r\n        var underline = repeat((hLevel === 1 ? '=' : '-'), content.length);\r\n        return (\r\n          '\\n\\n' + content + '\\n' + underline + '\\n\\n'\r\n        )\r\n      } else {\r\n        return '\\n\\n' + repeat('#', hLevel) + ' ' + content + '\\n\\n'\r\n      }\r\n    }\r\n  };\r\n\r\n  rules.blockquote = {\r\n    filter: 'blockquote',\r\n\r\n    replacement: function (content) {\r\n      content = content.replace(/^\\n+|\\n+$/g, '');\r\n      content = content.replace(/^/gm, '> ');\r\n      return '\\n\\n' + content + '\\n\\n'\r\n    }\r\n  };\r\n\r\n  rules.list = {\r\n    filter: ['ul', 'ol'],\r\n\r\n    replacement: function (content, node) {\r\n      var parent = node.parentNode;\r\n      if (parent.nodeName === 'LI' && parent.lastElementChild === node) {\r\n        return '\\n' + content\r\n      } else {\r\n        return '\\n\\n' + content + '\\n\\n'\r\n      }\r\n    }\r\n  };\r\n\r\n  rules.listItem = {\r\n    filter: 'li',\r\n\r\n    replacement: function (content, node, options) {\r\n      content = content\r\n        .replace(/^\\n+/, '') // remove leading newlines\r\n        .replace(/\\n+$/, '\\n') // replace trailing newlines with just a single one\r\n        .replace(/\\n/gm, '\\n    '); // indent\r\n      var prefix = options.bulletListMarker + '   ';\r\n      var parent = node.parentNode;\r\n      if (parent.nodeName === 'OL') {\r\n        var start = parent.getAttribute('start');\r\n        var index = Array.prototype.indexOf.call(parent.children, node);\r\n        prefix = (start ? Number(start) + index : index + 1) + '.  ';\r\n      }\r\n      return (\r\n        prefix + content + (node.nextSibling && !/\\n$/.test(content) ? '\\n' : '')\r\n      )\r\n    }\r\n  };\r\n\r\n  rules.indentedCodeBlock = {\r\n    filter: function (node, options) {\r\n      return (\r\n        options.codeBlockStyle === 'indented' &&\r\n        node.nodeName === 'PRE' &&\r\n        node.firstChild &&\r\n        node.firstChild.nodeName === 'CODE'\r\n      )\r\n    },\r\n\r\n    replacement: function (content, node, options) {\r\n      return (\r\n        '\\n\\n    ' +\r\n        node.firstChild.textContent.replace(/\\n/g, '\\n    ') +\r\n        '\\n\\n'\r\n      )\r\n    }\r\n  };\r\n\r\n  rules.fencedCodeBlock = {\r\n    filter: function (node, options) {\r\n      return (\r\n        options.codeBlockStyle === 'fenced' &&\r\n        node.nodeName === 'PRE' &&\r\n        node.firstChild &&\r\n        node.firstChild.nodeName === 'CODE'\r\n      )\r\n    },\r\n\r\n    replacement: function (content, node, options) {\r\n      var className = node.firstChild.className || '';\r\n      var language = (className.match(/language-(\\S+)/) || [null, ''])[1];\r\n\r\n      return (\r\n        '\\n\\n' + options.fence + language + '\\n' +\r\n        node.firstChild.textContent +\r\n        '\\n' + options.fence + '\\n\\n'\r\n      )\r\n    }\r\n  };\r\n\r\n  rules.horizontalRule = {\r\n    filter: 'hr',\r\n\r\n    replacement: function (content, node, options) {\r\n      return '\\n\\n' + options.hr + '\\n\\n'\r\n    }\r\n  };\r\n\r\n  rules.inlineLink = {\r\n    filter: function (node, options) {\r\n      return (\r\n        options.linkStyle === 'inlined' &&\r\n        node.nodeName === 'A' &&\r\n        node.getAttribute('href')\r\n      )\r\n    },\r\n\r\n    replacement: function (content, node) {\r\n      var href = node.getAttribute('href');\r\n      var title = node.title ? ' \"' + node.title + '\"' : '';\r\n      return '[' + content + '](' + href + title + ')'\r\n    }\r\n  };\r\n\r\n  rules.referenceLink = {\r\n    filter: function (node, options) {\r\n      return (\r\n        options.linkStyle === 'referenced' &&\r\n        node.nodeName === 'A' &&\r\n        node.getAttribute('href')\r\n      )\r\n    },\r\n\r\n    replacement: function (content, node, options) {\r\n      var href = node.getAttribute('href');\r\n      var title = node.title ? ' \"' + node.title + '\"' : '';\r\n      var replacement;\r\n      var reference;\r\n\r\n      switch (options.linkReferenceStyle) {\r\n        case 'collapsed':\r\n          replacement = '[' + content + '][]';\r\n          reference = '[' + content + ']: ' + href + title;\r\n          break\r\n        case 'shortcut':\r\n          replacement = '[' + content + ']';\r\n          reference = '[' + content + ']: ' + href + title;\r\n          break\r\n        default:\r\n          var id = this.references.length + 1;\r\n          replacement = '[' + content + '][' + id + ']';\r\n          reference = '[' + id + ']: ' + href + title;\r\n      }\r\n\r\n      this.references.push(reference);\r\n      return replacement\r\n    },\r\n\r\n    references: [],\r\n\r\n    append: function (options) {\r\n      var references = '';\r\n      if (this.references.length) {\r\n        references = '\\n\\n' + this.references.join('\\n') + '\\n\\n';\r\n        this.references = []; // Reset references\r\n      }\r\n      return references\r\n    }\r\n  };\r\n\r\n  rules.emphasis = {\r\n    filter: ['em', 'i'],\r\n\r\n    replacement: function (content, node, options) {\r\n      if (!content.trim()) return ''\r\n      return options.emDelimiter + content + options.emDelimiter\r\n    }\r\n  };\r\n\r\n  rules.strong = {\r\n    filter: ['strong', 'b'],\r\n\r\n    replacement: function (content, node, options) {\r\n      if (!content.trim()) return ''\r\n      return options.strongDelimiter + content + options.strongDelimiter\r\n    }\r\n  };\r\n\r\n  rules.code = {\r\n    filter: function (node) {\r\n      var hasSiblings = node.previousSibling || node.nextSibling;\r\n      var isCodeBlock = node.parentNode.nodeName === 'PRE' && !hasSiblings;\r\n\r\n      return node.nodeName === 'CODE' && !isCodeBlock\r\n    },\r\n\r\n    replacement: function (content) {\r\n      if (!content.trim()) return ''\r\n\r\n      var delimiter = '`';\r\n      var leadingSpace = '';\r\n      var trailingSpace = '';\r\n      var matches = content.match(/`+/gm);\r\n      if (matches) {\r\n        if (/^`/.test(content)) leadingSpace = ' ';\r\n        if (/`$/.test(content)) trailingSpace = ' ';\r\n        while (matches.indexOf(delimiter) !== -1) delimiter = delimiter + '`';\r\n      }\r\n\r\n      return delimiter + leadingSpace + content + trailingSpace + delimiter\r\n    }\r\n  };\r\n\r\n  rules.image = {\r\n    filter: 'img',\r\n\r\n    replacement: function (content, node) {\r\n      var alt = node.alt || '';\r\n      var src = node.getAttribute('src') || '';\r\n      var title = node.title || '';\r\n      var titlePart = title ? ' \"' + title + '\"' : '';\r\n      return src ? '![' + alt + ']' + '(' + src + titlePart + ')' : ''\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Manages a collection of rules used to convert HTML to Markdown\r\n   */\r\n\r\n  function Rules (options) {\r\n    this.options = options;\r\n    this._keep = [];\r\n    this._remove = [];\r\n\r\n    this.blankRule = {\r\n      replacement: options.blankReplacement\r\n    };\r\n\r\n    this.keepReplacement = options.keepReplacement;\r\n\r\n    this.defaultRule = {\r\n      replacement: options.defaultReplacement\r\n    };\r\n\r\n    this.array = [];\r\n    for (var key in options.rules) this.array.push(options.rules[key]);\r\n  }\r\n\r\n  Rules.prototype = {\r\n    add: function (key, rule) {\r\n      this.array.unshift(rule);\r\n    },\r\n\r\n    keep: function (filter) {\r\n      this._keep.unshift({\r\n        filter: filter,\r\n        replacement: this.keepReplacement\r\n      });\r\n    },\r\n\r\n    remove: function (filter) {\r\n      this._remove.unshift({\r\n        filter: filter,\r\n        replacement: function () {\r\n          return ''\r\n        }\r\n      });\r\n    },\r\n\r\n    forNode: function (node) {\r\n      if (node.isBlank) return this.blankRule\r\n      var rule;\r\n\r\n      if ((rule = findRule(this.array, node, this.options))) return rule\r\n      if ((rule = findRule(this._keep, node, this.options))) return rule\r\n      if ((rule = findRule(this._remove, node, this.options))) return rule\r\n\r\n      return this.defaultRule\r\n    },\r\n\r\n    forEach: function (fn) {\r\n      for (var i = 0; i < this.array.length; i++) fn(this.array[i], i);\r\n    }\r\n  };\r\n\r\n  function findRule (rules, node, options) {\r\n    for (var i = 0; i < rules.length; i++) {\r\n      var rule = rules[i];\r\n      if (filterValue(rule, node, options)) return rule\r\n    }\r\n    return void 0\r\n  }\r\n\r\n  function filterValue (rule, node, options) {\r\n    var filter = rule.filter;\r\n    if (typeof filter === 'string') {\r\n      if (filter === node.nodeName.toLowerCase()) return true\r\n    } else if (Array.isArray(filter)) {\r\n      if (filter.indexOf(node.nodeName.toLowerCase()) > -1) return true\r\n    } else if (typeof filter === 'function') {\r\n      if (filter.call(rule, node, options)) return true\r\n    } else {\r\n      throw new TypeError('`filter` needs to be a string, array, or function')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The collapseWhitespace function is adapted from collapse-whitespace\r\n   * by Luc Thevenard.\r\n   *\r\n   * The MIT License (MIT)\r\n   *\r\n   * Copyright (c) 2014 Luc Thevenard <lucthevenard@gmail.com>\r\n   *\r\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n   * of this software and associated documentation files (the \"Software\"), to deal\r\n   * in the Software without restriction, including without limitation the rights\r\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n   * copies of the Software, and to permit persons to whom the Software is\r\n   * furnished to do so, subject to the following conditions:\r\n   *\r\n   * The above copyright notice and this permission notice shall be included in\r\n   * all copies or substantial portions of the Software.\r\n   *\r\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n   * THE SOFTWARE.\r\n   */\r\n\r\n  /**\r\n   * collapseWhitespace(options) removes extraneous whitespace from an the given element.\r\n   *\r\n   * @param {Object} options\r\n   */\r\n  function collapseWhitespace (options) {\r\n    var element = options.element;\r\n    var isBlock = options.isBlock;\r\n    var isVoid = options.isVoid;\r\n    var isPre = options.isPre || function (node) {\r\n      return node.nodeName === 'PRE'\r\n    };\r\n\r\n    if (!element.firstChild || isPre(element)) return\r\n\r\n    var prevText = null;\r\n    var prevVoid = false;\r\n\r\n    var prev = null;\r\n    var node = next(prev, element, isPre);\r\n\r\n    while (node !== element) {\r\n      if (node.nodeType === 3 || node.nodeType === 4) { // Node.TEXT_NODE or Node.CDATA_SECTION_NODE\r\n        var text = node.data.replace(/[ \\r\\n\\t]+/g, ' ');\r\n\r\n        if ((!prevText || / $/.test(prevText.data)) &&\r\n            !prevVoid && text[0] === ' ') {\r\n          text = text.substr(1);\r\n        }\r\n\r\n        // `text` might be empty at this point.\r\n        if (!text) {\r\n          node = remove(node);\r\n          continue\r\n        }\r\n\r\n        node.data = text;\r\n\r\n        prevText = node;\r\n      } else if (node.nodeType === 1) { // Node.ELEMENT_NODE\r\n        if (isBlock(node) || node.nodeName === 'BR') {\r\n          if (prevText) {\r\n            prevText.data = prevText.data.replace(/ $/, '');\r\n          }\r\n\r\n          prevText = null;\r\n          prevVoid = false;\r\n        } else if (isVoid(node)) {\r\n          // Avoid trimming space around non-block, non-BR void elements.\r\n          prevText = null;\r\n          prevVoid = true;\r\n        }\r\n      } else {\r\n        node = remove(node);\r\n        continue\r\n      }\r\n\r\n      var nextNode = next(prev, node, isPre);\r\n      prev = node;\r\n      node = nextNode;\r\n    }\r\n\r\n    if (prevText) {\r\n      prevText.data = prevText.data.replace(/ $/, '');\r\n      if (!prevText.data) {\r\n        remove(prevText);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * remove(node) removes the given node from the DOM and returns the\r\n   * next node in the sequence.\r\n   *\r\n   * @param {Node} node\r\n   * @return {Node} node\r\n   */\r\n  function remove (node) {\r\n    var next = node.nextSibling || node.parentNode;\r\n\r\n    node.parentNode.removeChild(node);\r\n\r\n    return next\r\n  }\r\n\r\n  /**\r\n   * next(prev, current, isPre) returns the next node in the sequence, given the\r\n   * current and previous nodes.\r\n   *\r\n   * @param {Node} prev\r\n   * @param {Node} current\r\n   * @param {Function} isPre\r\n   * @return {Node}\r\n   */\r\n  function next (prev, current, isPre) {\r\n    if ((prev && prev.parentNode === current) || isPre(current)) {\r\n      return current.nextSibling || current.parentNode\r\n    }\r\n\r\n    return current.firstChild || current.nextSibling || current.parentNode\r\n  }\r\n\r\n  /*\r\n   * Set up window for Node.js\r\n   */\r\n\r\n  var root = (typeof window !== 'undefined' ? window : {});\r\n\r\n  /*\r\n   * Parsing HTML strings\r\n   */\r\n\r\n  function canParseHTMLNatively () {\r\n    var Parser = root.DOMParser;\r\n    var canParse = false;\r\n\r\n    // Adapted from https://gist.github.com/1129031\r\n    // Firefox/Opera/IE throw errors on unsupported types\r\n    try {\r\n      // WebKit returns null on unsupported types\r\n      if (new Parser().parseFromString('', 'text/html')) {\r\n        canParse = true;\r\n      }\r\n    } catch (e) {}\r\n\r\n    return canParse\r\n  }\r\n\r\n  function createHTMLParser () {\r\n    var Parser = function () {};\r\n\r\n    {\r\n      var JSDOM = require('jsdom').JSDOM;\r\n      Parser.prototype.parseFromString = function (string) {\r\n        return new JSDOM(string).window.document\r\n      };\r\n    }\r\n    return Parser\r\n  }\r\n\r\n  var HTMLParser = canParseHTMLNatively() ? root.DOMParser : createHTMLParser();\r\n\r\n  function RootNode (input) {\r\n    var root;\r\n    if (typeof input === 'string') {\r\n      var doc = htmlParser().parseFromString(\r\n        // DOM parsers arrange elements in the <head> and <body>.\r\n        // Wrapping in a custom element ensures elements are reliably arranged in\r\n        // a single element.\r\n        '<x-turndown id=\"turndown-root\">' + input + '</x-turndown>',\r\n        'text/html'\r\n      );\r\n      root = doc.getElementById('turndown-root');\r\n    } else {\r\n      root = input.cloneNode(true);\r\n    }\r\n    collapseWhitespace({\r\n      element: root,\r\n      isBlock: isBlock,\r\n      isVoid: isVoid\r\n    });\r\n\r\n    return root\r\n  }\r\n\r\n  var _htmlParser;\r\n  function htmlParser () {\r\n    _htmlParser = _htmlParser || new HTMLParser();\r\n    return _htmlParser\r\n  }\r\n\r\n  function Node (node) {\r\n    node.isBlock = isBlock(node);\r\n    node.isCode = node.nodeName.toLowerCase() === 'code' || node.parentNode.isCode;\r\n    node.isBlank = isBlank(node);\r\n    node.flankingWhitespace = flankingWhitespace(node);\r\n    return node\r\n  }\r\n\r\n  function isBlank (node) {\r\n    return (\r\n      ['A', 'TH', 'TD', 'IFRAME', 'SCRIPT', 'AUDIO', 'VIDEO'].indexOf(node.nodeName) === -1 &&\r\n      /^\\s*$/i.test(node.textContent) &&\r\n      !isVoid(node) &&\r\n      !hasVoid(node)\r\n    )\r\n  }\r\n\r\n  function flankingWhitespace (node) {\r\n    var leading = '';\r\n    var trailing = '';\r\n\r\n    if (!node.isBlock) {\r\n      var hasLeading = /^[ \\r\\n\\t]/.test(node.textContent);\r\n      var hasTrailing = /[ \\r\\n\\t]$/.test(node.textContent);\r\n\r\n      if (hasLeading && !isFlankedByWhitespace('left', node)) {\r\n        leading = ' ';\r\n      }\r\n      if (hasTrailing && !isFlankedByWhitespace('right', node)) {\r\n        trailing = ' ';\r\n      }\r\n    }\r\n\r\n    return { leading: leading, trailing: trailing }\r\n  }\r\n\r\n  function isFlankedByWhitespace (side, node) {\r\n    var sibling;\r\n    var regExp;\r\n    var isFlanked;\r\n\r\n    if (side === 'left') {\r\n      sibling = node.previousSibling;\r\n      regExp = / $/;\r\n    } else {\r\n      sibling = node.nextSibling;\r\n      regExp = /^ /;\r\n    }\r\n\r\n    if (sibling) {\r\n      if (sibling.nodeType === 3) {\r\n        isFlanked = regExp.test(sibling.nodeValue);\r\n      } else if (sibling.nodeType === 1 && !isBlock(sibling)) {\r\n        isFlanked = regExp.test(sibling.textContent);\r\n      }\r\n    }\r\n    return isFlanked\r\n  }\r\n\r\n  var reduce = Array.prototype.reduce;\r\n  var leadingNewLinesRegExp = /^\\n*/;\r\n  var trailingNewLinesRegExp = /\\n*$/;\r\n  var escapes = [\r\n    [/\\\\/g, '\\\\\\\\'],\r\n    [/\\*/g, '\\\\*'],\r\n    [/^-/g, '\\\\-'],\r\n    [/^\\+ /g, '\\\\+ '],\r\n    [/^(=+)/g, '\\\\$1'],\r\n    [/^(#{1,6}) /g, '\\\\$1 '],\r\n    [/`/g, '\\\\`'],\r\n    [/^~~~/g, '\\\\~~~'],\r\n    [/\\[/g, '\\\\['],\r\n    [/\\]/g, '\\\\]'],\r\n    [/^>/g, '\\\\>'],\r\n    [/_/g, '\\\\_'],\r\n    [/^(\\d+)\\. /g, '$1\\\\. ']\r\n  ];\r\n\r\n  function TurndownService (options) {\r\n    if (!(this instanceof TurndownService)) return new TurndownService(options)\r\n\r\n    var defaults = {\r\n      rules: rules,\r\n      headingStyle: 'setext',\r\n      hr: '* * *',\r\n      bulletListMarker: '*',\r\n      codeBlockStyle: 'indented',\r\n      fence: '```',\r\n      emDelimiter: '_',\r\n      strongDelimiter: '**',\r\n      linkStyle: 'inlined',\r\n      linkReferenceStyle: 'full',\r\n      br: '  ',\r\n      blankReplacement: function (content, node) {\r\n        return node.isBlock ? '\\n\\n' : ''\r\n      },\r\n      keepReplacement: function (content, node) {\r\n        return node.isBlock ? '\\n\\n' + node.outerHTML + '\\n\\n' : node.outerHTML\r\n      },\r\n      defaultReplacement: function (content, node) {\r\n        return node.isBlock ? '\\n\\n' + content + '\\n\\n' : content\r\n      }\r\n    };\r\n    this.options = extend({}, defaults, options);\r\n    this.rules = new Rules(this.options);\r\n  }\r\n\r\n  TurndownService.prototype = {\r\n    /**\r\n     * The entry point for converting a string or DOM node to Markdown\r\n     * @public\r\n     * @param {String|HTMLElement} input The string or DOM node to convert\r\n     * @returns A Markdown representation of the input\r\n     * @type String\r\n     */\r\n\r\n    turndown: function (input) {\r\n      if (!canConvert(input)) {\r\n        throw new TypeError(\r\n          input + ' is not a string, or an element/document/fragment node.'\r\n        )\r\n      }\r\n\r\n      if (input === '') return ''\r\n\r\n      var output = process.call(this, new RootNode(input));\r\n      return postProcess.call(this, output)\r\n    },\r\n\r\n    /**\r\n     * Add one or more plugins\r\n     * @public\r\n     * @param {Function|Array} plugin The plugin or array of plugins to add\r\n     * @returns The Turndown instance for chaining\r\n     * @type Object\r\n     */\r\n\r\n    use: function (plugin) {\r\n      if (Array.isArray(plugin)) {\r\n        for (var i = 0; i < plugin.length; i++) this.use(plugin[i]);\r\n      } else if (typeof plugin === 'function') {\r\n        plugin(this);\r\n      } else {\r\n        throw new TypeError('plugin must be a Function or an Array of Functions')\r\n      }\r\n      return this\r\n    },\r\n\r\n    /**\r\n     * Adds a rule\r\n     * @public\r\n     * @param {String} key The unique key of the rule\r\n     * @param {Object} rule The rule\r\n     * @returns The Turndown instance for chaining\r\n     * @type Object\r\n     */\r\n\r\n    addRule: function (key, rule) {\r\n      this.rules.add(key, rule);\r\n      return this\r\n    },\r\n\r\n    /**\r\n     * Keep a node (as HTML) that matches the filter\r\n     * @public\r\n     * @param {String|Array|Function} filter The unique key of the rule\r\n     * @returns The Turndown instance for chaining\r\n     * @type Object\r\n     */\r\n\r\n    keep: function (filter) {\r\n      this.rules.keep(filter);\r\n      return this\r\n    },\r\n\r\n    /**\r\n     * Remove a node that matches the filter\r\n     * @public\r\n     * @param {String|Array|Function} filter The unique key of the rule\r\n     * @returns The Turndown instance for chaining\r\n     * @type Object\r\n     */\r\n\r\n    remove: function (filter) {\r\n      this.rules.remove(filter);\r\n      return this\r\n    },\r\n\r\n    /**\r\n     * Escapes Markdown syntax\r\n     * @public\r\n     * @param {String} string The string to escape\r\n     * @returns A string with Markdown syntax escaped\r\n     * @type String\r\n     */\r\n\r\n    escape: function (string) {\r\n      return escapes.reduce(function (accumulator, escape) {\r\n        return accumulator.replace(escape[0], escape[1])\r\n      }, string)\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Reduces a DOM node down to its Markdown string equivalent\r\n   * @private\r\n   * @param {HTMLElement} parentNode The node to convert\r\n   * @returns A Markdown representation of the node\r\n   * @type String\r\n   */\r\n\r\n  function process (parentNode) {\r\n    var self = this;\r\n    return reduce.call(parentNode.childNodes, function (output, node) {\r\n      node = new Node(node);\r\n\r\n      var replacement = '';\r\n      if (node.nodeType === 3) {\r\n        replacement = node.isCode ? node.nodeValue : self.escape(node.nodeValue);\r\n      } else if (node.nodeType === 1) {\r\n        replacement = replacementForNode.call(self, node);\r\n      }\r\n\r\n      return join(output, replacement)\r\n    }, '')\r\n  }\r\n\r\n  /**\r\n   * Appends strings as each rule requires and trims the output\r\n   * @private\r\n   * @param {String} output The conversion output\r\n   * @returns A trimmed version of the ouput\r\n   * @type String\r\n   */\r\n\r\n  function postProcess (output) {\r\n    var self = this;\r\n    this.rules.forEach(function (rule) {\r\n      if (typeof rule.append === 'function') {\r\n        output = join(output, rule.append(self.options));\r\n      }\r\n    });\r\n\r\n    return output.replace(/^[\\t\\r\\n]+/, '').replace(/[\\t\\r\\n\\s]+$/, '')\r\n  }\r\n\r\n  /**\r\n   * Converts an element node to its Markdown equivalent\r\n   * @private\r\n   * @param {HTMLElement} node The node to convert\r\n   * @returns A Markdown representation of the node\r\n   * @type String\r\n   */\r\n\r\n  function replacementForNode (node) {\r\n    var rule = this.rules.forNode(node);\r\n    var content = process.call(this, node);\r\n    var whitespace = node.flankingWhitespace;\r\n    if (whitespace.leading || whitespace.trailing) content = content.trim();\r\n    return (\r\n      whitespace.leading +\r\n      rule.replacement(content, node, this.options) +\r\n      whitespace.trailing\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Determines the new lines between the current output and the replacement\r\n   * @private\r\n   * @param {String} output The current conversion output\r\n   * @param {String} replacement The string to append to the output\r\n   * @returns The whitespace to separate the current output and the replacement\r\n   * @type String\r\n   */\r\n\r\n  function separatingNewlines (output, replacement) {\r\n    var newlines = [\r\n      output.match(trailingNewLinesRegExp)[0],\r\n      replacement.match(leadingNewLinesRegExp)[0]\r\n    ].sort();\r\n    var maxNewlines = newlines[newlines.length - 1];\r\n    return maxNewlines.length < 2 ? maxNewlines : '\\n\\n'\r\n  }\r\n\r\n  function join (string1, string2) {\r\n    var separator = separatingNewlines(string1, string2);\r\n\r\n    // Remove trailing/leading newlines and replace with separator\r\n    string1 = string1.replace(trailingNewLinesRegExp, '');\r\n    string2 = string2.replace(leadingNewLinesRegExp, '');\r\n\r\n    return string1 + separator + string2\r\n  }\r\n\r\n  /**\r\n   * Determines whether an input can be converted\r\n   * @private\r\n   * @param {String|HTMLElement} input Describe this parameter\r\n   * @returns Describe what it returns\r\n   * @type String|Object|Array|Boolean|Number\r\n   */\r\n\r\n  function canConvert (input) {\r\n    return (\r\n      input != null && (\r\n        typeof input === 'string' ||\r\n        (input.nodeType && (\r\n          input.nodeType === 1 || input.nodeType === 9 || input.nodeType === 11\r\n        ))\r\n      )\r\n    )\r\n  }\r\n\r\n  return TurndownService;\r\n\r\n});\r\n\ndefine('skylark-texts-markdown/Turndown',[\r\n\t\"skylark-langx/langx\",\r\n    \"./markdown\",\r\n    \"./primitives/turndown\"\r\n], function(langx,markdown, TurndownService) {\r\n\r\n   return markdown.Turndown =  TurndownService;\r\n});\ndefine('skylark-texts-markdown/main',[\r\n    \"./markdown\",\r\n    \"./Parser\",\r\n    \"./Turndown\"\r\n], function(markdown) {\r\n    return markdown;\r\n});\r\n\ndefine('skylark-texts-markdown', ['skylark-texts-markdown/main'], function (main) { return main; });\n\n"]}