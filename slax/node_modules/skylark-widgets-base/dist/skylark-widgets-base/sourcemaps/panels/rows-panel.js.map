{"version":3,"sources":["panels/rows-panel.js"],"names":["define","Vector2","base","TextPane","Panel","RowsPanel","inherit","_construct","parent","prototype","call","this","autoSize","fitElements","spacing","defaultTextWidth","rows","push","setAutoSize","element","style","overflow","add","length","setParent","addText","text","fit","setAlignment","LEFT","setText","size","set","fitContent","setOverflow","Text","ELLIPSIS","addDivision","x","y","division","nextRow","removeLastRow","row","pop","i","destroy","removeAll","j","updateSize","sizeX","maxSizeY","visible","position","updateInterface"],"mappings":";;;;;;;AAAAA,QACC,iCACA,UACA,eACA,WACC,SACDC,EACAC,EACAC,EACAC,GAEA,aASC,IAAIC,EAAYD,EAAME,SACtBC,WAAe,SAAUC,GAExBJ,EAAMK,UAAUF,WAAWG,KAAKC,KAAMH,GAStCG,KAAKC,UAAW,EAQhBD,KAAKE,aAAc,EAQnBF,KAAKG,QAAU,IAAIb,EAAQ,EAAG,GAQ9BU,KAAKI,iBAAmB,GAQxBJ,KAAKK,QACLL,KAAKK,KAAKC,UAUXC,YAAc,SAASN,GAEtBD,KAAKC,SAAWA,EAChBD,KAAKQ,QAAQC,MAAMC,SAAWT,EAAW,UAAY,QAQtDU,IAAM,SAASH,GAEXR,KAAKK,KAAKO,OAAS,IAErBZ,KAAKK,KAAKL,KAAKK,KAAKO,OAAS,GAAGN,KAAKE,GACrCA,EAAQK,UAAUb,QASpBc,QAAU,SAASC,EAAMC,GAExB,IAAIR,EAAU,IAAIhB,EAASQ,MAgB3B,OAfAQ,EAAQS,aAAazB,EAAS0B,MAC9BV,EAAQW,QAAQJ,GAChBP,EAAQY,KAAKC,IAAIrB,KAAKI,iBAAkB,KAE7B,IAARY,EAEFR,EAAQc,YAAa,EAIrBd,EAAQe,YAAYC,KAAKC,UAG1BzB,KAAKW,IAAIH,GAEFA,GAQRkB,YAAc,SAASC,EAAGC,GAEzB,IAAIC,EAAW,IAAIpC,EAAMO,MAIzB,OAHA6B,EAAST,KAAKC,IAAIM,EAAGC,GACrB5B,KAAKW,IAAIkB,GAEFA,GAQRC,QAAU,WAET9B,KAAKK,KAAKC,UAQXyB,cAAgB,WAEf,GAAG/B,KAAKK,KAAKO,OAAS,EAIrB,IAFA,IAAIoB,EAAMhC,KAAKK,KAAK4B,MAEZC,EAAI,EAAGA,EAAIF,EAAIpB,OAAQsB,IAE9BF,EAAIE,GAAGC,WAUVC,UAAY,WAEX,IAAI,IAAIF,EAAI,EAAGA,EAAIlC,KAAKK,KAAKO,OAAQsB,IAEpC,IAAI,IAAIG,EAAI,EAAGA,EAAIrC,KAAKK,KAAK6B,GAAGtB,OAAQyB,IAEvCrC,KAAKK,KAAK6B,GAAGG,GAAGF,UAIlBnC,KAAKK,QACLL,KAAKK,KAAKC,UAGXgC,WAAa,WAEZ,IAAIX,EAAI,EAAGC,EAAI,EACXW,EAAQ,EAERvC,KAAKC,WAER0B,EAAI3B,KAAKG,QAAQwB,EACjBC,EAAI5B,KAAKG,QAAQyB,GAGlB,IAAI,IAAIM,EAAI,EAAGA,EAAIlC,KAAKK,KAAKO,OAAQsB,IACrC,CAGC,IAFA,IAAIM,EAAW,EAEPH,EAAI,EAAGA,EAAIrC,KAAKK,KAAK6B,GAAGtB,OAAQyB,IACxC,CACC,IAAI7B,EAAUR,KAAKK,KAAK6B,GAAGG,GAExB7B,EAAQiC,UAGPzC,KAAKE,aAAemC,IAAMrC,KAAKK,KAAK6B,GAAGtB,OAAS,IAElDJ,EAAQY,KAAKO,EAAI3B,KAAKoB,KAAKO,EAAIA,EAAI,IAGpCnB,EAAQkC,SAASrB,IAAIM,EAAGC,GACxBpB,EAAQmC,kBAGLnC,EAAQY,KAAKQ,EAAIY,IAEnBA,EAAWhC,EAAQY,KAAKQ,GAGzBD,GAAKnB,EAAQY,KAAKO,EAAI3B,KAAKG,QAAQwB,GAKlCY,EAAQZ,IAEVY,EAAQZ,GAIA,IAANA,IAEFA,EAAI3B,KAAKC,SAAW,EAAID,KAAKG,QAAQwB,EACrCC,GAAKY,EAAWxC,KAAKG,QAAQyB,GAI5B5B,KAAKC,UAEPD,KAAKoB,KAAKC,IAAIkB,EAAOX,GAGtBnC,EAAMK,UAAUwC,WAAWvC,KAAKC,SAMlC,OAAOT,EAAKG,UAAYA","file":"../../panels/rows-panel.js","sourcesContent":["define([\n\t\"skylark-langx-numerics/vector2\",\n\t\"../base\",\n\t\"../text-pane\",\n\t\"./panel\"\n],function(\n\tVector2,\n\tbase,\n\tTextPane,\n\tPanel\n){\n\t\"use strict\";\n\n\t/**\n\t * Table form element automatically organizes element into a grid like form.\n\t * \n\t * @class TableForm\n\t * @extends {Element}\n\t * @param {Element} parent Parent element.\n\t */\n\t var RowsPanel = Panel.inherit({\n\t\t\"_construct\" : function (parent)\n\t\t{\n\t\t\tPanel.prototype._construct.call(this, parent);\n\n\t\t\t\n\t\t\t/**\n\t\t\t * Set if the form needs to be automatically resized.\n\t\t\t *\n\t\t\t * @property autoSize\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tthis.autoSize = true;\n\n\t\t\t/**\n\t\t\t * Resize the last element of the rows to fit the size of the container.\n\t\t\t *\n\t\t\t * @method fitElements\n\t\t\t * @type {Boolean}\n\t\t\t */\n\t\t\tthis.fitElements = true;\n\n\t\t\t/**\n\t\t\t * Spacing between elements and rows.\n\t\t\t *\n\t\t\t * @property spacing\n\t\t\t * @type {Vector2}\n\t\t\t */\n\t\t\tthis.spacing = new Vector2(5, 5);\n\n\t\t\t/**\n\t\t\t * Default text width.\n\t\t\t *\n\t\t\t * @property defaultTextWidth\n\t\t\t * @type {Number}\n\t\t\t */\n\t\t\tthis.defaultTextWidth = 80;\n\n\t\t\t/**\n\t\t\t * Rows of this form table.\n\t\t\t *\n\t\t\t * @property rows\n\t\t\t * @type {Array}\n\t\t\t */\n\t\t\tthis.rows = [];\n\t\t\tthis.rows.push([]);\n\t\t},\n\n\n\t\t/**\n\t\t * Set if the form should be automatically resized, and ajust overflow value.\n\t\t *\n\t\t * @method setAutoSize\n\t\t * @param {Boolean} autoSize\n\t\t */\n\t\tsetAutoSize : function(autoSize)\n\t\t{\n\t\t\tthis.autoSize = autoSize;\n\t\t\tthis.element.style.overflow = autoSize ? \"visible\" : \"auto\";\n\t\t},\n\n\t\t/**\n\t\t * Add a element to form (in actual row).\n\t\t *\n\t\t * @method add\n\t\t */\n\t\tadd : function(element)\n\t\t{\n\t\t\tif(this.rows.length > 0)\n\t\t\t{\n\t\t\t\tthis.rows[this.rows.length - 1].push(element);\n\t\t\t\telement.setParent(this);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Create text element.\n\t\t *\n\t\t * @method addText\n\t\t */\n\t\taddText : function(text, fit)\n\t\t{\n\t\t\tvar element = new TextPane(this);\n\t\t\telement.setAlignment(TextPane.LEFT);\n\t\t\telement.setText(text);\n\t\t\telement.size.set(this.defaultTextWidth, 20);\n\t\t\t\n\t\t\tif(fit === true)\n\t\t\t{\n\t\t\t\telement.fitContent = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\telement.setOverflow(Text.ELLIPSIS);\n\t\t\t}\n\n\t\t\tthis.add(element);\n\n\t\t\treturn element;\n\t\t},\n\n\t\t/**\n\t\t * Create division.\n\t\t *\n\t\t * @method addDivision\n\t\t */\n\t\taddDivision : function(x, y)\n\t\t{\n\t\t\tvar division = new Panel(this);\n\t\t\tdivision.size.set(x, y);\n\t\t\tthis.add(division);\n\n\t\t\treturn division;\n\t\t},\n\n\t\t/**\n\t\t * Add new row to form.\n\t\t *\n\t\t * @method nextRow\n\t\t */\n\t\tnextRow : function()\n\t\t{\n\t\t\tthis.rows.push([]);\n\t\t},\n\n\t\t/**\n\t\t * Remove last row from form.\n\t\t *\n\t\t * @method removeLastRow\n\t\t */\n\t\tremoveLastRow : function()\n\t\t{\n\t\t\tif(this.rows.length > 0)\n\t\t\t{\n\t\t\t\tvar row = this.rows.pop();\n\n\t\t\t\tfor(var i = 0; i < row.length; i++)\n\t\t\t\t{\n\t\t\t\t\trow[i].destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Clear all elements from form.\n\t\t *\n\t\t * @method removeAll\n\t\t */\n\t\tremoveAll : function()\n\t\t{\n\t\t\tfor(var i = 0; i < this.rows.length; i++)\n\t\t\t{\n\t\t\t\tfor(var j = 0; j < this.rows[i].length; j++)\n\t\t\t\t{\n\t\t\t\t\tthis.rows[i][j].destroy();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.rows = [];\n\t\t\tthis.rows.push([]);\n\t\t},\n\n\t\tupdateSize : function()\n\t\t{\n\t\t\tvar x = 0, y = 0;\n\t\t\tvar sizeX = 0;\n\n\t\t\tif(!this.autoSize)\n\t\t\t{\n\t\t\t\tx = this.spacing.x;\n\t\t\t\ty = this.spacing.y;\n\t\t\t}\n\n\t\t\tfor(var i = 0; i < this.rows.length; i++)\n\t\t\t{\n\t\t\t\tvar maxSizeY = 0;\n\n\t\t\t\tfor(var j = 0; j < this.rows[i].length; j++)\n\t\t\t\t{\n\t\t\t\t\tvar element = this.rows[i][j];\n\t\t\t\t\t\n\t\t\t\t\tif(element.visible)\n\t\t\t\t\t{\n\t\t\t\t\t\t//Resize last element\n\t\t\t\t\t\tif(this.fitElements && j === this.rows[i].length - 1)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\telement.size.x = this.size.x - x - 15;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telement.position.set(x, y);\n\t\t\t\t\t\telement.updateInterface();\n\n\t\t\t\t\t\t//Size tracker\n\t\t\t\t\t\tif(element.size.y > maxSizeY)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tmaxSizeY = element.size.y;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tx += element.size.x + this.spacing.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//Form size x\n\t\t\t\tif(sizeX < x)\n\t\t\t\t{\n\t\t\t\t\tsizeX = x;\n\t\t\t\t}\n\n\t\t\t\t//Update position tracker\n\t\t\t\tif(x !== 0)\n\t\t\t\t{\n\t\t\t\t\tx = this.autoSize ? 0 : this.spacing.x;\n\t\t\t\t\ty += maxSizeY + this.spacing.y;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif(this.autoSize)\n\t\t\t{\n\t\t\t\tthis.size.set(sizeX, y);\n\t\t\t}\n\n\t\t\tPanel.prototype.updateSize.call(this);\n\t\t}\n\n\t });\n\n\n\treturn base.RowsPanel = RowsPanel;\n});"]}