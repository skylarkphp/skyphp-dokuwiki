/**
 * skylark-widgets-codeground - The skylark code playground widget for showcasing html/css/js.
 * @author Hudaokeji, Inc.
 * @version v0.9.0
 * @link https://github.com/skylark-widgets/skylark-widgets-codeground/
 * @license MIT
 */
define(["skylark-langx/langx","skylark-domx-query","../../addon","../../util","../../codeground"],function(t,e,n,r,s){"use strict";class i extends n{get options(){return{html:{template:function(t){return`\n                          <!doctype html>\n                          <html>\n                            <head>\n                              <script>\n                                (function () {\n                                  window.addEventListener('DOMContentLoaded', function () {\n                                    window.parent.postMessage(JSON.stringify({\n                                      type: 'codeg-dom-ready'\n                                    }), '*')\n                                  })\n                                }())\n                              <\/script>\n\n                              <style>${t.css||""}</style>\n                            </head>\n                            <body>\n                              ${t.html||""}\n\n                              \x3c!--\n                                CodeGround:\n                                Empty script tag prevents malformed HTML from breaking the next script.\n                              --\x3e\n                              <script><\/script>\n                              <script>${t.js||""}<\/script>\n                            </body>\n                          </html>\n                        `}}}}_init(){super._init();var t=this.coder,e=(this.options,!!("srcdoc"in document.createElement("iframe"))),n=t.$(".codeg-pane-result iframe");window.addEventListener("message",this.domready.bind(this)),this.listenTo(t,"changed",this.update),this.supportSrcdoc=e,this.content={html:"",css:"",js:""},this.frameContent="",this.$resultFrame=n,this.callbacks=[],this.index=0,this.lastCallback=(()=>{}),this.update()}_render(e){if(!this._renderHtml){let e=this.options.html.template;t.isString(e)?this._renderHtml=t.template(e):t.isFunction(e)&&(this._renderHtml=e)}return this._renderHtml(e)}update(t){var n=this.frameContent;let r=this.coder.getCodes();if(this.frameContent=this._render(r),this.lastCallback=(()=>{this.lastCallback=(()=>{})}),this.frameContent!==n)if(this.supportSrcdoc){var s=document.createElement("iframe");this.$resultFrame.replaceWith(s),this.$resultFrame=e(s),s.contentWindow.document.open(),s.contentWindow.document.write(this.frameContent),s.contentWindow.document.close()}else{this.$resultFrame.attr("data-srcdoc",this.frameContent);var i='javascript:window.frameElement.getAttribute("data-srcdoc");';this.$resultFrame.attr("src",i),this.$resultFrame[0].contentWindow&&(this.$resultFrame[0].contentWindow.location=i)}}domready(t){if(t.source===this.$resultFrame[0].contentWindow){var e={};try{e=JSON.parse(t.data)}catch(t){}"codeg-dom-ready"===e.type&&this.lastCallback()}}static get categoryName(){return"general"}static get addonName(){return"render"}}return i.register(s),i});
//# sourceMappingURL=../../sourcemaps/addons/general/render.js.map
