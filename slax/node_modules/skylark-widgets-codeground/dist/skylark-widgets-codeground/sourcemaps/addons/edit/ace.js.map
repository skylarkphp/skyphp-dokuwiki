{"version":3,"sources":["addons/edit/ace.js"],"names":["define","langx","datax","ace","Addon","util","CodeGround","AddonAce","[object Object]","super","_init","i","coder","this","options","editor","$editors","$","length","$textarea","querySelector","type","data","file","$aceContainer","document","createElement","appendChild","edit","editorOptions","clone","getSession","setMode","getMode","setOptions","$blockScrolling","Infinity","listenTo","update","params","content","getValue","emit","e","setValue","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,oBACA,cACA,cACA,aACA,oBACD,SAAUC,EAAMC,EAAMC,EAAIC,EAAMC,EAAKC,GACpC,mBACMC,UAAiBH,EAGnBI,QACIC,MAAMC,QACN,IAIIC,EAJAC,EAAQC,KAAKD,MACbE,EAAUD,KAAKC,QAInBD,KAAKE,UAMDD,EAAUD,KAAKC,QAAnB,IACIE,EAAWJ,EAAMK,EAAE,iBACvB,IAAKN,EAAI,EAAGA,EAAIK,EAASE,OAAQP,IAAK,CAClC,IAAIQ,EAAYH,EAASL,GAAGS,cAAc,YACtCC,EAAOnB,EAAMoB,KAAKH,EAAW,cAC7BI,EAAOrB,EAAMoB,KAAKH,EAAW,cAC7BK,EAAgBC,SAASC,cAAc,OAC3CV,EAASL,GAAGgB,YAAYH,GACxBX,KAAKE,OAAOM,GAAQlB,EAAIyB,KAAKJ,GAC7B,IAAIT,EAASF,KAAKE,OAAOM,GACrBQ,EAAgB5B,EAAM6B,MAAMhB,GAChCC,EAAOgB,aAAaC,QAAQ,YAAc3B,EAAK4B,QAAQZ,EAAME,IAC7DR,EAAOgB,aAAaG,WAAWL,GAC/Bd,EAAOoB,gBAAkBC,EAAAA,EAE7BvB,KAAKwB,SAASzB,EAAM,UAAUC,KAAKyB,QAGvC9B,aAAa+B,GACT,MAAO,KACH,IAAIxB,EAASF,KAAKE,OAAOwB,EAAOlB,MAChCkB,EAAOC,QAAUzB,EAAO0B,WACxB5B,KAAKD,MAAM8B,KAAK,SAAUH,IAGlC/B,OAAOmC,GACH,IAAIJ,EAASI,EAAErB,KACFT,KAAKE,OAAOwB,EAAOlB,MACzBU,aAAaa,SAASL,EAAOC,SAIxCK,0BACI,MAAO,OAGXC,uBACI,MAAO,OAMf,OAFAvC,EAASwC,SAASzC,GAEXC","file":"../../../addons/edit/ace.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-ace',\n    \"../../addon\",\n    '../../util',\n    \"../../codeground\"\n], function (langx,datax,ace,Addon,util,CodeGround) {\n    'use strict';\n    class AddonAce extends Addon {\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editor = {};\n            //this.coder = coder;\n            //options = langx.clone(options);\n            //if (typeof //window.ace === 'undefined') {\n            //    retur//n;\n            // }\n            var options = this.options;\n            var $editors = coder.$('.codeg-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'codeg-type');\n                let file = datax.data($textarea, 'codeg-file');\n                let $aceContainer = document.createElement('div');\n                $editors[i].appendChild($aceContainer);\n                this.editor[type] = ace.edit($aceContainer);\n                let editor = this.editor[type];\n                let editorOptions = langx.clone(options);\n                editor.getSession().setMode('ace/mode/' + util.getMode(type, file));\n                editor.getSession().setOptions(editorOptions);\n                editor.$blockScrolling = Infinity;\n            }\n            this.listenTo(coder,\"reseted\",this.update);\n        }\n        \n        editorChange(params) {\n            return () => {\n                var editor = this.editor[params.type];\n                params.content = editor.getValue();\n                this.coder.emit('change', params);\n            };\n        }\n        update(e,) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            editor.getSession().setValue(params.content);\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"ace\";\n        }        \n    };\n\n    AddonAce.register(CodeGround);\n    \n    return AddonAce;\n});"]}