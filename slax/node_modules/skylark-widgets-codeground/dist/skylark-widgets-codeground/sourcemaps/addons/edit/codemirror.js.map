{"version":3,"sources":["addons/edit/codemirror.js"],"names":["define","langx","$","CodeMirror","Addon","util","CodeGround","AddonCodeMirror","options","highlightLine","lineNumbers","lineWrapping","foldGutter","gutters","pluginCssClass","[object Object]","super","_init","i","coder","this","editors","modemap","html","$editors","length","$textarea","find","type","data","editor","fromTextArea","setOption","getMode","on","editorChange","listenTo","update","params","val","getValue","trigger","e","codes","getCodes","content","code","isString","setValue","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,qBAEA,gCACA,cACA,aACA,mBACA,kCACA,kCACA,gDACA,8CACA,4CAEA,2CAEA,iDAEA,yCACA,2CACA,2CACA,yCACA,4CACA,8CACA,6CAEA,8CACA,8CACA,8CAEA,+CACA,yCACA,oDAMA,yCAEA,6CACA,gDAEA,gDACA,qCAEA,sCACD,SAAUC,EAAMC,EAAEC,EAAWC,EAAMC,EAAKC,GACvC,mBACMC,UAAyBH,EAG3BI,cACI,OACIC,eAAe,EAEfC,aAAa,EACbC,cAAc,EACdC,YAAY,EACZC,SAAU,yBAA0B,yBAEpCC,eAAiB,2BAIzBC,QACIC,MAAMC,QACN,IAIIC,EAJAC,EAAQC,KAAKD,MACbX,EAAUY,KAAKZ,QAInBY,KAAKC,WAEL,IAAIC,GAAYC,KAAQ,aAKpBC,GAJAhB,EAAUY,KAAKZ,QAIJW,EAAMjB,EAAE,kBACvB,IAAKgB,EAAI,EAAGA,EAAIM,EAASC,OAAQP,IAAK,CAClC,IAAIQ,EAAYxB,EAAEsB,EAASN,IAAIS,KAAK,YAChCC,EAAOF,EAAUG,KAAK,cACtBC,EAASV,KAAKC,QAAQO,GAAQzB,EAAW4B,aAAaL,EAAU,GAAIlB,GACxEsB,EAAOE,UAAU,OAAQ3B,EAAK4B,QAAQL,EAAM,GAAIN,IAChDQ,EAAOJ,UAAYA,EACnBI,EAAOI,GAAG,SAAUd,KAAKe,cACrBP,KAAAA,KAIRR,KAAKgB,SAASjB,EAAM,UAAUC,KAAKiB,QAGvCtB,aAAauB,GACT,MAAO,KACH,IAAIR,EAASV,KAAKC,QAAQiB,EAAOV,MACjCE,EAAOJ,UAAUa,IAAIT,EAAOU,YAC5BV,EAAOJ,UAAUe,QAAQ,WAIjC1B,OAAO2B,GACH,IAAIC,EAAQvB,KAAKD,MAAMyB,WACvB,IAAK,IAAIhB,KAAQR,KAAKC,QAAS,CAC3B,IAEIwB,EAFAf,EAASV,KAAKC,QAAQO,GACtBkB,EAAOH,EAAMf,GAGbiB,EADA5C,EAAM8C,SAASD,GACLA,EAEAA,EAAKD,SAAW,GAE9Bf,EAAOkB,SAASH,IAMxBI,0BACI,MAAO,OAGXC,uBACI,MAAO,cAMf,OAFA3C,EAAgB4C,SAAS7C,GAElBC","file":"../../../addons/edit/codemirror.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-query',\n\n    'skylark-codemirror/CodeMirror',\n    \"../../addon\",\n    '../../util',\n    \"../../codeground\",\n    \"skylark-codemirror/mode/xml/xml\",\n    \"skylark-codemirror/mode/css/css\",\n    \"skylark-codemirror/mode/javascript/javascript\",\n    \"skylark-codemirror/mode/htmlmixed/htmlmixed\",\n    \"skylark-codemirror/mode/markdown/markdown\",\n\n    \"skylark-codemirror/addon/comment/comment\",\n\n    \"skylark-codemirror/addon/selection/active-line\",\n\n    \"skylark-codemirror/addon/fold/foldcode\",\n    \"skylark-codemirror/addon/fold/foldgutter\",\n    \"skylark-codemirror/addon/fold/brace-fold\",\n    \"skylark-codemirror/addon/fold/xml-fold\",\n    \"skylark-codemirror/addon/fold/indent-fold\",\n    \"skylark-codemirror/addon/fold/markdown-fold\",\n    \"skylark-codemirror/addon/fold/comment-fold\",\n\n    \"skylark-codemirror/addon/edit/matchbrackets\",\n    \"skylark-codemirror/addon/edit/closebrackets\",\n    \"skylark-codemirror/addon/edit/trailingspace\",\n\n    \"skylark-codemirror/addon/search/searchcursor\",\n    \"skylark-codemirror/addon/search/search\",\n    \"skylark-codemirror/addon/search/match-highlighter\",\n\n\n    ///\"skylark-codemirror/addon/keymap/emacs\",\n    ///\"skylark-codemirror/addon/keymap/sublime\",\n\n    \"skylark-codemirror/addon/dialog/dialog\",\n\n    \"skylark-codemirror/addon/hint/anyword-hint\",\n    \"skylark-codemirror/addon/hint/javascript-hint\",\n\n    \"skylark-codemirror/addon/lint/javascript-lint\",\n    \"skylark-codemirror/addon/lint/lint\",\n\n    \"skylark-codemirror/addon/tern/tern\"\n], function (langx,$,CodeMirror,Addon,util,CodeGround) {\n    'use strict';\n    class AddonCodeMirror  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n                highlightLine: true,\n\n                lineNumbers: true,\n                lineWrapping: true,\n                foldGutter: true,\n                gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n\n                pluginCssClass : \"codeg-plugin-codemirror\"\n            }\n        }\n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editors = {};\n            //this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            var options = this.options;\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$('.codeg-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $($editors[i]).find('textarea');\n                let type = $textarea.data('codeg-type');\n                let editor = this.editors[type] = CodeMirror.fromTextArea($textarea[0], options);\n                editor.setOption('mode', util.getMode(type, '', modemap));\n                editor.$textarea = $textarea;\n                editor.on('change', this.editorChange({\n                    type\n                }));\n\n            }\n            this.listenTo(coder,\"reseted\",this.update);\n        }\n\n        editorChange(params) {\n            return () => {\n                var editor = this.editors[params.type];\n                editor.$textarea.val(editor.getValue());\n                editor.$textarea.trigger(\"change\");\n            };\n        }\n\n        update(e) {\n            var codes = this.coder.getCodes();\n            for (let type in this.editors) {\n                let editor = this.editors[type],\n                    code = codes[type],\n                    content;\n                if (langx.isString(code)) {\n                    content = code;\n                } else {\n                    content = code.content || \"\";\n                }\n                editor.setValue(content);\n            }\n\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"codemirror\";\n        }        \n    };\n\n    AddonCodeMirror.register(CodeGround);\n\n    return AddonCodeMirror;\n});"]}