{"version":3,"sources":["addons/general/pen.js"],"names":["define","langx","Addon","util","CodeGround","AddonPen","[object Object]","super","_init","coder","this","options","panes","html","title","classChecker","css","js","console","$availablePanes","p","$container","classList","contains","push","querySelector","resizablePanes","i","length","type","j","indexOf","replace","$pane","container","expander","undefined","$paneTitle","document","createElement","add","innerHTML","$paneElement","firstElementChild","insertBefore","firstChild","addEventListener","startExpand","bind","event","filter","pane","target","shift","$previousPane","$relativePixel","parseInt","window","getComputedStyle","parentNode","style","display","startX","clientX","startWidth","parseFloat","mousemove","doDrag","mouseup","stopDrag","previousPane","relativePixel","ppNewWidth","cpNewWidth","maxWidth","width","removeEventListener","categoryName","addonName","register"],"mappings":"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","file":"../../../addons/general/pen.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    \"../../addon\",\n    '../../util',\n    \"../../codeground\"\n], function (langx,Addon,util,CodeGround) {\n    'use strict';\n    class AddonPen  extends Addon{\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n\n            var coder = this.coder,\n                options = this.options;\n\n            let panes = {\n                html: {\n                    title: 'HTML',\n                    classChecker: 'codeg-has-html'\n                },\n                css: {\n                    title: 'CSS',\n                    classChecker: 'codeg-has-css'\n                },\n                js: {\n                    title: 'JavaScript',\n                    classChecker: 'codeg-has-js'\n                },\n                console: {\n                    title: 'Console',\n                    classChecker: 'codeg-plugin-console'\n                }\n            };\n            let $availablePanes = [];\n            for (let p in panes) {\n                if (coder.$container.classList.contains(panes[p].classChecker)) {\n                    $availablePanes.push(coder.$container.querySelector(`.codeg-pane-${ p }`));\n                }\n            }\n            this.resizablePanes = [];\n            for (let i = 0; i < $availablePanes.length; i++) {\n                let type;\n                for (let j = 0; j < $availablePanes[i].classList.length; j++) {\n                    if ($availablePanes[i].classList[j].indexOf('codeg-pane-') !== -1) {\n                        type = $availablePanes[i].classList[j].replace('codeg-pane-', '');\n                        break;\n                    }\n                }\n                if (!type) {\n                    continue;\n                }\n                let $pane = {\n                    container: $availablePanes[i],\n                    expander: undefined\n                };\n                this.resizablePanes.push($pane);\n                let $paneTitle = document.createElement('div');\n                $paneTitle.classList.add('codeg-pane-title');\n                $paneTitle.innerHTML = panes[type].title || type;\n                let $paneElement = $availablePanes[i].firstElementChild;\n                $paneElement.insertBefore($paneTitle, $paneElement.firstChild);\n                if (i > 0) {\n                    $pane.expander = document.createElement('div');\n                    $pane.expander.classList.add('codeg-plugin-pen-expander');\n                    $pane.expander.addEventListener('mousedown', this.startExpand.bind(this, coder));\n                    $paneElement.insertBefore($pane.expander, $paneTitle);\n                }\n            }\n        }\n        startExpand(coder, event) {\n            let $pane = this.resizablePanes.filter(pane => {\n                return pane.expander === event.target;\n            }).shift();\n            let $previousPane = this.resizablePanes[this.resizablePanes.indexOf($pane) - 1];\n            let $relativePixel = 100 / parseInt(window.getComputedStyle($pane.container.parentNode)['width'], 10);\n            $pane.container.parentNode.style.display = 'none';\n            $pane.startX = event.clientX;\n            $pane.startWidth = parseFloat(window.getComputedStyle($pane.container)['width'], 10);\n            $previousPane.startWidth = parseFloat(window.getComputedStyle($previousPane.container)['width'], 10);\n            $pane.container.parentNode.style.display = '';\n            $pane.mousemove = this.doDrag.bind(this, $pane, $previousPane, $relativePixel);\n            $pane.mouseup = this.stopDrag.bind(this, $pane);\n            document.addEventListener('mousemove', $pane.mousemove, false);\n            document.addEventListener('mouseup', $pane.mouseup, false);\n        }\n        doDrag(pane, previousPane, relativePixel, event) {\n            let ppNewWidth = previousPane.startWidth + (event.clientX - pane.startX) * relativePixel;\n            let cpNewWidth = pane.startWidth - (event.clientX - pane.startX) * relativePixel;\n            const PANE_MIN_SIZE = 10;\n            if (ppNewWidth >= PANE_MIN_SIZE && cpNewWidth >= PANE_MIN_SIZE) {\n                pane.container.style.maxWidth = 'none';\n                previousPane.container.style.maxWidth = 'none';\n                previousPane.container.style.width = `${ ppNewWidth }%`;\n                pane.container.style.width = `${ cpNewWidth }%`;\n            }\n        }\n        stopDrag(pane, event) {\n            document.removeEventListener('mousemove', pane.mousemove, false);\n            document.removeEventListener('mouseup', pane.mouseup, false);\n        }\n\n        static get categoryName() {\n            return \"general\";\n        }\n\n        static get addonName(){\n            return \"pen\";\n        }\n\n    };\n\n    AddonPen.register(CodeGround);\n\n    return AddonPen;\n});"]}