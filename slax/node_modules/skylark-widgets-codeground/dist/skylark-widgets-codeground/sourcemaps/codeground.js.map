{"version":3,"sources":["codeground.js"],"names":["define","skylark","langx","Widget","styler","datax","noder","util","template","addons","Codeground","klassName","pluginName","options","files","showBlank","runScripts","pane","debounce","general","[object Object]","this","gerneral","push","super","_init","_cached","html","css","js","$container","_elm","paneActive","_paneActive","_velm","container","addClass","containerClass","paneActiveClass","on","change","bind","_$status","type","codes","_markup","_setCodes","hasFileClass","$parent","$","find","append","createElement","innerHTML","editorContent","className","editorClass","content","code","isString","val","e","data","target","cached","value","emit","file","clone","_load","errs","params","status","oldPaneActive","elmx","removeClass","preventDefault","statusType","messages","length","clearStatus","$status","_get","statusClass","statusActiveClass","markup","forEach","err","statusMessage","attach"],"mappings":"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","file":"../codeground.js","sourcesContent":["define([\n    'skylark-langx/skylark',\n    'skylark-langx/langx',\n    'skylark-widgets-base/widget',\n    \"skylark-domx-styler\",\n    \"skylark-domx-data\",\n    \"skylark-domx-noder\",\n    './util',\n    './template',\n    \"./addons\"\n], function (skylark,langx,Widget, styler,datax,noder,util, template,addons) {\n    'use strict';\n\n    class Codeground extends Widget{\n        get klassName() {\n          return \"Codeground\";\n        } \n\n        get pluginName(){\n          return \"lark.Codeground\";\n        } \n\n        //default options\n        get options () {\n            return {\n                files: [],\n                showBlank: false,\n                runScripts: true,\n                pane: 'result',\n                debounce: 250,\n                addons: {\n                    \"general\" : [\"render\"]\n                }\n            }\n        }\n\n        _init () {\n  \n            var options = this.options;\n            if (options.runScripts === false) {\n                options.addons.gerneral.push('scriptless');\n            }\n\n            super._init();\n\n            this._cached =  {\n                html: null,\n                css: null,\n                js: null\n            };\n\n            var $container = this.$container = this._elm;\n\n            var paneActive = this._paneActive = options.pane;\n\n            var velm = this._velm;\n            velm.html(template.container())\n                .addClass(template.containerClass())\n                .addClass(template.paneActiveClass(paneActive))\n                ///.on('keyup', langx.debounce(this.change.bind(this), options.debounce))\n                .on('change', langx.debounce(this.change.bind(this), options.debounce))\n                .on('click', this.pane.bind(this));\n\n            this._$status =  {};\n\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                if (this.options.codes[type] !== false) {\n                    this._markup(type);\n                }\n            }\n            this._setCodes(this.options.codes);\n        }\n\n        _startup() {\n            var options = this.options;\n            this.paneActive = this._paneActive;\n\n            if (options.showBlank) {\n                for (let type of [\n                        'html',\n                        'css',\n                        'js'\n                    ]) {\n                    this._velm.addClass(template.hasFileClass(type));\n                }\n            }\n\n        }\n\n        _markup(type) {\n            var $container = this._elm;\n            var $parent = this.$().find(`.codeg-pane-${ type }`);\n\n            $parent.append(noder.createElement(\"div\",{\n                innerHTML : template.editorContent(type),\n                className : template.editorClass(type)\n            }));\n            this._$status[type] = $parent.find('.codeg-status');\n             styler.addClass($container, template.hasFileClass(type));\n        }\n\n        _load(type) {\n            var cached = this._cached,\n                code = cached[type] || {},\n                content;\n\n            if (langx.isString(code)) {\n                content = code;\n            } else {\n                content = code.content || \"\";\n            }\n            var $textarea = this.$(`.codeg-pane-${ type } textarea`);\n            $textarea.val(content);\n        }\n\n\n        change(e) {\n            var type = datax.data(e.target, 'codeg-type');\n            if (!type) {\n                return;\n            }\n            var cached = this._cached;\n            if (cached[type] === e.target.value) {\n                return;\n            }\n            cached[type] = e.target.value;\n            this.emit('changed', {\n                type: type,\n                file: datax.data(e.target, 'codeg-file'),\n                content: cached[type]\n            });\n        }\n\n        getCodes() {\n            return langx.clone(this._cached);\n        }\n\n        _setCodes(codes) {\n            var cached = this._cached;\n            cached.html = codes.html || null;\n            cached.css = codes.css || null;\n            cached.js = codes.js || null;\n\n            for (let type of [\n                    'html',\n                    'css',\n                    'js'\n                ]) {\n                this._load(type);\n            }\n        }\n\n        resetCodes(codes) {\n            this._setCodes(codes);\n            this.emit(\"reseted\");\n            return this;\n        }\n\n        errors(errs, params) {\n            this.status('error', errs, params);\n        }\n\n        pane(e) {\n            if (!datax.data(e.target, 'codeg-type')) {\n                return;\n            }\n           let oldPaneActive = this._paneActive,\n                paneActive = this._paneActive = datax.data(e.target, 'codeg-type');\n            this.elmx().removeClass(template.paneActiveClass(oldPaneActive))\n                       .addClass(template.paneActiveClass(paneActive));\n            e.preventDefault();\n        }\n\n        status(statusType = 'error', messages = [], params = {}) {\n            if (!messages.length) {\n                return this.clearStatus(statusType, params);\n            }\n            var $status = this._get('$status');\n            styler.addClass($status[params.type], template.statusClass(statusType));\n            //styler.addClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.addClass(this._elm, template.statusActiveClass(params.type));\n            var markup = '';\n            messages.forEach(function (err) {\n                markup += template.statusMessage(err);\n            });\n            $status[params.type].innerHTML = markup;\n        }\n        clearStatus(statusType, params) {\n            var $status = this._get('$status');\n            styler.removeClass($status[params.type], template.statusClass(statusType));\n            //styler.removeClass(this._get('$container'), template.statusActiveClass(params.type));\n            styler.removeClass(this._elm, template.statusActiveClass(params.type));\n            $status[params.type].innerHTML = '';\n        }\n    }\n    Codeground.addons = addons;\n\n    return skylark.attach(\"widgets.Codeground\",Codeground);\n});"]}