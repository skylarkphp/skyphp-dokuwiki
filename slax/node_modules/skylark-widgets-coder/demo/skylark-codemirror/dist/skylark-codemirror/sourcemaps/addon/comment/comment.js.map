{"version":3,"sources":["addon/comment/comment.js"],"names":["define","CodeMirror","noOptions","nonWS","Pos","firstNonWS","str","found","search","getMode","cm","pos","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","minLine","Infinity","ranges","this","listSelections","i","length","from","to","line","uncomment","lineComment","self","firstLine","getLine","test","getTokenTypeAt","commentString","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","blockCommentStart","fullLines","blockComment","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","didSomething","start","lineString","lines","indexOf","push","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","foundEnd"],"mappings":"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","file":"../../../addon/comment/comment.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        self.replaceRange(endString, to);\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"]}