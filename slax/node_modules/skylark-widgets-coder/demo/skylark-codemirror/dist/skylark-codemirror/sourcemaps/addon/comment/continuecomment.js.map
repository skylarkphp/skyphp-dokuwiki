{"version":3,"sources":["addon/comment/continuecomment.js"],"names":["define","CodeMirror","continueComment","cm","getOption","Pass","mode","ranges","listSelections","inserts","i","length","pos","head","test","getTokenTypeAt","modeHere","getModeAt","insert","blockCommentStart","blockCommentContinue","line","found","end","getLine","slice","ch","lastIndexOf","blockCommentEnd","j","indexOf","lineComment","continueLineCommentEnabled","match","operation","replaceRange","from","to","opt","continueLineComment","defineOption","val","prev","Init","removeKeyMap","key","map","name","addKeyMap"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GACpC,SAASC,EAAgBC,GACvB,GAAIA,EAAGC,UAAU,gBAAiB,OAAOH,EAAWI,KAEpD,IADA,IAAkCC,EAA9BC,EAASJ,EAAGK,iBAAwBC,KAC/BC,EAAI,EAAGA,EAAIH,EAAOI,OAAQD,IAAK,CACtC,IAAIE,EAAML,EAAOG,GAAGG,KACpB,IAAK,cAAcC,KAAKX,EAAGY,eAAeH,IAAO,OAAOX,EAAWI,KACnE,IAAIW,EAAWb,EAAGc,UAAUL,GAC5B,GAAKN,GACA,GAAIA,GAAQU,EAAU,OAAOf,EAAWI,UADlCC,EAAOU,EAGlB,IAAIE,EAAS,KACb,GAAIZ,EAAKa,mBAAqBb,EAAKc,qBAAsB,CACvD,IAAIC,EAC8CC,EAA9CC,GADAF,EAAOlB,EAAGqB,QAAQZ,EAAIS,MAAMI,MAAM,EAAGb,EAAIc,KAC9BC,YAAYrB,EAAKsB,iBAChC,IAAY,GAARL,GAAaA,GAAOX,EAAIc,GAAKpB,EAAKsB,gBAAgBjB,aAE/C,IAAKW,EAAQD,EAAKM,YAAYrB,EAAKa,qBAAuB,GAAKG,EAAQC,GAE5E,GADAL,EAASG,EAAKI,MAAM,EAAGH,GACnB,KAAKR,KAAKI,GAAS,CACrBA,EAAS,GACT,IAAK,IAAIW,EAAI,EAAGA,EAAIP,IAASO,EAAGX,GAAU,UAElCI,EAAQD,EAAKS,QAAQxB,EAAKc,wBAA0B,IAAM,KAAKN,KAAKO,EAAKI,MAAM,EAAGH,MAC5FJ,EAASG,EAAKI,MAAM,EAAGH,IAEX,MAAVJ,IAAgBA,GAAUZ,EAAKc,sBAErC,GAAc,MAAVF,GAAkBZ,EAAKyB,aAAeC,EAA2B7B,IAClCmB,GAA7BD,EAAOlB,EAAGqB,QAAQZ,EAAIS,OAAoBS,QAAQxB,EAAKyB,eAC9C,IACXb,EAASG,EAAKI,MAAM,EAAGH,GACnB,KAAKR,KAAKI,GAASA,EAAS,KAC3BA,GAAUZ,EAAKyB,YAAcV,EAAKI,MAAMH,EAAQhB,EAAKyB,YAAYpB,QAAQsB,MAAM,QAAQ,IAGhG,GAAc,MAAVf,EAAgB,OAAOjB,EAAWI,KACtCI,EAAQC,GAAK,KAAOQ,EAGtBf,EAAG+B,UAAU,WACX,IAAK,IAAIxB,EAAIH,EAAOI,OAAS,EAAGD,GAAK,EAAGA,IACtCP,EAAGgC,aAAa1B,EAAQC,GAAIH,EAAOG,GAAG0B,OAAQ7B,EAAOG,GAAG2B,KAAM,aAIpE,SAASL,EAA2B7B,GAClC,IAAImC,EAAMnC,EAAGC,UAAU,oBACvB,OAAIkC,GAAqB,iBAAPA,IACmB,IAA5BA,EAAIC,oBAIftC,EAAWuC,aAAa,mBAAoB,KAAM,SAASrC,EAAIsC,EAAKC,GAGlE,GAFIA,GAAQA,GAAQzC,EAAW0C,MAC7BxC,EAAGyC,aAAa,mBACdH,EAAK,CACP,IAAII,EAAM,QACQ,iBAAPJ,EACTI,EAAMJ,EACe,iBAAPA,GAAmBA,EAAII,MACrCA,EAAMJ,EAAII,KACZ,IAAIC,GAAOC,KAAM,mBACjBD,EAAID,GAAO3C,EACXC,EAAG6C,UAAUF","file":"../../../addon/comment/continuecomment.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  function continueComment(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), mode, inserts = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var pos = ranges[i].head\n      if (!/\\bcomment\\b/.test(cm.getTokenTypeAt(pos))) return CodeMirror.Pass;\n      var modeHere = cm.getModeAt(pos)\n      if (!mode) mode = modeHere;\n      else if (mode != modeHere) return CodeMirror.Pass;\n\n      var insert = null;\n      if (mode.blockCommentStart && mode.blockCommentContinue) {\n        var line = cm.getLine(pos.line).slice(0, pos.ch)\n        var end = line.lastIndexOf(mode.blockCommentEnd), found\n        if (end != -1 && end == pos.ch - mode.blockCommentEnd.length) {\n          // Comment ended, don't continue it\n        } else if ((found = line.lastIndexOf(mode.blockCommentStart)) > -1 && found > end) {\n          insert = line.slice(0, found)\n          if (/\\S/.test(insert)) {\n            insert = \"\"\n            for (var j = 0; j < found; ++j) insert += \" \"\n          }\n        } else if ((found = line.indexOf(mode.blockCommentContinue)) > -1 && !/\\S/.test(line.slice(0, found))) {\n          insert = line.slice(0, found)\n        }\n        if (insert != null) insert += mode.blockCommentContinue\n      }\n      if (insert == null && mode.lineComment && continueLineCommentEnabled(cm)) {\n        var line = cm.getLine(pos.line), found = line.indexOf(mode.lineComment);\n        if (found > -1) {\n          insert = line.slice(0, found);\n          if (/\\S/.test(insert)) insert = null;\n          else insert += mode.lineComment + line.slice(found + mode.lineComment.length).match(/^\\s*/)[0];\n        }\n      }\n      if (insert == null) return CodeMirror.Pass;\n      inserts[i] = \"\\n\" + insert;\n    }\n\n    cm.operation(function() {\n      for (var i = ranges.length - 1; i >= 0; i--)\n        cm.replaceRange(inserts[i], ranges[i].from(), ranges[i].to(), \"+insert\");\n    });\n  }\n\n  function continueLineCommentEnabled(cm) {\n    var opt = cm.getOption(\"continueComments\");\n    if (opt && typeof opt == \"object\")\n      return opt.continueLineComment !== false;\n    return true;\n  }\n\n  CodeMirror.defineOption(\"continueComments\", null, function(cm, val, prev) {\n    if (prev && prev != CodeMirror.Init)\n      cm.removeKeyMap(\"continueComment\");\n    if (val) {\n      var key = \"Enter\";\n      if (typeof val == \"string\")\n        key = val;\n      else if (typeof val == \"object\" && val.key)\n        key = val.key;\n      var map = {name: \"continueComment\"};\n      map[key] = continueComment;\n      cm.addKeyMap(map);\n    }\n  });\n});\n"]}