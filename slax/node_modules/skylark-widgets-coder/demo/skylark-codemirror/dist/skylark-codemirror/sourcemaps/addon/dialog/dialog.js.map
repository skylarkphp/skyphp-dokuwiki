{"version":3,"sources":["addon/dialog/dialog.js"],"names":["define","CodeMirror","dialogDiv","cm","template","bottom","dialog","wrap","getWrapperElement","appendChild","document","createElement","className","innerHTML","addClass","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","this","closed","me","close","inp","value","rmClass","parentNode","removeChild","focus","onClose","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout"],"mappings":"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","file":"../../../addon/dialog/dialog.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(inp, \"blur\", close);\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n"]}