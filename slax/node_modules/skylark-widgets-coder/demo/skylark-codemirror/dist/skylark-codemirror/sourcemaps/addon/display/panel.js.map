{"version":3,"sources":["addon/display/panel.js"],"names":["define","CodeMirror","Panel","cm","node","options","height","this","cleared","isAtTop","dom","sibling","nextSibling","getWrapperElement","defineExtension","state","panels","wrap","style","window","getComputedStyle","currentStyle","parseInt","info","setHeight","heightLeft","wrapper","document","createElement","parentNode","insertBefore","hasFocus","appendChild","focus","_setSize","setSize","width","newHeight","px","exec","Number","offsetHeight","initPanels","cmWrapper","replace","after","before","clear","position","firstChild","stable","scrollTo","getScrollInfo","top","prototype","removeChild","replaceChild","removePanels","changed"],"mappings":"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","file":"../../../addon/display/panel.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  CodeMirror.defineExtension(\"addPanel\", function(node, options) {\n    options = options || {};\n\n    if (!this.state.panels) initPanels(this);\n\n    var info = this.state.panels;\n    var wrapper = info.wrapper;\n    var cmWrapper = this.getWrapperElement();\n    var replace = options.replace instanceof Panel && !options.replace.cleared;\n\n    if (options.after instanceof Panel && !options.after.cleared) {\n      wrapper.insertBefore(node, options.before.node.nextSibling);\n    } else if (options.before instanceof Panel && !options.before.cleared) {\n      wrapper.insertBefore(node, options.before.node);\n    } else if (replace) {\n      wrapper.insertBefore(node, options.replace.node);\n      info.panels++;\n      options.replace.clear();\n    } else if (options.position == \"bottom\") {\n      wrapper.appendChild(node);\n    } else if (options.position == \"before-bottom\") {\n      wrapper.insertBefore(node, cmWrapper.nextSibling);\n    } else if (options.position == \"after-top\") {\n      wrapper.insertBefore(node, cmWrapper);\n    } else {\n      wrapper.insertBefore(node, wrapper.firstChild);\n    }\n\n    var height = (options && options.height) || node.offsetHeight;\n    this._setSize(null, info.heightLeft -= height);\n    if (!replace) {\n      info.panels++;\n    }\n    if (options.stable && isAtTop(this, node))\n      this.scrollTo(null, this.getScrollInfo().top + height)\n\n    return new Panel(this, node, options, height);\n  });\n\n  function Panel(cm, node, options, height) {\n    this.cm = cm;\n    this.node = node;\n    this.options = options;\n    this.height = height;\n    this.cleared = false;\n  }\n\n  Panel.prototype.clear = function() {\n    if (this.cleared) return;\n    this.cleared = true;\n    var info = this.cm.state.panels;\n    this.cm._setSize(null, info.heightLeft += this.height);\n    if (this.options.stable && isAtTop(this.cm, this.node))\n      this.cm.scrollTo(null, this.cm.getScrollInfo().top - this.height)\n    info.wrapper.removeChild(this.node);\n    if (--info.panels == 0) removePanels(this.cm);\n  };\n\n  Panel.prototype.changed = function(height) {\n    var newHeight = height == null ? this.node.offsetHeight : height;\n    var info = this.cm.state.panels;\n    this.cm._setSize(null, info.heightLeft -= (newHeight - this.height));\n    this.height = newHeight;\n  };\n\n  function initPanels(cm) {\n    var wrap = cm.getWrapperElement();\n    var style = window.getComputedStyle ? window.getComputedStyle(wrap) : wrap.currentStyle;\n    var height = parseInt(style.height);\n    var info = cm.state.panels = {\n      setHeight: wrap.style.height,\n      heightLeft: height,\n      panels: 0,\n      wrapper: document.createElement(\"div\")\n    };\n    wrap.parentNode.insertBefore(info.wrapper, wrap);\n    var hasFocus = cm.hasFocus();\n    info.wrapper.appendChild(wrap);\n    if (hasFocus) cm.focus();\n\n    cm._setSize = cm.setSize;\n    if (height != null) cm.setSize = function(width, newHeight) {\n      if (newHeight == null) return this._setSize(width, newHeight);\n      info.setHeight = newHeight;\n      if (typeof newHeight != \"number\") {\n        var px = /^(\\d+\\.?\\d*)px$/.exec(newHeight);\n        if (px) {\n          newHeight = Number(px[1]);\n        } else {\n          info.wrapper.style.height = newHeight;\n          newHeight = info.wrapper.offsetHeight;\n          info.wrapper.style.height = \"\";\n        }\n      }\n      cm._setSize(width, info.heightLeft += (newHeight - height));\n      height = newHeight;\n    };\n  }\n\n  function removePanels(cm) {\n    var info = cm.state.panels;\n    cm.state.panels = null;\n\n    var wrap = cm.getWrapperElement();\n    info.wrapper.parentNode.replaceChild(wrap, info.wrapper);\n    wrap.style.height = info.setHeight;\n    cm.setSize = cm._setSize;\n    cm.setSize();\n  }\n\n  function isAtTop(cm, dom) {\n    for (var sibling = dom.nextSibling; sibling; sibling = sibling.nextSibling)\n      if (sibling == cm.getWrapperElement()) return true\n    return false\n  }\n});\n"]}