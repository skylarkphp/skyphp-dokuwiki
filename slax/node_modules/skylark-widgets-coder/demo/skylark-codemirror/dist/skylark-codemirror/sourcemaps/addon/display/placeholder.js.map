{"version":3,"sources":["addon/display/placeholder.js"],"names":["define","CodeMirror","clearPlaceholder","cm","state","placeholder","parentNode","removeChild","setPlaceholder","elt","document","createElement","style","cssText","direction","getOption","className","placeHolder","createTextNode","appendChild","display","lineSpace","insertBefore","firstChild","onBlur","isEmpty","onChange","wrapper","getWrapperElement","empty","replace","lineCount","getLine","defineOption","val","old","prev","Init","on","off","hasFocus"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GAoBpC,SAASC,EAAiBC,GACpBA,EAAGC,MAAMC,cACXF,EAAGC,MAAMC,YAAYC,WAAWC,YAAYJ,EAAGC,MAAMC,aACrDF,EAAGC,MAAMC,YAAc,MAG3B,SAASG,EAAeL,GACtBD,EAAiBC,GACjB,IAAIM,EAAMN,EAAGC,MAAMC,YAAcK,SAASC,cAAc,OACxDF,EAAIG,MAAMC,QAAU,+BACpBJ,EAAIG,MAAME,UAAYX,EAAGY,UAAU,aACnCN,EAAIO,UAAY,yBAChB,IAAIC,EAAcd,EAAGY,UAAU,eACL,iBAAfE,IAAyBA,EAAcP,SAASQ,eAAeD,IAC1ER,EAAIU,YAAYF,GAChBd,EAAGiB,QAAQC,UAAUC,aAAab,EAAKN,EAAGiB,QAAQC,UAAUE,YAG9D,SAASC,EAAOrB,GACVsB,EAAQtB,IAAKK,EAAeL,GAElC,SAASuB,EAASvB,GAChB,IAAIwB,EAAUxB,EAAGyB,oBAAqBC,EAAQJ,EAAQtB,GACtDwB,EAAQX,UAAYW,EAAQX,UAAUc,QAAQ,oBAAqB,KAAOD,EAAQ,oBAAsB,IAEpGA,EAAOrB,EAAeL,GACrBD,EAAiBC,GAGxB,SAASsB,EAAQtB,GACf,OAA2B,IAAnBA,EAAG4B,aAAyC,KAAlB5B,EAAG6B,QAAQ,GAjD/C/B,EAAWgC,aAAa,cAAe,GAAI,SAAS9B,EAAI+B,EAAKC,GAC3D,IAAIC,EAAOD,GAAOA,GAAOlC,EAAWoC,KACpC,GAAIH,IAAQE,EACVjC,EAAGmC,GAAG,OAAQd,GACdrB,EAAGmC,GAAG,SAAUZ,GAChBvB,EAAGmC,GAAG,UAAWZ,GACjBA,EAASvB,QACJ,IAAK+B,GAAOE,EAAM,CACvBjC,EAAGoC,IAAI,OAAQf,GACfrB,EAAGoC,IAAI,SAAUb,GACjBvB,EAAGoC,IAAI,UAAWb,GAClBxB,EAAiBC,GACjB,IAAIwB,EAAUxB,EAAGyB,oBACjBD,EAAQX,UAAYW,EAAQX,UAAUc,QAAQ,oBAAqB,IAGjEI,IAAQ/B,EAAGqC,YAAYhB,EAAOrB","file":"../../../addon/display/placeholder.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  CodeMirror.defineOption(\"placeholder\", \"\", function(cm, val, old) {\n    var prev = old && old != CodeMirror.Init;\n    if (val && !prev) {\n      cm.on(\"blur\", onBlur);\n      cm.on(\"change\", onChange);\n      cm.on(\"swapDoc\", onChange);\n      onChange(cm);\n    } else if (!val && prev) {\n      cm.off(\"blur\", onBlur);\n      cm.off(\"change\", onChange);\n      cm.off(\"swapDoc\", onChange);\n      clearPlaceholder(cm);\n      var wrapper = cm.getWrapperElement();\n      wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\");\n    }\n\n    if (val && !cm.hasFocus()) onBlur(cm);\n  });\n\n  function clearPlaceholder(cm) {\n    if (cm.state.placeholder) {\n      cm.state.placeholder.parentNode.removeChild(cm.state.placeholder);\n      cm.state.placeholder = null;\n    }\n  }\n  function setPlaceholder(cm) {\n    clearPlaceholder(cm);\n    var elt = cm.state.placeholder = document.createElement(\"pre\");\n    elt.style.cssText = \"height: 0; overflow: visible\";\n    elt.style.direction = cm.getOption(\"direction\");\n    elt.className = \"CodeMirror-placeholder\";\n    var placeHolder = cm.getOption(\"placeholder\")\n    if (typeof placeHolder == \"string\") placeHolder = document.createTextNode(placeHolder)\n    elt.appendChild(placeHolder)\n    cm.display.lineSpace.insertBefore(elt, cm.display.lineSpace.firstChild);\n  }\n\n  function onBlur(cm) {\n    if (isEmpty(cm)) setPlaceholder(cm);\n  }\n  function onChange(cm) {\n    var wrapper = cm.getWrapperElement(), empty = isEmpty(cm);\n    wrapper.className = wrapper.className.replace(\" CodeMirror-empty\", \"\") + (empty ? \" CodeMirror-empty\" : \"\");\n\n    if (empty) setPlaceholder(cm);\n    else clearPlaceholder(cm);\n  }\n\n  function isEmpty(cm) {\n    return (cm.lineCount() === 1) && (cm.getLine(0) === \"\");\n  }\n});\n"]}