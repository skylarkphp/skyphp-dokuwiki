{"version":3,"sources":["addon/edit/closetag.js"],"names":["define","CodeMirror","defineOption","cm","val","old","Init","removeKeyMap","map","name","whenClosing","getOption","Pass","autoCloseCurrent","autoCloseSlash","whenOpening","ranges","listSelections","replacements","opt","i","length","empty","pos","head","tok","getTokenAt","inner","innerMode","getMode","state","mode","tagName","html","configuration","dontCloseTags","htmlDontClose","indentTags","htmlIndent","end","ch","slice","lowerTagName","toLowerCase","type","test","string","charAt","indexOf","closingTagExists","indent","text","newPos","Pos","line","dontIndentOnAutoClose","info","replaceRange","anchor","sel","setSelections","indentLine","autoCloseGT","addKeyMap","typingSlash","dontIndentOnSlash","replacement","start","context","getLine","replaceSelections","collection","elt","e","newTag","scanForClosingTag","Math","min","lastLine","nextClose","tag","cx","onCx","prev","to","next","commands","closeTag"],"mappings":"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","file":"../../../addon/edit/closetag.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**\n * Tag-closer extension for CodeMirror.\n *\n * This extension adds an \"autoCloseTags\" option that can be set to\n * either true to get the default behavior, or an object to further\n * configure its behavior.\n *\n * These are supported options:\n *\n * `whenClosing` (default true)\n *   Whether to autoclose when the '/' of a closing tag is typed.\n * `whenOpening` (default true)\n *   Whether to autoclose the tag when the final '>' of an opening\n *   tag is typed.\n * `dontCloseTags` (default is empty tags for HTML, none for XML)\n *   An array of tag names that should not be autoclosed.\n * `indentTags` (default is block tags for HTML, none for XML)\n *   An array of tag names that should, when opened, cause a\n *   blank line to be added inside the tag, and the blank line and\n *   closing line to be indented.\n *\n * See demos/closetag.html for a usage example.\n */\n\ndefine([\"../../CodeMirror\", \"../fold/xml-fold\"],function(CodeMirror) {\n  CodeMirror.defineOption(\"autoCloseTags\", false, function(cm, val, old) {\n    if (old != CodeMirror.Init && old)\n      cm.removeKeyMap(\"autoCloseTags\");\n    if (!val) return;\n    var map = {name: \"autoCloseTags\"};\n    if (typeof val != \"object\" || val.whenClosing)\n      map[\"'/'\"] = function(cm) { return autoCloseSlash(cm); };\n    if (typeof val != \"object\" || val.whenOpening)\n      map[\"'>'\"] = function(cm) { return autoCloseGT(cm); };\n    cm.addKeyMap(map);\n  });\n\n  var htmlDontClose = [\"area\", \"base\", \"br\", \"col\", \"command\", \"embed\", \"hr\", \"img\", \"input\", \"keygen\", \"link\", \"meta\", \"param\",\n                       \"source\", \"track\", \"wbr\"];\n  var htmlIndent = [\"applet\", \"blockquote\", \"body\", \"button\", \"div\", \"dl\", \"fieldset\", \"form\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\",\n                    \"h5\", \"h6\", \"head\", \"html\", \"iframe\", \"layer\", \"legend\", \"object\", \"ol\", \"p\", \"select\", \"table\", \"ul\"];\n\n  function autoCloseGT(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    var ranges = cm.listSelections(), replacements = [];\n    var opt = cm.getOption(\"autoCloseTags\");\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (inner.mode.name != \"xml\" || !state.tagName) return CodeMirror.Pass;\n\n      var html = inner.mode.configuration == \"html\";\n      var dontCloseTags = (typeof opt == \"object\" && opt.dontCloseTags) || (html && htmlDontClose);\n      var indentTags = (typeof opt == \"object\" && opt.indentTags) || (html && htmlIndent);\n\n      var tagName = state.tagName;\n      if (tok.end > pos.ch) tagName = tagName.slice(0, tagName.length - tok.end + pos.ch);\n      var lowerTagName = tagName.toLowerCase();\n      // Don't process the '>' at the end of an end-tag or self-closing tag\n      if (!tagName ||\n          tok.type == \"string\" && (tok.end != pos.ch || !/[\\\"\\']/.test(tok.string.charAt(tok.string.length - 1)) || tok.string.length == 1) ||\n          tok.type == \"tag\" && state.type == \"closeTag\" ||\n          tok.string.indexOf(\"/\") == (tok.string.length - 1) || // match something like <someTagName />\n          dontCloseTags && indexOf(dontCloseTags, lowerTagName) > -1 ||\n          closingTagExists(cm, tagName, pos, state, true))\n        return CodeMirror.Pass;\n\n      var indent = indentTags && indexOf(indentTags, lowerTagName) > -1;\n      replacements[i] = {indent: indent,\n                         text: \">\" + (indent ? \"\\n\\n\" : \"\") + \"</\" + tagName + \">\",\n                         newPos: indent ? CodeMirror.Pos(pos.line + 1, 0) : CodeMirror.Pos(pos.line, pos.ch + 1)};\n    }\n\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnAutoClose);\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var info = replacements[i];\n      cm.replaceRange(info.text, ranges[i].head, ranges[i].anchor, \"+insert\");\n      var sel = cm.listSelections().slice(0);\n      sel[i] = {head: info.newPos, anchor: info.newPos};\n      cm.setSelections(sel);\n      if (!dontIndentOnAutoClose && info.indent) {\n        cm.indentLine(info.newPos.line, null, true);\n        cm.indentLine(info.newPos.line + 1, null, true);\n      }\n    }\n  }\n\n  function autoCloseCurrent(cm, typingSlash) {\n    var ranges = cm.listSelections(), replacements = [];\n    var head = typingSlash ? \"/\" : \"</\";\n    var opt = cm.getOption(\"autoCloseTags\");\n    var dontIndentOnAutoClose = (typeof opt == \"object\" && opt.dontIndentOnSlash);\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var pos = ranges[i].head, tok = cm.getTokenAt(pos);\n      var inner = CodeMirror.innerMode(cm.getMode(), tok.state), state = inner.state;\n      if (typingSlash && (tok.type == \"string\" || tok.string.charAt(0) != \"<\" ||\n                          tok.start != pos.ch - 1))\n        return CodeMirror.Pass;\n      // Kludge to get around the fact that we are not in XML mode\n      // when completing in JS/CSS snippet in htmlmixed mode. Does not\n      // work for other XML embedded languages (there is no general\n      // way to go from a mixed mode to its current XML state).\n      var replacement;\n      if (inner.mode.name != \"xml\") {\n        if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"javascript\")\n          replacement = head + \"script\";\n        else if (cm.getMode().name == \"htmlmixed\" && inner.mode.name == \"css\")\n          replacement = head + \"style\";\n        else\n          return CodeMirror.Pass;\n      } else {\n        if (!state.context || !state.context.tagName ||\n            closingTagExists(cm, state.context.tagName, pos, state))\n          return CodeMirror.Pass;\n        replacement = head + state.context.tagName;\n      }\n      if (cm.getLine(pos.line).charAt(tok.end) != \">\") replacement += \">\";\n      replacements[i] = replacement;\n    }\n    cm.replaceSelections(replacements);\n    ranges = cm.listSelections();\n    if (!dontIndentOnAutoClose) {\n        for (var i = 0; i < ranges.length; i++)\n            if (i == ranges.length - 1 || ranges[i].head.line < ranges[i + 1].head.line)\n                cm.indentLine(ranges[i].head.line);\n    }\n  }\n\n  function autoCloseSlash(cm) {\n    if (cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n    return autoCloseCurrent(cm, true);\n  }\n\n  CodeMirror.commands.closeTag = function(cm) { return autoCloseCurrent(cm); };\n\n  function indexOf(collection, elt) {\n    if (collection.indexOf) return collection.indexOf(elt);\n    for (var i = 0, e = collection.length; i < e; ++i)\n      if (collection[i] == elt) return i;\n    return -1;\n  }\n\n  // If xml-fold is loaded, we use its functionality to try and verify\n  // whether a given tag is actually unclosed.\n  function closingTagExists(cm, tagName, pos, state, newTag) {\n    if (!CodeMirror.scanForClosingTag) return false;\n    var end = Math.min(cm.lastLine() + 1, pos.line + 500);\n    var nextClose = CodeMirror.scanForClosingTag(cm, pos, null, end);\n    if (!nextClose || nextClose.tag != tagName) return false;\n    var cx = state.context;\n    // If the immediate wrapping context contains onCx instances of\n    // the same tag, a closing tag only exists if there are at least\n    // that many closing tags of that type following.\n    for (var onCx = newTag ? 1 : 0; cx && cx.tagName == tagName; cx = cx.prev) ++onCx;\n    pos = nextClose.to;\n    for (var i = 1; i < onCx; i++) {\n      var next = CodeMirror.scanForClosingTag(cm, pos, null, end);\n      if (!next || next.tag != tagName) return false;\n      pos = next.to;\n    }\n    return true;\n  }\n});\n"]}