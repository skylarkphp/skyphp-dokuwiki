{"version":3,"sources":["addon/fold/brace-fold.js"],"names":["define","CodeMirror","registerHelper","cm","start","tokenType","line","lineText","getLine","findOpening","openCh","at","ch","pass","found","lastIndexOf","getTokenTypeAt","Pos","test","length","startToken","endToken","startCh","end","endCh","count","lastLine","outer","i","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","hasImport","firstLine","getTokenAt","string","type","e","semi","prev","startLine","has","next","clipPos","hasInclude","slice"],"mappings":"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","file":"../../../addon/fold/brace-fold.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"]}