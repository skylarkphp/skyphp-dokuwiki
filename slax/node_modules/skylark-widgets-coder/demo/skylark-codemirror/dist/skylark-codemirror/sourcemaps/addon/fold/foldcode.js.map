{"version":3,"sources":["addon/fold/foldcode.js"],"names":["define","CodeMirror","doFold","cm","pos","options","force","call","finder","getOption","Pos","minSize","getRange","allowFolded","range","to","line","from","marks","findMarksAt","i","length","__isFold","cleared","clear","firstLine","myWidget","widget","text","document","createTextNode","createElement","appendChild","className","cloneNode","makeWidget","on","e","myRange","e_preventDefault","markText","replacedWith","clearOnEnter","signal","newFoldFunction","rangeFinder","defineExtension","this","commands","toggleFold","foldCode","getCursor","fold","unfold","foldAll","operation","lastLine","unfoldAll","registerHelper","funcs","Array","prototype","slice","arguments","start","found","helpers","getHelpers","cur","defaultOptions","auto","minFoldSize","scanUp","name","undefined","editorOptions","foldOptions","defineOption"],"mappings":"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","file":"../../../addon/fold/foldcode.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold && force !== \"fold\") {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options) {\n    var widget = getOption(cm, options, \"widget\");\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), null, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n"]}