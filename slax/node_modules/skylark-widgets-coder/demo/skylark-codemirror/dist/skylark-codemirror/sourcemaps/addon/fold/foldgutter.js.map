{"version":3,"sources":["addon/fold/foldgutter.js"],"names":["define","CodeMirror","defineOption","cm","val","old","Init","clearGutter","state","foldGutter","options","gutter","off","onGutterClick","onChange","onViewportChange","onFold","this","from","to","opts","indicatorOpen","indicatorFolded","parseOptions","updateInViewport","on","Pos","isFolded","line","marks","findMarks","i","length","__isFold","find","marker","spec","elt","document","createElement","className","cloneNode","updateFoldInfo","cur","minSize","foldOption","func","eachLine","mark","pos","range","setGutterMarker","vp","getViewport","operation","folded","clear","foldCode","rangeFinder","clearTimeout","changeUpdate","setTimeout","foldOnChangeTimeSpan","updateViewportTimeSpan"],"mappings":"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","file":"../../../addon/fold/foldgutter.js","sourcesContent":["define([\n  \"../../CodeMirror\", \n  \"./foldcode\"\n],function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"change\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"change\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold && marks[i].find().from.line == line) return marks[i];\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    cm.eachLine(from, to, function(line) {\n      var mark = null;\n      if (isFolded(cm, cur)) {\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize)\n          mark = marker(opts.indicatorOpen);\n      }\n      cm.setGutterMarker(line, opts.gutter, mark);\n      ++cur;\n    });\n  }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts.rangeFinder);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n"]}