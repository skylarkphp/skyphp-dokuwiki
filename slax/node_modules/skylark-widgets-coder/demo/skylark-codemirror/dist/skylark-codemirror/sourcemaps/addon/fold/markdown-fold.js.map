{"version":3,"sources":["addon/fold/markdown-fold.js"],"names":["define","CodeMirror","registerHelper","cm","start","maxDepth","isHeader","lineNo","tokentype","getTokenTypeAt","Pos","test","headerLevel","line","nextLine","match","length","firstLine","getLine","level","lastLineNo","lastLine","end","nextNextLine","from","to"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GACtC,aAEAA,EAAWC,eAAe,OAAQ,WAAY,SAASC,EAAIC,GACzD,IAAIC,EAAW,IAEf,SAASC,EAASC,GAChB,IAAIC,EAAYL,EAAGM,eAAeR,EAAWS,IAAIH,EAAQ,IACzD,OAAOC,GAAa,aAAaG,KAAKH,GAGxC,SAASI,EAAYL,EAAQM,EAAMC,GACjC,IAAIC,EAAQF,GAAQA,EAAKE,MAAM,OAC/B,OAAIA,GAAST,EAASC,GAAgBQ,EAAM,GAAGC,QAC/CD,EAAQD,GAAYA,EAASC,MAAM,iBACtBT,EAASC,EAAS,GAA0B,KAAfO,EAAS,GAAY,EAAI,EAC5DT,EAGT,IAAIY,EAAYd,EAAGe,QAAQd,EAAMS,MAAOC,EAAWX,EAAGe,QAAQd,EAAMS,KAAO,GACvEM,EAAQP,EAAYR,EAAMS,KAAMI,EAAWH,GAC/C,GAAIK,IAAUd,EAAd,CAIA,IAFA,IAAIe,EAAajB,EAAGkB,WAChBC,EAAMlB,EAAMS,KAAMU,EAAepB,EAAGe,QAAQI,EAAM,GAC/CA,EAAMF,KACPR,EAAYU,EAAM,EAAGR,EAAUS,IAAiBJ,MAClDG,EACFR,EAAWS,EACXA,EAAepB,EAAGe,QAAQI,EAAM,GAGlC,OACEE,KAAMvB,EAAWS,IAAIN,EAAMS,KAAMI,EAAUD,QAC3CS,GAAIxB,EAAWS,IAAIY,EAAKnB,EAAGe,QAAQI,GAAKN","file":"../../../addon/fold/markdown-fold.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"markdown\", function(cm, start) {\n  var maxDepth = 100;\n\n  function isHeader(lineNo) {\n    var tokentype = cm.getTokenTypeAt(CodeMirror.Pos(lineNo, 0));\n    return tokentype && /\\bheader\\b/.test(tokentype);\n  }\n\n  function headerLevel(lineNo, line, nextLine) {\n    var match = line && line.match(/^#+/);\n    if (match && isHeader(lineNo)) return match[0].length;\n    match = nextLine && nextLine.match(/^[=\\-]+\\s*$/);\n    if (match && isHeader(lineNo + 1)) return nextLine[0] == \"=\" ? 1 : 2;\n    return maxDepth;\n  }\n\n  var firstLine = cm.getLine(start.line), nextLine = cm.getLine(start.line + 1);\n  var level = headerLevel(start.line, firstLine, nextLine);\n  if (level === maxDepth) return undefined;\n\n  var lastLineNo = cm.lastLine();\n  var end = start.line, nextNextLine = cm.getLine(end + 2);\n  while (end < lastLineNo) {\n    if (headerLevel(end + 1, nextLine, nextNextLine) <= level) break;\n    ++end;\n    nextLine = nextNextLine;\n    nextNextLine = cm.getLine(end + 2);\n  }\n\n  return {\n    from: CodeMirror.Pos(start.line, firstLine.length),\n    to: CodeMirror.Pos(end, cm.getLine(end).length)\n  };\n});\n\n});\n"]}