{"version":3,"sources":["addon/fold/xml-fold.js"],"names":["define","CodeMirror","Pos","cmp","a","b","line","ch","nameStartChar","xmlTagStart","RegExp","Iter","cm","range","this","text","getLine","min","Math","max","from","firstLine","to","lastLine","tagAt","iter","type","getTokenTypeAt","test","nextLine","prevLine","length","toTagEnd","gt","indexOf","lastSlash","lastIndexOf","selfClose","slice","toTagStart","lt","lastIndex","match","exec","index","toNextTag","found","toPrevTag","findMatchingClose","tag","stack","end","next","startLine","startCh","i","push","findMatchingOpen","prev","endLine","endCh","start","registerHelper","openTag","startPos","endPos","findMatchingTag","pos","here","open","close","at","findEnclosingTag","scanForClosingTag","name"],"mappings":"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","file":"../../../addon/fold/xml-fold.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n\n  var Pos = CodeMirror.Pos;\n  function cmp(a, b) { return a.line - b.line || a.ch - b.ch; }\n\n  var nameStartChar = \"A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n  var nameChar = nameStartChar + \"\\-\\:\\.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\n  var xmlTagStart = new RegExp(\"<(/?)([\" + nameStartChar + \"][\" + nameChar + \"]*)\", \"g\");\n\n  function Iter(cm, line, ch, range) {\n    this.line = line; this.ch = ch;\n    this.cm = cm; this.text = cm.getLine(line);\n    this.min = range ? Math.max(range.from, cm.firstLine()) : cm.firstLine();\n    this.max = range ? Math.min(range.to - 1, cm.lastLine()) : cm.lastLine();\n  }\n\n  function tagAt(iter, ch) {\n    var type = iter.cm.getTokenTypeAt(Pos(iter.line, ch));\n    return type && /\\btag\\b/.test(type);\n  }\n\n  function nextLine(iter) {\n    if (iter.line >= iter.max) return;\n    iter.ch = 0;\n    iter.text = iter.cm.getLine(++iter.line);\n    return true;\n  }\n  function prevLine(iter) {\n    if (iter.line <= iter.min) return;\n    iter.text = iter.cm.getLine(--iter.line);\n    iter.ch = iter.text.length;\n    return true;\n  }\n\n  function toTagEnd(iter) {\n    for (;;) {\n      var gt = iter.text.indexOf(\">\", iter.ch);\n      if (gt == -1) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt + 1; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n  function toTagStart(iter) {\n    for (;;) {\n      var lt = iter.ch ? iter.text.lastIndexOf(\"<\", iter.ch - 1) : -1;\n      if (lt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, lt + 1)) { iter.ch = lt; continue; }\n      xmlTagStart.lastIndex = lt;\n      iter.ch = lt;\n      var match = xmlTagStart.exec(iter.text);\n      if (match && match.index == lt) return match;\n    }\n  }\n\n  function toNextTag(iter) {\n    for (;;) {\n      xmlTagStart.lastIndex = iter.ch;\n      var found = xmlTagStart.exec(iter.text);\n      if (!found) { if (nextLine(iter)) continue; else return; }\n      if (!tagAt(iter, found.index + 1)) { iter.ch = found.index + 1; continue; }\n      iter.ch = found.index + found[0].length;\n      return found;\n    }\n  }\n  function toPrevTag(iter) {\n    for (;;) {\n      var gt = iter.ch ? iter.text.lastIndexOf(\">\", iter.ch - 1) : -1;\n      if (gt == -1) { if (prevLine(iter)) continue; else return; }\n      if (!tagAt(iter, gt + 1)) { iter.ch = gt; continue; }\n      var lastSlash = iter.text.lastIndexOf(\"/\", gt);\n      var selfClose = lastSlash > -1 && !/\\S/.test(iter.text.slice(lastSlash + 1, gt));\n      iter.ch = gt + 1;\n      return selfClose ? \"selfClose\" : \"regular\";\n    }\n  }\n\n  function findMatchingClose(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var next = toNextTag(iter), end, startLine = iter.line, startCh = iter.ch - (next ? next[0].length : 0);\n      if (!next || !(end = toTagEnd(iter))) return;\n      if (end == \"selfClose\") continue;\n      if (next[1]) { // closing tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == next[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == next[2])) return {\n          tag: next[2],\n          from: Pos(startLine, startCh),\n          to: Pos(iter.line, iter.ch)\n        };\n      } else { // opening tag\n        stack.push(next[2]);\n      }\n    }\n  }\n  function findMatchingOpen(iter, tag) {\n    var stack = [];\n    for (;;) {\n      var prev = toPrevTag(iter);\n      if (!prev) return;\n      if (prev == \"selfClose\") { toTagStart(iter); continue; }\n      var endLine = iter.line, endCh = iter.ch;\n      var start = toTagStart(iter);\n      if (!start) return;\n      if (start[1]) { // closing tag\n        stack.push(start[2]);\n      } else { // opening tag\n        for (var i = stack.length - 1; i >= 0; --i) if (stack[i] == start[2]) {\n          stack.length = i;\n          break;\n        }\n        if (i < 0 && (!tag || tag == start[2])) return {\n          tag: start[2],\n          from: Pos(iter.line, iter.ch),\n          to: Pos(endLine, endCh)\n        };\n      }\n    }\n  }\n\n  CodeMirror.registerHelper(\"fold\", \"xml\", function(cm, start) {\n    var iter = new Iter(cm, start.line, 0);\n    for (;;) {\n      var openTag = toNextTag(iter)\n      if (!openTag || iter.line != start.line) return\n      var end = toTagEnd(iter)\n      if (!end) return\n      if (!openTag[1] && end != \"selfClose\") {\n        var startPos = Pos(iter.line, iter.ch);\n        var endPos = findMatchingClose(iter, openTag[2]);\n        return endPos && cmp(endPos.from, startPos) > 0 ? {from: startPos, to: endPos.from} : null\n      }\n    }\n  });\n  CodeMirror.findMatchingTag = function(cm, pos, range) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    if (iter.text.indexOf(\">\") == -1 && iter.text.indexOf(\"<\") == -1) return;\n    var end = toTagEnd(iter), to = end && Pos(iter.line, iter.ch);\n    var start = end && toTagStart(iter);\n    if (!end || !start || cmp(iter, pos) > 0) return;\n    var here = {from: Pos(iter.line, iter.ch), to: to, tag: start[2]};\n    if (end == \"selfClose\") return {open: here, close: null, at: \"open\"};\n\n    if (start[1]) { // closing tag\n      return {open: findMatchingOpen(iter, start[2]), close: here, at: \"close\"};\n    } else { // opening tag\n      iter = new Iter(cm, to.line, to.ch, range);\n      return {open: here, close: findMatchingClose(iter, start[2]), at: \"open\"};\n    }\n  };\n\n  CodeMirror.findEnclosingTag = function(cm, pos, range, tag) {\n    var iter = new Iter(cm, pos.line, pos.ch, range);\n    for (;;) {\n      var open = findMatchingOpen(iter, tag);\n      if (!open) break;\n      var forward = new Iter(cm, pos.line, pos.ch, range);\n      var close = findMatchingClose(forward, open.tag);\n      if (close) return {open: open, close: close};\n    }\n  };\n\n  // Used by addon/edit/closetag.js\n  CodeMirror.scanForClosingTag = function(cm, pos, name, end) {\n    var iter = new Iter(cm, pos.line, pos.ch, end ? {from: 0, to: end} : null);\n    return findMatchingClose(iter, name);\n  };\n});\n"]}