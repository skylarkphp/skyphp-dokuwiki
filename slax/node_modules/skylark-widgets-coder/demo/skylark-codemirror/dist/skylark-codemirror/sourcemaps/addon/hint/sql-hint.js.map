{"version":3,"sources":["addon/hint/sql-hint.js"],"names":["define","CodeMirror","tables","defaultTable","keywords","identifierQuote","CONS","QUERY_DIV","ALIAS_KEYWORD","Pos","cmpPos","isArray","val","Object","prototype","toString","call","getText","item","text","wrapTable","name","value","columns","getTable","toUpperCase","shallowClone","object","result","key","hasOwnProperty","match","string","word","len","length","sub","substr","addMatches","search","wordlist","formatter","i","push","displayText","cleanName","charAt","nameParts","split","replace","RegExp","join","insertIdentifierQuotes","escaped","eachWord","lineText","f","words","findTableByAlias","alias","editor","doc","fullQuery","getValue","aliasUpperCase","previousWord","table","separator","validRange","start","end","lastLine","getLineHandle","indexOfSeparator","indexOf","posFromIndex","unshift","prevItem","current","getCursor","query","getRange","wordUpperCase","registerHelper","options","input","parseTables","defaultTableName","disableKeywords","mode","modeOption","resolveMode","getKeywords","getIdentifierQuote","cur","token","getTokenAt","ch","slice","useIdentifierQuotes","cont","line","w","pop","aliasTable","oldTable","tableInsert","nameCompletion","objectOrClass","className","list","from","to"],"mappings":"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","file":"../../../addon/hint/sql-hint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\", \"../../mode/sql/sql\"], function(CodeMirror) {\n  \"use strict\";\n\n  var tables;\n  var defaultTable;\n  var keywords;\n  var identifierQuote;\n  var CONS = {\n    QUERY_DIV: \";\",\n    ALIAS_KEYWORD: \"AS\"\n  };\n  var Pos = CodeMirror.Pos, cmpPos = CodeMirror.cmpPos;\n\n  function isArray(val) { return Object.prototype.toString.call(val) == \"[object Array]\" }\n\n  function getKeywords(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).keywords;\n  }\n\n  function getIdentifierQuote(editor) {\n    var mode = editor.doc.modeOption;\n    if (mode === \"sql\") mode = \"text/x-sql\";\n    return CodeMirror.resolveMode(mode).identifierQuote || \"`\";\n  }\n\n  function getText(item) {\n    return typeof item == \"string\" ? item : item.text;\n  }\n\n  function wrapTable(name, value) {\n    if (isArray(value)) value = {columns: value}\n    if (!value.text) value.text = name\n    return value\n  }\n\n  function parseTables(input) {\n    var result = {}\n    if (isArray(input)) {\n      for (var i = input.length - 1; i >= 0; i--) {\n        var item = input[i]\n        result[getText(item).toUpperCase()] = wrapTable(getText(item), item)\n      }\n    } else if (input) {\n      for (var name in input)\n        result[name.toUpperCase()] = wrapTable(name, input[name])\n    }\n    return result\n  }\n\n  function getTable(name) {\n    return tables[name.toUpperCase()]\n  }\n\n  function shallowClone(object) {\n    var result = {};\n    for (var key in object) if (object.hasOwnProperty(key))\n      result[key] = object[key];\n    return result;\n  }\n\n  function match(string, word) {\n    var len = string.length;\n    var sub = getText(word).substr(0, len);\n    return string.toUpperCase() === sub.toUpperCase();\n  }\n\n  function addMatches(result, search, wordlist, formatter) {\n    if (isArray(wordlist)) {\n      for (var i = 0; i < wordlist.length; i++)\n        if (match(search, wordlist[i])) result.push(formatter(wordlist[i]))\n    } else {\n      for (var word in wordlist) if (wordlist.hasOwnProperty(word)) {\n        var val = wordlist[word]\n        if (!val || val === true)\n          val = word\n        else\n          val = val.displayText ? {text: val.text, displayText: val.displayText} : val.text\n        if (match(search, val)) result.push(formatter(val))\n      }\n    }\n  }\n\n  function cleanName(name) {\n    // Get rid name from identifierQuote and preceding dot(.)\n    if (name.charAt(0) == \".\") {\n      name = name.substr(1);\n    }\n    // replace doublicated identifierQuotes with single identifierQuotes\n    // and remove single identifierQuotes\n    var nameParts = name.split(identifierQuote+identifierQuote);\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = nameParts[i].replace(new RegExp(identifierQuote,\"g\"), \"\");\n    return nameParts.join(identifierQuote);\n  }\n\n  function insertIdentifierQuotes(name) {\n    var nameParts = getText(name).split(\".\");\n    for (var i = 0; i < nameParts.length; i++)\n      nameParts[i] = identifierQuote +\n        // doublicate identifierQuotes\n        nameParts[i].replace(new RegExp(identifierQuote,\"g\"), identifierQuote+identifierQuote) +\n        identifierQuote;\n    var escaped = nameParts.join(\".\");\n    if (typeof name == \"string\") return escaped;\n    name = shallowClone(name);\n    name.text = escaped;\n    return name;\n  }\n\n  function nameCompletion(cur, token, result, editor) {\n    // Try to complete table, column names and return start position of completion\n    var useIdentifierQuotes = false;\n    var nameParts = [];\n    var start = token.start;\n    var cont = true;\n    while (cont) {\n      cont = (token.string.charAt(0) == \".\");\n      useIdentifierQuotes = useIdentifierQuotes || (token.string.charAt(0) == identifierQuote);\n\n      start = token.start;\n      nameParts.unshift(cleanName(token.string));\n\n      token = editor.getTokenAt(Pos(cur.line, token.start));\n      if (token.string == \".\") {\n        cont = true;\n        token = editor.getTokenAt(Pos(cur.line, token.start));\n      }\n    }\n\n    // Try to complete table names\n    var string = nameParts.join(\".\");\n    addMatches(result, string, tables, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns from defaultTable\n    addMatches(result, string, defaultTable, function(w) {\n      return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n    });\n\n    // Try to complete columns\n    string = nameParts.pop();\n    var table = nameParts.join(\".\");\n\n    var alias = false;\n    var aliasTable = table;\n    // Check if table is available. If not, find table by Alias\n    if (!getTable(table)) {\n      var oldTable = table;\n      table = findTableByAlias(table, editor);\n      if (table !== oldTable) alias = true;\n    }\n\n    var columns = getTable(table);\n    if (columns && columns.columns)\n      columns = columns.columns;\n\n    if (columns) {\n      addMatches(result, string, columns, function(w) {\n        var tableInsert = table;\n        if (alias == true) tableInsert = aliasTable;\n        if (typeof w == \"string\") {\n          w = tableInsert + \".\" + w;\n        } else {\n          w = shallowClone(w);\n          w.text = tableInsert + \".\" + w.text;\n        }\n        return useIdentifierQuotes ? insertIdentifierQuotes(w) : w;\n      });\n    }\n\n    return start;\n  }\n\n  function eachWord(lineText, f) {\n    var words = lineText.split(/\\s+/)\n    for (var i = 0; i < words.length; i++)\n      if (words[i]) f(words[i].replace(/[,;]/g, ''))\n  }\n\n  function findTableByAlias(alias, editor) {\n    var doc = editor.doc;\n    var fullQuery = doc.getValue();\n    var aliasUpperCase = alias.toUpperCase();\n    var previousWord = \"\";\n    var table = \"\";\n    var separator = [];\n    var validRange = {\n      start: Pos(0, 0),\n      end: Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).length)\n    };\n\n    //add separator\n    var indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV);\n    while(indexOfSeparator != -1) {\n      separator.push(doc.posFromIndex(indexOfSeparator));\n      indexOfSeparator = fullQuery.indexOf(CONS.QUERY_DIV, indexOfSeparator+1);\n    }\n    separator.unshift(Pos(0, 0));\n    separator.push(Pos(editor.lastLine(), editor.getLineHandle(editor.lastLine()).text.length));\n\n    //find valid range\n    var prevItem = null;\n    var current = editor.getCursor()\n    for (var i = 0; i < separator.length; i++) {\n      if ((prevItem == null || cmpPos(current, prevItem) > 0) && cmpPos(current, separator[i]) <= 0) {\n        validRange = {start: prevItem, end: separator[i]};\n        break;\n      }\n      prevItem = separator[i];\n    }\n\n    if (validRange.start) {\n      var query = doc.getRange(validRange.start, validRange.end, false);\n\n      for (var i = 0; i < query.length; i++) {\n        var lineText = query[i];\n        eachWord(lineText, function(word) {\n          var wordUpperCase = word.toUpperCase();\n          if (wordUpperCase === aliasUpperCase && getTable(previousWord))\n            table = previousWord;\n          if (wordUpperCase !== CONS.ALIAS_KEYWORD)\n            previousWord = word;\n        });\n        if (table) break;\n      }\n    }\n    return table;\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"sql\", function(editor, options) {\n    tables = parseTables(options && options.tables)\n    var defaultTableName = options && options.defaultTable;\n    var disableKeywords = options && options.disableKeywords;\n    defaultTable = defaultTableName && getTable(defaultTableName);\n    keywords = getKeywords(editor);\n    identifierQuote = getIdentifierQuote(editor);\n\n    if (defaultTableName && !defaultTable)\n      defaultTable = findTableByAlias(defaultTableName, editor);\n\n    defaultTable = defaultTable || [];\n\n    if (defaultTable.columns)\n      defaultTable = defaultTable.columns;\n\n    var cur = editor.getCursor();\n    var result = [];\n    var token = editor.getTokenAt(cur), start, end, search;\n    if (token.end > cur.ch) {\n      token.end = cur.ch;\n      token.string = token.string.slice(0, cur.ch - token.start);\n    }\n\n    if (token.string.match(/^[.`\"\\w@]\\w*$/)) {\n      search = token.string;\n      start = token.start;\n      end = token.end;\n    } else {\n      start = end = cur.ch;\n      search = \"\";\n    }\n    if (search.charAt(0) == \".\" || search.charAt(0) == identifierQuote) {\n      start = nameCompletion(cur, token, result, editor);\n    } else {\n      var objectOrClass = function(w, className) {\n        if (typeof w === \"object\") {\n          w.className = className;\n        } else {\n          w = { text: w, className: className };\n        }\n        return w;\n      };\n    addMatches(result, search, defaultTable, function(w) {\n        return objectOrClass(w, \"CodeMirror-hint-table CodeMirror-hint-default-table\");\n    });\n    addMatches(\n        result,\n        search,\n        tables, function(w) {\n          return objectOrClass(w, \"CodeMirror-hint-table\");\n        }\n    );\n    if (!disableKeywords)\n      addMatches(result, search, keywords, function(w) {\n          return objectOrClass(w.toUpperCase(), \"CodeMirror-hint-keyword\");\n      });\n  }\n\n    return {list: result, from: Pos(cur.line, start), to: Pos(cur.line, end)};\n  });\n});\n"]}