{"version":3,"sources":["addon/lint/javascript-lint.js"],"names":["define","CodeMirror","registerHelper","text","options","window","JSHINT","console","error","indent","globals","errors","data","result","output","i","length","line","warn","start","character","end","evidence","index","substring","search","hint","message","reason","severity","code","startsWith","from","Pos","to","push","parseErrors"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GACpC,aAkBAA,EAAWC,eAAe,OAAQ,aAflC,SAAmBC,EAAMC,GACvB,IAAKC,OAAOC,OAIV,OAHID,OAAOE,SACTF,OAAOE,QAAQC,MAAM,kFAIpBJ,EAAQK,SACXL,EAAQK,OAAS,GACnBH,OAAOH,EAAMC,EAASA,EAAQM,SAC9B,IAAIC,EAASL,OAAOM,OAAOD,OAAQE,KAEnC,OADIF,GAMN,SAAqBA,EAAQG,GAC3B,IAAM,IAAIC,EAAI,EAAGA,EAAIJ,EAAOK,OAAQD,IAAK,CACvC,IAAIP,EAAQG,EAAOI,GACnB,GAAIP,EAAO,CACT,GAAIA,EAAMS,MAAQ,EAAG,CACfZ,OAAOE,SACTF,OAAOE,QAAQW,KAAK,6CAA+CV,EAAMS,KAAO,IAAKT,GAEvF,SAGF,IAAIW,EAAQX,EAAMY,UAAY,EAAGC,EAAMF,EAAQ,EAC/C,GAAIX,EAAMc,SAAU,CAClB,IAAIC,EAAQf,EAAMc,SAASE,UAAUL,GAAOM,OAAO,OAC/CF,GAAS,IACXF,GAAOE,GAKX,IAAIG,GACFC,QAASnB,EAAMoB,OACfC,SAAUrB,EAAMsB,MAAQtB,EAAMsB,KAAKC,WAAW,KAAO,UAAuB,QAC5EC,KAAM/B,EAAWgC,IAAIzB,EAAMS,KAAO,EAAGE,GACrCe,GAAIjC,EAAWgC,IAAIzB,EAAMS,KAAO,EAAGI,IAGrCP,EAAOqB,KAAKT,KAjCJU,CAAYzB,EAAQE,GACzBA","file":"../../../addon/lint/javascript-lint.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n  // declare global: JSHINT\n\n  function validator(text, options) {\n    if (!window.JSHINT) {\n      if (window.console) {\n        window.console.error(\"Error: window.JSHINT not defined, CodeMirror JavaScript linting cannot run.\");\n      }\n      return [];\n    }\n    if (!options.indent) // JSHint error.character actually is a column index, this fixes underlining on lines using tabs for indentation\n      options.indent = 1; // JSHint default value is 4\n    JSHINT(text, options, options.globals);\n    var errors = JSHINT.data().errors, result = [];\n    if (errors) parseErrors(errors, result);\n    return result;\n  }\n\n  CodeMirror.registerHelper(\"lint\", \"javascript\", validator);\n\n  function parseErrors(errors, output) {\n    for ( var i = 0; i < errors.length; i++) {\n      var error = errors[i];\n      if (error) {\n        if (error.line <= 0) {\n          if (window.console) {\n            window.console.warn(\"Cannot display JSHint error (invalid line \" + error.line + \")\", error);\n          }\n          continue;\n        }\n\n        var start = error.character - 1, end = start + 1;\n        if (error.evidence) {\n          var index = error.evidence.substring(start).search(/.\\b/);\n          if (index > -1) {\n            end += index;\n          }\n        }\n\n        // Convert to format expected by validation service\n        var hint = {\n          message: error.reason,\n          severity: error.code ? (error.code.startsWith('W') ? \"warning\" : \"error\") : \"error\",\n          from: CodeMirror.Pos(error.line - 1, start),\n          to: CodeMirror.Pos(error.line - 1, end)\n        };\n\n        output.push(hint);\n      }\n    }\n  }\n});\n"]}