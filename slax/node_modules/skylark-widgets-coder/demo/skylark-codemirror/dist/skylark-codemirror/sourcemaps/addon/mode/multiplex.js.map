{"version":3,"sources":["addon/mode/multiplex.js"],"names":["define","CodeMirror","multiplexingMode","outer","others","Array","prototype","slice","call","arguments","indexOf","string","pattern","from","returnEnd","found","length","m","exec","index","startState","innerActive","inner","copyState","state","mode","token","stream","curInner","oldContent","close","sol","this","pos","parseDelimiters","match","delimStyle","innerToken","innerStyle","cutOff","Infinity","i","other","open","outerIndent","indent","possibleOuterIndent","Pass","outerToken","textAfter","line","blankLine","electricChars","innerMode"],"mappings":"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","file":"../../../addon/mode/multiplex.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.multiplexingMode = function(outer /*, others */) {\n  // Others should be {open, close, mode [, delimStyle] [, innerStyle]} objects\n  var others = Array.prototype.slice.call(arguments, 1);\n\n  function indexOf(string, pattern, from, returnEnd) {\n    if (typeof pattern == \"string\") {\n      var found = string.indexOf(pattern, from);\n      return returnEnd && found > -1 ? found + pattern.length : found;\n    }\n    var m = pattern.exec(from ? string.slice(from) : string);\n    return m ? m.index + from + (returnEnd ? m[0].length : 0) : -1;\n  }\n\n  return {\n    startState: function() {\n      return {\n        outer: CodeMirror.startState(outer),\n        innerActive: null,\n        inner: null\n      };\n    },\n\n    copyState: function(state) {\n      return {\n        outer: CodeMirror.copyState(outer, state.outer),\n        innerActive: state.innerActive,\n        inner: state.innerActive && CodeMirror.copyState(state.innerActive.mode, state.inner)\n      };\n    },\n\n    token: function(stream, state) {\n      if (!state.innerActive) {\n        var cutOff = Infinity, oldContent = stream.string;\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          var found = indexOf(oldContent, other.open, stream.pos);\n          if (found == stream.pos) {\n            if (!other.parseDelimiters) stream.match(other.open);\n            state.innerActive = other;\n\n            // Get the outer indent, making sure to handle CodeMirror.Pass\n            var outerIndent = 0;\n            if (outer.indent) {\n              var possibleOuterIndent = outer.indent(state.outer, \"\", \"\");\n              if (possibleOuterIndent !== CodeMirror.Pass) outerIndent = possibleOuterIndent;\n            }\n\n            state.inner = CodeMirror.startState(other.mode, outerIndent);\n            return other.delimStyle && (other.delimStyle + \" \" + other.delimStyle + \"-open\");\n          } else if (found != -1 && found < cutOff) {\n            cutOff = found;\n          }\n        }\n        if (cutOff != Infinity) stream.string = oldContent.slice(0, cutOff);\n        var outerToken = outer.token(stream, state.outer);\n        if (cutOff != Infinity) stream.string = oldContent;\n        return outerToken;\n      } else {\n        var curInner = state.innerActive, oldContent = stream.string;\n        if (!curInner.close && stream.sol()) {\n          state.innerActive = state.inner = null;\n          return this.token(stream, state);\n        }\n        var found = curInner.close ? indexOf(oldContent, curInner.close, stream.pos, curInner.parseDelimiters) : -1;\n        if (found == stream.pos && !curInner.parseDelimiters) {\n          stream.match(curInner.close);\n          state.innerActive = state.inner = null;\n          return curInner.delimStyle && (curInner.delimStyle + \" \" + curInner.delimStyle + \"-close\");\n        }\n        if (found > -1) stream.string = oldContent.slice(0, found);\n        var innerToken = curInner.mode.token(stream, state.inner);\n        if (found > -1) stream.string = oldContent;\n\n        if (found == stream.pos && curInner.parseDelimiters)\n          state.innerActive = state.inner = null;\n\n        if (curInner.innerStyle) {\n          if (innerToken) innerToken = innerToken + \" \" + curInner.innerStyle;\n          else innerToken = curInner.innerStyle;\n        }\n\n        return innerToken;\n      }\n    },\n\n    indent: function(state, textAfter, line) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (!mode.indent) return CodeMirror.Pass;\n      return mode.indent(state.innerActive ? state.inner : state.outer, textAfter, line);\n    },\n\n    blankLine: function(state) {\n      var mode = state.innerActive ? state.innerActive.mode : outer;\n      if (mode.blankLine) {\n        mode.blankLine(state.innerActive ? state.inner : state.outer);\n      }\n      if (!state.innerActive) {\n        for (var i = 0; i < others.length; ++i) {\n          var other = others[i];\n          if (other.open === \"\\n\") {\n            state.innerActive = other;\n            state.inner = CodeMirror.startState(other.mode, mode.indent ? mode.indent(state.outer, \"\", \"\") : 0);\n          }\n        }\n      } else if (state.innerActive.close === \"\\n\") {\n        state.innerActive = state.inner = null;\n      }\n    },\n\n    electricChars: outer.electricChars,\n\n    innerMode: function(state) {\n      return state.inner ? {state: state.inner, mode: state.innerActive.mode} : {state: state.outer, mode: outer};\n    }\n  };\n};\n\n});\n"]}