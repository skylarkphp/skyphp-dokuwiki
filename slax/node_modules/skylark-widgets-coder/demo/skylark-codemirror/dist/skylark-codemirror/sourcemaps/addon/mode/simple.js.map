{"version":3,"sources":["addon/mode/simple.js"],"names":["define","CodeMirror","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","RegExp","ignoreCase","source","String","Rule","data","next","push","this","regex","token","apply","replace","result","i","length","asToken","cmp","a","b","props","prop","enterLocalMode","config","state","spec","pers","persistent","p","persistentStates","mode","getMode","lState","startState","localState","local","end","endScan","forceEnd","endToken","join","defineSimpleMode","defineMode","simpleMode","states_","meta","hasIndentation","list","orig","indent","dedent","pending","copyState","s","slice","stack","stream","pend","shift","pos","text","match","tok","m","exec","current","start","index","curState","rule","matches","sol","pop","indentation","indentUnit","j","backUp","tokenFunction","innerMode","textAfter","line","dontIndentStates","arr","indexOf","Pass","rules","scan","dedentIfLineStart","indentFunction"],"mappings":"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","file":"../../../addon/mode/simple.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function(name, states) {\n    CodeMirror.defineMode(name, function(config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function(config, states) {\n    ensureState(states, \"start\");\n    var states_ = {}, meta = states.meta || {}, hasIndentation = false;\n    for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n      var list = states_[state] = [], orig = states[state];\n      for (var i = 0; i < orig.length; i++) {\n        var data = orig[i];\n        list.push(new Rule(data, states));\n        if (data.indent || data.dedent) hasIndentation = true;\n      }\n    }\n    var mode = {\n      startState: function() {\n        return {state: \"start\", pending: null,\n                local: null, localState: null,\n                indent: hasIndentation ? [] : null};\n      },\n      copyState: function(state) {\n        var s = {state: state.state, pending: state.pending,\n                 local: state.local, localState: null,\n                 indent: state.indent && state.indent.slice(0)};\n        if (state.localState)\n          s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack)\n          s.stack = state.stack.slice(0);\n        for (var pers = state.persistentStates; pers; pers = pers.next)\n          s.persistentStates = {mode: pers.mode,\n                                spec: pers.spec,\n                                state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n                                next: s.persistentStates};\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function(state) { return state.local && {mode: state.local.mode, state: state.localState}; },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) if (meta.hasOwnProperty(prop))\n      mode[prop] = meta[prop];\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name))\n      throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n    for (var i = 0; i < val.length; i++)\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function(stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState), m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current())))\n            stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode)\n            enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent)\n            state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent)\n            state.indent.pop();\n          var token = rule.token\n          if (token && token.apply) token = token(matches)\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            state.pending = [];\n            for (var j = 2; j < matches.length; j++)\n              if (matches[j])\n                state.pending.push({text: matches[j], token: rule.token[j - 1]});\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n    for (var prop in a) if (a.hasOwnProperty(prop)) {\n      if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n      props++;\n    }\n    for (var prop in b) if (b.hasOwnProperty(prop)) props--;\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next)\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers)\n      state.persistentStates = {mode: mode, spec: spec.spec, state: lState, next: state.persistentStates};\n\n    state.localState = lState;\n    state.local = {mode: mode,\n                   end: spec.end && toRegex(spec.end),\n                   endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n                   endToken: token && token.join ? token[token.length - 1] : token};\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) if (arr[i] === val) return true;\n  }\n\n  function indentFunction(states, meta) {\n    return function(state, textAfter, line) {\n      if (state.local && state.local.mode.indent)\n        return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1)\n        return CodeMirror.Pass;\n\n      var pos = state.indent.length - 1, rules = states[state.state];\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n        break;\n      }\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});\n"]}