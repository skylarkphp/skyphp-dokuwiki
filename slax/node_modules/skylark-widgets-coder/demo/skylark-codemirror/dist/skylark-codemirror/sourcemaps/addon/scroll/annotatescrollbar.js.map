{"version":3,"sources":["addon/scroll/annotatescrollbar.js"],"names":["define","CodeMirror","Annotation","cm","options","scheduleRedraw","delay","clearTimeout","self","doRedraw","setTimeout","redraw","this","buttonHeight","scrollButtonHeight","getOption","annotations","doUpdate","div","getWrapperElement","appendChild","document","createElement","style","cssText","computeScale","on","resizeHandler","listenForChanges","changeHandler","defineExtension","className","defineOption","prototype","hScale","clientHeight","display","barHeight","getScrollerElement","scrollHeight","update","compute","frag","createDocumentFragment","anns","wrapping","singleLineH","defaultTextHeight","curLine","curLineObj","getY","pos","top","line","getLineHandle","widgets","length","height","charCoords","heightAtLine","lastLine","barWidth","nextTop","i","ann","to","from","bottom","Math","max","elt","id","setAttribute","textContent","clear","off","parentNode","removeChild"],"mappings":"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","file":"../../../addon/scroll/annotatescrollbar.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineExtension(\"annotateScrollbar\", function(options) {\n    if (typeof options == \"string\") options = {className: options};\n    return new Annotation(this, options);\n  });\n\n  CodeMirror.defineOption(\"scrollButtonHeight\", 0);\n\n  function Annotation(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.buttonHeight = options.scrollButtonHeight || cm.getOption(\"scrollButtonHeight\");\n    this.annotations = [];\n    this.doRedraw = this.doUpdate = null;\n    this.div = cm.getWrapperElement().appendChild(document.createElement(\"div\"));\n    this.div.style.cssText = \"position: absolute; right: 0; top: 0; z-index: 7; pointer-events: none\";\n    this.computeScale();\n\n    function scheduleRedraw(delay) {\n      clearTimeout(self.doRedraw);\n      self.doRedraw = setTimeout(function() { self.redraw(); }, delay);\n    }\n\n    var self = this;\n    cm.on(\"refresh\", this.resizeHandler = function() {\n      clearTimeout(self.doUpdate);\n      self.doUpdate = setTimeout(function() {\n        if (self.computeScale()) scheduleRedraw(20);\n      }, 100);\n    });\n    cm.on(\"markerAdded\", this.resizeHandler);\n    cm.on(\"markerCleared\", this.resizeHandler);\n    if (options.listenForChanges !== false)\n      cm.on(\"change\", this.changeHandler = function() {\n        scheduleRedraw(250);\n      });\n  }\n\n  Annotation.prototype.computeScale = function() {\n    var cm = this.cm;\n    var hScale = (cm.getWrapperElement().clientHeight - cm.display.barHeight - this.buttonHeight * 2) /\n      cm.getScrollerElement().scrollHeight\n    if (hScale != this.hScale) {\n      this.hScale = hScale;\n      return true;\n    }\n  };\n\n  Annotation.prototype.update = function(annotations) {\n    this.annotations = annotations;\n    this.redraw();\n  };\n\n  Annotation.prototype.redraw = function(compute) {\n    if (compute !== false) this.computeScale();\n    var cm = this.cm, hScale = this.hScale;\n\n    var frag = document.createDocumentFragment(), anns = this.annotations;\n\n    var wrapping = cm.getOption(\"lineWrapping\");\n    var singleLineH = wrapping && cm.defaultTextHeight() * 1.5;\n    var curLine = null, curLineObj = null;\n    function getY(pos, top) {\n      if (curLine != pos.line) {\n        curLine = pos.line;\n        curLineObj = cm.getLineHandle(curLine);\n      }\n      if ((curLineObj.widgets && curLineObj.widgets.length) ||\n          (wrapping && curLineObj.height > singleLineH))\n        return cm.charCoords(pos, \"local\")[top ? \"top\" : \"bottom\"];\n      var topY = cm.heightAtLine(curLineObj, \"local\");\n      return topY + (top ? 0 : curLineObj.height);\n    }\n\n    var lastLine = cm.lastLine()\n    if (cm.display.barWidth) for (var i = 0, nextTop; i < anns.length; i++) {\n      var ann = anns[i];\n      if (ann.to.line > lastLine) continue;\n      var top = nextTop || getY(ann.from, true) * hScale;\n      var bottom = getY(ann.to, false) * hScale;\n      while (i < anns.length - 1) {\n        if (anns[i + 1].to.line > lastLine) break;\n        nextTop = getY(anns[i + 1].from, true) * hScale;\n        if (nextTop > bottom + .9) break;\n        ann = anns[++i];\n        bottom = getY(ann.to, false) * hScale;\n      }\n      if (bottom == top) continue;\n      var height = Math.max(bottom - top, 3);\n\n      var elt = frag.appendChild(document.createElement(\"div\"));\n      elt.style.cssText = \"position: absolute; right: 0px; width: \" + Math.max(cm.display.barWidth - 1, 2) + \"px; top: \"\n        + (top + this.buttonHeight) + \"px; height: \" + height + \"px\";\n      elt.className = this.options.className;\n      if (ann.id) {\n        elt.setAttribute(\"annotation-id\", ann.id);\n      }\n    }\n    this.div.textContent = \"\";\n    this.div.appendChild(frag);\n  };\n\n  Annotation.prototype.clear = function() {\n    this.cm.off(\"refresh\", this.resizeHandler);\n    this.cm.off(\"markerAdded\", this.resizeHandler);\n    this.cm.off(\"markerCleared\", this.resizeHandler);\n    if (this.changeHandler) this.cm.off(\"change\", this.changeHandler);\n    this.div.parentNode.removeChild(this.div);\n  };\n});\n"]}