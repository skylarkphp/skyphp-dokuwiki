{"version":3,"sources":["addon/search/jump-to-line.js"],"names":["define","CodeMirror","interpretLine","cm","string","num","Number","test","getCursor","line","commands","jumpToLine","cur","text","shortText","deflt","f","openDialog","value","selectValueOnOpen","prompt","dialog","phrase","getJumpDialog","ch","posStr","match","exec","setCursor","Math","round","lineCount","keyMap"],"mappings":";;;;;;;AAKAA,QAAQ,mBAAoB,oBAAqB,SAASC,GACxD,aAWA,SAASC,EAAcC,EAAIC,GACzB,IAAIC,EAAMC,OAAOF,GACjB,MAAI,QAAQG,KAAKH,GAAgBD,EAAGK,YAAYC,KAAOJ,EAC3CA,EAAM,EAGpBJ,EAAWS,SAASC,WAAa,SAASR,GACxC,IAAIS,EAAMT,EAAGK,aAhBf,SAAgBL,EAAIU,EAAMC,EAAWC,EAAOC,GACtCb,EAAGc,WAAYd,EAAGc,WAAWJ,EAAMG,GAAIE,MAAOH,EAAOI,mBAAmB,IACvEH,EAAEI,OAAON,EAAWC,IAezBM,CAAOlB,EAZT,SAAuBA,GACrB,OAAOA,EAAGmB,OAAO,iBAAmB,sIAAwInB,EAAGmB,OAAO,uCAAyC,UAWpNC,CAAcpB,GAAKA,EAAGmB,OAAO,iBAAmBV,EAAIH,KAAO,EAAK,IAAMG,EAAIY,GAAI,SAASC,GAGhG,IAAIC,EAFJ,GAAKD,EAGL,GAAIC,EAAQ,oCAAoCC,KAAKF,GACnDtB,EAAGyB,UAAU1B,EAAcC,EAAIuB,EAAM,IAAKpB,OAAOoB,EAAM,UAClD,GAAIA,EAAQ,gCAAgCC,KAAKF,GAAS,CAC/D,IAAIhB,EAAOoB,KAAKC,MAAM3B,EAAG4B,YAAczB,OAAOoB,EAAM,IAAM,KACtD,QAAQnB,KAAKmB,EAAM,MAAKjB,EAAOG,EAAIH,KAAOA,EAAO,GACrDN,EAAGyB,UAAUnB,EAAO,EAAGG,EAAIY,SAClBE,EAAQ,4BAA4BC,KAAKF,KAClDtB,EAAGyB,UAAU1B,EAAcC,EAAIuB,EAAM,IAAKd,EAAIY,OAKpDvB,EAAW+B,OAAgB,QAAE,SAAW","file":"../../../addon/search/jump-to-line.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Defines jumpToLine command. Uses dialog.js if present.\n\ndefine([\"../../CodeMirror\", \"../dialog/dialog\"], function(CodeMirror) {\n  \"use strict\";\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function getJumpDialog(cm) {\n    return cm.phrase(\"Jump to line:\") + ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use line:column or scroll% syntax)\") + '</span>';\n  }\n\n  function interpretLine(cm, string) {\n    var num = Number(string)\n    if (/^[-+]/.test(string)) return cm.getCursor().line + num\n    else return num - 1\n  }\n\n  CodeMirror.commands.jumpToLine = function(cm) {\n    var cur = cm.getCursor();\n    dialog(cm, getJumpDialog(cm), cm.phrase(\"Jump to line:\"), (cur.line + 1) + \":\" + cur.ch, function(posStr) {\n      if (!posStr) return;\n\n      var match;\n      if (match = /^\\s*([\\+\\-]?\\d+)\\s*\\:\\s*(\\d+)\\s*$/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), Number(match[2]))\n      } else if (match = /^\\s*([\\+\\-]?\\d+(\\.\\d+)?)\\%\\s*/.exec(posStr)) {\n        var line = Math.round(cm.lineCount() * Number(match[1]) / 100);\n        if (/^[-+]/.test(match[1])) line = cur.line + line + 1;\n        cm.setCursor(line - 1, cur.ch);\n      } else if (match = /^\\s*\\:?\\s*([\\+\\-]?\\d+)\\s*/.exec(posStr)) {\n        cm.setCursor(interpretLine(cm, match[1]), cur.ch);\n      }\n    });\n  };\n\n  CodeMirror.keyMap[\"default\"][\"Alt-G\"] = \"jumpToLine\";\n});\n"]}