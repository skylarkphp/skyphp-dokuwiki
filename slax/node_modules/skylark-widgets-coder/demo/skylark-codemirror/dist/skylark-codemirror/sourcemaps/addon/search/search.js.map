{"version":3,"sources":["addon/search/search.js"],"names":["define","CodeMirror","getSearchState","cm","state","search","this","posFrom","posTo","lastQuery","query","overlay","queryCaseInsensitive","toLowerCase","getSearchCursor","pos","caseFold","multiline","dialog","text","shortText","deflt","f","openDialog","value","selectValueOnOpen","prompt","parseString","string","replace","_","ch","parseQuery","isRE","match","RegExp","indexOf","e","test","startSearch","queryText","removeOverlay","caseInsensitive","global","source","ignoreCase","token","stream","lastIndex","exec","index","length","skipToEnd","searchOverlay","addOverlay","showMatchesOnScrollbar","annotate","clear","doSearch","rev","persistent","immediate","findNext","q","getSelection","hiding","searchNext","event","e_stop","getCursor","style","opacity","shiftKey","to","line","document","querySelector","display","wrapper","getBoundingClientRect","bottom","cursorCoords","top","onEnter","onKeyDown","closeOnEnter","onClose","clearSearch","persistentDialog","getQueryDialog","keyName","extra","getOption","cmd","keyMap","execCommand","operation","callback","cursor","find","Pos","lastLine","firstLine","setSelection","from","scrollIntoView","phrase","replaceAll","getRange","i","all","dialogText","getReplaceQueryDialog","getReplacementQueryDialog","advance","start","fs","openConfirm","confirm","confirmDialog","getDoReplaceConfirm","doReplace","commands","findPersistent","findPersistentNext","findPersistentPrev","findPrev"],"mappings":"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","file":"../../../addon/search/search.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\ndefine([\"../../CodeMirror\", \"./searchcursor\", \"../dialog/dialog\"],function(CodeMirror) {\n  \"use strict\";\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\(.)/g, function(_, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      return ch\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (q instanceof RegExp && q.source == \"x^\") q = null\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, getQueryDialog(cm), q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, getQueryDialog(cm), \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n\n  function getQueryDialog(cm)  {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Search:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplaceQueryDialog(cm) {\n    return ' <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/> <span style=\"color: #888\" class=\"CodeMirror-search-hint\">' + cm.phrase(\"(Use /re/ syntax for regexp search)\") + '</span>';\n  }\n  function getReplacementQueryDialog(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"With:\") + '</span> <input type=\"text\" style=\"width: 10em\" class=\"CodeMirror-search-field\"/>';\n  }\n  function getDoReplaceConfirm(cm) {\n    return '<span class=\"CodeMirror-search-label\">' + cm.phrase(\"Replace?\") + '</span> <button>' + cm.phrase(\"Yes\") + '</button> <button>' + cm.phrase(\"No\") + '</button> <button>' + cm.phrase(\"All\") + '</button> <button>' + cm.phrase(\"Stop\") + '</button> ';\n  }\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = '<span class=\"CodeMirror-search-label\">' + (all ? cm.phrase(\"Replace all:\") : cm.phrase(\"Replace:\")) + '</span>';\n    dialog(cm, dialogText + getReplaceQueryDialog(cm), dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, getReplacementQueryDialog(cm), cm.phrase(\"Replace with:\"), \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, getDoReplaceConfirm(cm), cm.phrase(\"Replace?\"),\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n"]}