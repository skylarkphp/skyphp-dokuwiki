{"version":3,"sources":["addon/selection/active-line.js"],"names":["define","CodeMirror","WRAP_CLASS","BACK_CLASS","GUTT_CLASS","clearActiveLines","cm","i","state","activeLines","length","removeLineClass","updateActiveLines","ranges","active","range","option","getOption","nonEmpty","anchor","line","head","empty","getLineHandleVisualStart","push","a","b","sameArray","operation","addLineClass","selectionChange","sel","defineOption","val","old","prev","Init","off","listSelections","on"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GACpC,aACA,IAAIC,EAAa,wBACbC,EAAa,mCACbC,EAAa,+BAiBjB,SAASC,EAAiBC,GACxB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGE,MAAMC,YAAYC,OAAQH,IAC/CD,EAAGK,gBAAgBL,EAAGE,MAAMC,YAAYF,GAAI,OAAQL,GACpDI,EAAGK,gBAAgBL,EAAGE,MAAMC,YAAYF,GAAI,aAAcJ,GAC1DG,EAAGK,gBAAgBL,EAAGE,MAAMC,YAAYF,GAAI,SAAUH,GAW1D,SAASQ,EAAkBN,EAAIO,GAE7B,IADA,IAAIC,KACKP,EAAI,EAAGA,EAAIM,EAAOH,OAAQH,IAAK,CACtC,IAAIQ,EAAQF,EAAON,GACfS,EAASV,EAAGW,UAAU,mBAC1B,GAAqB,iBAAVD,GAAsBA,EAAOE,SAAWH,EAAMI,OAAOC,MAAQL,EAAMM,KAAKD,KAAQL,EAAMO,QAAjG,CAEA,IAAIF,EAAOd,EAAGiB,yBAAyBR,EAAMM,KAAKD,MAC9CN,EAAOA,EAAOJ,OAAS,IAAMU,GAAMN,EAAOU,KAAKJ,KAfvD,SAAmBK,EAAGC,GACpB,GAAID,EAAEf,QAAUgB,EAAEhB,OAAQ,OAAO,EACjC,IAAK,IAAIH,EAAI,EAAGA,EAAIkB,EAAEf,OAAQH,IAC5B,GAAIkB,EAAElB,IAAMmB,EAAEnB,GAAI,OAAO,EAC3B,OAAO,GAaHoB,CAAUrB,EAAGE,MAAMC,YAAaK,IACpCR,EAAGsB,UAAU,WACXvB,EAAiBC,GACjB,IAAK,IAAIC,EAAI,EAAGA,EAAIO,EAAOJ,OAAQH,IACjCD,EAAGuB,aAAaf,EAAOP,GAAI,OAAQL,GACnCI,EAAGuB,aAAaf,EAAOP,GAAI,aAAcJ,GACzCG,EAAGuB,aAAaf,EAAOP,GAAI,SAAUH,GAEvCE,EAAGE,MAAMC,YAAcK,IAI3B,SAASgB,EAAgBxB,EAAIyB,GAC3BnB,EAAkBN,EAAIyB,EAAIlB,QArD5BZ,EAAW+B,aAAa,mBAAmB,EAAO,SAAS1B,EAAI2B,EAAKC,GAClE,IAAIC,EAAOD,GAAOjC,EAAWmC,MAAeF,EACxCD,GAAOE,IACPA,IACF7B,EAAG+B,IAAI,wBAAyBP,GAChCzB,EAAiBC,UACVA,EAAGE,MAAMC,aAEdwB,IACF3B,EAAGE,MAAMC,eACTG,EAAkBN,EAAIA,EAAGgC,kBACzBhC,EAAGiC,GAAG,wBAAyBT","file":"../../../addon/selection/active-line.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\";\n  var WRAP_CLASS = \"CodeMirror-activeline\";\n  var BACK_CLASS = \"CodeMirror-activeline-background\";\n  var GUTT_CLASS = \"CodeMirror-activeline-gutter\";\n\n  CodeMirror.defineOption(\"styleActiveLine\", false, function(cm, val, old) {\n    var prev = old == CodeMirror.Init ? false : old;\n    if (val == prev) return\n    if (prev) {\n      cm.off(\"beforeSelectionChange\", selectionChange);\n      clearActiveLines(cm);\n      delete cm.state.activeLines;\n    }\n    if (val) {\n      cm.state.activeLines = [];\n      updateActiveLines(cm, cm.listSelections());\n      cm.on(\"beforeSelectionChange\", selectionChange);\n    }\n  });\n\n  function clearActiveLines(cm) {\n    for (var i = 0; i < cm.state.activeLines.length; i++) {\n      cm.removeLineClass(cm.state.activeLines[i], \"wrap\", WRAP_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"background\", BACK_CLASS);\n      cm.removeLineClass(cm.state.activeLines[i], \"gutter\", GUTT_CLASS);\n    }\n  }\n\n  function sameArray(a, b) {\n    if (a.length != b.length) return false;\n    for (var i = 0; i < a.length; i++)\n      if (a[i] != b[i]) return false;\n    return true;\n  }\n\n  function updateActiveLines(cm, ranges) {\n    var active = [];\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i];\n      var option = cm.getOption(\"styleActiveLine\");\n      if (typeof option == \"object\" && option.nonEmpty ? range.anchor.line != range.head.line : !range.empty())\n        continue\n      var line = cm.getLineHandleVisualStart(range.head.line);\n      if (active[active.length - 1] != line) active.push(line);\n    }\n    if (sameArray(cm.state.activeLines, active)) return;\n    cm.operation(function() {\n      clearActiveLines(cm);\n      for (var i = 0; i < active.length; i++) {\n        cm.addLineClass(active[i], \"wrap\", WRAP_CLASS);\n        cm.addLineClass(active[i], \"background\", BACK_CLASS);\n        cm.addLineClass(active[i], \"gutter\", GUTT_CLASS);\n      }\n      cm.state.activeLines = active;\n    });\n  }\n\n  function selectionChange(cm, sel) {\n    updateActiveLines(cm, sel.ranges);\n  }\n});\n"]}