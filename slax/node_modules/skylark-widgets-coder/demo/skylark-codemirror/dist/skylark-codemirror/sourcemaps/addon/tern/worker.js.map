{"version":3,"sources":["addon/tern/worker.js"],"names":["server","this","onmessage","e","data","type","startServer","defs","plugins","scripts","addFile","name","text","delFile","request","body","err","reqData","postMessage","id","String","c","pending","Error","nextId","getFile","file","importScripts","apply","tern","Server","async","console","log","v","message"],"mappings":";;;;;;;AAKA,IAAIA,OAEJC,KAAKC,UAAY,SAASC,GACxB,IAAIC,EAAOD,EAAEC,KACb,OAAQA,EAAKC,MACb,IAAK,OAAQ,OAAOC,YAAYF,EAAKG,KAAMH,EAAKI,QAASJ,EAAKK,SAC9D,IAAK,MAAO,OAAOT,OAAOU,QAAQN,EAAKO,KAAMP,EAAKQ,MAClD,IAAK,MAAO,OAAOZ,OAAOa,QAAQT,EAAKO,MACvC,IAAK,MAAO,OAAOX,OAAOc,QAAQV,EAAKW,KAAM,SAASC,EAAKC,GACzDC,aAAaC,GAAIf,EAAKe,GAAIJ,KAAME,EAASD,IAAKA,GAAOI,OAAOJ,OAE9D,IAAK,UACH,IAAIK,EAAIC,QAAQlB,EAAKe,IAErB,cADOG,QAAQlB,EAAKe,IACbE,EAAEjB,EAAKY,IAAKZ,EAAKQ,MAC1B,QAAS,MAAM,IAAIW,MAAM,yBAA2BnB,EAAKC,QAI3D,IAAImB,OAAS,EAAGF,WAChB,SAASG,QAAQC,EAAML,GACrBH,aAAab,KAAM,UAAWM,KAAMe,EAAMP,KAAMK,SAChDF,QAAQE,QAAUH,EAGpB,SAASf,YAAYC,EAAMC,EAASC,GAC9BA,GAASkB,cAAcC,MAAM,KAAMnB,GAEvCT,OAAS,IAAI6B,KAAKC,QAChBL,QAASA,QACTM,OAAO,EACPxB,KAAMA,EACNC,QAASA,IAIbP,KAAK+B,SACHC,IAAK,SAASC,GAAKhB,aAAab,KAAM,QAAS8B,QAASD","file":"../../../addon/tern/worker.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// declare global: tern, server\n\nvar server;\n\nthis.onmessage = function(e) {\n  var data = e.data;\n  switch (data.type) {\n  case \"init\": return startServer(data.defs, data.plugins, data.scripts);\n  case \"add\": return server.addFile(data.name, data.text);\n  case \"del\": return server.delFile(data.name);\n  case \"req\": return server.request(data.body, function(err, reqData) {\n    postMessage({id: data.id, body: reqData, err: err && String(err)});\n  });\n  case \"getFile\":\n    var c = pending[data.id];\n    delete pending[data.id];\n    return c(data.err, data.text);\n  default: throw new Error(\"Unknown message type: \" + data.type);\n  }\n};\n\nvar nextId = 0, pending = {};\nfunction getFile(file, c) {\n  postMessage({type: \"getFile\", name: file, id: ++nextId});\n  pending[nextId] = c;\n}\n\nfunction startServer(defs, plugins, scripts) {\n  if (scripts) importScripts.apply(null, scripts);\n\n  server = new tern.Server({\n    getFile: getFile,\n    async: true,\n    defs: defs,\n    plugins: plugins\n  });\n}\n\nthis.console = {\n  log: function(v) { postMessage({type: \"debug\", message: v}); }\n};\n"]}