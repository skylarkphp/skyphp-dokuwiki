{"version":3,"sources":["mode/clike/test.js"],"names":["mode","CodeMirror","getMode","indentUnit","MT","name","test","Array","prototype","slice","call","arguments","mode_cpp","MTCPP","mode_objc","MTOBJC","mode_scala","MTSCALA"],"mappings":";;;;;;;CAGA,WACE,IAAIA,EAAOC,WAAWC,SAASC,WAAY,GAAI,YAC/C,SAASC,EAAGC,GAAQC,KAAKN,KAAKK,EAAML,EAAMO,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAEhFP,EAAG,SACA,8EACA,mEACA,kBACA,+CACA,KAEHA,EAAG,gBACA,oCACA,gCACA,oCACA,uBACA,0DACA,KAEHA,EAAG,MACA,6BACA,+BACA,6BACA,8BACA,qCAEHA,EAAG,eACA,oFACA,uHAEHA,EAAG,eACA,qBACA,uBACA,iCACA,qBAEHA,EAAG,eACA,uBACA,6BACA,uBACA,WACA,qEACA,8CAEHA,EAAG,gBACA,mBACA,sBACA,qBACA,sBAEHA,EAAG,UACD,cACA,eACA,eACA,gBACA,iBACA,gBACA,mBACA,iBACA,eACA,eACA,gBACA,oBACA,kBAEF,IAAIQ,EAAWX,WAAWC,SAASC,WAAY,GAAI,iBACnD,SAASU,EAAMR,GAAQC,KAAKN,KAAKK,EAAMO,EAAUL,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAEvFE,EAAM,gBACJ,mBACA,qBACA,qBACA,sBAEFA,EAAM,YACH,sBACA,wBAEHA,EAAM,kBACA,mBACA,sBACA,qBACA,sBAEN,IAAIC,EAAYb,WAAWC,SAASC,WAAY,GAAI,qBACpD,SAASY,EAAOV,GAAQC,KAAKN,KAAKK,EAAMS,EAAWP,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAEzFI,EAAO,mBACA,mBACA,sBACA,qBACA,sBAEPA,EAAO,iBACA,mCACA,+BACA,IACA,2GACA,uFACA,wHAEA,kBAEPA,EAAO,sBACA,wCACA,+BACA,IACA,qEACA,qFACA,wFACA,qCACA,IACA,kBAEPA,EAAO,aACA,cACA,gBACA,oBACA,aACA,cACA,uBACA,gBACA,mBACA,gBAGP,IAAIC,EAAaf,WAAWC,SAASC,WAAY,GAAI,iBACrD,SAAiBE,GAAQC,KAAKN,KAAK,SAAWK,EAAMW,EAAYT,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IACtGM,CAAQ,kBACL,eACA,6DACA,8CACA,8CACA,gBArIL","file":"../../../mode/clike/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function() {\n  var mode = CodeMirror.getMode({indentUnit: 2}, \"text/x-c\");\n  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }\n\n  MT(\"indent\",\n     \"[type void] [def foo]([type void*] [variable a], [type int] [variable b]) {\",\n     \"  [type int] [variable c] [operator =] [variable b] [operator +]\",\n     \"    [number 1];\",\n     \"  [keyword return] [operator *][variable a];\",\n     \"}\");\n\n  MT(\"indent_switch\",\n     \"[keyword switch] ([variable x]) {\",\n     \"  [keyword case] [number 10]:\",\n     \"    [keyword return] [number 20];\",\n     \"  [keyword default]:\",\n     \"    [variable printf]([string \\\"foo %c\\\"], [variable x]);\",\n     \"}\");\n\n  MT(\"def\",\n     \"[type void] [def foo]() {}\",\n     \"[keyword struct] [def bar]{}\",\n     \"[keyword enum] [def zot]{}\",\n     \"[keyword union] [def ugh]{}\",\n     \"[type int] [type *][def baz]() {}\");\n\n  MT(\"def_new_line\",\n     \"::[variable std]::[variable SomeTerribleType][operator <][variable T][operator >]\",\n     \"[def SomeLongMethodNameThatDoesntFitIntoOneLine]([keyword const] [variable MyType][operator &] [variable param]) {}\")\n\n  MT(\"double_block\",\n     \"[keyword for] (;;)\",\n     \"  [keyword for] (;;)\",\n     \"    [variable x][operator ++];\",\n     \"[keyword return];\");\n\n  MT(\"preprocessor\",\n     \"[meta #define FOO 3]\",\n     \"[type int] [variable foo];\",\n     \"[meta #define BAR\\\\]\",\n     \"[meta 4]\",\n     \"[type unsigned] [type int] [variable bar] [operator =] [number 8];\",\n     \"[meta #include <baz> ][comment // comment]\")\n\n  MT(\"c_underscores\",\n     \"[builtin __FOO];\",\n     \"[builtin _Complex];\",\n     \"[builtin __aName];\",\n     \"[variable _aName];\");\n\n  MT(\"c_types\",\n    \"[type int];\",\n    \"[type long];\",\n    \"[type char];\",\n    \"[type short];\",\n    \"[type double];\",\n    \"[type float];\",\n    \"[type unsigned];\",\n    \"[type signed];\",\n    \"[type void];\",\n    \"[type bool];\",\n    \"[type foo_t];\",\n    \"[variable foo_T];\",\n    \"[variable _t];\");\n\n  var mode_cpp = CodeMirror.getMode({indentUnit: 2}, \"text/x-c++src\");\n  function MTCPP(name) { test.mode(name, mode_cpp, Array.prototype.slice.call(arguments, 1)); }\n\n  MTCPP(\"cpp14_literal\",\n    \"[number 10'000];\",\n    \"[number 0b10'000];\",\n    \"[number 0x10'000];\",\n    \"[string '100000'];\");\n\n  MTCPP(\"ctor_dtor\",\n     \"[def Foo::Foo]() {}\",\n     \"[def Foo::~Foo]() {}\");\n\n  MTCPP(\"cpp_underscores\",\n        \"[builtin __FOO];\",\n        \"[builtin _Complex];\",\n        \"[builtin __aName];\",\n        \"[variable _aName];\");\n\n  var mode_objc = CodeMirror.getMode({indentUnit: 2}, \"text/x-objectivec\");\n  function MTOBJC(name) { test.mode(name, mode_objc, Array.prototype.slice.call(arguments, 1)); }\n\n  MTOBJC(\"objc_underscores\",\n         \"[builtin __FOO];\",\n         \"[builtin _Complex];\",\n         \"[builtin __aName];\",\n         \"[variable _aName];\");\n\n  MTOBJC(\"objc_interface\",\n         \"[keyword @interface] [def foo] {\",\n         \"  [type int] [variable bar];\",\n         \"}\",\n         \"[keyword @property] ([keyword atomic], [keyword nullable]) [variable NSString][operator *] [variable a];\",\n         \"[keyword @property] ([keyword nonatomic], [keyword assign]) [type int] [variable b];\",\n         \"[operator -]([type instancetype])[variable initWithFoo]:([type int])[variable a] \" +\n           \"[builtin NS_DESIGNATED_INITIALIZER];\",\n         \"[keyword @end]\");\n\n  MTOBJC(\"objc_implementation\",\n         \"[keyword @implementation] [def foo] {\",\n         \"  [type int] [variable bar];\",\n         \"}\",\n         \"[keyword @property] ([keyword readwrite]) [type SEL] [variable a];\",\n         \"[operator -]([type instancetype])[variable initWithFoo]:([type int])[variable a] {\",\n         \"  [keyword if](([keyword self] [operator =] [[[keyword super] [variable init] ]])) {}\",\n         \"  [keyword return] [keyword self];\",\n         \"}\",\n         \"[keyword @end]\");\n\n  MTOBJC(\"objc_types\",\n         \"[type int];\",\n         \"[type foo_t];\",\n         \"[variable foo_T];\",\n         \"[type id];\",\n         \"[type SEL];\",\n         \"[type instancetype];\",\n         \"[type Class];\",\n         \"[type Protocol];\",\n         \"[type BOOL];\"\n         );\n\n  var mode_scala = CodeMirror.getMode({indentUnit: 2}, \"text/x-scala\");\n  function MTSCALA(name) { test.mode(\"scala_\" + name, mode_scala, Array.prototype.slice.call(arguments, 1)); }\n  MTSCALA(\"nested_comments\",\n     \"[comment /*]\",\n     \"[comment But wait /* this is a nested comment */ for real]\",\n     \"[comment /**** let * me * show * you ****/]\",\n     \"[comment ///// let / me / show / you /////]\",\n     \"[comment */]\");\n\n})();\n"]}