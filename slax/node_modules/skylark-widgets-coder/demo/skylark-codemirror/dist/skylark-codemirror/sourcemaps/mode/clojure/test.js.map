{"version":3,"sources":["mode/clojure/test.js"],"names":["mode","CodeMirror","getMode","indentUnit","MT","name","test","Array","prototype","slice","call","arguments","typeTokenPairs","type","tokens","join","forms","i","length","testFormsThatHaveBodyParameter"],"mappings":";;;;;;;CAGA,WACI,IAAIA,EAAOC,WAAWC,SAASC,WAAY,GAAI,WAE/C,SAASC,EAAGC,GACRC,KAAKN,KAAKK,EAAML,EAAMO,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAGhEP,EAAG,QACC,eACA,aACA,eAGJA,EAAG,WACC,cACA,eACA,kBACA,uBAGJA,EAAG,UACC,yCACA,2CACA,8CACA,2CACA,oDACA,8CACA,oDACA,oDACA,2CACA,8CACA,8CACA,qDACA,2CACA,8CACA,8CACA,qDACA,0DACA,0DACA,8CACA,0DACA,8CACA,8CAGA,gBACA,iBACA,iBACA,oBACA,kBACA,cACA,mBAGJA,EAAG,aACC,iBACA,iBACA,uBACA,iBACA,kBACA,iBACA,iBACA,iBACA,yBACA,wBACA,uBACA,qBACA,sBACA,mBACA,qBACA,qBACA,qBACA,oBACA,iBACA,iBACA,iBAKA,gBACA,iBACA,eACA,qBACA,oBACA,mBACA,mBAGJA,EAAG,UACC,4BACA,kCACA,iBACA,aACA,qBAKJA,EAAG,WACC,0CACA,uCACA,oBACA,uDAGJA,EAAG,0BACC,uBACA,0BACA,0BACA,0BACA,uBACA,8DACA,yDACA,0BACA,qBACA,sBACA,0BACA,uBACA,sEACA,yEACA,uGACA,sEAGJA,EAAG,UACD,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,qBACA,qBACA,kBACA,kBACA,kBACA,kBACA,kBACA,kBACA,uBACA,kBACA,gBACA,kBACA,oBACA,qBAGA,eACA,aACA,aACA,cAGFA,EAAG,0BACD,iDACA,oDACA,0DACA,8DACA,oCACA,oCACA,qCAMFA,EAAG,6CACCQ,EAAe,WAJC,IAAK,QAAS,MAAO,KAAM,KAAM,gBACjD,eAAgB,MAAO,QAAS,QAAS,OAAQ,QAAS,MAAO,SAuFrER,EAAG,uDACCQ,EAAe,WAjFf,IAAK,KAAM,KAAM,KAAM,KAAM,UAAW,0BAA2B,WACnE,oBAAqB,sBAAuB,kBAAmB,iBAAkB,qBACjF,iBAAkB,2BAA4B,KAAM,QAAS,SAAU,qBAAsB,cAC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","file":"../../../mode/clojure/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function () {\n    var mode = CodeMirror.getMode({indentUnit: 2}, \"clojure\");\n\n    function MT(name) {\n        test.mode(name, mode, Array.prototype.slice.call(arguments, 1));\n    }\n\n    MT(\"atoms\",\n        \"[atom false]\",\n        \"[atom nil]\",\n        \"[atom true]\"\n    );\n\n    MT(\"keywords\",\n        \"[atom :foo]\",\n        \"[atom ::bar]\",\n        \"[atom :foo/bar]\",\n        \"[atom :foo.bar/baz]\"\n    );\n\n    MT(\"numbers\",\n        \"[number 42] [number +42] [number -421]\",\n        \"[number 42N] [number +42N] [number -42N]\",\n        \"[number 0.42] [number +0.42] [number -0.42]\",\n        \"[number 42M] [number +42M] [number -42M]\",\n        \"[number 42.42M] [number +42.42M] [number -42.42M]\",\n        \"[number 1/42] [number +1/42] [number -1/42]\",\n        \"[number 0x42af] [number +0x42af] [number -0x42af]\",\n        \"[number 0x42AF] [number +0x42AF] [number -0x42AF]\",\n        \"[number 1e2] [number 1e+2] [number 1e-2]\",\n        \"[number +1e2] [number +1e+2] [number +1e-2]\",\n        \"[number -1e2] [number -1e+2] [number -1e-2]\",\n        \"[number -1.0e2] [number -0.1e+2] [number -1.01e-2]\",\n        \"[number 1E2] [number 1E+2] [number 1E-2]\",\n        \"[number +1E2] [number +1E+2] [number +1E-2]\",\n        \"[number -1E2] [number -1E+2] [number -1E-2]\",\n        \"[number -1.0E2] [number -0.1E+2] [number -1.01E-2]\",\n        \"[number 2r101010] [number +2r101010] [number -2r101010]\",\n        \"[number 2r101010] [number +2r101010] [number -2r101010]\",\n        \"[number 8r52] [number +8r52] [number -8r52]\",\n        \"[number 36rhello] [number +36rhello] [number -36rhello]\",\n        \"[number 36rz] [number +36rz] [number -36rz]\",\n        \"[number 36rZ] [number +36rZ] [number -36rZ]\",\n\n        // invalid numbers\n        \"[error 42foo]\",\n        \"[error 42Nfoo]\",\n        \"[error 42Mfoo]\",\n        \"[error 42.42Mfoo]\",\n        \"[error 42.42M!]\",\n        \"[error 42!]\",\n        \"[error 0x42afm]\"\n    );\n\n    MT(\"characters\",\n        \"[string-2 \\\\1]\",\n        \"[string-2 \\\\a]\",\n        \"[string-2 \\\\a\\\\b\\\\c]\",\n        \"[string-2 \\\\#]\",\n        \"[string-2 \\\\\\\\]\",\n        \"[string-2 \\\\\\\"]\",\n        \"[string-2 \\\\(]\",\n        \"[string-2 \\\\A]\",\n        \"[string-2 \\\\backspace]\",\n        \"[string-2 \\\\formfeed]\",\n        \"[string-2 \\\\newline]\",\n        \"[string-2 \\\\space]\",\n        \"[string-2 \\\\return]\",\n        \"[string-2 \\\\tab]\",\n        \"[string-2 \\\\u1000]\",\n        \"[string-2 \\\\uAaAa]\",\n        \"[string-2 \\\\u9F9F]\",\n        \"[string-2 \\\\o123]\",\n        \"[string-2 \\\\符]\",\n        \"[string-2 \\\\シ]\",\n        \"[string-2 \\\\ۇ]\",\n        // FIXME\n        // \"[string-2 \\\\🙂]\",\n\n        // invalid character literals\n        \"[error \\\\abc]\",\n        \"[error \\\\a123]\",\n        \"[error \\\\a!]\",\n        \"[error \\\\newlines]\",\n        \"[error \\\\NEWLINE]\",\n        \"[error \\\\u9F9FF]\",\n        \"[error \\\\o1234]\"\n    );\n\n    MT(\"strings\",\n        \"[string \\\"I'm a teapot.\\\"]\",\n        \"[string \\\"I'm a \\\\\\\"teapot\\\\\\\".\\\"]\",\n        \"[string \\\"I'm]\",       // this is\n        \"[string a]\",           // a multi-line\n        \"[string teapot.\\\"]\"    // string\n\n        // TODO unterminated (multi-line) strings?\n    );\n\n    MT(\"comments\",\n        \"[comment ; this is an in-line comment.]\",\n        \"[comment ;; this is a line comment.]\",\n        \"[keyword comment]\",\n        \"[bracket (][comment comment (foo 1 2 3)][bracket )]\"\n    );\n\n    MT(\"reader macro characters\",\n        \"[meta #][variable _]\",\n        \"[meta #][variable -Inf]\",\n        \"[meta ##][variable Inf]\",\n        \"[meta ##][variable NaN]\",\n        \"[meta @][variable x]\",\n        \"[meta ^][bracket {][atom :tag] [variable String][bracket }]\",\n        \"[meta `][bracket (][builtin f] [variable x][bracket )]\",\n        \"[meta ~][variable foo#]\",\n        \"[meta '][number 1]\",\n        \"[meta '][atom :foo]\",\n        \"[meta '][string \\\"foo\\\"]\",\n        \"[meta '][variable x]\",\n        \"[meta '][bracket (][builtin a] [variable b] [variable c][bracket )]\",\n        \"[meta '][bracket [[][variable a] [variable b] [variable c][bracket ]]]\",\n        \"[meta '][bracket {][variable a] [number 1] [atom :foo] [number 2] [variable c] [number 3][bracket }]\",\n        \"[meta '#][bracket {][variable a] [number 1] [atom :foo][bracket }]\"\n    );\n\n    MT(\"symbols\",\n      \"[variable foo!]\",\n      \"[variable foo#]\",\n      \"[variable foo$]\",\n      \"[variable foo&]\",\n      \"[variable foo']\",\n      \"[variable foo*]\",\n      \"[variable foo+]\",\n      \"[variable foo-]\",\n      \"[variable foo.]\",\n      \"[variable foo/bar]\",\n      \"[variable foo:bar]\",\n      \"[variable foo<]\",\n      \"[variable foo=]\",\n      \"[variable foo>]\",\n      \"[variable foo?]\",\n      \"[variable foo_]\",\n      \"[variable foo|]\",\n      \"[variable foobarBaz]\",\n      \"[variable foo¡]\",\n      \"[variable 符号]\",\n      \"[variable シンボル]\",\n      \"[variable ئۇيغۇر]\",\n      \"[variable 🙂❤🇺🇸]\",\n\n      // invalid symbols\n      \"[error 3foo]\",\n      \"[error 3+]\",\n      \"[error 3|]\",\n      \"[error 3_]\"\n    );\n\n    MT(\"numbers and other forms\",\n      \"[number 42][bracket (][builtin foo][bracket )]\",\n      \"[number 42][bracket [[][variable foo][bracket ]]]\",\n      \"[number 42][meta #][bracket {][variable foo][bracket }]\",\n      \"[number 42][bracket {][atom :foo] [variable bar][bracket }]\",\n      \"[number 42][meta `][variable foo]\",\n      \"[number 42][meta ~][variable foo]\",\n      \"[number 42][meta #][variable foo]\"\n    );\n\n    var specialForms = [\".\", \"catch\", \"def\", \"do\", \"if\", \"monitor-enter\",\n        \"monitor-exit\", \"new\", \"quote\", \"recur\", \"set!\", \"throw\", \"try\", \"var\"];\n\n    MT(\"should highlight special forms as keywords\",\n        typeTokenPairs(\"keyword\", specialForms)\n    );\n\n    var coreSymbols1 = [\n        \"*\", \"*'\", \"*1\", \"*2\", \"*3\", \"*agent*\", \"*allow-unresolved-vars*\", \"*assert*\",\n        \"*clojure-version*\", \"*command-line-args*\", \"*compile-files*\", \"*compile-path*\", \"*compiler-options*\",\n        \"*data-readers*\", \"*default-data-reader-fn*\", \"*e\", \"*err*\", \"*file*\", \"*flush-on-newline*\", \"*fn-loader*\",\n        \"*in*\", \"*math-context*\", \"*ns*\", \"*out*\", \"*print-dup*\", \"*print-length*\", \"*print-level*\", \"*print-meta*\",\n        \"*print-namespace-maps*\", \"*print-readably*\", \"*read-eval*\", \"*reader-resolver*\", \"*source-path*\",\n        \"*suppress-read*\", \"*unchecked-math*\", \"*use-context-classloader*\", \"*verbose-defrecords*\",\n        \"*warn-on-reflection*\", \"+\", \"+'\", \"-\", \"-'\", \"->\", \"->>\", \"->ArrayChunk\", \"->Eduction\", \"->Vec\", \"->VecNode\",\n        \"->VecSeq\", \"-cache-protocol-fn\", \"-reset-methods\", \"..\", \"/\", \"<\", \"<=\", \"=\", \"==\", \">\", \">=\",\n        \"EMPTY-NODE\", \"Inst\", \"StackTraceElement->vec\", \"Throwable->map\", \"accessor\", \"aclone\", \"add-classpath\",\n        \"add-watch\", \"agent\", \"agent-error\", \"agent-errors\", \"aget\", \"alength\", \"alias\", \"all-ns\", \"alter\",\n        \"alter-meta!\", \"alter-var-root\", \"amap\", \"ancestors\", \"and\", \"any?\", \"apply\", \"areduce\", \"array-map\",\n        \"as->\", \"aset\", \"aset-boolean\", \"aset-byte\", \"aset-char\", \"aset-double\", \"aset-float\", \"aset-int\",\n        \"aset-long\", \"aset-short\", \"assert\", \"assoc\", \"assoc!\", \"assoc-in\", \"associative?\", \"atom\", \"await\",\n        \"await-for\", \"await1\", \"bases\", \"bean\", \"bigdec\", \"bigint\", \"biginteger\", \"binding\", \"bit-and\", \"bit-and-not\",\n        \"bit-clear\", \"bit-flip\", \"bit-not\", \"bit-or\", \"bit-set\", \"bit-shift-left\", \"bit-shift-right\", \"bit-test\",\n        \"bit-xor\", \"boolean\", \"boolean-array\", \"boolean?\", \"booleans\", \"bound-fn\", \"bound-fn*\", \"bound?\",\n        \"bounded-count\", \"butlast\", \"byte\", \"byte-array\", \"bytes\", \"bytes?\", \"case\", \"cast\", \"cat\", \"char\",\n        \"char-array\", \"char-escape-string\", \"char-name-string\", \"char?\", \"chars\", \"chunk\", \"chunk-append\",\n        \"chunk-buffer\", \"chunk-cons\", \"chunk-first\", \"chunk-next\", \"chunk-rest\", \"chunked-seq?\", \"class\", \"class?\",\n        \"clear-agent-errors\", \"clojure-version\", \"coll?\", \"comment\", \"commute\", \"comp\", \"comparator\", \"compare\",\n        \"compare-and-set!\", \"compile\", \"complement\", \"completing\", \"concat\", \"cond\", \"cond->\", \"cond->>\", \"condp\",\n        \"conj\", \"conj!\", \"cons\", \"constantly\", \"construct-proxy\", \"contains?\", \"count\", \"counted?\", \"create-ns\",\n        \"create-struct\", \"cycle\", \"dec\", \"dec'\", \"decimal?\", \"declare\", \"dedupe\", \"default-data-readers\", \"definline\",\n        \"definterface\", \"defmacro\", \"defmethod\", \"defmulti\", \"defn\", \"defn-\", \"defonce\", \"defprotocol\", \"defrecord\",\n        \"defstruct\", \"deftype\", \"delay\", \"delay?\", \"deliver\", \"denominator\", \"deref\", \"derive\", \"descendants\",\n        \"destructure\", \"disj\", \"disj!\", \"dissoc\", \"dissoc!\", \"distinct\", \"distinct?\", \"doall\", \"dorun\", \"doseq\",\n        \"dosync\", \"dotimes\", \"doto\", \"double\", \"double-array\", \"double?\", \"doubles\", \"drop\", \"drop-last\", \"drop-while\",\n        \"eduction\", \"empty\", \"empty?\", \"ensure\", \"ensure-reduced\", \"enumeration-seq\", \"error-handler\", \"error-mode\",\n        \"eval\", \"even?\", \"every-pred\", \"every?\", \"ex-data\", \"ex-info\", \"extend\", \"extend-protocol\", \"extend-type\",\n        \"extenders\", \"extends?\", \"false?\", \"ffirst\", \"file-seq\", \"filter\", \"filterv\", \"find\", \"find-keyword\", \"find-ns\",\n        \"find-protocol-impl\", \"find-protocol-method\", \"find-var\", \"first\", \"flatten\", \"float\", \"float-array\", \"float?\",\n        \"floats\", \"flush\", \"fn\", \"fn?\", \"fnext\", \"fnil\", \"for\", \"force\", \"format\", \"frequencies\", \"future\", \"future-call\",\n        \"future-cancel\", \"future-cancelled?\", \"future-done?\", \"future?\", \"gen-class\", \"gen-interface\", \"gensym\", \"get\",\n        \"get-in\", \"get-method\", \"get-proxy-class\", \"get-thread-bindings\", \"get-validator\", \"group-by\", \"halt-when\", \"hash\",\n        \"hash-combine\", \"hash-map\", \"hash-ordered-coll\", \"hash-set\", \"hash-unordered-coll\", \"ident?\", \"identical?\",\n        \"identity\", \"if-let\", \"if-not\", \"if-some\", \"ifn?\", \"import\", \"in-ns\", \"inc\", \"inc'\", \"indexed?\", \"init-proxy\",\n        \"inst-ms\", \"inst-ms*\", \"inst?\", \"instance?\", \"int\", \"int-array\", \"int?\", \"integer?\", \"interleave\", \"intern\",\n        \"interpose\", \"into\", \"into-array\", \"ints\", \"io!\", \"isa?\", \"iterate\", \"iterator-seq\", \"juxt\", \"keep\", \"keep-indexed\",\n        \"key\", \"keys\", \"keyword\", \"keyword?\", \"last\", \"lazy-cat\", \"lazy-seq\", \"let\", \"letfn\", \"line-seq\", \"list\", \"list*\",\n        \"list?\", \"load\", \"load-file\", \"load-reader\", \"load-string\", \"loaded-libs\", \"locking\", \"long\", \"long-array\", \"longs\",\n        \"loop\", \"macroexpand\", \"macroexpand-1\", \"make-array\", \"make-hierarchy\", \"map\", \"map-entry?\", \"map-indexed\", \"map?\",\n        \"mapcat\", \"mapv\", \"max\", \"max-key\", \"memfn\", \"memoize\", \"merge\", \"merge-with\", \"meta\", \"method-sig\", \"methods\"];\n\n    var coreSymbols2 = [\n        \"min\", \"min-key\", \"mix-collection-hash\", \"mod\", \"munge\", \"name\", \"namespace\", \"namespace-munge\", \"nat-int?\",\n        \"neg-int?\", \"neg?\", \"newline\", \"next\", \"nfirst\", \"nil?\", \"nnext\", \"not\", \"not-any?\", \"not-empty\", \"not-every?\",\n        \"not=\", \"ns\", \"ns-aliases\", \"ns-imports\", \"ns-interns\", \"ns-map\", \"ns-name\", \"ns-publics\", \"ns-refers\", \"ns-resolve\",\n        \"ns-unalias\", \"ns-unmap\", \"nth\", \"nthnext\", \"nthrest\", \"num\", \"number?\", \"numerator\", \"object-array\", \"odd?\", \"or\",\n        \"parents\", \"partial\", \"partition\", \"partition-all\", \"partition-by\", \"pcalls\", \"peek\", \"persistent!\", \"pmap\", \"pop\",\n        \"pop!\", \"pop-thread-bindings\", \"pos-int?\", \"pos?\", \"pr\", \"pr-str\", \"prefer-method\", \"prefers\",\n        \"primitives-classnames\", \"print\", \"print-ctor\", \"print-dup\", \"print-method\", \"print-simple\", \"print-str\", \"printf\",\n        \"println\", \"println-str\", \"prn\", \"prn-str\", \"promise\", \"proxy\", \"proxy-call-with-super\", \"proxy-mappings\",\n        \"proxy-name\", \"proxy-super\", \"push-thread-bindings\", \"pvalues\", \"qualified-ident?\", \"qualified-keyword?\",\n        \"qualified-symbol?\", \"quot\", \"rand\", \"rand-int\", \"rand-nth\", \"random-sample\", \"range\", \"ratio?\", \"rational?\",\n        \"rationalize\", \"re-find\", \"re-groups\", \"re-matcher\", \"re-matches\", \"re-pattern\", \"re-seq\", \"read\", \"read-line\",\n        \"read-string\", \"reader-conditional\", \"reader-conditional?\", \"realized?\", \"record?\", \"reduce\", \"reduce-kv\", \"reduced\",\n        \"reduced?\", \"reductions\", \"ref\", \"ref-history-count\", \"ref-max-history\", \"ref-min-history\", \"ref-set\", \"refer\",\n        \"refer-clojure\", \"reify\", \"release-pending-sends\", \"rem\", \"remove\", \"remove-all-methods\", \"remove-method\", \"remove-ns\",\n        \"remove-watch\", \"repeat\", \"repeatedly\", \"replace\", \"replicate\", \"require\", \"reset!\", \"reset-meta!\", \"reset-vals!\",\n        \"resolve\", \"rest\", \"restart-agent\", \"resultset-seq\", \"reverse\", \"reversible?\", \"rseq\", \"rsubseq\", \"run!\", \"satisfies?\",\n        \"second\", \"select-keys\", \"send\", \"send-off\", \"send-via\", \"seq\", \"seq?\", \"seqable?\", \"seque\", \"sequence\", \"sequential?\",\n        \"set\", \"set-agent-send-executor!\", \"set-agent-send-off-executor!\", \"set-error-handler!\", \"set-error-mode!\",\n        \"set-validator!\", \"set?\", \"short\", \"short-array\", \"shorts\", \"shuffle\", \"shutdown-agents\", \"simple-ident?\",\n        \"simple-keyword?\", \"simple-symbol?\", \"slurp\", \"some\", \"some->\", \"some->>\", \"some-fn\", \"some?\", \"sort\", \"sort-by\",\n        \"sorted-map\", \"sorted-map-by\", \"sorted-set\", \"sorted-set-by\", \"sorted?\", \"special-symbol?\", \"spit\", \"split-at\",\n        \"split-with\", \"str\", \"string?\", \"struct\", \"struct-map\", \"subs\", \"subseq\", \"subvec\", \"supers\", \"swap!\", \"swap-vals!\",\n        \"symbol\", \"symbol?\", \"sync\", \"tagged-literal\", \"tagged-literal?\", \"take\", \"take-last\", \"take-nth\", \"take-while\", \"test\",\n        \"the-ns\", \"thread-bound?\", \"time\", \"to-array\", \"to-array-2d\", \"trampoline\", \"transduce\", \"transient\", \"tree-seq\",\n        \"true?\", \"type\", \"unchecked-add\", \"unchecked-add-int\", \"unchecked-byte\", \"unchecked-char\", \"unchecked-dec\",\n        \"unchecked-dec-int\", \"unchecked-divide-int\", \"unchecked-double\", \"unchecked-float\", \"unchecked-inc\", \"unchecked-inc-int\",\n        \"unchecked-int\", \"unchecked-long\", \"unchecked-multiply\", \"unchecked-multiply-int\", \"unchecked-negate\",\n        \"unchecked-negate-int\", \"unchecked-remainder-int\", \"unchecked-short\", \"unchecked-subtract\", \"unchecked-subtract-int\",\n        \"underive\", \"unquote\", \"unquote-splicing\", \"unreduced\", \"unsigned-bit-shift-right\", \"update\", \"update-in\",\n        \"update-proxy\", \"uri?\", \"use\", \"uuid?\", \"val\", \"vals\", \"var-get\", \"var-set\", \"var?\", \"vary-meta\", \"vec\", \"vector\",\n        \"vector-of\", \"vector?\", \"volatile!\", \"volatile?\", \"vreset!\", \"vswap!\", \"when\", \"when-first\", \"when-let\", \"when-not\",\n        \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\", \"with-loading-context\", \"with-local-vars\",\n        \"with-meta\", \"with-open\", \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\", \"xml-seq\", \"zero?\",\n        \"zipmap\"\n    ];\n\n    MT(\"should highlight core symbols as keywords (part 1/2)\",\n        typeTokenPairs(\"keyword\", coreSymbols1)\n    );\n\n    MT(\"should highlight core symbols as keywords (part 2/2)\",\n        typeTokenPairs(\"keyword\", coreSymbols2)\n    );\n\n    MT(\"should properly indent forms in list literals\",\n        \"[bracket (][builtin foo] [atom :a] [number 1] [atom true] [atom nil][bracket )]\",\n        \"\",\n        \"[bracket (][builtin foo] [atom :a]\",\n        \"     [number 1]\",\n        \"     [atom true]\",\n        \"     [atom nil][bracket )]\",\n        \"\",\n        \"[bracket (][builtin foo] [atom :a] [number 1]\",\n        \"     [atom true]\",\n        \"     [atom nil][bracket )]\",\n        \"\",\n        \"[bracket (]\",\n        \" [builtin foo]\",\n        \" [atom :a]\",\n        \" [number 1]\",\n        \" [atom true]\",\n        \" [atom nil][bracket )]\",\n        \"\",\n        \"[bracket (][builtin foo] [bracket [[][atom :a][bracket ]]]\",\n        \"     [number 1]\",\n        \"     [atom true]\",\n        \"     [atom nil][bracket )]\"\n    );\n\n    MT(\"should properly indent forms in vector literals\",\n        \"[bracket [[][atom :a] [number 1] [atom true] [atom nil][bracket ]]]\",\n        \"\",\n        \"[bracket [[][atom :a]\",\n        \" [number 1]\",\n        \" [atom true]\",\n        \" [atom nil][bracket ]]]\",\n        \"\",\n        \"[bracket [[][atom :a] [number 1]\",\n        \" [atom true]\",\n        \" [atom nil][bracket ]]]\",\n        \"\",\n        \"[bracket [[]\",\n        \" [variable foo]\",\n        \" [atom :a]\",\n        \" [number 1]\",\n        \" [atom true]\",\n        \" [atom nil][bracket ]]]\"\n    );\n\n    MT(\"should properly indent forms in map literals\",\n        \"[bracket {][atom :a] [atom :a] [atom :b] [number 1] [atom :c] [atom true] [atom :d] [atom nil] [bracket }]\",\n        \"\",\n        \"[bracket {][atom :a] [atom :a]\",\n        \" [atom :b] [number 1]\",\n        \" [atom :c] [atom true]\",\n        \" [atom :d] [atom nil][bracket }]\",\n        \"\",\n        \"[bracket {][atom :a]\",\n        \" [atom :a]\",\n        \" [atom :b]\",\n        \" [number 1]\",\n        \" [atom :c]\",\n        \" [atom true]\",\n        \" [atom :d]\",\n        \" [atom nil][bracket }]\",\n        \"\",\n        \"[bracket {]\",\n        \" [atom :a] [atom :a]\",\n        \" [atom :b] [number 1]\",\n        \" [atom :c] [atom true]\",\n        \" [atom :d] [atom nil][bracket }]\"\n    );\n\n    MT(\"should properly indent forms in set literals\",\n        \"[meta #][bracket {][atom :a] [number 1] [atom true] [atom nil] [bracket }]\",\n        \"\",\n        \"[meta #][bracket {][atom :a]\",\n        \"  [number 1]\",\n        \"  [atom true]\",\n        \"  [atom nil][bracket }]\",\n        \"\",\n        \"[meta #][bracket {]\",\n        \"  [atom :a]\",\n        \"  [number 1]\",\n        \"  [atom true]\",\n        \"  [atom nil][bracket }]\"\n    );\n\n    var haveBodyParameter = [\n        \"->\", \"->>\", \"as->\", \"binding\", \"bound-fn\", \"case\", \"catch\", \"cond\",\n        \"cond->\", \"cond->>\", \"condp\", \"def\", \"definterface\", \"defmethod\", \"defn\",\n        \"defmacro\", \"defprotocol\", \"defrecord\", \"defstruct\", \"deftype\", \"do\",\n        \"doseq\", \"dotimes\", \"doto\", \"extend\", \"extend-protocol\", \"extend-type\",\n        \"fn\", \"for\", \"future\", \"if\", \"if-let\", \"if-not\", \"if-some\", \"let\",\n        \"letfn\", \"locking\", \"loop\", \"ns\", \"proxy\", \"reify\", \"some->\", \"some->>\",\n        \"struct-map\", \"try\", \"when\", \"when-first\", \"when-let\", \"when-not\",\n        \"when-some\", \"while\", \"with-bindings\", \"with-bindings*\", \"with-in-str\",\n        \"with-loading-context\", \"with-local-vars\", \"with-meta\", \"with-open\",\n        \"with-out-str\", \"with-precision\", \"with-redefs\", \"with-redefs-fn\"];\n\n    function testFormsThatHaveBodyParameter(forms) {\n        for (var i = 0; i < forms.length; i++) {\n            MT(\"should indent body argument of `\" + forms[i] + \"` by `options.indentUnit` spaces\",\n                \"[bracket (][keyword \" + forms[i] + \"] [variable foo] [variable bar]\",\n                \"  [variable baz]\",\n                \"  [variable qux][bracket )]\"\n            );\n        }\n    }\n\n    testFormsThatHaveBodyParameter(haveBodyParameter);\n\n    MT(\"should indent body argument of `comment` by `options.indentUnit` spaces\",\n        \"[bracket (][comment comment foo bar]\",\n        \"[comment  baz]\",\n        \"[comment  qux][bracket )]\"\n    );\n\n    function typeTokenPairs(type, tokens) {\n        return \"[\" + type + \" \" + tokens.join(\"] [\" + type + \" \") + \"]\";\n    }\n})();\n"]}