{"version":3,"sources":["mode/dart/dart.js"],"names":["define","CodeMirror","keywords","split","blockKeywords","atoms","builtins","set","words","obj","i","length","pushInterpolationStack","state","interpolationStack","push","tokenize","popInterpolationStack","pop","tokenString","quote","stream","raw","tripleQuoted","eat","tokenStringHelper","escaped","eol","peek","tokenInterpolation","next","match","tokenInterpolationIdentifier","eatWhile","defineMIME","name","builtin","hooks","@","'","\"","r","}","_stream","sizeInterpolationStack","/","tokenNestedComment","depth","ch","registerHelper","concat","defineMode","conf","getMode"],"mappings":"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","file":"../../../mode/dart/dart.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\", \"../clike/clike\"], function(CodeMirror) {\n  \"use strict\";\n\n  var keywords = (\"this super static final const abstract class extends external factory \" +\n    \"implements mixin get native set typedef with enum throw rethrow \" +\n    \"assert break case continue default in return new deferred async await covariant \" +\n    \"try catch finally do else for if switch while import library export \" +\n    \"part of show hide is as\").split(\" \");\n  var blockKeywords = \"try catch finally do else for if switch while\".split(\" \");\n  var atoms = \"true false null\".split(\" \");\n  var builtins = \"void bool num int double dynamic var String\".split(\" \");\n\n  function set(words) {\n    var obj = {};\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n\n  function pushInterpolationStack(state) {\n    (state.interpolationStack || (state.interpolationStack = [])).push(state.tokenize);\n  }\n\n  function popInterpolationStack(state) {\n    return (state.interpolationStack || (state.interpolationStack = [])).pop();\n  }\n\n  function sizeInterpolationStack(state) {\n    return state.interpolationStack ? state.interpolationStack.length : 0;\n  }\n\n  CodeMirror.defineMIME(\"application/dart\", {\n    name: \"clike\",\n    keywords: set(keywords),\n    blockKeywords: set(blockKeywords),\n    builtin: set(builtins),\n    atoms: set(atoms),\n    hooks: {\n      \"@\": function(stream) {\n        stream.eatWhile(/[\\w\\$_\\.]/);\n        return \"meta\";\n      },\n\n      // custom string handling to deal with triple-quoted strings and string interpolation\n      \"'\": function(stream, state) {\n        return tokenString(\"'\", stream, state, false);\n      },\n      \"\\\"\": function(stream, state) {\n        return tokenString(\"\\\"\", stream, state, false);\n      },\n      \"r\": function(stream, state) {\n        var peek = stream.peek();\n        if (peek == \"'\" || peek == \"\\\"\") {\n          return tokenString(stream.next(), stream, state, true);\n        }\n        return false;\n      },\n\n      \"}\": function(_stream, state) {\n        // \"}\" is end of interpolation, if interpolation stack is non-empty\n        if (sizeInterpolationStack(state) > 0) {\n          state.tokenize = popInterpolationStack(state);\n          return null;\n        }\n        return false;\n      },\n\n      \"/\": function(stream, state) {\n        if (!stream.eat(\"*\")) return false\n        state.tokenize = tokenNestedComment(1)\n        return state.tokenize(stream, state)\n      }\n    }\n  });\n\n  function tokenString(quote, stream, state, raw) {\n    var tripleQuoted = false;\n    if (stream.eat(quote)) {\n      if (stream.eat(quote)) tripleQuoted = true;\n      else return \"string\"; //empty string\n    }\n    function tokenStringHelper(stream, state) {\n      var escaped = false;\n      while (!stream.eol()) {\n        if (!raw && !escaped && stream.peek() == \"$\") {\n          pushInterpolationStack(state);\n          state.tokenize = tokenInterpolation;\n          return \"string\";\n        }\n        var next = stream.next();\n        if (next == quote && !escaped && (!tripleQuoted || stream.match(quote + quote))) {\n          state.tokenize = null;\n          break;\n        }\n        escaped = !raw && !escaped && next == \"\\\\\";\n      }\n      return \"string\";\n    }\n    state.tokenize = tokenStringHelper;\n    return tokenStringHelper(stream, state);\n  }\n\n  function tokenInterpolation(stream, state) {\n    stream.eat(\"$\");\n    if (stream.eat(\"{\")) {\n      // let clike handle the content of ${...},\n      // we take over again when \"}\" appears (see hooks).\n      state.tokenize = null;\n    } else {\n      state.tokenize = tokenInterpolationIdentifier;\n    }\n    return null;\n  }\n\n  function tokenInterpolationIdentifier(stream, state) {\n    stream.eatWhile(/[\\w_]/);\n    state.tokenize = popInterpolationStack(state);\n    return \"variable\";\n  }\n\n  function tokenNestedComment(depth) {\n    return function (stream, state) {\n      var ch\n      while (ch = stream.next()) {\n        if (ch == \"*\" && stream.eat(\"/\")) {\n          if (depth == 1) {\n            state.tokenize = null\n            break\n          } else {\n            state.tokenize = tokenNestedComment(depth - 1)\n            return state.tokenize(stream, state)\n          }\n        } else if (ch == \"/\" && stream.eat(\"*\")) {\n          state.tokenize = tokenNestedComment(depth + 1)\n          return state.tokenize(stream, state)\n        }\n      }\n      return \"comment\"\n    }\n  }\n\n  CodeMirror.registerHelper(\"hintWords\", \"application/dart\", keywords.concat(atoms).concat(builtins));\n\n  // This is needed to make loading through meta.js work.\n  CodeMirror.defineMode(\"dart\", function(conf) {\n    return CodeMirror.getMode(conf, \"application/dart\");\n  }, \"clike\");\n});\n"]}