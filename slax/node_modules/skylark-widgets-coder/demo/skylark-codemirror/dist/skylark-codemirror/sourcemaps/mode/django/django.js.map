{"version":3,"sources":["mode/django/django.js"],"names":["define","CodeMirror","defineMode","keywords","filters","operators","wordOperators","tokenBase","stream","state","match","tokenize","inVariable","inTag","inComment","next","inString","delimiter","previousTokenizer","escapeNext","eat","waitDot","peek","waitProperty","Error","waitPipe","waitFilter","eatSpace","foundVariable","keywordMatch","blockCommentTag","inBlockComment","skipToEnd","RegExp","join","startState","token","blockCommentStart","blockCommentEnd","config","htmlBase","getMode","djangoInner","overlayMode","defineMIME"],"mappings":"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","file":"../../../mode/django/django.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\n  \"../../CodeMirror\", \n  \"../htmlmixed/htmlmixed\",\n  \"../../addon/mode/overlay\"\n],function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"django:inner\", function() {\n    var keywords = [\"block\", \"endblock\", \"for\", \"endfor\", \"true\", \"false\", \"filter\", \"endfilter\",\n                    \"loop\", \"none\", \"self\", \"super\", \"if\", \"elif\", \"endif\", \"as\", \"else\", \"import\",\n                    \"with\", \"endwith\", \"without\", \"context\", \"ifequal\", \"endifequal\", \"ifnotequal\",\n                    \"endifnotequal\", \"extends\", \"include\", \"load\", \"comment\", \"endcomment\",\n                    \"empty\", \"url\", \"static\", \"trans\", \"blocktrans\", \"endblocktrans\", \"now\",\n                    \"regroup\", \"lorem\", \"ifchanged\", \"endifchanged\", \"firstof\", \"debug\", \"cycle\",\n                    \"csrf_token\", \"autoescape\", \"endautoescape\", \"spaceless\", \"endspaceless\",\n                    \"ssi\", \"templatetag\", \"verbatim\", \"endverbatim\", \"widthratio\"],\n        filters = [\"add\", \"addslashes\", \"capfirst\", \"center\", \"cut\", \"date\",\n                   \"default\", \"default_if_none\", \"dictsort\",\n                   \"dictsortreversed\", \"divisibleby\", \"escape\", \"escapejs\",\n                   \"filesizeformat\", \"first\", \"floatformat\", \"force_escape\",\n                   \"get_digit\", \"iriencode\", \"join\", \"last\", \"length\",\n                   \"length_is\", \"linebreaks\", \"linebreaksbr\", \"linenumbers\",\n                   \"ljust\", \"lower\", \"make_list\", \"phone2numeric\", \"pluralize\",\n                   \"pprint\", \"random\", \"removetags\", \"rjust\", \"safe\",\n                   \"safeseq\", \"slice\", \"slugify\", \"stringformat\", \"striptags\",\n                   \"time\", \"timesince\", \"timeuntil\", \"title\", \"truncatechars\",\n                   \"truncatechars_html\", \"truncatewords\", \"truncatewords_html\",\n                   \"unordered_list\", \"upper\", \"urlencode\", \"urlize\",\n                   \"urlizetrunc\", \"wordcount\", \"wordwrap\", \"yesno\"],\n        operators = [\"==\", \"!=\", \"<\", \">\", \"<=\", \">=\"],\n        wordOperators = [\"in\", \"not\", \"or\", \"and\"];\n\n    keywords = new RegExp(\"^\\\\b(\" + keywords.join(\"|\") + \")\\\\b\");\n    filters = new RegExp(\"^\\\\b(\" + filters.join(\"|\") + \")\\\\b\");\n    operators = new RegExp(\"^\\\\b(\" + operators.join(\"|\") + \")\\\\b\");\n    wordOperators = new RegExp(\"^\\\\b(\" + wordOperators.join(\"|\") + \")\\\\b\");\n\n    // We have to return \"null\" instead of null, in order to avoid string\n    // styling as the default, when using Django templates inside HTML\n    // element attributes\n    function tokenBase (stream, state) {\n      // Attempt to identify a variable, template or comment tag respectively\n      if (stream.match(\"{{\")) {\n        state.tokenize = inVariable;\n        return \"tag\";\n      } else if (stream.match(\"{%\")) {\n        state.tokenize = inTag;\n        return \"tag\";\n      } else if (stream.match(\"{#\")) {\n        state.tokenize = inComment;\n        return \"comment\";\n      }\n\n      // Ignore completely any stream series that do not match the\n      // Django template opening tags.\n      while (stream.next() != null && !stream.match(/\\{[{%#]/, false)) {}\n      return null;\n    }\n\n    // A string can be included in either single or double quotes (this is\n    // the delimiter). Mark everything as a string until the start delimiter\n    // occurs again.\n    function inString (delimiter, previousTokenizer) {\n      return function (stream, state) {\n        if (!state.escapeNext && stream.eat(delimiter)) {\n          state.tokenize = previousTokenizer;\n        } else {\n          if (state.escapeNext) {\n            state.escapeNext = false;\n          }\n\n          var ch = stream.next();\n\n          // Take into account the backslash for escaping characters, such as\n          // the string delimiter.\n          if (ch == \"\\\\\") {\n            state.escapeNext = true;\n          }\n        }\n\n        return \"string\";\n      };\n    }\n\n    // Apply Django template variable syntax highlighting\n    function inVariable (stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true;  // A property can be followed by another property\n          state.waitPipe = true;  // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n          state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to find the variable\n      if (stream.match(/\\b(\\w+)\\b/) && !state.foundVariable) {\n        state.waitDot = true;\n        state.waitPipe = true;  // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"}}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        state.tokenize = tokenBase;\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    function inTag (stream, state) {\n      // Attempt to match a dot that precedes a property\n      if (state.waitDot) {\n        state.waitDot = false;\n\n        if (stream.peek() != \".\") {\n          return \"null\";\n        }\n\n        // Dot followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\".\")) {\n          state.waitProperty = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for property.\");\n        }\n      }\n\n      // Attempt to match a pipe that precedes a filter\n      if (state.waitPipe) {\n        state.waitPipe = false;\n\n        if (stream.peek() != \"|\") {\n          return \"null\";\n        }\n\n        // Pipe followed by a non-word character should be considered an error.\n        if (stream.match(/\\.\\W+/)) {\n          return \"error\";\n        } else if (stream.eat(\"|\")) {\n          state.waitFilter = true;\n          return \"null\";\n        } else {\n          throw Error (\"Unexpected error while waiting for filter.\");\n        }\n      }\n\n      // Highlight properties\n      if (state.waitProperty) {\n        state.waitProperty = false;\n        if (stream.match(/\\b(\\w+)\\b/)) {\n          state.waitDot = true;  // A property can be followed by another property\n          state.waitPipe = true;  // A property can be followed by a filter\n          return \"property\";\n        }\n      }\n\n      // Highlight filters\n      if (state.waitFilter) {\n          state.waitFilter = false;\n        if (stream.match(filters)) {\n          return \"variable-2\";\n        }\n      }\n\n      // Ignore all white spaces\n      if (stream.eatSpace()) {\n        state.waitProperty = false;\n        return \"null\";\n      }\n\n      // Identify numbers\n      if (stream.match(/\\b\\d+(\\.\\d+)?\\b/)) {\n        return \"number\";\n      }\n\n      // Identify strings\n      if (stream.match(\"'\")) {\n        state.tokenize = inString(\"'\", state.tokenize);\n        return \"string\";\n      } else if (stream.match('\"')) {\n        state.tokenize = inString('\"', state.tokenize);\n        return \"string\";\n      }\n\n      // Attempt to match an operator\n      if (stream.match(operators)) {\n        return \"operator\";\n      }\n\n      // Attempt to match a word operator\n      if (stream.match(wordOperators)) {\n        return \"keyword\";\n      }\n\n      // Attempt to match a keyword\n      var keywordMatch = stream.match(keywords);\n      if (keywordMatch) {\n        if (keywordMatch[0] == \"comment\") {\n          state.blockCommentTag = true;\n        }\n        return \"keyword\";\n      }\n\n      // Attempt to match a variable\n      if (stream.match(/\\b(\\w+)\\b/)) {\n        state.waitDot = true;\n        state.waitPipe = true;  // A property can be followed by a filter\n        return \"variable\";\n      }\n\n      // If found closing tag reset\n      if (stream.match(\"%}\")) {\n        state.waitProperty = null;\n        state.waitFilter = null;\n        state.waitDot = null;\n        state.waitPipe = null;\n        // If the tag that closes is a block comment tag, we want to mark the\n        // following code as comment, until the tag closes.\n        if (state.blockCommentTag) {\n          state.blockCommentTag = false;  // Release the \"lock\"\n          state.tokenize = inBlockComment;\n        } else {\n          state.tokenize = tokenBase;\n        }\n        return \"tag\";\n      }\n\n      // If nothing was found, advance to the next character\n      stream.next();\n      return \"null\";\n    }\n\n    // Mark everything as comment inside the tag and the tag itself.\n    function inComment (stream, state) {\n      if (stream.match(/^.*?#\\}/)) state.tokenize = tokenBase\n      else stream.skipToEnd()\n      return \"comment\";\n    }\n\n    // Mark everything as a comment until the `blockcomment` tag closes.\n    function inBlockComment (stream, state) {\n      if (stream.match(/\\{%\\s*endcomment\\s*%\\}/, false)) {\n        state.tokenize = inTag;\n        stream.match(\"{%\");\n        return \"tag\";\n      } else {\n        stream.next();\n        return \"comment\";\n      }\n    }\n\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      },\n      blockCommentStart: \"{% comment %}\",\n      blockCommentEnd: \"{% endcomment %}\"\n    };\n  });\n\n  CodeMirror.defineMode(\"django\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var djangoInner = CodeMirror.getMode(config, \"django:inner\");\n    return CodeMirror.overlayMode(htmlBase, djangoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-django\", \"django\");\n});\n"]}