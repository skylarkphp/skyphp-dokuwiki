{"version":3,"sources":["mode/dockerfile/dockerfile.js"],"names":["define","CodeMirror","from","fromRegex","RegExp","shells","shellsAsArrayRegex","join","expose","exposeRegex","instructionRegex","concat","instructionOnlyLine","instructionWithArguments","defineSimpleMode","start","regex","sol","token","next","single","pop","double","array","arguments","push","meta","lineComment","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,mBAAoB,2BAA4B,SAASC,GAC/D,aAEA,IAAIC,EAAO,OACPC,EAAY,IAAIC,OAAO,cAAgBF,EAAO,OAAQ,KAEtDG,GAAU,MAAO,MAAO,aAAc,SACtCC,EAAqB,IAAIF,OAAO,WAAaC,EAAOE,KAAK,KAAO,aAAc,KAE9EC,EAAS,SACTC,EAAc,IAAIL,OAAO,WAAaI,EAAS,UAAW,KAU1DE,EAAmB,KADHR,EAAMM,GAAQG,OAAON,GAAQM,QAN/C,MAAO,OAAQ,aAAc,QAAS,MACtC,MAAO,OAAQ,SAAU,OACzB,UAAW,UAAW,aAAc,cAAe,UAKXJ,KAAK,KAAO,IAClDK,EAAsB,IAAIR,OAAO,UAAYM,EAAmB,gBAAiB,KACjFG,EAA2B,IAAIT,OAAO,UAAYM,EAAmB,SAAU,KAEnFT,EAAWa,iBAAiB,cAC1BC,QAGIC,MAAO,WACPC,KAAK,EACLC,MAAO,YAGPF,MAAOb,EACPe,OAAQ,KAAM,WACdD,KAAK,EACLE,KAAM,SAINH,MAAOJ,EACPM,OAAQ,KAAM,UAAW,KAAM,SAC/BD,KAAK,IAGLD,MAAOV,EACPY,OAAQ,KAAM,UAAW,MACzBD,KAAK,EACLE,KAAM,UAGNH,MAAOP,EACPS,OAAQ,KAAM,UAAW,MACzBD,KAAK,EACLE,KAAM,WAINH,MAAOH,EACPK,OAAQ,KAAM,UAAW,MACzBD,KAAK,EACLE,KAAM,cAGNH,MAAO,IACPE,MAAO,OAGXhB,OAEIc,MAAO,OACPE,MAAO,KACPC,KAAM,UAINH,MAAO,cACPE,OAAQ,KAAM,SACdC,KAAM,UAGNH,MAAO,mBACPE,OAAQ,KAAM,WACdC,KAAM,UAIND,MAAO,KACPC,KAAM,UAGVC,SAEIJ,MAAO,iBACPE,MAAO,WAGPF,MAAO,IACPE,MAAO,SACPG,KAAK,IAGTC,SAEIN,MAAO,iBACPE,MAAO,WAGPF,MAAO,IACPE,MAAO,SACPG,KAAK,IAGTE,QAEIP,MAAO,KACPE,MAAO,KACPC,KAAM,UAGNH,MAAO,qBACPE,MAAO,WAGXV,SAEIQ,MAAO,OACPE,MAAO,SACPC,KAAM,UAGNH,MAAO,UACPE,MAAO,KACPC,KAAM,UAGNH,MAAO,MACPE,MAAO,WAGPF,MAAO,SACPE,MAAO,OAIPA,MAAO,KACPC,KAAM,UAGVK,YAEIR,MAAO,WACPC,KAAK,EACLC,MAAO,YAGPF,MAAO,sBACPE,MAAO,SACPC,KAAM,UAGNH,MAAO,IACPE,MAAO,SACPO,KAAM,WAGNT,MAAO,sBACPE,MAAO,SACPC,KAAM,UAGNH,MAAO,IACPE,MAAO,SACPO,KAAM,WAGNT,MAAO,gBACPE,MAAO,OAGPF,MAAO,WACPE,MAAO,KACPC,KAAM,UAGNH,MAAO,UACPE,MAAO,OAIPA,MAAO,KACPC,KAAM,UAGVO,MACEC,YAAa,OAIjB1B,EAAW2B,WAAW,oBAAqB","file":"../../../mode/dockerfile/dockerfile.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\", \"../../addon/mode/simple\"], function(CodeMirror) {\n  \"use strict\";\n\n  var from = \"from\";\n  var fromRegex = new RegExp(\"^(\\\\s*)\\\\b(\" + from + \")\\\\b\", \"i\");\n\n  var shells = [\"run\", \"cmd\", \"entrypoint\", \"shell\"];\n  var shellsAsArrayRegex = new RegExp(\"^(\\\\s*)(\" + shells.join('|') + \")(\\\\s+\\\\[)\", \"i\");\n\n  var expose = \"expose\";\n  var exposeRegex = new RegExp(\"^(\\\\s*)(\" + expose + \")(\\\\s+)\", \"i\");\n\n  var others = [\n    \"arg\", \"from\", \"maintainer\", \"label\", \"env\",\n    \"add\", \"copy\", \"volume\", \"user\",\n    \"workdir\", \"onbuild\", \"stopsignal\", \"healthcheck\", \"shell\"\n  ];\n\n  // Collect all Dockerfile directives\n  var instructions = [from, expose].concat(shells).concat(others),\n      instructionRegex = \"(\" + instructions.join('|') + \")\",\n      instructionOnlyLine = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s*)(#.*)?$\", \"i\"),\n      instructionWithArguments = new RegExp(\"^(\\\\s*)\" + instructionRegex + \"(\\\\s+)\", \"i\");\n\n  CodeMirror.defineSimpleMode(\"dockerfile\", {\n    start: [\n      // Block comment: This is a line starting with a comment\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: fromRegex,\n        token: [null, \"keyword\"],\n        sol: true,\n        next: \"from\"\n      },\n      // Highlight an instruction without any arguments (for convenience)\n      {\n        regex: instructionOnlyLine,\n        token: [null, \"keyword\", null, \"error\"],\n        sol: true\n      },\n      {\n        regex: shellsAsArrayRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"array\"\n      },\n      {\n        regex: exposeRegex,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"expose\"\n      },\n      // Highlight an instruction followed by arguments\n      {\n        regex: instructionWithArguments,\n        token: [null, \"keyword\", null],\n        sol: true,\n        next: \"arguments\"\n      },\n      {\n        regex: /./,\n        token: null\n      }\n    ],\n    from: [\n      {\n        regex: /\\s*$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        // Line comment without instruction arguments is an error\n        regex: /(\\s*)(#.*)$/,\n        token: [null, \"error\"],\n        next: \"start\"\n      },\n      {\n        regex: /(\\s*\\S+\\s+)(as)/i,\n        token: [null, \"keyword\"],\n        next: \"start\"\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    single: [\n      {\n        regex: /(?:[^\\\\']|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    double: [\n      {\n        regex: /(?:[^\\\\\"]|\\\\.)/,\n        token: \"string\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        pop: true\n      }\n    ],\n    array: [\n      {\n        regex: /\\]/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/,\n        token: \"string\"\n      }\n    ],\n    expose: [\n      {\n        regex: /\\d+$/,\n        token: \"number\",\n        next: \"start\"\n      },\n      {\n        regex: /[^\\d]+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /\\d+/,\n        token: \"number\"\n      },\n      {\n        regex: /[^\\d]+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    arguments: [\n      {\n        regex: /^\\s*#.*$/,\n        sol: true,\n        token: \"comment\"\n      },\n      {\n        regex: /\"(?:[^\\\\\"]|\\\\.)*\"?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /\"/,\n        token: \"string\",\n        push: \"double\"\n      },\n      {\n        regex: /'(?:[^\\\\']|\\\\.)*'?$/,\n        token: \"string\",\n        next: \"start\"\n      },\n      {\n        regex: /'/,\n        token: \"string\",\n        push: \"single\"\n      },\n      {\n        regex: /[^#\"']+[\\\\`]$/,\n        token: null\n      },\n      {\n        regex: /[^#\"']+$/,\n        token: null,\n        next: \"start\"\n      },\n      {\n        regex: /[^#\"']+/,\n        token: null\n      },\n      // Fail safe return to start\n      {\n        token: null,\n        next: \"start\"\n      }\n    ],\n    meta: {\n      lineComment: \"#\"\n    }\n  });\n\n  CodeMirror.defineMIME(\"text/x-dockerfile\", \"dockerfile\");\n});\n"]}