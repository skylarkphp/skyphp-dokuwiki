{"version":3,"sources":["mode/dylan/test.js"],"names":["mode","CodeMirror","getMode","indentUnit","MT","name","test","Array","prototype","slice","call","arguments"],"mappings":";;;;;;;CAGA,WACE,IAAIA,EAAOC,WAAWC,SAASC,WAAY,GAAI,SAC/C,SAASC,EAAGC,GAAQC,KAAKN,KAAKK,EAAML,EAAMO,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAEhFP,EAAG,WACA,sCACA,0CACA,+BACA,yBACA,eACA,gCACA,qCAEHA,EAAG,kBACA,2BACA,4BACA,2BACA,6BAEHA,EAAG,mBACA,yCACA,yCACA,yCACA,yCACA,yCACA,yCACA,0CACA,0CACA,2CACA,yCACA,0CACA,yCACA,0CACA,yCACA,yCACA,2CAEHA,EAAG,WACA,aACA,eACA,gBACA,gBACA,iBACA,iBACA,wBAEHA,EAAG,SACA,cACA,eACA,kBACA,mBACA,mBACA,qBAEHA,EAAG,yBACA,eACA,mBACA,cACA,eACA,qBACA,oGAEHA,EAAG,WACA,kBACA,gBACA,oCACA,+DACA,eACA,eACA,oDACA,mCACA,sCAEHA,EAAG,aACA,mBACA,YAAa,YACb,YAAa,YACb,mBACA,kBACA,cACA,eACA,eACA,kBACA,oBAnFL","file":"../../../mode/dylan/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function() {\n  var mode = CodeMirror.getMode({indentUnit: 2}, \"dylan\");\n  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }\n\n  MT('comments',\n     '[comment // This is a line comment]',\n     '[comment /* This is a block comment */]',\n     '[comment /* This is a multi]',\n     '[comment line comment]',\n     '[comment */]',\n     '[comment /* And this is a /*]',\n     '[comment /* nested */ comment */]');\n\n  MT('unary_operators',\n     '[operator -][variable a]',\n     '[operator -] [variable a]',\n     '[operator ~][variable a]',\n     '[operator ~] [variable a]');\n\n  MT('binary_operators',\n     '[variable a] [operator +] [variable b]',\n     '[variable a] [operator -] [variable b]',\n     '[variable a] [operator *] [variable b]',\n     '[variable a] [operator /] [variable b]',\n     '[variable a] [operator ^] [variable b]',\n     '[variable a] [operator =] [variable b]',\n     '[variable a] [operator ==] [variable b]',\n     '[variable a] [operator ~=] [variable b]',\n     '[variable a] [operator ~==] [variable b]',\n     '[variable a] [operator <] [variable b]',\n     '[variable a] [operator <=] [variable b]',\n     '[variable a] [operator >] [variable b]',\n     '[variable a] [operator >=] [variable b]',\n     '[variable a] [operator &] [variable b]',\n     '[variable a] [operator |] [variable b]',\n     '[variable a] [operator :=] [variable b]');\n\n  MT('integers',\n     '[number 1]',\n     '[number 123]',\n     '[number -123]',\n     '[number +456]',\n     '[number #b010]',\n     '[number #o073]',\n     '[number #xabcDEF123]');\n\n  MT('floats',\n     '[number .3]',\n     '[number -1.]',\n     '[number -2.335]',\n     '[number +3.78d1]',\n     '[number 3.78s-1]',\n     '[number -3.32e+5]');\n\n  MT('characters_and_strings',\n     \"[string 'a']\",\n     \"[string '\\\\\\\\'']\",\n     '[string \"\"]',\n     '[string \"a\"]',\n     '[string \"abc def\"]',\n     '[string \"More escaped characters: \\\\\\\\\\\\\\\\ \\\\\\\\a \\\\\\\\b \\\\\\\\e \\\\\\\\f \\\\\\\\n \\\\\\\\r \\\\\\\\t \\\\\\\\0 ...\"]');\n\n  MT('brackets',\n     '[bracket #[[]]]',\n     '[bracket #()]',\n     '[bracket #(][number 1][bracket )]',\n     '[bracket [[][number 1][punctuation ,] [number 3][bracket ]]]',\n     '[bracket ()]',\n     '[bracket {}]',\n     '[keyword if] [bracket (][variable foo][bracket )]',\n     '[bracket (][number 1][bracket )]',\n     '[bracket [[][number 1][bracket ]]]');\n\n  MT('hash_words',\n     '[punctuation ##]',\n     '[atom #f]', '[atom #F]',\n     '[atom #t]', '[atom #T]',\n     '[atom #all-keys]',\n     '[atom #include]',\n     '[atom #key]',\n     '[atom #next]',\n     '[atom #rest]',\n     '[string #\"foo\"]',\n     '[error #invalid]');\n})();\n"]}