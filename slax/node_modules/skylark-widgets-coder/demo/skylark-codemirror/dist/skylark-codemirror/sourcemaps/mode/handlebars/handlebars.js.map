{"version":3,"sources":["mode/handlebars/handlebars.js"],"names":["define","CodeMirror","defineSimpleMode","start","regex","push","token","handlebars","pop","dash_comment","comment","meta","blockCommentStart","blockCommentEnd","defineMode","config","parserConfig","getMode","base","multiplexingMode","open","close","mode","parseDelimiters","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,mBAAoB,0BAA2B,8BAA+B,SAASC,GAC7F,aAEAA,EAAWC,iBAAiB,mBAC1BC,QACIC,MAAO,UAAWC,KAAM,eAAgBC,MAAO,YAC/CF,MAAO,QAAWC,KAAM,UAAWC,MAAO,YAC1CF,MAAO,OAAWC,KAAM,aAAcC,MAAO,QAEjDC,aACIH,MAAO,OAAQI,KAAK,EAAMF,MAAO,QAGjCF,MAAO,qBAAsBE,MAAO,WACpCF,MAAO,qBAAsBE,MAAO,WAGpCF,MAAO,wBAAyBE,MAAO,YACvCF,MAAO,kBAAmBE,MAAO,YAGjCF,MAAO,OAAQE,MAAO,WAGtBF,MAAO,mBAAoBE,MAAO,SAGlCF,MAAO,mCAAoCE,MAAO,eAEtDG,eACIL,MAAO,SAAUI,KAAK,EAAMF,MAAO,YAGnCF,MAAO,IAAKE,MAAO,YAEvBI,UACIN,MAAO,OAAQI,KAAK,EAAMF,MAAO,YACjCF,MAAO,IAAKE,MAAO,YAEvBK,MACEC,kBAAmB,OACnBC,gBAAiB,UAIrBZ,EAAWa,WAAW,aAAc,SAASC,EAAQC,GACnD,IAAIT,EAAaN,EAAWgB,QAAQF,EAAQ,mBAC5C,OAAKC,GAAiBA,EAAaE,KAC5BjB,EAAWkB,iBAChBlB,EAAWgB,QAAQF,EAAQC,EAAaE,OACvCE,KAAM,KAAMC,MAAO,KAAMC,KAAMf,EAAYgB,iBAAiB,IAHfhB,IAOlDN,EAAWuB,WAAW,6BAA8B","file":"../../../mode/handlebars/handlebars.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\", \"../../addon/mode/simple\", \"../../addon/mode/multiplex\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode(\"handlebars-tags\", {\n    start: [\n      { regex: /\\{\\{!--/, push: \"dash_comment\", token: \"comment\" },\n      { regex: /\\{\\{!/,   push: \"comment\", token: \"comment\" },\n      { regex: /\\{\\{/,    push: \"handlebars\", token: \"tag\" }\n    ],\n    handlebars: [\n      { regex: /\\}\\}/, pop: true, token: \"tag\" },\n\n      // Double and single quotes\n      { regex: /\"(?:[^\\\\\"]|\\\\.)*\"?/, token: \"string\" },\n      { regex: /'(?:[^\\\\']|\\\\.)*'?/, token: \"string\" },\n\n      // Handlebars keywords\n      { regex: />|[#\\/]([A-Za-z_]\\w*)/, token: \"keyword\" },\n      { regex: /(?:else|this)\\b/, token: \"keyword\" },\n\n      // Numeral\n      { regex: /\\d+/i, token: \"number\" },\n\n      // Atoms like = and .\n      { regex: /=|~|@|true|false/, token: \"atom\" },\n\n      // Paths\n      { regex: /(?:\\.\\.\\/)*(?:[A-Za-z_][\\w\\.]*)+/, token: \"variable-2\" }\n    ],\n    dash_comment: [\n      { regex: /--\\}\\}/, pop: true, token: \"comment\" },\n\n      // Commented code\n      { regex: /./, token: \"comment\"}\n    ],\n    comment: [\n      { regex: /\\}\\}/, pop: true, token: \"comment\" },\n      { regex: /./, token: \"comment\" }\n    ],\n    meta: {\n      blockCommentStart: \"{{--\",\n      blockCommentEnd: \"--}}\"\n    }\n  });\n\n  CodeMirror.defineMode(\"handlebars\", function(config, parserConfig) {\n    var handlebars = CodeMirror.getMode(config, \"handlebars-tags\");\n    if (!parserConfig || !parserConfig.base) return handlebars;\n    return CodeMirror.multiplexingMode(\n      CodeMirror.getMode(config, parserConfig.base),\n      {open: \"{{\", close: \"}}\", mode: handlebars, parseDelimiters: true}\n    );\n  });\n\n  CodeMirror.defineMIME(\"text/x-handlebars-template\", \"handlebars\");\n});\n"]}