{"version":3,"sources":["mode/javascript/javascript.js"],"names":["define","CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","if","while","with","else","do","try","finally","return","break","continue","new","delete","void","throw","debugger","var","const","let","function","catch","for","switch","case","default","in","typeof","instanceof","true","false","null","undefined","NaN","Infinity","this","class","super","yield","export","import","extends","await","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","lexical","eatWhile","word","lastType","propertyIsEnumerable","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","number","variable","regexp","jsonld-keyword","JSLexical","indented","column","align","prev","info","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","inner","Context","Var","globalVars","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME"],"mappings":"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","file":"../../../mode/javascript/javascript.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d+(?:[eE][+\\-]?\\d+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\da-f]+|o[0-7]+|b[01]+)n?/i)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^\\d*(?:n|(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return ret(\"error\", \"error\");\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/]/.test(ch)) {\n        return;\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), expression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(expression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\" || value == \"in\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetype, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(isTS ? classfield : functiondef, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(isTS ? classfield : functiondef, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"]}