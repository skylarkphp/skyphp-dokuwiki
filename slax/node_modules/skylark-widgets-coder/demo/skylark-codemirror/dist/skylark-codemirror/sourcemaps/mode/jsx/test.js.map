{"version":3,"sources":["mode/jsx/test.js"],"names":["mode","CodeMirror","getMode","indentUnit","MT","name","test","Array","prototype","slice","call","arguments","ts_mode","TS"],"mappings":";;;;;;;CAGA,WACE,IAAIA,EAAOC,WAAWC,SAASC,WAAY,GAAI,OAC/C,SAASC,EAAGC,GAAQC,KAAKN,KAAKK,EAAML,EAAMO,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAEhFP,EAAG,YACA,0GAEHA,EAAG,YACA,oHAEHA,EAAG,oBACA,yHAEHA,EAAG,OACA,qJAEHA,EAAG,cACA,kJAEHA,EAAG,cACA,kIAEHA,EAAG,aACA,uIAEHA,EAAG,aACA,qBACA,4CACA,6GACA,0DACA,KAEHA,EAAG,sBACA,4GAEHA,EAAG,uBACD,wFAEFA,EAAG,eACA,+CACA,8DAEHA,EAAG,0BACA,oDACA,4DAEHA,EAAG,gBACA,+CACA,sBACA,kFAEHA,EAAG,2BACA,mDACA,aACA,wEAEHA,EAAG,eACA,gFAEHA,EAAG,YACA,2CACA,uEACA,uCACA,2BACA,+CAEHA,EAAG,SACA,gHAEHA,EAAG,gBACA,sGAEH,IAAIQ,EAAUX,WAAWC,SAASC,WAAY,GAAI,wBAClD,SAAYE,GAAQC,KAAKN,KAAKK,EAAMO,EAASL,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAEnFE,CAAG,wBACA,oCACA,mCACA,IACA,yIACA,0BACA,yJACA,MACA,IACA,mGACA,qGArFL","file":"../../../mode/jsx/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function() {\n  var mode = CodeMirror.getMode({indentUnit: 2}, \"jsx\")\n  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)) }\n\n  MT(\"selfclose\",\n     \"[keyword var] [def x] [operator =] [bracket&tag <] [tag foo] [bracket&tag />] [operator +] [number 1];\")\n\n  MT(\"openclose\",\n     \"([bracket&tag <][tag foo][bracket&tag >]hello [atom &amp;][bracket&tag </][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"openclosefragment\",\n     \"([bracket&tag <><][tag foo][bracket&tag >]hello [atom &amp;][bracket&tag </][tag foo][bracket&tag ></>][operator ++])\")\n\n  MT(\"attr\",\n     \"([bracket&tag <][tag foo] [attribute abc]=[string 'value'][bracket&tag >]hello [atom &amp;][bracket&tag </][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"braced_attr\",\n     \"([bracket&tag <][tag foo] [attribute abc]={[number 10]}[bracket&tag >]hello [atom &amp;][bracket&tag </][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"braced_text\",\n     \"([bracket&tag <][tag foo][bracket&tag >]hello {[number 10]} [atom &amp;][bracket&tag </][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"nested_tag\",\n     \"([bracket&tag <][tag foo][bracket&tag ><][tag bar][bracket&tag ></][tag bar][bracket&tag ></][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"nested_jsx\",\n     \"[keyword return] (\",\n     \"  [bracket&tag <][tag foo][bracket&tag >]\",\n     \"    say {[number 1] [operator +] [bracket&tag <][tag bar] [attribute attr]={[number 10]}[bracket&tag />]}!\",\n     \"  [bracket&tag </][tag foo][bracket&tag >][operator ++]\",\n     \")\")\n\n  MT(\"preserve_js_context\",\n     \"[variable x] [operator =] [string-2 `quasi${][bracket&tag <][tag foo][bracket&tag />][string-2 }quoted`]\")\n\n  MT(\"string_interpolation\",\n    \"[variable x] [operator =] [string-2 `quasi<code>${] [number 10] [string-2 }</code>`]\")\n\n  MT(\"line_comment\",\n     \"([bracket&tag <][tag foo] [comment // hello]\",\n     \"   [bracket&tag ></][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"line_comment_not_in_tag\",\n     \"([bracket&tag <][tag foo][bracket&tag >] // hello\",\n     \"  [bracket&tag </][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"block_comment\",\n     \"([bracket&tag <][tag foo] [comment /* hello]\",\n     \"[comment    line 2]\",\n     \"[comment    line 3 */] [bracket&tag ></][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"block_comment_not_in_tag\",\n     \"([bracket&tag <][tag foo][bracket&tag >]/* hello\",\n     \"    line 2\",\n     \"    line 3 */ [bracket&tag </][tag foo][bracket&tag >][operator ++])\")\n\n  MT(\"missing_attr\",\n     \"([bracket&tag <][tag foo] [attribute selected][bracket&tag />][operator ++])\")\n\n  MT(\"indent_js\",\n     \"([bracket&tag <][tag foo][bracket&tag >]\",\n     \"    [bracket&tag <][tag bar] [attribute baz]={[keyword function]() {\",\n     \"        [keyword return] [number 10]\",\n     \"      }}[bracket&tag />]\",\n     \"  [bracket&tag </][tag foo][bracket&tag >])\")\n\n  MT(\"spread\",\n     \"([bracket&tag <][tag foo] [attribute bar]={[meta ...][variable baz] [operator /][number 2]}[bracket&tag />])\")\n\n  MT(\"tag_attribute\",\n     \"([bracket&tag <][tag foo] [attribute bar]=[bracket&tag <][tag foo][bracket&tag />/>][operator ++])\")\n\n  var ts_mode = CodeMirror.getMode({indentUnit: 2}, \"text/typescript-jsx\")\n  function TS(name) { test.mode(name, ts_mode, Array.prototype.slice.call(arguments, 1)) }\n\n  TS(\"tsx_react_integration\",\n     \"[keyword interface] [def Props] {\",\n     \"  [property foo]: [type string];\",\n     \"}\",\n     \"[keyword class] [def MyComponent] [keyword extends] [type React].[type Component] [operator <] [type Props], [type any] [operator >] {\",\n     \"  [property render]() {\",\n     \"    [keyword return] [bracket&tag <][tag span][bracket&tag >]{[keyword this].[property props].[property foo]}[bracket&tag </][tag span][bracket&tag >]\",\n     \"  }\",\n     \"}\",\n     \"[bracket&tag <][tag MyComponent] [attribute foo]=[string \\\"bar\\\"] [bracket&tag />]; [comment //ok]\",\n     \"[bracket&tag <][tag MyComponent] [attribute foo]={[number 0]} [bracket&tag />]; [comment //error]\")\n\n})()\n"]}