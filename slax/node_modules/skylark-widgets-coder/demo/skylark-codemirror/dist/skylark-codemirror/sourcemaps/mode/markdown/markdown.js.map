{"version":3,"sources":["mode/markdown/markdown.js"],"names":["define","CodeMirror","defineMode","cmCfg","modeCfg","htmlMode","getMode","htmlModeMissing","name","undefined","highlightFormatting","maxBlockquoteDepth","taskLists","strikethrough","emoji","fencedCodeBlockHighlighting","xml","tokenTypeOverrides","tokenTypes","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","formatting","linkInline","linkEmail","linkText","linkHref","em","strong","tokenType","hasOwnProperty","hrRE","listRE","taskListRE","atxHeaderRE","allowAtxHeaderWithoutSpace","setextHeaderRE","textRE","fencedCodeRE","linkDefRE","punctuation","switchInline","stream","state","f","inline","switchBlock","block","blankLine","linkTitle","indentedCode","htmlBlock","exit","inner","innerMode","htmlState","mode","tagStart","context","tokenize","isInText","inlineNormal","blockNormal","trailingSpace","trailingSpaceNewLine","prevLine","thisLine","line","firstTokenOnLine","column","indentation","prevLineLineIsEmpty","test","string","prevLineIsIndentedCode","prevLineIsHr","prevLineIsList","list","maxNonCodeIndentation","listStack","length","lineIndentation","indentationDiff","pop","allowsInlineContinuation","fencedCodeEnd","isHr","match","skipToEnd","eatSpace","getType","eat","setext","listType","current","push","taskList","fencedEndRE","RegExp","localMode","findModeByName","found","mime","mimes","localState","startState","local","lookAhead","charAt","peek","footnoteLink","style","token","md_inside","indexOf","returnType","currListInd","hasExitedList","maxFencedEndInd","styles","i","taskOpen","join","taskClosed","listMod","handleText","text","ch","next","matchCh","regex","replace","previousFormatting","eatWhile","count","t","type","formattingEscape","end","pos","atts","substring","start","backUp","len","before","after","leftFlanking","rightFlanking","setEm","setStrong","retType","endChar","returnState","linkRE",")","]","footnoteLinkInside","footnoteUrl","copyState","s","slice","indent","textAfter","Pass","blockCommentStart","blockCommentEnd","closeBrackets","fold","defineMIME"],"mappings":"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","file":"../../../mode/markdown/markdown.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\n  \"../../CodeMirror\",\n  \"../xml/xml\",\n  \"../meta\"\n], function(CodeMirror) {\n\n\"use strict\";\n\nCodeMirror.defineMode(\"markdown\", function(cmCfg, modeCfg) {\n\n  var htmlMode = CodeMirror.getMode(cmCfg, \"text/html\");\n  var htmlModeMissing = htmlMode.name == \"null\"\n\n  function getMode(name) {\n    if (CodeMirror.findModeByName) {\n      var found = CodeMirror.findModeByName(name);\n      if (found) name = found.mime || found.mimes[0];\n    }\n    var mode = CodeMirror.getMode(cmCfg, name);\n    return mode.name == \"null\" ? null : mode;\n  }\n\n  // Should characters that affect highlighting be highlighted separate?\n  // Does not include characters that will be output (such as `1.` and `-` for lists)\n  if (modeCfg.highlightFormatting === undefined)\n    modeCfg.highlightFormatting = false;\n\n  // Maximum number of nested blockquotes. Set to 0 for infinite nesting.\n  // Excess `>` will emit `error` token.\n  if (modeCfg.maxBlockquoteDepth === undefined)\n    modeCfg.maxBlockquoteDepth = 0;\n\n  // Turn on task lists? (\"- [ ] \" and \"- [x] \")\n  if (modeCfg.taskLists === undefined) modeCfg.taskLists = false;\n\n  // Turn on strikethrough syntax\n  if (modeCfg.strikethrough === undefined)\n    modeCfg.strikethrough = false;\n\n  if (modeCfg.emoji === undefined)\n    modeCfg.emoji = false;\n\n  if (modeCfg.fencedCodeBlockHighlighting === undefined)\n    modeCfg.fencedCodeBlockHighlighting = true;\n\n  if (modeCfg.xml === undefined)\n    modeCfg.xml = true;\n\n  // Allow token types to be overridden by user-provided token types.\n  if (modeCfg.tokenTypeOverrides === undefined)\n    modeCfg.tokenTypeOverrides = {};\n\n  var tokenTypes = {\n    header: \"header\",\n    code: \"comment\",\n    quote: \"quote\",\n    list1: \"variable-2\",\n    list2: \"variable-3\",\n    list3: \"keyword\",\n    hr: \"hr\",\n    image: \"image\",\n    imageAltText: \"image-alt-text\",\n    imageMarker: \"image-marker\",\n    formatting: \"formatting\",\n    linkInline: \"link\",\n    linkEmail: \"link\",\n    linkText: \"link\",\n    linkHref: \"string\",\n    em: \"em\",\n    strong: \"strong\",\n    strikethrough: \"strikethrough\",\n    emoji: \"builtin\"\n  };\n\n  for (var tokenType in tokenTypes) {\n    if (tokenTypes.hasOwnProperty(tokenType) && modeCfg.tokenTypeOverrides[tokenType]) {\n      tokenTypes[tokenType] = modeCfg.tokenTypeOverrides[tokenType];\n    }\n  }\n\n  var hrRE = /^([*\\-_])(?:\\s*\\1){2,}\\s*$/\n  ,   listRE = /^(?:[*\\-+]|^[0-9]+([.)]))\\s+/\n  ,   taskListRE = /^\\[(x| )\\](?=\\s)/i // Must follow listRE\n  ,   atxHeaderRE = modeCfg.allowAtxHeaderWithoutSpace ? /^(#+)/ : /^(#+)(?: |$)/\n  ,   setextHeaderRE = /^ *(?:\\={1,}|-{1,})\\s*$/\n  ,   textRE = /^[^#!\\[\\]*_\\\\<>` \"'(~:]+/\n  ,   fencedCodeRE = /^(~~~+|```+)[ \\t]*([\\w+#-]*)[^\\n`]*$/\n  ,   linkDefRE = /^\\s*\\[[^\\]]+?\\]:.*$/ // naive link-definition\n  ,   punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E42\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC9\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9]|\\uD805[\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDF3C-\\uDF3E]|\\uD809[\\uDC70-\\uDC74]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]/\n  ,   expandedTab = \"    \" // CommonMark specifies tab as 4 spaces\n\n  function switchInline(stream, state, f) {\n    state.f = state.inline = f;\n    return f(stream, state);\n  }\n\n  function switchBlock(stream, state, f) {\n    state.f = state.block = f;\n    return f(stream, state);\n  }\n\n  function lineIsEmpty(line) {\n    return !line || !/\\S/.test(line.string)\n  }\n\n  // Blocks\n\n  function blankLine(state) {\n    // Reset linkTitle state\n    state.linkTitle = false;\n    state.linkHref = false;\n    state.linkText = false;\n    // Reset EM state\n    state.em = false;\n    // Reset STRONG state\n    state.strong = false;\n    // Reset strikethrough state\n    state.strikethrough = false;\n    // Reset state.quote\n    state.quote = 0;\n    // Reset state.indentedCode\n    state.indentedCode = false;\n    if (state.f == htmlBlock) {\n      var exit = htmlModeMissing\n      if (!exit) {\n        var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n        exit = inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n          (!inner.state.context && inner.state.tokenize.isInText)\n      }\n      if (exit) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    // Reset state.trailingSpace\n    state.trailingSpace = 0;\n    state.trailingSpaceNewLine = false;\n    // Mark this line as blank\n    state.prevLine = state.thisLine\n    state.thisLine = {stream: null}\n    return null;\n  }\n\n  function blockNormal(stream, state) {\n    var firstTokenOnLine = stream.column() === state.indentation;\n    var prevLineLineIsEmpty = lineIsEmpty(state.prevLine.stream);\n    var prevLineIsIndentedCode = state.indentedCode;\n    var prevLineIsHr = state.prevLine.hr;\n    var prevLineIsList = state.list !== false;\n    var maxNonCodeIndentation = (state.listStack[state.listStack.length - 1] || 0) + 3;\n\n    state.indentedCode = false;\n\n    var lineIndentation = state.indentation;\n    // compute once per line (on first token)\n    if (state.indentationDiff === null) {\n      state.indentationDiff = state.indentation;\n      if (prevLineIsList) {\n        // Reset inline styles which shouldn't propagate aross list items\n        state.em = false;\n        state.strong = false;\n        state.code = false;\n        state.strikethrough = false;\n\n        state.list = null;\n        // While this list item's marker's indentation is less than the deepest\n        //  list item's content's indentation,pop the deepest list item\n        //  indentation off the stack, and update block indentation state\n        while (lineIndentation < state.listStack[state.listStack.length - 1]) {\n          state.listStack.pop();\n          if (state.listStack.length) {\n            state.indentation = state.listStack[state.listStack.length - 1];\n          // less than the first list's indent -> the line is no longer a list\n          } else {\n            state.list = false;\n          }\n        }\n        if (state.list !== false) {\n          state.indentationDiff = lineIndentation - state.listStack[state.listStack.length - 1]\n        }\n      }\n    }\n\n    // not comprehensive (currently only for setext detection purposes)\n    var allowsInlineContinuation = (\n        !prevLineLineIsEmpty && !prevLineIsHr && !state.prevLine.header &&\n        (!prevLineIsList || !prevLineIsIndentedCode) &&\n        !state.prevLine.fencedCodeEnd\n    );\n\n    var isHr = (state.list === false || prevLineIsHr || prevLineLineIsEmpty) &&\n      state.indentation <= maxNonCodeIndentation && stream.match(hrRE);\n\n    var match = null;\n    if (state.indentationDiff >= 4 && (prevLineIsIndentedCode || state.prevLine.fencedCodeEnd ||\n         state.prevLine.header || prevLineLineIsEmpty)) {\n      stream.skipToEnd();\n      state.indentedCode = true;\n      return tokenTypes.code;\n    } else if (stream.eatSpace()) {\n      return null;\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(atxHeaderRE)) && match[1].length <= 6) {\n      state.quote = 0;\n      state.header = match[1].length;\n      state.thisLine.header = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      state.f = state.inline;\n      return getType(state);\n    } else if (state.indentation <= maxNonCodeIndentation && stream.eat('>')) {\n      state.quote = firstTokenOnLine ? 1 : state.quote + 1;\n      if (modeCfg.highlightFormatting) state.formatting = \"quote\";\n      stream.eatSpace();\n      return getType(state);\n    } else if (!isHr && !state.setext && firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(listRE))) {\n      var listType = match[1] ? \"ol\" : \"ul\";\n\n      state.indentation = lineIndentation + stream.current().length;\n      state.list = true;\n      state.quote = 0;\n\n      // Add this list item's content's indentation to the stack\n      state.listStack.push(state.indentation);\n\n      if (modeCfg.taskLists && stream.match(taskListRE, false)) {\n        state.taskList = true;\n      }\n      state.f = state.inline;\n      if (modeCfg.highlightFormatting) state.formatting = [\"list\", \"list-\" + listType];\n      return getType(state);\n    } else if (firstTokenOnLine && state.indentation <= maxNonCodeIndentation && (match = stream.match(fencedCodeRE, true))) {\n      state.quote = 0;\n      state.fencedEndRE = new RegExp(match[1] + \"+ *$\");\n      // try switching mode\n      state.localMode = modeCfg.fencedCodeBlockHighlighting && getMode(match[2]);\n      if (state.localMode) state.localState = CodeMirror.startState(state.localMode);\n      state.f = state.block = local;\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      state.code = -1\n      return getType(state);\n    // SETEXT has lowest block-scope precedence after HR, so check it after\n    //  the others (code, blockquote, list...)\n    } else if (\n      // if setext set, indicates line after ---/===\n      state.setext || (\n        // line before ---/===\n        (!allowsInlineContinuation || !prevLineIsList) && !state.quote && state.list === false &&\n        !state.code && !isHr && !linkDefRE.test(stream.string) &&\n        (match = stream.lookAhead(1)) && (match = match.match(setextHeaderRE))\n      )\n    ) {\n      if ( !state.setext ) {\n        state.header = match[0].charAt(0) == '=' ? 1 : 2;\n        state.setext = state.header;\n      } else {\n        state.header = state.setext;\n        // has no effect on type so we can reset it now\n        state.setext = 0;\n        stream.skipToEnd();\n        if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      }\n      state.thisLine.header = true;\n      state.f = state.inline;\n      return getType(state);\n    } else if (isHr) {\n      stream.skipToEnd();\n      state.hr = true;\n      state.thisLine.hr = true;\n      return tokenTypes.hr;\n    } else if (stream.peek() === '[') {\n      return switchInline(stream, state, footnoteLink);\n    }\n\n    return switchInline(stream, state, state.inline);\n  }\n\n  function htmlBlock(stream, state) {\n    var style = htmlMode.token(stream, state.htmlState);\n    if (!htmlModeMissing) {\n      var inner = CodeMirror.innerMode(htmlMode, state.htmlState)\n      if ((inner.mode.name == \"xml\" && inner.state.tagStart === null &&\n           (!inner.state.context && inner.state.tokenize.isInText)) ||\n          (state.md_inside && stream.current().indexOf(\">\") > -1)) {\n        state.f = inlineNormal;\n        state.block = blockNormal;\n        state.htmlState = null;\n      }\n    }\n    return style;\n  }\n\n  function local(stream, state) {\n    var currListInd = state.listStack[state.listStack.length - 1] || 0;\n    var hasExitedList = state.indentation < currListInd;\n    var maxFencedEndInd = currListInd + 3;\n    if (state.fencedEndRE && state.indentation <= maxFencedEndInd && (hasExitedList || stream.match(state.fencedEndRE))) {\n      if (modeCfg.highlightFormatting) state.formatting = \"code-block\";\n      var returnType;\n      if (!hasExitedList) returnType = getType(state)\n      state.localMode = state.localState = null;\n      state.block = blockNormal;\n      state.f = inlineNormal;\n      state.fencedEndRE = null;\n      state.code = 0\n      state.thisLine.fencedCodeEnd = true;\n      if (hasExitedList) return switchBlock(stream, state, state.block);\n      return returnType;\n    } else if (state.localMode) {\n      return state.localMode.token(stream, state.localState);\n    } else {\n      stream.skipToEnd();\n      return tokenTypes.code;\n    }\n  }\n\n  // Inline\n  function getType(state) {\n    var styles = [];\n\n    if (state.formatting) {\n      styles.push(tokenTypes.formatting);\n\n      if (typeof state.formatting === \"string\") state.formatting = [state.formatting];\n\n      for (var i = 0; i < state.formatting.length; i++) {\n        styles.push(tokenTypes.formatting + \"-\" + state.formatting[i]);\n\n        if (state.formatting[i] === \"header\") {\n          styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.header);\n        }\n\n        // Add `formatting-quote` and `formatting-quote-#` for blockquotes\n        // Add `error` instead if the maximum blockquote nesting depth is passed\n        if (state.formatting[i] === \"quote\") {\n          if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n            styles.push(tokenTypes.formatting + \"-\" + state.formatting[i] + \"-\" + state.quote);\n          } else {\n            styles.push(\"error\");\n          }\n        }\n      }\n    }\n\n    if (state.taskOpen) {\n      styles.push(\"meta\");\n      return styles.length ? styles.join(' ') : null;\n    }\n    if (state.taskClosed) {\n      styles.push(\"property\");\n      return styles.length ? styles.join(' ') : null;\n    }\n\n    if (state.linkHref) {\n      styles.push(tokenTypes.linkHref, \"url\");\n    } else { // Only apply inline styles to non-url text\n      if (state.strong) { styles.push(tokenTypes.strong); }\n      if (state.em) { styles.push(tokenTypes.em); }\n      if (state.strikethrough) { styles.push(tokenTypes.strikethrough); }\n      if (state.emoji) { styles.push(tokenTypes.emoji); }\n      if (state.linkText) { styles.push(tokenTypes.linkText); }\n      if (state.code) { styles.push(tokenTypes.code); }\n      if (state.image) { styles.push(tokenTypes.image); }\n      if (state.imageAltText) { styles.push(tokenTypes.imageAltText, \"link\"); }\n      if (state.imageMarker) { styles.push(tokenTypes.imageMarker); }\n    }\n\n    if (state.header) { styles.push(tokenTypes.header, tokenTypes.header + \"-\" + state.header); }\n\n    if (state.quote) {\n      styles.push(tokenTypes.quote);\n\n      // Add `quote-#` where the maximum for `#` is modeCfg.maxBlockquoteDepth\n      if (!modeCfg.maxBlockquoteDepth || modeCfg.maxBlockquoteDepth >= state.quote) {\n        styles.push(tokenTypes.quote + \"-\" + state.quote);\n      } else {\n        styles.push(tokenTypes.quote + \"-\" + modeCfg.maxBlockquoteDepth);\n      }\n    }\n\n    if (state.list !== false) {\n      var listMod = (state.listStack.length - 1) % 3;\n      if (!listMod) {\n        styles.push(tokenTypes.list1);\n      } else if (listMod === 1) {\n        styles.push(tokenTypes.list2);\n      } else {\n        styles.push(tokenTypes.list3);\n      }\n    }\n\n    if (state.trailingSpaceNewLine) {\n      styles.push(\"trailing-space-new-line\");\n    } else if (state.trailingSpace) {\n      styles.push(\"trailing-space-\" + (state.trailingSpace % 2 ? \"a\" : \"b\"));\n    }\n\n    return styles.length ? styles.join(' ') : null;\n  }\n\n  function handleText(stream, state) {\n    if (stream.match(textRE, true)) {\n      return getType(state);\n    }\n    return undefined;\n  }\n\n  function inlineNormal(stream, state) {\n    var style = state.text(stream, state);\n    if (typeof style !== 'undefined')\n      return style;\n\n    if (state.list) { // List marker (*, +, -, 1., etc)\n      state.list = null;\n      return getType(state);\n    }\n\n    if (state.taskList) {\n      var taskOpen = stream.match(taskListRE, true)[1] === \" \";\n      if (taskOpen) state.taskOpen = true;\n      else state.taskClosed = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"task\";\n      state.taskList = false;\n      return getType(state);\n    }\n\n    state.taskOpen = false;\n    state.taskClosed = false;\n\n    if (state.header && stream.match(/^#+$/, true)) {\n      if (modeCfg.highlightFormatting) state.formatting = \"header\";\n      return getType(state);\n    }\n\n    var ch = stream.next();\n\n    // Matches link titles present on next line\n    if (state.linkTitle) {\n      state.linkTitle = false;\n      var matchCh = ch;\n      if (ch === '(') {\n        matchCh = ')';\n      }\n      matchCh = (matchCh+'').replace(/([.?*+^\\[\\]\\\\(){}|-])/g, \"\\\\$1\");\n      var regex = '^\\\\s*(?:[^' + matchCh + '\\\\\\\\]+|\\\\\\\\\\\\\\\\|\\\\\\\\.)' + matchCh;\n      if (stream.match(new RegExp(regex), true)) {\n        return tokenTypes.linkHref;\n      }\n    }\n\n    // If this block is changed, it may need to be updated in GFM mode\n    if (ch === '`') {\n      var previousFormatting = state.formatting;\n      if (modeCfg.highlightFormatting) state.formatting = \"code\";\n      stream.eatWhile('`');\n      var count = stream.current().length\n      if (state.code == 0 && (!state.quote || count == 1)) {\n        state.code = count\n        return getType(state)\n      } else if (count == state.code) { // Must be exact\n        var t = getType(state)\n        state.code = 0\n        return t\n      } else {\n        state.formatting = previousFormatting\n        return getType(state)\n      }\n    } else if (state.code) {\n      return getType(state);\n    }\n\n    if (ch === '\\\\') {\n      stream.next();\n      if (modeCfg.highlightFormatting) {\n        var type = getType(state);\n        var formattingEscape = tokenTypes.formatting + \"-escape\";\n        return type ? type + \" \" + formattingEscape : formattingEscape;\n      }\n    }\n\n    if (ch === '!' && stream.match(/\\[[^\\]]*\\] ?(?:\\(|\\[)/, false)) {\n      state.imageMarker = true;\n      state.image = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === '[' && state.imageMarker && stream.match(/[^\\]]*\\](\\(.*?\\)| ?\\[.*?\\])/, false)) {\n      state.imageMarker = false;\n      state.imageAltText = true\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.imageAltText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"image\";\n      var type = getType(state);\n      state.imageAltText = false;\n      state.image = false;\n      state.inline = state.f = linkHref;\n      return type;\n    }\n\n    if (ch === '[' && !state.image) {\n      if (state.linkText && stream.match(/^.*?\\]/)) return getType(state)\n      state.linkText = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      return getType(state);\n    }\n\n    if (ch === ']' && state.linkText) {\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      state.linkText = false;\n      state.inline = state.f = stream.match(/\\(.*?\\)| ?\\[.*?\\]/, false) ? linkHref : inlineNormal\n      return type;\n    }\n\n    if (ch === '<' && stream.match(/^(https?|ftps?):\\/\\/(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    if (ch === '<' && stream.match(/^[^> \\\\]+@(?:[^\\\\>]|\\\\.)+>/, false)) {\n      state.f = state.inline = linkInline;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkEmail;\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^(!--|\\?|!\\[CDATA\\[|[a-z][a-z0-9-]*(?:\\s+[a-z_:.\\-]+(?:\\s*=\\s*[^>]+)?)*\\s*(?:>|$))/i, false)) {\n      var end = stream.string.indexOf(\">\", stream.pos);\n      if (end != -1) {\n        var atts = stream.string.substring(stream.start, end);\n        if (/markdown\\s*=\\s*('|\"){0,1}1('|\"){0,1}/.test(atts)) state.md_inside = true;\n      }\n      stream.backUp(1);\n      state.htmlState = CodeMirror.startState(htmlMode);\n      return switchBlock(stream, state, htmlBlock);\n    }\n\n    if (modeCfg.xml && ch === '<' && stream.match(/^\\/\\w*?>/)) {\n      state.md_inside = false;\n      return \"tag\";\n    } else if (ch === \"*\" || ch === \"_\") {\n      var len = 1, before = stream.pos == 1 ? \" \" : stream.string.charAt(stream.pos - 2)\n      while (len < 3 && stream.eat(ch)) len++\n      var after = stream.peek() || \" \"\n      // See http://spec.commonmark.org/0.27/#emphasis-and-strong-emphasis\n      var leftFlanking = !/\\s/.test(after) && (!punctuation.test(after) || /\\s/.test(before) || punctuation.test(before))\n      var rightFlanking = !/\\s/.test(before) && (!punctuation.test(before) || /\\s/.test(after) || punctuation.test(after))\n      var setEm = null, setStrong = null\n      if (len % 2) { // Em\n        if (!state.em && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setEm = true\n        else if (state.em == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setEm = false\n      }\n      if (len > 1) { // Strong\n        if (!state.strong && leftFlanking && (ch === \"*\" || !rightFlanking || punctuation.test(before)))\n          setStrong = true\n        else if (state.strong == ch && rightFlanking && (ch === \"*\" || !leftFlanking || punctuation.test(after)))\n          setStrong = false\n      }\n      if (setStrong != null || setEm != null) {\n        if (modeCfg.highlightFormatting) state.formatting = setEm == null ? \"strong\" : setStrong == null ? \"em\" : \"strong em\"\n        if (setEm === true) state.em = ch\n        if (setStrong === true) state.strong = ch\n        var t = getType(state)\n        if (setEm === false) state.em = false\n        if (setStrong === false) state.strong = false\n        return t\n      }\n    } else if (ch === ' ') {\n      if (stream.eat('*') || stream.eat('_')) { // Probably surrounded by spaces\n        if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n          return getType(state);\n        } else { // Not surrounded by spaces, back up pointer\n          stream.backUp(1);\n        }\n      }\n    }\n\n    if (modeCfg.strikethrough) {\n      if (ch === '~' && stream.eatWhile(ch)) {\n        if (state.strikethrough) {// Remove strikethrough\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          var t = getType(state);\n          state.strikethrough = false;\n          return t;\n        } else if (stream.match(/^[^\\s]/, false)) {// Add strikethrough\n          state.strikethrough = true;\n          if (modeCfg.highlightFormatting) state.formatting = \"strikethrough\";\n          return getType(state);\n        }\n      } else if (ch === ' ') {\n        if (stream.match(/^~~/, true)) { // Probably surrounded by space\n          if (stream.peek() === ' ') { // Surrounded by spaces, ignore\n            return getType(state);\n          } else { // Not surrounded by spaces, back up pointer\n            stream.backUp(2);\n          }\n        }\n      }\n    }\n\n    if (modeCfg.emoji && ch === \":\" && stream.match(/^(?:[a-z_\\d+][a-z_\\d+-]*|\\-[a-z_\\d+][a-z_\\d+-]*):/)) {\n      state.emoji = true;\n      if (modeCfg.highlightFormatting) state.formatting = \"emoji\";\n      var retType = getType(state);\n      state.emoji = false;\n      return retType;\n    }\n\n    if (ch === ' ') {\n      if (stream.match(/^ +$/, false)) {\n        state.trailingSpace++;\n      } else if (state.trailingSpace) {\n        state.trailingSpaceNewLine = true;\n      }\n    }\n\n    return getType(state);\n  }\n\n  function linkInline(stream, state) {\n    var ch = stream.next();\n\n    if (ch === \">\") {\n      state.f = state.inline = inlineNormal;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var type = getType(state);\n      if (type){\n        type += \" \";\n      } else {\n        type = \"\";\n      }\n      return type + tokenTypes.linkInline;\n    }\n\n    stream.match(/^[^>]+/, true);\n\n    return tokenTypes.linkInline;\n  }\n\n  function linkHref(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    var ch = stream.next();\n    if (ch === '(' || ch === '[') {\n      state.f = state.inline = getLinkHrefInside(ch === \"(\" ? \")\" : \"]\");\n      if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n      state.linkHref = true;\n      return getType(state);\n    }\n    return 'error';\n  }\n\n  var linkRE = {\n    \")\": /^(?:[^\\\\\\(\\)]|\\\\.|\\((?:[^\\\\\\(\\)]|\\\\.)*\\))*?(?=\\))/,\n    \"]\": /^(?:[^\\\\\\[\\]]|\\\\.|\\[(?:[^\\\\\\[\\]]|\\\\.)*\\])*?(?=\\])/\n  }\n\n  function getLinkHrefInside(endChar) {\n    return function(stream, state) {\n      var ch = stream.next();\n\n      if (ch === endChar) {\n        state.f = state.inline = inlineNormal;\n        if (modeCfg.highlightFormatting) state.formatting = \"link-string\";\n        var returnState = getType(state);\n        state.linkHref = false;\n        return returnState;\n      }\n\n      stream.match(linkRE[endChar])\n      state.linkHref = true;\n      return getType(state);\n    };\n  }\n\n  function footnoteLink(stream, state) {\n    if (stream.match(/^([^\\]\\\\]|\\\\.)*\\]:/, false)) {\n      state.f = footnoteLinkInside;\n      stream.next(); // Consume [\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      state.linkText = true;\n      return getType(state);\n    }\n    return switchInline(stream, state, inlineNormal);\n  }\n\n  function footnoteLinkInside(stream, state) {\n    if (stream.match(/^\\]:/, true)) {\n      state.f = state.inline = footnoteUrl;\n      if (modeCfg.highlightFormatting) state.formatting = \"link\";\n      var returnType = getType(state);\n      state.linkText = false;\n      return returnType;\n    }\n\n    stream.match(/^([^\\]\\\\]|\\\\.)+/, true);\n\n    return tokenTypes.linkText;\n  }\n\n  function footnoteUrl(stream, state) {\n    // Check if space, and return NULL if so (to avoid marking the space)\n    if(stream.eatSpace()){\n      return null;\n    }\n    // Match URL\n    stream.match(/^[^\\s]+/, true);\n    // Check for link title\n    if (stream.peek() === undefined) { // End of line, set flag to check next line\n      state.linkTitle = true;\n    } else { // More content on line, check if link title\n      stream.match(/^(?:\\s+(?:\"(?:[^\"\\\\]|\\\\\\\\|\\\\.)+\"|'(?:[^'\\\\]|\\\\\\\\|\\\\.)+'|\\((?:[^)\\\\]|\\\\\\\\|\\\\.)+\\)))?/, true);\n    }\n    state.f = state.inline = inlineNormal;\n    return tokenTypes.linkHref + \" url\";\n  }\n\n  var mode = {\n    startState: function() {\n      return {\n        f: blockNormal,\n\n        prevLine: {stream: null},\n        thisLine: {stream: null},\n\n        block: blockNormal,\n        htmlState: null,\n        indentation: 0,\n\n        inline: inlineNormal,\n        text: handleText,\n\n        formatting: false,\n        linkText: false,\n        linkHref: false,\n        linkTitle: false,\n        code: 0,\n        em: false,\n        strong: false,\n        header: 0,\n        setext: 0,\n        hr: false,\n        taskList: false,\n        list: false,\n        listStack: [],\n        quote: 0,\n        trailingSpace: 0,\n        trailingSpaceNewLine: false,\n        strikethrough: false,\n        emoji: false,\n        fencedEndRE: null\n      };\n    },\n\n    copyState: function(s) {\n      return {\n        f: s.f,\n\n        prevLine: s.prevLine,\n        thisLine: s.thisLine,\n\n        block: s.block,\n        htmlState: s.htmlState && CodeMirror.copyState(htmlMode, s.htmlState),\n        indentation: s.indentation,\n\n        localMode: s.localMode,\n        localState: s.localMode ? CodeMirror.copyState(s.localMode, s.localState) : null,\n\n        inline: s.inline,\n        text: s.text,\n        formatting: false,\n        linkText: s.linkText,\n        linkTitle: s.linkTitle,\n        linkHref: s.linkHref,\n        code: s.code,\n        em: s.em,\n        strong: s.strong,\n        strikethrough: s.strikethrough,\n        emoji: s.emoji,\n        header: s.header,\n        setext: s.setext,\n        hr: s.hr,\n        taskList: s.taskList,\n        list: s.list,\n        listStack: s.listStack.slice(0),\n        quote: s.quote,\n        indentedCode: s.indentedCode,\n        trailingSpace: s.trailingSpace,\n        trailingSpaceNewLine: s.trailingSpaceNewLine,\n        md_inside: s.md_inside,\n        fencedEndRE: s.fencedEndRE\n      };\n    },\n\n    token: function(stream, state) {\n\n      // Reset state.formatting\n      state.formatting = false;\n\n      if (stream != state.thisLine.stream) {\n        state.header = 0;\n        state.hr = false;\n\n        if (stream.match(/^\\s*$/, true)) {\n          blankLine(state);\n          return null;\n        }\n\n        state.prevLine = state.thisLine\n        state.thisLine = {stream: stream}\n\n        // Reset state.taskList\n        state.taskList = false;\n\n        // Reset state.trailingSpace\n        state.trailingSpace = 0;\n        state.trailingSpaceNewLine = false;\n\n        if (!state.localState) {\n          state.f = state.block;\n          if (state.f != htmlBlock) {\n            var indentation = stream.match(/^\\s*/, true)[0].replace(/\\t/g, expandedTab).length;\n            state.indentation = indentation;\n            state.indentationDiff = null;\n            if (indentation > 0) return null;\n          }\n        }\n      }\n      return state.f(stream, state);\n    },\n\n    innerMode: function(state) {\n      if (state.block == htmlBlock) return {state: state.htmlState, mode: htmlMode};\n      if (state.localState) return {state: state.localState, mode: state.localMode};\n      return {state: state, mode: mode};\n    },\n\n    indent: function(state, textAfter, line) {\n      if (state.block == htmlBlock && htmlMode.indent) return htmlMode.indent(state.htmlState, textAfter, line)\n      if (state.localState && state.localMode.indent) return state.localMode.indent(state.localState, textAfter, line)\n      return CodeMirror.Pass\n    },\n\n    blankLine: blankLine,\n\n    getType: getType,\n\n    blockCommentStart: \"<!--\",\n    blockCommentEnd: \"-->\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    fold: \"markdown\"\n  };\n  return mode;\n}, \"xml\");\n\nCodeMirror.defineMIME(\"text/markdown\", \"markdown\");\n\nCodeMirror.defineMIME(\"text/x-markdown\", \"markdown\");\n\n});\n"]}