{"version":3,"sources":["mode/markdown/test.js"],"names":["config","tabSize","indentUnit","mode","CodeMirror","getMode","MT","name","test","Array","prototype","slice","call","arguments","modeHighlightFormatting","highlightFormatting","FT","modeMT_noXml","xml","modeMT_noFencedHighlight","fencedCodeBlockHighlighting","modeAtxNoSpace","allowAtxHeaderWithoutSpace","AtxNoSpaceTest","modeOverrideClasses","strikethrough","emoji","tokenTypeOverrides","header","code","quote","list1","list2","list3","hr","image","imageAltText","imageMarker","linkInline","linkEmail","linkText","linkHref","em","strong","TokenTypeOverrideTest","modeFormattingOverride","formatting","modeET","ET","FormatTokenTypeOverrideTest","MT_noFencedHighlight","MT_noXml"],"mappings":"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ACA,yBAEHA,EAAG,gBACA,0BACA,wBACA,yBAGHA,EAAG,qBACA,wBACA,WACA,GACA,wBACA,sBACA,YAEHA,EAAG,oBACA,qBACA,YAEHA,EAAG,qCACA,qBACA,MACA,YAEHA,EAAG,oCACA,qBACA,GACA,sBACA,wBACA,yBAEHA,EAAG,wCACA,qBACA,GACA,sBACA,sBACA,sBACA,wBACA,yBAEHA,EAAG,8BACA,qBACA,uCACA,wBACA,yBAEHA,EAAG,0BACA,qBACA,GACA,aACA,wBACA,yBAEHA,EAAG,4BACA,mDACA,uBAEHA,EAAG,iBACA,yDACA,YAIHA,EAAG,0BACA,MACA,wBACA,uBAGHA,EAAG,mBACA,wBACA,uBACA,OAGHA,EAAG,kBACA,yBAGHA,EAAG,oBACA,wBAGHA,EAAG,wBACA,MACA,yBAEHA,EAAG,mBACA,wBACA,yCACA,2DAGHA,EAAG,2BACA,yBACA,0CACA,4DAGHA,EAAG,4BACA,MACA,aAGHA,EAAG,0BACA,uBACA,GACA,OAGHA,EAAG,sBACA,uBACA,uBAGHA,EAAG,mCACA,uBACA,sBACA,GACA,SAGHA,EAAG,kBACA,uBACA,wBAGHA,EAAG,+BACA,uBACA,uBACA,GACA,SAIHA,EAAG,yBACA,2BAIHA,EAAG,gCACA,wBACA,yBACA,wBAEA,oDAGHA,EAAG,iCACA,wBACA,sBACA,GACA,8BAIHA,EAAG,eACA,MACA,MACA,GACA,qBACA,sBAEHA,EAAG,WACA,MACA,MACA,GACA,qBACA,sBAEHA,EAAG,WACA,MACA,MACA,GACA,qBACA,sBAEHA,EAAG,aACA,MACA,MACA,GACA,sBACA,uBAEHA,EAAG,oBACA,MACA,sBACA,yBAGHA,EAAG,cACA,WACA,sBAGHA,EAAG,kBACA,0BACA,sBAGHA,EAAG,cACA,qBACA,cAEHA,EAAG,oBACA,gBACA,iBACA,gBACA,YAIHA,EAAG,eACA,qBACA,GACA,aACA,gBACA,GACA,uBAEHA,EAAG,gBACA,WACA,WACA,YAGHA,EAAG,yBACA,wDACA,8DACA,mEACA,8DAGHA,EAAG,qBACA,wDACA,8DACA,mEACA,8DAGHA,EAAG,qBACA,wDACA,8DACA,mEACA,8DAGHA,EAAG,uBACA,yDACA,+DACA,oEACA,+DAGHA,EAAG,gBACA,qBACA,GACA,sBAKHA,EAAG,qBACA,qBACA,GACA,qBACA,GACA,0BAGHA,EAAG,0BACA,qBACA,GACA,qBACA,GACA,GACA,0BAGHA,EAAG,+BACA,qBACA,GACA,qBACA,GACA,0BACA,GACA,0BAGHA,EAAG,UACA,qBACA,GACA,qBACA,GACA,wBAGHA,EAAG,eACA,qBACA,GACA,qBACA,GACA,SAEHA,EAAG,gCACA,yCACA,mEACA,qFACA,uFACA,6EACA,sFACA,wFACA,iFACA,qFACA,yBAGHA,EAAG,8BACA,uBACA,yBACA,+DACA,wDACA,GACA,qCACA,wCACA,yBAEA,iBAEA,GACA,GACA,+CACA,wBACA,GACA,0CACA,GACA,sDACA,GACA,6BACA,mBACA,6BACA,GACA,yCAGHA,EAAG,qCACA,gDACA,GACA,+DACA,GACA,kEACA,GACA,6DACA,GACA,qEAGHA,EAAG,6BACA,sBACA,yBACA,GACA,kCAEHA,EAAG,sBACA,wBACA,sBAGHA,EAAG,4BACA,qBACA,gCAEHA,EAAG,oCACA,MACA,aAGHA,EAAG,aACA,qBACA,GACA,qBACA,GACA,0CAGHA,EAAG,iBACA,qBACA,GACA,qBACA,GACA,4BACA,GACA,0BAGHA,EAAG,qBACA,qBACA,GACA,uBACA,GACA,0BACA,GACA,0BAIHA,EAAG,qBACA,qBACA,GACA,0BAEHA,EAAG,iBACA,qBACA,GACA,0BAEHA,EAAG,iBACA,qBACA,GACA,0BAEHA,EAAG,mBACA,sBACA,GACA,2BAEHA,EAAG,YACA,qBACA,GACA,yBACA,GACA,4BACA,GACA,qCAEHA,EAAG,iBACA,qBACA,GACA,yBACA,GACA,8CAEHA,EAAG,WACA,qBACA,GACA,yBACA,GACA,+BAGHA,EAAG,sBACA,qBACA,GACA,wBACA,8BACA,kCACA,wBACA,wBAGHA,EAAG,aACD,qBACA,GACA,yBACA,GACA,6BAEFA,EAAG,aACD,qBA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A,kBACA,OAEHA,EAAG,yBACA,gBACA,gBACA,gBACA,OAEHA,EAAG,sCACA,kBACA,gBACA,gBACA,kBACA,OAEHA,EAAG,gCACA,kBACA,gBACA,gBACA,gBACA,kBACA,OAEHA,EAAG,wBACA,gBACA,gBACA,gBACA,gBACA,OAEHA,EAAG,kCACA,wBACA,gBACA,gBACA,iBAIHU,EAAG,4BACA,oBACA,qBACA,qBAEHV,EAAG,yCACA,uBACA,yBACA,+BACA,qBACA,yBACA,6BACA,mBACA,yBAIHA,EAAG,UACA,0CACA,UACA,2DACA,2CACA,+BAEHA,EAAG,4BACA,0EACA,aACA,8BACA,eACA,8BACA,0CACA,4CAEHA,EAAG,yBACA,uDACA,0DACA,4CAEHA,EAAG,8BACA,0BACA,GACA,0BAEHA,EAAG,eACA,yBACA,GACA,gBACA,qBAEHA,EAAG,sBACA,uCA9wCH,SAAkBC,GAAQC,KAAKL,KAAKI,EAAMU,EAAcR,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAgxC9FsC,CAAS,uBACN,kBAIHH,EAAG,eACD,sBAEFA,EAAG,aACD,SAhyCJ","file":"../../../mode/markdown/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function() {\n  var config = {tabSize: 4, indentUnit: 2}\n  var mode = CodeMirror.getMode(config, \"markdown\");\n  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }\n  var modeHighlightFormatting = CodeMirror.getMode(config, {name: \"markdown\", highlightFormatting: true});\n  function FT(name) { test.mode(name, modeHighlightFormatting, Array.prototype.slice.call(arguments, 1)); }\n  var modeMT_noXml = CodeMirror.getMode(config, {name: \"markdown\", xml: false});\n  function MT_noXml(name) { test.mode(name, modeMT_noXml, Array.prototype.slice.call(arguments, 1)); }\n  var modeMT_noFencedHighlight = CodeMirror.getMode(config, {name: \"markdown\", fencedCodeBlockHighlighting: false});\n  function MT_noFencedHighlight(name) { test.mode(name, modeMT_noFencedHighlight, Array.prototype.slice.call(arguments, 1)); }\n  var modeAtxNoSpace = CodeMirror.getMode(config, {name: \"markdown\", allowAtxHeaderWithoutSpace: true});\n  function AtxNoSpaceTest(name) { test.mode(name, modeAtxNoSpace, Array.prototype.slice.call(arguments, 1)); }\n  var modeOverrideClasses = CodeMirror.getMode(config, {\n    name: \"markdown\",\n    strikethrough: true,\n    emoji: true,\n    tokenTypeOverrides: {\n      \"header\" : \"override-header\",\n      \"code\" : \"override-code\",\n      \"quote\" : \"override-quote\",\n      \"list1\" : \"override-list1\",\n      \"list2\" : \"override-list2\",\n      \"list3\" : \"override-list3\",\n      \"hr\" : \"override-hr\",\n      \"image\" : \"override-image\",\n      \"imageAltText\": \"override-image-alt-text\",\n      \"imageMarker\": \"override-image-marker\",\n      \"linkInline\" : \"override-link-inline\",\n      \"linkEmail\" : \"override-link-email\",\n      \"linkText\" : \"override-link-text\",\n      \"linkHref\" : \"override-link-href\",\n      \"em\" : \"override-em\",\n      \"strong\" : \"override-strong\",\n      \"strikethrough\" : \"override-strikethrough\",\n      \"emoji\" : \"override-emoji\"\n  }});\n  function TokenTypeOverrideTest(name) { test.mode(name, modeOverrideClasses, Array.prototype.slice.call(arguments, 1)); }\n  var modeFormattingOverride = CodeMirror.getMode(config, {\n    name: \"markdown\",\n    highlightFormatting: true,\n    tokenTypeOverrides: {\n      \"formatting\" : \"override-formatting\"\n  }});\n  function FormatTokenTypeOverrideTest(name) { test.mode(name, modeFormattingOverride, Array.prototype.slice.call(arguments, 1)); }\n  var modeET = CodeMirror.getMode(config, {name: \"markdown\", emoji: true});\n  function ET(name) { test.mode(name, modeET, Array.prototype.slice.call(arguments, 1)); }\n\n\n  FT(\"formatting_emAsterisk\",\n     \"[em&formatting&formatting-em *][em foo][em&formatting&formatting-em *]\");\n\n  FT(\"formatting_emUnderscore\",\n     \"[em&formatting&formatting-em _][em foo][em&formatting&formatting-em _]\");\n\n  FT(\"formatting_strongAsterisk\",\n     \"[strong&formatting&formatting-strong **][strong foo][strong&formatting&formatting-strong **]\");\n\n  FT(\"formatting_strongUnderscore\",\n     \"[strong&formatting&formatting-strong __][strong foo][strong&formatting&formatting-strong __]\");\n\n  FT(\"formatting_codeBackticks\",\n     \"[comment&formatting&formatting-code `][comment foo][comment&formatting&formatting-code `]\");\n\n  FT(\"formatting_doubleBackticks\",\n     \"[comment&formatting&formatting-code ``][comment foo ` bar][comment&formatting&formatting-code ``]\");\n\n  FT(\"formatting_atxHeader\",\n     \"[header&header-1&formatting&formatting-header&formatting-header-1 # ][header&header-1 foo # bar ][header&header-1&formatting&formatting-header&formatting-header-1 #]\");\n\n  FT(\"formatting_setextHeader\",\n     \"[header&header-1 foo]\",\n     \"[header&header-1&formatting&formatting-header&formatting-header-1 =]\");\n\n  FT(\"formatting_blockquote\",\n     \"[quote&quote-1&formatting&formatting-quote&formatting-quote-1 > ][quote&quote-1 foo]\");\n\n  FT(\"formatting_list\",\n     \"[variable-2&formatting&formatting-list&formatting-list-ul - ][variable-2 foo]\");\n  FT(\"formatting_list\",\n     \"[variable-2&formatting&formatting-list&formatting-list-ol 1. ][variable-2 foo]\");\n\n  FT(\"formatting_link\",\n     \"[link&formatting&formatting-link [][link foo][link&formatting&formatting-link ]]][string&formatting&formatting-link-string&url (][string&url http://example.com/][string&formatting&formatting-link-string&url )]\");\n\n  FT(\"formatting_linkReference\",\n     \"[link&formatting&formatting-link [][link foo][link&formatting&formatting-link ]]][string&formatting&formatting-link-string&url [][string&url bar][string&formatting&formatting-link-string&url ]]]\",\n     \"[link&formatting&formatting-link [][link bar][link&formatting&formatting-link ]]:] [string&url http://example.com/]\");\n\n  FT(\"formatting_linkWeb\",\n     \"[link&formatting&formatting-link <][link http://example.com/][link&formatting&formatting-link >]\");\n\n  FT(\"formatting_linkEmail\",\n     \"[link&formatting&formatting-link <][link user@example.com][link&formatting&formatting-link >]\");\n\n  FT(\"formatting_escape\",\n     \"[formatting-escape \\\\*]\");\n\n  FT(\"formatting_image\",\n     \"[formatting&formatting-image&image&image-marker !][formatting&formatting-image&image&image-alt-text&link [[][image&image-alt-text&link alt text][formatting&formatting-image&image&image-alt-text&link ]]][formatting&formatting-link-string&string&url (][url&string http://link.to/image.jpg][formatting&formatting-link-string&string&url )]\");\n\n  FT(\"codeBlock\",\n     \"[comment&formatting&formatting-code-block ```css]\",\n     \"[tag foo]\",\n     \"[comment&formatting&formatting-code-block ```]\");\n\n  MT(\"plainText\",\n     \"foo\");\n\n  // Don't style single trailing space\n  MT(\"trailingSpace1\",\n     \"foo \");\n\n  // Two or more trailing spaces should be styled with line break character\n  MT(\"trailingSpace2\",\n     \"foo[trailing-space-a  ][trailing-space-new-line  ]\");\n\n  MT(\"trailingSpace3\",\n     \"foo[trailing-space-a  ][trailing-space-b  ][trailing-space-new-line  ]\");\n\n  MT(\"trailingSpace4\",\n     \"foo[trailing-space-a  ][trailing-space-b  ][trailing-space-a  ][trailing-space-new-line  ]\");\n\n  // Code blocks using 4 spaces (regardless of CodeMirror.tabSize value)\n  MT(\"codeBlocksUsing4Spaces\",\n     \"    [comment foo]\");\n\n  // Code blocks using 4 spaces with internal indentation\n  MT(\"codeBlocksUsing4SpacesIndentation\",\n     \"    [comment bar]\",\n     \"        [comment hello]\",\n     \"            [comment world]\",\n     \"    [comment foo]\",\n     \"bar\");\n\n  // Code blocks should end even after extra indented lines\n  MT(\"codeBlocksWithTrailingIndentedLine\",\n     \"    [comment foo]\",\n     \"        [comment bar]\",\n     \"    [comment baz]\",\n     \"    \",\n     \"hello\");\n\n  // Code blocks using 1 tab (regardless of CodeMirror.indentWithTabs value)\n  MT(\"codeBlocksUsing1Tab\",\n     \"\\t[comment foo]\");\n\n  // No code blocks directly after paragraph\n  // http://spec.commonmark.org/0.19/#example-65\n  MT(\"noCodeBlocksAfterParagraph\",\n     \"Foo\",\n     \"    Bar\");\n\n  MT(\"codeBlocksAfterATX\",\n     \"[header&header-1 # foo]\",\n     \"    [comment code]\");\n\n  MT(\"codeBlocksAfterSetext\",\n     \"[header&header-2 foo]\",\n     \"[header&header-2 ---]\",\n     \"    [comment code]\");\n\n  MT(\"codeBlocksAfterFencedCode\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment ```]\",\n     \"    [comment code]\");\n\n  // Inline code using backticks\n  MT(\"inlineCodeUsingBackticks\",\n     \"foo [comment `bar`]\");\n\n  // Block code using single backtick (shouldn't work)\n  MT(\"blockCodeSingleBacktick\",\n     \"[comment `]\",\n     \"[comment foo]\",\n     \"[comment `]\");\n\n  // Unclosed backticks\n  // Instead of simply marking as CODE, it would be nice to have an\n  // incomplete flag for CODE, that is styled slightly different.\n  MT(\"unclosedBackticks\",\n     \"foo [comment `bar]\");\n\n  // Per documentation: \"To include a literal backtick character within a\n  // code span, you can use multiple backticks as the opening and closing\n  // delimiters\"\n  MT(\"doubleBackticks\",\n     \"[comment ``foo ` bar``]\");\n\n  // Tests based on Dingus\n  // http://daringfireball.net/projects/markdown/dingus\n  //\n  // Multiple backticks within an inline code block\n  MT(\"consecutiveBackticks\",\n     \"[comment `foo```bar`]\");\n\n  // Multiple backticks within an inline code block with a second code block\n  MT(\"consecutiveBackticks\",\n     \"[comment `foo```bar`] hello [comment `world`]\");\n\n  // Unclosed with several different groups of backticks\n  MT(\"unclosedBackticks\",\n     \"[comment ``foo ``` bar` hello]\");\n\n  // Closed with several different groups of backticks\n  MT(\"closedBackticks\",\n     \"[comment ``foo ``` bar` hello``] world\");\n\n  // info string cannot contain backtick, thus should result in inline code\n  MT(\"closingFencedMarksOnSameLine\",\n     \"[comment ``` code ```] foo\");\n\n  // atx headers\n  // http://daringfireball.net/projects/markdown/syntax#header\n\n  MT(\"atxH1\",\n     \"[header&header-1 # foo]\");\n\n  MT(\"atxH2\",\n     \"[header&header-2 ## foo]\");\n\n  MT(\"atxH3\",\n     \"[header&header-3 ### foo]\");\n\n  MT(\"atxH4\",\n     \"[header&header-4 #### foo]\");\n\n  MT(\"atxH5\",\n     \"[header&header-5 ##### foo]\");\n\n  MT(\"atxH6\",\n     \"[header&header-6 ###### foo]\");\n\n  // http://spec.commonmark.org/0.19/#example-24\n  MT(\"noAtxH7\",\n     \"####### foo\");\n\n  // http://spec.commonmark.org/0.19/#example-25\n  MT(\"noAtxH1WithoutSpace\",\n     \"#5 bolt\");\n\n  // CommonMark requires a space after # but most parsers don't\n  AtxNoSpaceTest(\"atxNoSpaceAllowed_H1NoSpace\",\n     \"[header&header-1 #foo]\");\n\n  AtxNoSpaceTest(\"atxNoSpaceAllowed_H4NoSpace\",\n     \"[header&header-4 ####foo]\");\n\n  AtxNoSpaceTest(\"atxNoSpaceAllowed_H1Space\",\n     \"[header&header-1 # foo]\");\n\n  // Inline styles should be parsed inside headers\n  MT(\"atxH1inline\",\n     \"[header&header-1 # foo ][header&header-1&em *bar*]\");\n\n  MT(\"atxIndentedTooMuch\",\n     \"[header&header-1 # foo]\",\n     \"    [comment # bar]\");\n\n  // disable atx inside blockquote until we implement proper blockquote inner mode\n  // TODO: fix to be CommonMark-compliant\n  MT(\"atxNestedInsideBlockquote\",\n     \"[quote&quote-1 > # foo]\");\n\n  MT(\"atxAfterBlockquote\",\n     \"[quote&quote-1 > foo]\",\n     \"[header&header-1 # bar]\");\n\n  // Setext headers - H1, H2\n  // Per documentation, \"Any number of underlining =’s or -’s will work.\"\n  // http://daringfireball.net/projects/markdown/syntax#header\n  // Ideally, the text would be marked as `header` as well, but this is\n  // not really feasible at the moment. So, instead, we're testing against\n  // what works today, to avoid any regressions.\n  //\n  // Check if single underlining = works\n  MT(\"setextH1\",\n     \"[header&header-1 foo]\",\n     \"[header&header-1 =]\");\n\n  // Check if 3+ ='s work\n  MT(\"setextH1\",\n     \"[header&header-1 foo]\",\n     \"[header&header-1 ===]\");\n\n  // Check if single underlining - works\n  MT(\"setextH2\",\n     \"[header&header-2 foo]\",\n     \"[header&header-2 -]\");\n\n  // Check if 3+ -'s work\n  MT(\"setextH2\",\n     \"[header&header-2 foo]\",\n     \"[header&header-2 ---]\");\n\n  // http://spec.commonmark.org/0.19/#example-45\n  MT(\"setextH2AllowSpaces\",\n     \"[header&header-2 foo]\",\n     \"   [header&header-2 ----      ]\");\n\n  // http://spec.commonmark.org/0.19/#example-44\n  MT(\"noSetextAfterIndentedCodeBlock\",\n     \"     [comment foo]\",\n     \"[hr ---]\");\n\n  MT(\"setextAfterFencedCode\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment ```]\",\n     \"[header&header-2 bar]\",\n     \"[header&header-2 ---]\");\n\n  MT(\"setextAferATX\",\n     \"[header&header-1 # foo]\",\n     \"[header&header-2 bar]\",\n     \"[header&header-2 ---]\");\n\n  // http://spec.commonmark.org/0.19/#example-51\n  MT(\"noSetextAfterQuote\",\n     \"[quote&quote-1 > foo]\",\n     \"[hr ---]\",\n     \"\",\n     \"[quote&quote-1 > foo]\",\n     \"[quote&quote-1 bar]\",\n     \"[hr ---]\");\n\n  MT(\"noSetextAfterList\",\n     \"[variable-2 - foo]\",\n     \"[hr ---]\");\n\n  MT(\"noSetextAfterList_listContinuation\",\n     \"[variable-2 - foo]\",\n     \"bar\",\n     \"[hr ---]\");\n\n  MT(\"setextAfterList_afterIndentedCode\",\n     \"[variable-2 - foo]\",\n     \"\",\n     \"      [comment bar]\",\n     \"[header&header-2 baz]\",\n     \"[header&header-2 ---]\");\n\n  MT(\"setextAfterList_afterFencedCodeBlocks\",\n     \"[variable-2 - foo]\",\n     \"\",\n     \"      [comment ```]\",\n     \"      [comment bar]\",\n     \"      [comment ```]\",\n     \"[header&header-2 baz]\",\n     \"[header&header-2 ---]\");\n\n  MT(\"setextAfterList_afterHeader\",\n     \"[variable-2 - foo]\",\n     \"  [variable-2&header&header-1 # bar]\",\n     \"[header&header-2 baz]\",\n     \"[header&header-2 ---]\");\n\n  MT(\"setextAfterList_afterHr\",\n     \"[variable-2 - foo]\",\n     \"\",\n     \"  [hr ---]\",\n     \"[header&header-2 bar]\",\n     \"[header&header-2 ---]\");\n\n  MT(\"setext_nestedInlineMarkup\",\n     \"[header&header-1 foo ][em&header&header-1 *bar*]\",\n     \"[header&header-1 =]\");\n\n  MT(\"setext_linkDef\",\n     \"[link [[aaa]]:] [string&url http://google.com 'title']\",\n     \"[hr ---]\");\n\n  // currently, looks max one line ahead, thus won't catch valid CommonMark\n  //  markup\n  MT(\"setext_oneLineLookahead\",\n     \"foo\",\n     \"[header&header-1 bar]\",\n     \"[header&header-1 =]\");\n\n  // ensure we don't regard space after dash as a list\n  MT(\"setext_emptyList\",\n     \"[header&header-2 foo]\",\n     \"[header&header-2 - ]\",\n     \"foo\");\n\n  // Single-line blockquote with trailing space\n  MT(\"blockquoteSpace\",\n     \"[quote&quote-1 > foo]\");\n\n  // Single-line blockquote\n  MT(\"blockquoteNoSpace\",\n     \"[quote&quote-1 >foo]\");\n\n  // No blank line before blockquote\n  MT(\"blockquoteNoBlankLine\",\n     \"foo\",\n     \"[quote&quote-1 > bar]\");\n\n  MT(\"blockquoteNested\",\n     \"[quote&quote-1 > foo]\",\n     \"[quote&quote-1 >][quote&quote-2 > foo]\",\n     \"[quote&quote-1 >][quote&quote-2 >][quote&quote-3 > foo]\");\n\n  // ensure quote-level is inferred correctly even if indented\n  MT(\"blockquoteNestedIndented\",\n     \" [quote&quote-1 > foo]\",\n     \" [quote&quote-1 >][quote&quote-2 > foo]\",\n     \" [quote&quote-1 >][quote&quote-2 >][quote&quote-3 > foo]\");\n\n  // ensure quote-level is inferred correctly even if indented\n  MT(\"blockquoteIndentedTooMuch\",\n     \"foo\",\n     \"    > bar\");\n\n  // Single-line blockquote followed by normal paragraph\n  MT(\"blockquoteThenParagraph\",\n     \"[quote&quote-1 >foo]\",\n     \"\",\n     \"bar\");\n\n  // Multi-line blockquote (lazy mode)\n  MT(\"multiBlockquoteLazy\",\n     \"[quote&quote-1 >foo]\",\n     \"[quote&quote-1 bar]\");\n\n  // Multi-line blockquote followed by normal paragraph (lazy mode)\n  MT(\"multiBlockquoteLazyThenParagraph\",\n     \"[quote&quote-1 >foo]\",\n     \"[quote&quote-1 bar]\",\n     \"\",\n     \"hello\");\n\n  // Multi-line blockquote (non-lazy mode)\n  MT(\"multiBlockquote\",\n     \"[quote&quote-1 >foo]\",\n     \"[quote&quote-1 >bar]\");\n\n  // Multi-line blockquote followed by normal paragraph (non-lazy mode)\n  MT(\"multiBlockquoteThenParagraph\",\n     \"[quote&quote-1 >foo]\",\n     \"[quote&quote-1 >bar]\",\n     \"\",\n     \"hello\");\n\n  // disallow lists inside blockquote for now because it causes problems outside blockquote\n  // TODO: fix to be CommonMark-compliant\n  MT(\"listNestedInBlockquote\",\n     \"[quote&quote-1 > - foo]\");\n\n  // disallow fenced blocks inside blockquote because it causes problems outside blockquote\n  // TODO: fix to be CommonMark-compliant\n  MT(\"fencedBlockNestedInBlockquote\",\n     \"[quote&quote-1 > ```]\",\n     \"[quote&quote-1 > code]\",\n     \"[quote&quote-1 > ```]\",\n     // ensure we still allow inline code\n     \"[quote&quote-1 > ][quote&quote-1&comment `code`]\");\n\n  // Header with leading space after continued blockquote (#3287, negative indentation)\n  MT(\"headerAfterContinuedBlockquote\",\n     \"[quote&quote-1 > foo]\",\n     \"[quote&quote-1 bar]\",\n     \"\",\n     \" [header&header-1 # hello]\");\n\n  // Check list types\n\n  MT(\"listAsterisk\",\n     \"foo\",\n     \"bar\",\n     \"\",\n     \"[variable-2 * foo]\",\n     \"[variable-2 * bar]\");\n\n  MT(\"listPlus\",\n     \"foo\",\n     \"bar\",\n     \"\",\n     \"[variable-2 + foo]\",\n     \"[variable-2 + bar]\");\n\n  MT(\"listDash\",\n     \"foo\",\n     \"bar\",\n     \"\",\n     \"[variable-2 - foo]\",\n     \"[variable-2 - bar]\");\n\n  MT(\"listNumber\",\n     \"foo\",\n     \"bar\",\n     \"\",\n     \"[variable-2 1. foo]\",\n     \"[variable-2 2. bar]\");\n\n  MT(\"listFromParagraph\",\n     \"foo\",\n     \"[variable-2 1. bar]\",\n     \"[variable-2 2. hello]\");\n\n  // List after hr\n  MT(\"listAfterHr\",\n     \"[hr ---]\",\n     \"[variable-2 - bar]\");\n\n  // List after header\n  MT(\"listAfterHeader\",\n     \"[header&header-1 # foo]\",\n     \"[variable-2 - bar]\");\n\n  // hr after list\n  MT(\"hrAfterList\",\n     \"[variable-2 - foo]\",\n     \"[hr -----]\");\n\n  MT(\"hrAfterFencedCode\",\n     \"[comment ```]\",\n     \"[comment code]\",\n     \"[comment ```]\",\n     \"[hr ---]\");\n\n  // allow hr inside lists\n  // (require prev line to be empty or hr, TODO: non-CommonMark-compliant)\n  MT(\"hrInsideList\",\n     \"[variable-2 - foo]\",\n     \"\",\n     \"  [hr ---]\",\n     \"     [hr ---]\",\n     \"\",\n     \"      [comment ---]\");\n\n  MT(\"consecutiveHr\",\n     \"[hr ---]\",\n     \"[hr ---]\",\n     \"[hr ---]\");\n\n  // Formatting in lists (*)\n  MT(\"listAsteriskFormatting\",\n     \"[variable-2 * ][variable-2&em *foo*][variable-2  bar]\",\n     \"[variable-2 * ][variable-2&strong **foo**][variable-2  bar]\",\n     \"[variable-2 * ][variable-2&em&strong ***foo***][variable-2  bar]\",\n     \"[variable-2 * ][variable-2&comment `foo`][variable-2  bar]\");\n\n  // Formatting in lists (+)\n  MT(\"listPlusFormatting\",\n     \"[variable-2 + ][variable-2&em *foo*][variable-2  bar]\",\n     \"[variable-2 + ][variable-2&strong **foo**][variable-2  bar]\",\n     \"[variable-2 + ][variable-2&em&strong ***foo***][variable-2  bar]\",\n     \"[variable-2 + ][variable-2&comment `foo`][variable-2  bar]\");\n\n  // Formatting in lists (-)\n  MT(\"listDashFormatting\",\n     \"[variable-2 - ][variable-2&em *foo*][variable-2  bar]\",\n     \"[variable-2 - ][variable-2&strong **foo**][variable-2  bar]\",\n     \"[variable-2 - ][variable-2&em&strong ***foo***][variable-2  bar]\",\n     \"[variable-2 - ][variable-2&comment `foo`][variable-2  bar]\");\n\n  // Formatting in lists (1.)\n  MT(\"listNumberFormatting\",\n     \"[variable-2 1. ][variable-2&em *foo*][variable-2  bar]\",\n     \"[variable-2 2. ][variable-2&strong **foo**][variable-2  bar]\",\n     \"[variable-2 3. ][variable-2&em&strong ***foo***][variable-2  bar]\",\n     \"[variable-2 4. ][variable-2&comment `foo`][variable-2  bar]\");\n\n  // Paragraph lists\n  MT(\"listParagraph\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\");\n\n  // Multi-paragraph lists\n  //\n  // 4 spaces\n  MT(\"listMultiParagraph\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"    [variable-2 hello]\");\n\n  // 4 spaces, extra blank lines (should still be list, per Dingus)\n  MT(\"listMultiParagraphExtra\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"\",\n     \"    [variable-2 hello]\");\n\n  // 4 spaces, plus 1 space (should still be list, per Dingus)\n  MT(\"listMultiParagraphExtraSpace\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"     [variable-2 hello]\",\n     \"\",\n     \"    [variable-2 world]\");\n\n  // 1 tab\n  MT(\"listTab\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"\\t[variable-2 hello]\");\n\n  // No indent\n  MT(\"listNoIndent\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"hello\");\n\n  MT(\"listCommonMarkIndentationCode\",\n     \"[variable-2 * Code blocks also affect]\",\n     \"  [variable-3 * The next level starts where the contents start.]\",\n     \"   [variable-3 *    Anything less than that will keep the item on the same level.]\",\n     \"       [variable-3 * Each list item can indent the first level further and further.]\",\n     \"  [variable-3 * For the most part, this makes sense while writing a list.]\",\n     \"    [keyword * This means two items with same indentation can be different levels.]\",\n     \"     [keyword *  Each level has an indent requirement that can change between items.]\",\n     \"       [keyword * A list item that meets this will be part of the next level.]\",\n     \"   [variable-3 * Otherwise, it will be part of the level where it does meet this.]\",\n     \" [variable-2 * World]\");\n\n  // should handle nested and un-nested lists\n  MT(\"listCommonMark_MixedIndents\",\n     \"[variable-2 * list1]\",\n     \"    [variable-2 list1]\",\n     \"  [variable-2&header&header-1 # heading still part of list1]\",\n     \"  [variable-2 text after heading still part of list1]\",\n     \"\",\n     \"      [comment indented codeblock]\",\n     \"  [variable-2 list1 after code block]\",\n     \"  [variable-3 * list2]\",\n     // amount of spaces on empty lines between lists doesn't matter\n     \"              \",\n     // extra empty lines irrelevant\n     \"\",\n     \"\",\n     \"    [variable-3 indented text part of list2]\",\n     \"    [keyword * list3]\",\n     \"\",\n     \"    [variable-3 text at level of list2]\",\n     \"\",\n     \"  [variable-2 de-indented text part of list1 again]\",\n     \"\",\n     \"  [variable-2&comment ```]\",\n     \"  [comment code]\",\n     \"  [variable-2&comment ```]\",\n     \"\",\n     \"  [variable-2 text after fenced code]\");\n\n  // should correctly parse numbered list content indentation\n  MT(\"listCommonMark_NumeberedListIndent\",\n     \"[variable-2 1000. list with base indent of 6]\",\n     \"\",\n     \"      [variable-2 text must be indented 6 spaces at minimum]\",\n     \"\",\n     \"         [variable-2 9-spaces indented text still part of list]\",\n     \"\",\n     \"          [comment indented codeblock starts at 10 spaces]\",\n     \"\",\n     \"     [comment text indented by 5 spaces no longer belong to list]\");\n\n  // should consider tab as 4 spaces\n  MT(\"listCommonMark_TabIndented\",\n     \"[variable-2 * list]\",\n     \"\\t[variable-3 * list2]\",\n     \"\",\n     \"\\t\\t[variable-3 part of list2]\");\n\n  MT(\"listAfterBlockquote\",\n     \"[quote&quote-1 > foo]\",\n     \"[variable-2 - bar]\");\n\n  // shouldn't create sublist if it's indented more than allowed\n  MT(\"nestedListIndentedTooMuch\",\n     \"[variable-2 - foo]\",\n     \"          [variable-2 - bar]\");\n\n  MT(\"listIndentedTooMuchAfterParagraph\",\n     \"foo\",\n     \"    - bar\");\n\n  // Blockquote\n  MT(\"blockquote\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"    [variable-2&quote&quote-1 > hello]\");\n\n  // Code block\n  MT(\"blockquoteCode\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"[variable-2 * bar]\",\n     \"\",\n     \"        [comment > hello]\",\n     \"\",\n     \"    [variable-2 world]\");\n\n  // Code block followed by text\n  MT(\"blockquoteCodeText\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"    [variable-2 bar]\",\n     \"\",\n     \"        [comment hello]\",\n     \"\",\n     \"    [variable-2 world]\");\n\n  // Nested list\n\n  MT(\"listAsteriskNested\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"    [variable-3 * bar]\");\n\n  MT(\"listPlusNested\",\n     \"[variable-2 + foo]\",\n     \"\",\n     \"    [variable-3 + bar]\");\n\n  MT(\"listDashNested\",\n     \"[variable-2 - foo]\",\n     \"\",\n     \"    [variable-3 - bar]\");\n\n  MT(\"listNumberNested\",\n     \"[variable-2 1. foo]\",\n     \"\",\n     \"    [variable-3 2. bar]\");\n\n  MT(\"listMixed\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"    [variable-3 + bar]\",\n     \"\",\n     \"        [keyword - hello]\",\n     \"\",\n     \"            [variable-2 1. world]\");\n\n  MT(\"listBlockquote\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"    [variable-3 + bar]\",\n     \"\",\n     \"        [quote&quote-1&variable-3 > hello]\");\n\n  MT(\"listCode\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"    [variable-3 + bar]\",\n     \"\",\n     \"            [comment hello]\");\n\n  // Code with internal indentation\n  MT(\"listCodeIndentation\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"        [comment bar]\",\n     \"            [comment hello]\",\n     \"                [comment world]\",\n     \"        [comment foo]\",\n     \"    [variable-2 bar]\");\n\n  // List nesting edge cases\n  MT(\"listNested\",\n    \"[variable-2 * foo]\",\n    \"\",\n    \"    [variable-3 * bar]\",\n    \"\",\n    \"       [variable-3 hello]\"\n  );\n  MT(\"listNested\",\n    \"[variable-2 * foo]\",\n    \"\",\n    \"    [variable-3 * bar]\",\n    \"\",\n    \"      [keyword * foo]\"\n  );\n\n  // Code followed by text\n  MT(\"listCodeText\",\n     \"[variable-2 * foo]\",\n     \"\",\n     \"        [comment bar]\",\n     \"\",\n     \"hello\");\n\n  // Following tests directly from official Markdown documentation\n  // http://daringfireball.net/projects/markdown/syntax#hr\n\n  MT(\"hrSpace\",\n     \"[hr * * *]\");\n\n  MT(\"hr\",\n     \"[hr ***]\");\n\n  MT(\"hrLong\",\n     \"[hr *****]\");\n\n  MT(\"hrSpaceDash\",\n     \"[hr - - -]\");\n\n  MT(\"hrDashLong\",\n     \"[hr ---------------------------------------]\");\n\n  //Images\n  MT(\"Images\",\n     \"[image&image-marker !][image&image-alt-text&link [[alt text]]][string&url (http://link.to/image.jpg)]\")\n\n  //Images with highlight alt text\n  MT(\"imageEm\",\n     \"[image&image-marker !][image&image-alt-text&link [[][image-alt-text&em&image&link *alt text*][image&image-alt-text&link ]]][string&url (http://link.to/image.jpg)]\");\n\n  MT(\"imageStrong\",\n     \"[image&image-marker !][image&image-alt-text&link [[][image-alt-text&strong&image&link **alt text**][image&image-alt-text&link ]]][string&url (http://link.to/image.jpg)]\");\n\n  MT(\"imageEmStrong\",\n     \"[image&image-marker !][image&image-alt-text&link [[][image&image-alt-text&em&strong&link ***alt text***][image&image-alt-text&link ]]][string&url (http://link.to/image.jpg)]\");\n\n  // Inline link with title\n  MT(\"linkTitle\",\n     \"[link [[foo]]][string&url (http://example.com/ \\\"bar\\\")] hello\");\n\n  // Inline link without title\n  MT(\"linkNoTitle\",\n     \"[link [[foo]]][string&url (http://example.com/)] bar\");\n\n  // Inline link with image\n  MT(\"linkImage\",\n     \"[link [[][link&image&image-marker !][link&image&image-alt-text&link [[alt text]]][string&url (http://link.to/image.jpg)][link ]]][string&url (http://example.com/)] bar\");\n\n  // Inline link with Em\n  MT(\"linkEm\",\n     \"[link [[][link&em *foo*][link ]]][string&url (http://example.com/)] bar\");\n\n  // Inline link with Strong\n  MT(\"linkStrong\",\n     \"[link [[][link&strong **foo**][link ]]][string&url (http://example.com/)] bar\");\n\n  // Inline link with EmStrong\n  MT(\"linkEmStrong\",\n     \"[link [[][link&em&strong ***foo***][link ]]][string&url (http://example.com/)] bar\");\n\n  MT(\"multilineLink\",\n     \"[link [[foo]\",\n     \"[link bar]]][string&url (https://foo#_a)]\",\n     \"should not be italics\")\n\n  // Image with title\n  MT(\"imageTitle\",\n     \"[image&image-marker !][image&image-alt-text&link [[alt text]]][string&url (http://example.com/ \\\"bar\\\")] hello\");\n\n  // Image without title\n  MT(\"imageNoTitle\",\n     \"[image&image-marker !][image&image-alt-text&link [[alt text]]][string&url (http://example.com/)] bar\");\n\n  // Image with asterisks\n  MT(\"imageAsterisks\",\n     \"[image&image-marker !][image&image-alt-text&link [[ ][image&image-alt-text&em&link *alt text*][image&image-alt-text&link ]]][string&url (http://link.to/image.jpg)] bar\");\n\n  // Not a link. Should be normal text due to square brackets being used\n  // regularly in text, especially in quoted material, and no space is allowed\n  // between square brackets and parentheses (per Dingus).\n  MT(\"notALink\",\n     \"[link [[foo]]] (bar)\");\n\n  // Reference-style links\n  MT(\"linkReference\",\n     \"[link [[foo]]][string&url [[bar]]] hello\");\n\n  // Reference-style links with Em\n  MT(\"linkReferenceEm\",\n     \"[link [[][link&em *foo*][link ]]][string&url [[bar]]] hello\");\n\n  // Reference-style links with Strong\n  MT(\"linkReferenceStrong\",\n     \"[link [[][link&strong **foo**][link ]]][string&url [[bar]]] hello\");\n\n  // Reference-style links with EmStrong\n  MT(\"linkReferenceEmStrong\",\n     \"[link [[][link&em&strong ***foo***][link ]]][string&url [[bar]]] hello\");\n\n  // Reference-style links with optional space separator (per documentation)\n  // \"You can optionally use a space to separate the sets of brackets\"\n  MT(\"linkReferenceSpace\",\n     \"[link [[foo]]] [string&url [[bar]]] hello\");\n\n  // Should only allow a single space (\"...use *a* space...\")\n  MT(\"linkReferenceDoubleSpace\",\n     \"[link [[foo]]]  [link [[bar]]] hello\");\n\n  // Reference-style links with implicit link name\n  MT(\"linkImplicit\",\n     \"[link [[foo]]][string&url [[]]] hello\");\n\n  // @todo It would be nice if, at some point, the document was actually\n  // checked to see if the referenced link exists\n\n  // Link label, for reference-style links (taken from documentation)\n\n  MT(\"labelNoTitle\",\n     \"[link [[foo]]:] [string&url http://example.com/]\");\n\n  MT(\"labelIndented\",\n     \"   [link [[foo]]:] [string&url http://example.com/]\");\n\n  MT(\"labelSpaceTitle\",\n     \"[link [[foo bar]]:] [string&url http://example.com/ \\\"hello\\\"]\");\n\n  MT(\"labelDoubleTitle\",\n     \"[link [[foo bar]]:] [string&url http://example.com/ \\\"hello\\\"] \\\"world\\\"\");\n\n  MT(\"labelTitleDoubleQuotes\",\n     \"[link [[foo]]:] [string&url http://example.com/  \\\"bar\\\"]\");\n\n  MT(\"labelTitleSingleQuotes\",\n     \"[link [[foo]]:] [string&url http://example.com/  'bar']\");\n\n  MT(\"labelTitleParentheses\",\n     \"[link [[foo]]:] [string&url http://example.com/  (bar)]\");\n\n  MT(\"labelTitleInvalid\",\n     \"[link [[foo]]:] [string&url http://example.com/] bar\");\n\n  MT(\"labelLinkAngleBrackets\",\n     \"[link [[foo]]:] [string&url <http://example.com/>  \\\"bar\\\"]\");\n\n  MT(\"labelTitleNextDoubleQuotes\",\n     \"[link [[foo]]:] [string&url http://example.com/]\",\n     \"[string \\\"bar\\\"] hello\");\n\n  MT(\"labelTitleNextSingleQuotes\",\n     \"[link [[foo]]:] [string&url http://example.com/]\",\n     \"[string 'bar'] hello\");\n\n  MT(\"labelTitleNextParentheses\",\n     \"[link [[foo]]:] [string&url http://example.com/]\",\n     \"[string (bar)] hello\");\n\n  MT(\"labelTitleNextMixed\",\n     \"[link [[foo]]:] [string&url http://example.com/]\",\n     \"(bar\\\" hello\");\n\n  MT(\"labelEscape\",\n     \"[link [[foo \\\\]] ]]:] [string&url http://example.com/]\");\n\n  MT(\"labelEscapeColon\",\n     \"[link [[foo \\\\]]: bar]]:] [string&url http://example.com/]\");\n\n  MT(\"labelEscapeEnd\",\n     \"\\\\[[foo\\\\]]: http://example.com/\");\n\n  MT(\"linkWeb\",\n     \"[link <http://example.com/>] foo\");\n\n  MT(\"linkWebDouble\",\n     \"[link <http://example.com/>] foo [link <http://example.com/>]\");\n\n  MT(\"linkEmail\",\n     \"[link <user@example.com>] foo\");\n\n  MT(\"linkEmailDouble\",\n     \"[link <user@example.com>] foo [link <user@example.com>]\");\n\n  MT(\"emAsterisk\",\n     \"[em *foo*] bar\");\n\n  MT(\"emUnderscore\",\n     \"[em _foo_] bar\");\n\n  MT(\"emInWordAsterisk\",\n     \"foo[em *bar*]hello\");\n\n  MT(\"emInWordUnderscore\",\n     \"foo_bar_hello\");\n\n  // Per documentation: \"...surround an * or _ with spaces, it’ll be\n  // treated as a literal asterisk or underscore.\"\n\n  MT(\"emEscapedBySpaceIn\",\n     \"foo [em _bar _ hello_] world\");\n\n  MT(\"emEscapedBySpaceOut\",\n     \"foo _ bar [em _hello_] world\");\n\n  MT(\"emEscapedByNewline\",\n     \"foo\",\n     \"_ bar [em _hello_] world\");\n\n  // Unclosed emphasis characters\n  // Instead of simply marking as EM / STRONG, it would be nice to have an\n  // incomplete flag for EM and STRONG, that is styled slightly different.\n  MT(\"emIncompleteAsterisk\",\n     \"foo [em *bar]\");\n\n  MT(\"emIncompleteUnderscore\",\n     \"foo [em _bar]\");\n\n  MT(\"strongAsterisk\",\n     \"[strong **foo**] bar\");\n\n  MT(\"strongUnderscore\",\n     \"[strong __foo__] bar\");\n\n  MT(\"emStrongAsterisk\",\n     \"[em *foo][em&strong **bar*][strong hello**] world\");\n\n  MT(\"emStrongUnderscore\",\n     \"[em _foo ][em&strong __bar_][strong  hello__] world\");\n\n  // \"...same character must be used to open and close an emphasis span.\"\"\n  MT(\"emStrongMixed\",\n     \"[em _foo][em&strong **bar*hello__ world]\");\n\n  MT(\"emStrongMixed\",\n     \"[em *foo ][em&strong __bar_hello** world]\");\n\n  MT(\"linkWithNestedParens\",\n     \"[link [[foo]]][string&url (bar(baz))]\")\n\n  // These characters should be escaped:\n  // \\   backslash\n  // `   backtick\n  // *   asterisk\n  // _   underscore\n  // {}  curly braces\n  // []  square brackets\n  // ()  parentheses\n  // #   hash mark\n  // +   plus sign\n  // -   minus sign (hyphen)\n  // .   dot\n  // !   exclamation mark\n\n  MT(\"escapeBacktick\",\n     \"foo \\\\`bar\\\\`\");\n\n  MT(\"doubleEscapeBacktick\",\n     \"foo \\\\\\\\[comment `bar\\\\\\\\`]\");\n\n  MT(\"escapeAsterisk\",\n     \"foo \\\\*bar\\\\*\");\n\n  MT(\"doubleEscapeAsterisk\",\n     \"foo \\\\\\\\[em *bar\\\\\\\\*]\");\n\n  MT(\"escapeUnderscore\",\n     \"foo \\\\_bar\\\\_\");\n\n  MT(\"doubleEscapeUnderscore\",\n     \"foo \\\\\\\\[em _bar\\\\\\\\_]\");\n\n  MT(\"escapeHash\",\n     \"\\\\# foo\");\n\n  MT(\"doubleEscapeHash\",\n     \"\\\\\\\\# foo\");\n\n  MT(\"escapeNewline\",\n     \"\\\\\",\n     \"[em *foo*]\");\n\n  // Class override tests\n  TokenTypeOverrideTest(\"overrideHeader1\",\n    \"[override-header&override-header-1 # Foo]\");\n\n  TokenTypeOverrideTest(\"overrideHeader2\",\n    \"[override-header&override-header-2 ## Foo]\");\n\n  TokenTypeOverrideTest(\"overrideHeader3\",\n    \"[override-header&override-header-3 ### Foo]\");\n\n  TokenTypeOverrideTest(\"overrideHeader4\",\n    \"[override-header&override-header-4 #### Foo]\");\n\n  TokenTypeOverrideTest(\"overrideHeader5\",\n    \"[override-header&override-header-5 ##### Foo]\");\n\n  TokenTypeOverrideTest(\"overrideHeader6\",\n    \"[override-header&override-header-6 ###### Foo]\");\n\n  TokenTypeOverrideTest(\"overrideCode\",\n    \"[override-code `foo`]\");\n\n  TokenTypeOverrideTest(\"overrideCodeBlock\",\n    \"[override-code ```]\",\n    \"[override-code foo]\",\n    \"[override-code ```]\");\n\n  TokenTypeOverrideTest(\"overrideQuote\",\n    \"[override-quote&override-quote-1 > foo]\",\n    \"[override-quote&override-quote-1 > bar]\");\n\n  TokenTypeOverrideTest(\"overrideQuoteNested\",\n    \"[override-quote&override-quote-1 > foo]\",\n    \"[override-quote&override-quote-1 >][override-quote&override-quote-2 > bar]\",\n    \"[override-quote&override-quote-1 >][override-quote&override-quote-2 >][override-quote&override-quote-3 > baz]\");\n\n  TokenTypeOverrideTest(\"overrideLists\",\n    \"[override-list1 - foo]\",\n    \"\",\n    \"    [override-list2 + bar]\",\n    \"\",\n    \"        [override-list3 * baz]\",\n    \"\",\n    \"            [override-list1 1. qux]\",\n    \"\",\n    \"                [override-list2 - quux]\");\n\n  TokenTypeOverrideTest(\"overrideHr\",\n    \"[override-hr * * *]\");\n\n  TokenTypeOverrideTest(\"overrideImage\",\n    \"[override-image&override-image-marker !][override-image&override-image-alt-text&link [[alt text]]][override-link-href&url (http://link.to/image.jpg)]\");\n\n  TokenTypeOverrideTest(\"overrideLinkText\",\n    \"[override-link-text [[foo]]][override-link-href&url (http://example.com)]\");\n\n  TokenTypeOverrideTest(\"overrideLinkEmailAndInline\",\n    \"[override-link-email <][override-link-inline foo@example.com>]\");\n\n  TokenTypeOverrideTest(\"overrideEm\",\n    \"[override-em *foo*]\");\n\n  TokenTypeOverrideTest(\"overrideStrong\",\n    \"[override-strong **foo**]\");\n\n  TokenTypeOverrideTest(\"overrideStrikethrough\",\n    \"[override-strikethrough ~~foo~~]\");\n\n  TokenTypeOverrideTest(\"overrideEmoji\",\n    \"[override-emoji :foo:]\");\n\n  FormatTokenTypeOverrideTest(\"overrideFormatting\",\n    \"[override-formatting-escape \\\\*]\");\n\n  // Tests to make sure GFM-specific things aren't getting through\n\n  MT(\"taskList\",\n     \"[variable-2 * ][link&variable-2 [[ ]]][variable-2 bar]\");\n\n  MT(\"fencedCodeBlocks\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"\",\n     \"[comment bar]\",\n     \"[comment ```]\",\n     \"baz\");\n\n  MT(\"fencedCodeBlocks_invalidClosingFence_trailingText\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment ``` must not have trailing text]\",\n     \"[comment baz]\");\n\n  MT(\"fencedCodeBlocks_invalidClosingFence_trailingTabs\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment ```\\t]\",\n     \"[comment baz]\");\n\n  MT(\"fencedCodeBlocks_validClosingFence\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     // may have trailing spaces\n     \"[comment ```     ]\",\n     \"baz\");\n\n  MT(\"fencedCodeBlocksInList_closingFenceIndented\",\n     \"[variable-2 - list]\",\n     \"    [variable-2&comment ```]\",\n     \"    [comment foo]\",\n     \"     [variable-2&comment ```]\",\n     \"    [variable-2 baz]\");\n\n  MT(\"fencedCodeBlocksInList_closingFenceIndentedTooMuch\",\n     \"[variable-2 - list]\",\n     \"    [variable-2&comment ```]\",\n     \"    [comment foo]\",\n     \"      [comment ```]\",\n     \"    [comment baz]\");\n\n  MT(\"fencedCodeBlockModeSwitching\",\n     \"[comment ```javascript]\",\n     \"[variable foo]\",\n     \"\",\n     \"[comment ```]\",\n     \"bar\");\n\n  MT_noFencedHighlight(\"fencedCodeBlock_noHighlight\",\n     \"[comment ```javascript]\",\n     \"[comment foo]\",\n     \"[comment ```]\");\n\n  MT(\"fencedCodeBlockModeSwitchingObjc\",\n     \"[comment ```objective-c]\",\n     \"[keyword @property] [variable NSString] [operator *] [variable foo];\",\n     \"[comment ```]\",\n     \"bar\");\n\n  MT(\"fencedCodeBlocksMultipleChars\",\n     \"[comment `````]\",\n     \"[comment foo]\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment `````]\",\n     \"bar\");\n\n  MT(\"fencedCodeBlocksTildes\",\n     \"[comment ~~~]\",\n     \"[comment foo]\",\n     \"[comment ~~~]\",\n     \"bar\");\n\n  MT(\"fencedCodeBlocksTildesMultipleChars\",\n     \"[comment ~~~~~]\",\n     \"[comment ~~~]\",\n     \"[comment foo]\",\n     \"[comment ~~~~~]\",\n     \"bar\");\n\n  MT(\"fencedCodeBlocksMultipleChars\",\n     \"[comment `````]\",\n     \"[comment foo]\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment `````]\",\n     \"bar\");\n\n  MT(\"fencedCodeBlocksMixed\",\n     \"[comment ~~~]\",\n     \"[comment ```]\",\n     \"[comment foo]\",\n     \"[comment ~~~]\",\n     \"bar\");\n\n  MT(\"fencedCodeBlocksAfterBlockquote\",\n     \"[quote&quote-1 > foo]\",\n     \"[comment ```]\",\n     \"[comment bar]\",\n     \"[comment ```]\");\n\n  // fencedCode indented too much should act as simple indentedCode\n  //  (hence has no highlight formatting)\n  FT(\"tooMuchIndentedFencedCode\",\n     \"    [comment ```]\",\n     \"    [comment code]\",\n     \"    [comment ```]\");\n\n  MT(\"autoTerminateFencedCodeWhenLeavingList\",\n     \"[variable-2 - list1]\",\n     \"  [variable-3 - list2]\",\n     \"    [variable-3&comment ```]\",\n     \"    [comment code]\",\n     \"  [variable-3 - list2]\",\n     \"  [variable-2&comment ```]\",\n     \"  [comment code]\",\n     \"[quote&quote-1 > foo]\");\n\n  // Tests that require XML mode\n\n  MT(\"xmlMode\",\n     \"[tag&bracket <][tag div][tag&bracket >]\",\n     \"  *foo*\",\n     \"  [tag&bracket <][tag http://github.com][tag&bracket />]\",\n     \"[tag&bracket </][tag div][tag&bracket >]\",\n     \"[link <http://github.com/>]\");\n\n  MT(\"xmlModeWithMarkdownInside\",\n     \"[tag&bracket <][tag div] [attribute markdown]=[string 1][tag&bracket >]\",\n     \"[em *foo*]\",\n     \"[link <http://github.com/>]\",\n     \"[tag </div>]\",\n     \"[link <http://github.com/>]\",\n     \"[tag&bracket <][tag div][tag&bracket >]\",\n     \"[tag&bracket </][tag div][tag&bracket >]\");\n\n  MT(\"xmlModeLineBreakInTags\",\n     \"[tag&bracket <][tag div] [attribute id]=[string \\\"1\\\"]\",\n     \"     [attribute class]=[string \\\"sth\\\"][tag&bracket >]xxx\",\n     \"[tag&bracket </][tag div][tag&bracket >]\");\n\n  MT(\"xmlModeCommentWithBlankLine\",\n     \"[comment <!-- Hello]\",\n     \"\",\n     \"[comment World -->]\");\n\n  MT(\"xmlModeCDATA\",\n     \"[atom <![CDATA[ Hello]\",\n     \"\",\n     \"[atom FooBar]\",\n     \"[atom Test ]]]]>]\");\n\n  MT(\"xmlModePreprocessor\",\n     \"[meta <?php] [meta echo '1234'; ?>]\");\n\n  MT_noXml(\"xmlHighlightDisabled\",\n     \"<div>foo</div>\");\n\n  // Tests Emojis\n\n  ET(\"emojiDefault\",\n    \"[builtin :foobar:]\");\n\n  ET(\"emojiTable\",\n    \" :--:\");\n})();\n"]}