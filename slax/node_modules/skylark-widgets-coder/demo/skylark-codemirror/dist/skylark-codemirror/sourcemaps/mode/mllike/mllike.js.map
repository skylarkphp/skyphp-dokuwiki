{"version":3,"sources":["mode/mllike/mllike.js"],"names":["define","CodeMirror","defineMode","_config","parserConfig","words","as","do","else","end","exception","fun","functor","if","in","include","let","of","open","rec","struct","then","type","val","while","with","extraWords","prop","hasOwnProperty","hintWords","k","push","tokenBase","stream","state","ch","next","tokenize","tokenString","eat","longString","tokenLongString","commentLevel","tokenComment","eatWhile","slashComments","skipToEnd","test","cur","current","escaped","prev","registerHelper","startState","token","eatSpace","blockCommentStart","blockCommentEnd","lineComment","defineMIME","name","and","assert","begin","class","constraint","done","downto","external","function","initializer","lazy","match","method","module","mutable","new","nonrec","object","private","sig","to","try","value","virtual","when","raise","failwith","true","false","asr","land","lor","lsl","lsr","lxor","mod","or","raise_notrace","trace","exit","print_string","print_endline","int","float","bool","char","string","unit","List","abstract","base","default","delegate","do!","downcast","elif","extern","finally","for","global","inherit","inline","interface","internal","let!","member","namespace","null","override","public","return!","return","select","static","upcast","use!","use","void","yield!","yield","atomic","break","checked","component","const","constructor","continue","eager","event","fixed","mixin","parallel","process","protected","pure","sealed","tailcall","trait","volatile","Seq","Map","Set","Option","not","abstype","andalso","case","datatype","fn","handle","infix","infixr","local","nonfix","op","orelse","withtype","eqtype","sharing","signature","structure","where","real"],"mappings":"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","file":"../../../mode/mllike/mllike.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('mllike', function(_config, parserConfig) {\n  var words = {\n    'as': 'keyword',\n    'do': 'keyword',\n    'else': 'keyword',\n    'end': 'keyword',\n    'exception': 'keyword',\n    'fun': 'keyword',\n    'functor': 'keyword',\n    'if': 'keyword',\n    'in': 'keyword',\n    'include': 'keyword',\n    'let': 'keyword',\n    'of': 'keyword',\n    'open': 'keyword',\n    'rec': 'keyword',\n    'struct': 'keyword',\n    'then': 'keyword',\n    'type': 'keyword',\n    'val': 'keyword',\n    'while': 'keyword',\n    'with': 'keyword'\n  };\n\n  var extraWords = parserConfig.extraWords || {};\n  for (var prop in extraWords) {\n    if (extraWords.hasOwnProperty(prop)) {\n      words[prop] = parserConfig.extraWords[prop];\n    }\n  }\n  var hintWords = [];\n  for (var k in words) { hintWords.push(k); }\n  CodeMirror.registerHelper(\"hintWords\", \"mllike\", hintWords);\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n\n    if (ch === '\"') {\n      state.tokenize = tokenString;\n      return state.tokenize(stream, state);\n    }\n    if (ch === '{') {\n      if (stream.eat('|')) {\n        state.longString = true;\n        state.tokenize = tokenLongString;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '(') {\n      if (stream.eat('*')) {\n        state.commentLevel++;\n        state.tokenize = tokenComment;\n        return state.tokenize(stream, state);\n      }\n    }\n    if (ch === '~' || ch === '?') {\n      stream.eatWhile(/\\w/);\n      return 'variable-2';\n    }\n    if (ch === '`') {\n      stream.eatWhile(/\\w/);\n      return 'quote';\n    }\n    if (ch === '/' && parserConfig.slashComments && stream.eat('/')) {\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (/\\d/.test(ch)) {\n      if (ch === '0' && stream.eat(/[bB]/)) {\n        stream.eatWhile(/[01]/);\n      } if (ch === '0' && stream.eat(/[xX]/)) {\n        stream.eatWhile(/[0-9a-fA-F]/)\n      } if (ch === '0' && stream.eat(/[oO]/)) {\n        stream.eatWhile(/[0-7]/);\n      } else {\n        stream.eatWhile(/[\\d_]/);\n        if (stream.eat('.')) {\n          stream.eatWhile(/[\\d]/);\n        }\n        if (stream.eat(/[eE]/)) {\n          stream.eatWhile(/[\\d\\-+]/);\n        }\n      }\n      return 'number';\n    }\n    if ( /[+\\-*&%=<>!?|@\\.~:]/.test(ch)) {\n      return 'operator';\n    }\n    if (/[\\w\\xa1-\\uffff]/.test(ch)) {\n      stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n      var cur = stream.current();\n      return words.hasOwnProperty(cur) ? words[cur] : 'variable';\n    }\n    return null\n  }\n\n  function tokenString(stream, state) {\n    var next, end = false, escaped = false;\n    while ((next = stream.next()) != null) {\n      if (next === '\"' && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next === '\\\\';\n    }\n    if (end && !escaped) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  };\n\n  function tokenComment(stream, state) {\n    var prev, next;\n    while(state.commentLevel > 0 && (next = stream.next()) != null) {\n      if (prev === '(' && next === '*') state.commentLevel++;\n      if (prev === '*' && next === ')') state.commentLevel--;\n      prev = next;\n    }\n    if (state.commentLevel <= 0) {\n      state.tokenize = tokenBase;\n    }\n    return 'comment';\n  }\n\n  function tokenLongString(stream, state) {\n    var prev, next;\n    while (state.longString && (next = stream.next()) != null) {\n      if (prev === '|' && next === '}') state.longString = false;\n      prev = next;\n    }\n    if (!state.longString) {\n      state.tokenize = tokenBase;\n    }\n    return 'string';\n  }\n\n  return {\n    startState: function() {return {tokenize: tokenBase, commentLevel: 0, longString: false};},\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      return state.tokenize(stream, state);\n    },\n\n    blockCommentStart: \"(*\",\n    blockCommentEnd: \"*)\",\n    lineComment: parserConfig.slashComments ? \"//\" : null\n  };\n});\n\nCodeMirror.defineMIME('text/x-ocaml', {\n  name: 'mllike',\n  extraWords: {\n    'and': 'keyword',\n    'assert': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'constraint': 'keyword',\n    'done': 'keyword',\n    'downto': 'keyword',\n    'external': 'keyword',\n    'function': 'keyword',\n    'initializer': 'keyword',\n    'lazy': 'keyword',\n    'match': 'keyword',\n    'method': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'new': 'keyword',\n    'nonrec': 'keyword',\n    'object': 'keyword',\n    'private': 'keyword',\n    'sig': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'value': 'keyword',\n    'virtual': 'keyword',\n    'when': 'keyword',\n\n    // builtins\n    'raise': 'builtin',\n    'failwith': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    // Pervasives builtins\n    'asr': 'builtin',\n    'land': 'builtin',\n    'lor': 'builtin',\n    'lsl': 'builtin',\n    'lsr': 'builtin',\n    'lxor': 'builtin',\n    'mod': 'builtin',\n    'or': 'builtin',\n\n    // More Pervasives\n    'raise_notrace': 'builtin',\n    'trace': 'builtin',\n    'exit': 'builtin',\n    'print_string': 'builtin',\n    'print_endline': 'builtin',\n\n     'int': 'type',\n     'float': 'type',\n     'bool': 'type',\n     'char': 'type',\n     'string': 'type',\n     'unit': 'type',\n\n     // Modules\n     'List': 'builtin'\n  }\n});\n\nCodeMirror.defineMIME('text/x-fsharp', {\n  name: 'mllike',\n  extraWords: {\n    'abstract': 'keyword',\n    'assert': 'keyword',\n    'base': 'keyword',\n    'begin': 'keyword',\n    'class': 'keyword',\n    'default': 'keyword',\n    'delegate': 'keyword',\n    'do!': 'keyword',\n    'done': 'keyword',\n    'downcast': 'keyword',\n    'downto': 'keyword',\n    'elif': 'keyword',\n    'extern': 'keyword',\n    'finally': 'keyword',\n    'for': 'keyword',\n    'function': 'keyword',\n    'global': 'keyword',\n    'inherit': 'keyword',\n    'inline': 'keyword',\n    'interface': 'keyword',\n    'internal': 'keyword',\n    'lazy': 'keyword',\n    'let!': 'keyword',\n    'match': 'keyword',\n    'member': 'keyword',\n    'module': 'keyword',\n    'mutable': 'keyword',\n    'namespace': 'keyword',\n    'new': 'keyword',\n    'null': 'keyword',\n    'override': 'keyword',\n    'private': 'keyword',\n    'public': 'keyword',\n    'return!': 'keyword',\n    'return': 'keyword',\n    'select': 'keyword',\n    'static': 'keyword',\n    'to': 'keyword',\n    'try': 'keyword',\n    'upcast': 'keyword',\n    'use!': 'keyword',\n    'use': 'keyword',\n    'void': 'keyword',\n    'when': 'keyword',\n    'yield!': 'keyword',\n    'yield': 'keyword',\n\n    // Reserved words\n    'atomic': 'keyword',\n    'break': 'keyword',\n    'checked': 'keyword',\n    'component': 'keyword',\n    'const': 'keyword',\n    'constraint': 'keyword',\n    'constructor': 'keyword',\n    'continue': 'keyword',\n    'eager': 'keyword',\n    'event': 'keyword',\n    'external': 'keyword',\n    'fixed': 'keyword',\n    'method': 'keyword',\n    'mixin': 'keyword',\n    'object': 'keyword',\n    'parallel': 'keyword',\n    'process': 'keyword',\n    'protected': 'keyword',\n    'pure': 'keyword',\n    'sealed': 'keyword',\n    'tailcall': 'keyword',\n    'trait': 'keyword',\n    'virtual': 'keyword',\n    'volatile': 'keyword',\n\n    // builtins\n    'List': 'builtin',\n    'Seq': 'builtin',\n    'Map': 'builtin',\n    'Set': 'builtin',\n    'Option': 'builtin',\n    'int': 'builtin',\n    'string': 'builtin',\n    'not': 'builtin',\n    'true': 'builtin',\n    'false': 'builtin',\n\n    'raise': 'builtin',\n    'failwith': 'builtin'\n  },\n  slashComments: true\n});\n\n\nCodeMirror.defineMIME('text/x-sml', {\n  name: 'mllike',\n  extraWords: {\n    'abstype': 'keyword',\n    'and': 'keyword',\n    'andalso': 'keyword',\n    'case': 'keyword',\n    'datatype': 'keyword',\n    'fn': 'keyword',\n    'handle': 'keyword',\n    'infix': 'keyword',\n    'infixr': 'keyword',\n    'local': 'keyword',\n    'nonfix': 'keyword',\n    'op': 'keyword',\n    'orelse': 'keyword',\n    'raise': 'keyword',\n    'withtype': 'keyword',\n    'eqtype': 'keyword',\n    'sharing': 'keyword',\n    'sig': 'keyword',\n    'signature': 'keyword',\n    'structure': 'keyword',\n    'where': 'keyword',\n    'true': 'keyword',\n    'false': 'keyword',\n\n    // types\n    'int': 'builtin',\n    'real': 'builtin',\n    'string': 'builtin',\n    'char': 'builtin',\n    'bool': 'builtin'\n  },\n  slashComments: true\n});\n\n});\n"]}