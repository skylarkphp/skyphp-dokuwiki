{"version":3,"sources":["mode/ntriples/ntriples.js"],"names":["define","CodeMirror","defineMode","Location","PRE_SUBJECT","WRITING_SUB_URI","WRITING_BNODE_URI","PRE_PRED","WRITING_PRED_URI","PRE_OBJ","WRITING_OBJ_URI","WRITING_OBJ_BNODE","WRITING_OBJ_LITERAL","WRITING_LIT_LANG","WRITING_LIT_TYPE","POST_OBJ","ERROR","transitState","currState","c","ret","currLocation","location","startState","uris","anchors","bnodes","langs","types","token","stream","state","ch","next","parsedURI","eatWhile","push","match","parsedAnchor","parsedBNode","peek","parsedLang","parsedType","defineMIME"],"mappings":"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","file":"../../../mode/ntriples/ntriples.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/**********************************************************\n* This script provides syntax highlighting support for\n* the N-Triples format.\n* N-Triples format specification:\n*     https://www.w3.org/TR/n-triples/\n***********************************************************/\n\n/*\n    The following expression defines the defined ASF grammar transitions.\n\n    pre_subject ->\n        {\n        ( writing_subject_uri | writing_bnode_uri )\n            -> pre_predicate\n                -> writing_predicate_uri\n                    -> pre_object\n                        -> writing_object_uri | writing_object_bnode |\n                          (\n                            writing_object_literal\n                                -> writing_literal_lang | writing_literal_type\n                          )\n                            -> post_object\n                                -> BEGIN\n         } otherwise {\n             -> ERROR\n         }\n*/\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"ntriples\", function() {\n\n  var Location = {\n    PRE_SUBJECT         : 0,\n    WRITING_SUB_URI     : 1,\n    WRITING_BNODE_URI   : 2,\n    PRE_PRED            : 3,\n    WRITING_PRED_URI    : 4,\n    PRE_OBJ             : 5,\n    WRITING_OBJ_URI     : 6,\n    WRITING_OBJ_BNODE   : 7,\n    WRITING_OBJ_LITERAL : 8,\n    WRITING_LIT_LANG    : 9,\n    WRITING_LIT_TYPE    : 10,\n    POST_OBJ            : 11,\n    ERROR               : 12\n  };\n  function transitState(currState, c) {\n    var currLocation = currState.location;\n    var ret;\n\n    // Opening.\n    if     (currLocation == Location.PRE_SUBJECT && c == '<') ret = Location.WRITING_SUB_URI;\n    else if(currLocation == Location.PRE_SUBJECT && c == '_') ret = Location.WRITING_BNODE_URI;\n    else if(currLocation == Location.PRE_PRED    && c == '<') ret = Location.WRITING_PRED_URI;\n    else if(currLocation == Location.PRE_OBJ     && c == '<') ret = Location.WRITING_OBJ_URI;\n    else if(currLocation == Location.PRE_OBJ     && c == '_') ret = Location.WRITING_OBJ_BNODE;\n    else if(currLocation == Location.PRE_OBJ     && c == '\"') ret = Location.WRITING_OBJ_LITERAL;\n\n    // Closing.\n    else if(currLocation == Location.WRITING_SUB_URI     && c == '>') ret = Location.PRE_PRED;\n    else if(currLocation == Location.WRITING_BNODE_URI   && c == ' ') ret = Location.PRE_PRED;\n    else if(currLocation == Location.WRITING_PRED_URI    && c == '>') ret = Location.PRE_OBJ;\n    else if(currLocation == Location.WRITING_OBJ_URI     && c == '>') ret = Location.POST_OBJ;\n    else if(currLocation == Location.WRITING_OBJ_BNODE   && c == ' ') ret = Location.POST_OBJ;\n    else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '\"') ret = Location.POST_OBJ;\n    else if(currLocation == Location.WRITING_LIT_LANG && c == ' ') ret = Location.POST_OBJ;\n    else if(currLocation == Location.WRITING_LIT_TYPE && c == '>') ret = Location.POST_OBJ;\n\n    // Closing typed and language literal.\n    else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '@') ret = Location.WRITING_LIT_LANG;\n    else if(currLocation == Location.WRITING_OBJ_LITERAL && c == '^') ret = Location.WRITING_LIT_TYPE;\n\n    // Spaces.\n    else if( c == ' ' &&\n             (\n               currLocation == Location.PRE_SUBJECT ||\n               currLocation == Location.PRE_PRED    ||\n               currLocation == Location.PRE_OBJ     ||\n               currLocation == Location.POST_OBJ\n             )\n           ) ret = currLocation;\n\n    // Reset.\n    else if(currLocation == Location.POST_OBJ && c == '.') ret = Location.PRE_SUBJECT;\n\n    // Error\n    else ret = Location.ERROR;\n\n    currState.location=ret;\n  }\n\n  return {\n    startState: function() {\n       return {\n           location : Location.PRE_SUBJECT,\n           uris     : [],\n           anchors  : [],\n           bnodes   : [],\n           langs    : [],\n           types    : []\n       };\n    },\n    token: function(stream, state) {\n      var ch = stream.next();\n      if(ch == '<') {\n         transitState(state, ch);\n         var parsedURI = '';\n         stream.eatWhile( function(c) { if( c != '#' && c != '>' ) { parsedURI += c; return true; } return false;} );\n         state.uris.push(parsedURI);\n         if( stream.match('#', false) ) return 'variable';\n         stream.next();\n         transitState(state, '>');\n         return 'variable';\n      }\n      if(ch == '#') {\n        var parsedAnchor = '';\n        stream.eatWhile(function(c) { if(c != '>' && c != ' ') { parsedAnchor+= c; return true; } return false;});\n        state.anchors.push(parsedAnchor);\n        return 'variable-2';\n      }\n      if(ch == '>') {\n          transitState(state, '>');\n          return 'variable';\n      }\n      if(ch == '_') {\n          transitState(state, ch);\n          var parsedBNode = '';\n          stream.eatWhile(function(c) { if( c != ' ' ) { parsedBNode += c; return true; } return false;});\n          state.bnodes.push(parsedBNode);\n          stream.next();\n          transitState(state, ' ');\n          return 'builtin';\n      }\n      if(ch == '\"') {\n          transitState(state, ch);\n          stream.eatWhile( function(c) { return c != '\"'; } );\n          stream.next();\n          if( stream.peek() != '@' && stream.peek() != '^' ) {\n              transitState(state, '\"');\n          }\n          return 'string';\n      }\n      if( ch == '@' ) {\n          transitState(state, '@');\n          var parsedLang = '';\n          stream.eatWhile(function(c) { if( c != ' ' ) { parsedLang += c; return true; } return false;});\n          state.langs.push(parsedLang);\n          stream.next();\n          transitState(state, ' ');\n          return 'string-2';\n      }\n      if( ch == '^' ) {\n          stream.next();\n          transitState(state, '^');\n          var parsedType = '';\n          stream.eatWhile(function(c) { if( c != '>' ) { parsedType += c; return true; } return false;} );\n          state.types.push(parsedType);\n          stream.next();\n          transitState(state, '>');\n          return 'variable';\n      }\n      if( ch == ' ' ) {\n          transitState(state, ch);\n      }\n      if( ch == '.' ) {\n          transitState(state, ch);\n      }\n    }\n  };\n});\n\n// define the registered Media Type for n-triples:\n// https://www.w3.org/TR/n-triples/#n-triples-mediatype\nCodeMirror.defineMIME(\"application/n-triples\", \"ntriples\");\n\n// N-Quads is based on the N-Triples format (so same highlighting works)\n// https://www.w3.org/TR/n-quads/\nCodeMirror.defineMIME(\"application/n-quads\", \"ntriples\");\n\n// previously used, though technically incorrect media type for n-triples\nCodeMirror.defineMIME(\"text/n-triples\", \"ntriples\");\n\n});\n"]}