{"version":3,"sources":["mode/pascal/pascal.js"],"names":["define","CodeMirror","defineMode","keywords","str","obj","words","split","i","length","atoms","null","isOperatorChar","tokenComment","stream","state","ch","maybeEnd","next","tokenize","startState","token","eatSpace","style","quote","startOfLine","skipToEnd","escaped","end","eat","test","eatWhile","cur","current","propertyIsEnumerable","electricChars","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GACtC,aAEAA,EAAWC,WAAW,SAAU,WAM9B,IAAIC,EALJ,SAAeC,GAEb,IADA,IAAIC,KAAUC,EAAQF,EAAIG,MAAM,KACvBC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAGH,EAAIC,EAAME,KAAM,EACvD,OAAOH,EAEMC,CACb,w9BAcEI,GAASC,MAAQ,GAEjBC,EAAiB,mBAoDrB,SAASC,EAAaC,EAAQC,GAE5B,IADA,IAAsBC,EAAlBC,GAAW,EACRD,EAAKF,EAAOI,QAAQ,CACzB,GAAU,KAANF,GAAaC,EAAU,CACzBF,EAAMI,SAAW,KACjB,MAEFF,EAAkB,KAAND,EAEd,MAAO,UAKT,OACEI,WAAY,WACV,OAAQD,SAAU,OAGpBE,MAAO,SAASP,EAAQC,GACtB,GAAID,EAAOQ,WAAY,OAAO,KAC9B,IAAIC,GAASR,EAAMI,UAvEvB,SAAmBL,EAAQC,GACzB,IAqCmBS,EArCfR,EAAKF,EAAOI,OAChB,GAAU,KAANF,GAAaD,EAAMU,YAErB,OADAX,EAAOY,YACA,OAET,GAAU,KAANV,GAAmB,KAANA,EAEf,OADAD,EAAMI,UA+BWK,EA/BYR,EAgCxB,SAASF,EAAQC,GAEtB,IADA,IAAqBG,EAAjBS,GAAU,EAAaC,GAAM,EACA,OAAzBV,EAAOJ,EAAOI,SAAiB,CACrC,GAAIA,GAAQM,IAAUG,EAAS,CAACC,GAAM,EAAM,MAC5CD,GAAWA,GAAmB,MAART,EAGxB,OADIU,GAAQD,IAASZ,EAAMI,SAAW,MAC/B,WAtCAJ,EAAMI,SAASL,EAAQC,GAEhC,GAAU,KAANC,GAAaF,EAAOe,IAAI,KAE1B,OADAd,EAAMI,SAAWN,EACVA,EAAaC,EAAQC,GAE9B,GAAI,qBAAqBe,KAAKd,GAC5B,OAAO,KAET,GAAI,KAAKc,KAAKd,GAEZ,OADAF,EAAOiB,SAAS,UACT,SAET,GAAU,KAANf,GACEF,EAAOe,IAAI,KAEb,OADAf,EAAOY,YACA,UAGX,GAAId,EAAekB,KAAKd,GAEtB,OADAF,EAAOiB,SAASnB,GACT,WAETE,EAAOiB,SAAS,WAChB,IAAIC,EAAMlB,EAAOmB,UACjB,OAAI9B,EAAS+B,qBAAqBF,GAAa,UAC3CtB,EAAMwB,qBAAqBF,GAAa,OACrC,aAoCqClB,EAAQC,GAClD,OAAkDQ,GAIpDY,cAAe,QAInBlC,EAAWmC,WAAW,gBAAiB","file":"../../../mode/pascal/pascal.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"pascal\", function() {\n  function words(str) {\n    var obj = {}, words = str.split(\" \");\n    for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n    return obj;\n  }\n  var keywords = words(\n    \"absolute and array asm begin case const constructor destructor div do \" +\n    \"downto else end file for function goto if implementation in inherited \" +\n    \"inline interface label mod nil not object of operator or packed procedure \" +\n    \"program record reintroduce repeat self set shl shr string then to type \" +\n    \"unit until uses var while with xor as class dispinterface except exports \" +\n    \"finalization finally initialization inline is library on out packed \" +\n    \"property raise resourcestring threadvar try absolute abstract alias \" +\n    \"assembler bitpacked break cdecl continue cppdecl cvar default deprecated \" +\n    \"dynamic enumerator experimental export external far far16 forward generic \" +\n    \"helper implements index interrupt iocheck local message name near \" +\n    \"nodefault noreturn nostackframe oldfpccall otherwise overload override \" +\n    \"pascal platform private protected public published read register \" +\n    \"reintroduce result safecall saveregisters softfloat specialize static \" +\n    \"stdcall stored strict unaligned unimplemented varargs virtual write\");\n  var atoms = {\"null\": true};\n\n  var isOperatorChar = /[+\\-*&%=<>!?|\\/]/;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == \"#\" && state.startOfLine) {\n      stream.skipToEnd();\n      return \"meta\";\n    }\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"(\" && stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return null;\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/[\\w\\.]/);\n      return \"number\";\n    }\n    if (ch == \"/\") {\n      if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur)) return \"keyword\";\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (end || !escaped) state.tokenize = null;\n      return \"string\";\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \")\" && maybeEnd) {\n        state.tokenize = null;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return \"comment\";\n  }\n\n  // Interface\n\n  return {\n    startState: function() {\n      return {tokenize: null};\n    },\n\n    token: function(stream, state) {\n      if (stream.eatSpace()) return null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      return style;\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-pascal\", \"pascal\");\n\n});\n"]}