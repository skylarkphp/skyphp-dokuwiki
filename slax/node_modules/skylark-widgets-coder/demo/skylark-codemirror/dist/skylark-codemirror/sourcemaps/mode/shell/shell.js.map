{"version":3,"sources":["mode/shell/shell.js"],"names":["define","CodeMirror","defineMode","words","style","dict","i","length","commonAtoms","commonKeywords","commonCommands","tokenString","quote","close","stream","state","next","escaped","tokens","shift","peek","backUp","unshift","tokenDollar","tokenize","test","tokenStringStart","registerHelper","concat","eat","ch","eatWhile","eatSpace","sol","skipToEnd","eol","cur","current","hasOwnProperty","startState","token","closeBrackets","lineComment","fold","defineMIME"],"mappings":"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","file":"../../../mode/shell/shell.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode('shell', function() {\n\n  var words = {};\n  function define(style, dict) {\n    for(var i = 0; i < dict.length; i++) {\n      words[dict[i]] = style;\n    }\n  };\n\n  var commonAtoms = [\"true\", \"false\"];\n  var commonKeywords = [\"if\", \"then\", \"do\", \"else\", \"elif\", \"while\", \"until\", \"for\", \"in\", \"esac\", \"fi\",\n    \"fin\", \"fil\", \"done\", \"exit\", \"set\", \"unset\", \"export\", \"function\"];\n  var commonCommands = [\"ab\", \"awk\", \"bash\", \"beep\", \"cat\", \"cc\", \"cd\", \"chown\", \"chmod\", \"chroot\", \"clear\",\n    \"cp\", \"curl\", \"cut\", \"diff\", \"echo\", \"find\", \"gawk\", \"gcc\", \"get\", \"git\", \"grep\", \"hg\", \"kill\", \"killall\",\n    \"ln\", \"ls\", \"make\", \"mkdir\", \"openssl\", \"mv\", \"nc\", \"nl\", \"node\", \"npm\", \"ping\", \"ps\", \"restart\", \"rm\",\n    \"rmdir\", \"sed\", \"service\", \"sh\", \"shopt\", \"shred\", \"source\", \"sort\", \"sleep\", \"ssh\", \"start\", \"stop\",\n    \"su\", \"sudo\", \"svn\", \"tee\", \"telnet\", \"top\", \"touch\", \"vi\", \"vim\", \"wall\", \"wc\", \"wget\", \"who\", \"write\",\n    \"yes\", \"zsh\"];\n\n  CodeMirror.registerHelper(\"hintWords\", \"shell\", commonAtoms.concat(commonKeywords, commonCommands));\n\n  define('atom', commonAtoms);\n  define('keyword', commonKeywords);\n  define('builtin', commonCommands);\n\n  function tokenBase(stream, state) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      stream.next();\n      return null;\n    }\n    if (ch === '\\'' || ch === '\"' || ch === '`') {\n      state.tokens.unshift(tokenString(ch, ch === \"`\" ? \"quote\" : \"string\"));\n      return tokenize(stream, state);\n    }\n    if (ch === '#') {\n      if (sol && stream.eat('!')) {\n        stream.skipToEnd();\n        return 'meta'; // 'comment'?\n      }\n      stream.skipToEnd();\n      return 'comment';\n    }\n    if (ch === '$') {\n      state.tokens.unshift(tokenDollar);\n      return tokenize(stream, state);\n    }\n    if (ch === '+' || ch === '=') {\n      return 'operator';\n    }\n    if (ch === '-') {\n      stream.eat('-');\n      stream.eatWhile(/\\w/);\n      return 'attribute';\n    }\n    if (/\\d/.test(ch)) {\n      stream.eatWhile(/\\d/);\n      if(stream.eol() || !/\\w/.test(stream.peek())) {\n        return 'number';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    if (stream.peek() === '=' && /\\w+/.test(cur)) return 'def';\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenString(quote, style) {\n    var close = quote == \"(\" ? \")\" : quote == \"{\" ? \"}\" : quote\n    return function(stream, state) {\n      var next, escaped = false;\n      while ((next = stream.next()) != null) {\n        if (next === close && !escaped) {\n          state.tokens.shift();\n          break;\n        } else if (next === '$' && !escaped && quote !== \"'\" && stream.peek() != close) {\n          escaped = true;\n          stream.backUp(1);\n          state.tokens.unshift(tokenDollar);\n          break;\n        } else if (!escaped && quote !== close && next === quote) {\n          state.tokens.unshift(tokenString(quote, style))\n          return tokenize(stream, state)\n        } else if (!escaped && /['\"]/.test(next) && !/['\"]/.test(quote)) {\n          state.tokens.unshift(tokenStringStart(next, \"string\"));\n          stream.backUp(1);\n          break;\n        }\n        escaped = !escaped && next === '\\\\';\n      }\n      return style;\n    };\n  };\n\n  function tokenStringStart(quote, style) {\n    return function(stream, state) {\n      state.tokens[0] = tokenString(quote, style)\n      stream.next()\n      return tokenize(stream, state)\n    }\n  }\n\n  var tokenDollar = function(stream, state) {\n    if (state.tokens.length > 1) stream.eat('$');\n    var ch = stream.next()\n    if (/['\"({]/.test(ch)) {\n      state.tokens[0] = tokenString(ch, ch == \"(\" ? \"quote\" : ch == \"{\" ? \"def\" : \"string\");\n      return tokenize(stream, state);\n    }\n    if (!/\\d/.test(ch)) stream.eatWhile(/\\w/);\n    state.tokens.shift();\n    return 'def';\n  };\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    },\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n    lineComment: '#',\n    fold: \"brace\"\n  };\n});\n\nCodeMirror.defineMIME('text/x-sh', 'shell');\n// Apache uses a slightly different Media Type for Shell scripts\n// http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types\nCodeMirror.defineMIME('application/x-sh', 'shell');\n\n});\n"]}