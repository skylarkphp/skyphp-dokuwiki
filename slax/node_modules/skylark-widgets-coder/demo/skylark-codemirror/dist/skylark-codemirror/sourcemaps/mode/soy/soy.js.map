{"version":3,"sources":["mode/soy/soy.js"],"names":["define","CodeMirror","indentingTags","defineMode","config","textMode","getMode","modes","html","name","multilineTagIndentFactor","multilineTagIndentPastTag","attributes","text","uri","trusted_resource_uri","css","js","statementIndent","indentUnit","last","array","length","tokenUntil","stream","state","untilRegExp","sol","indent","eat","oldString","string","match","exec","substr","pos","index","result","hideFirstChars","localState","localStates","mode","token","prepend","list","element","next","popscope","scopes","variables","startState","kind","kindTag","soyState","templates","quoteKind","copyState","tag","concat","map","loose","pop","skipToEnd","paramRe","current","push","peek","eatWhile","indexOf","contains","test","this","textAfter","line","top","Pass","innerMode","electricInput","lineComment","blockCommentStart","blockCommentEnd","blockCommentContinue","useInnerComments","fold","registerHelper","defineMIME"],"mappings":"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","file":"../../../mode/soy/soy.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\", \"../htmlmixed/htmlmixed\"], function(CodeMirror) {\n  \"use strict\";\n\n  var indentingTags = [\"template\", \"literal\", \"msg\", \"fallbackmsg\", \"let\", \"if\", \"elseif\",\n                       \"else\", \"switch\", \"case\", \"default\", \"foreach\", \"ifempty\", \"for\",\n                       \"call\", \"param\", \"deltemplate\", \"delcall\", \"log\", \"element\"];\n\n  CodeMirror.defineMode(\"soy\", function(config) {\n    var textMode = CodeMirror.getMode(config, \"text/plain\");\n    var modes = {\n      html: CodeMirror.getMode(config, {name: \"text/html\", multilineTagIndentFactor: 2, multilineTagIndentPastTag: false}),\n      attributes: textMode,\n      text: textMode,\n      uri: textMode,\n      trusted_resource_uri: textMode,\n      css: CodeMirror.getMode(config, \"text/css\"),\n      js: CodeMirror.getMode(config, {name: \"text/javascript\", statementIndent: 2 * config.indentUnit})\n    };\n\n    function last(array) {\n      return array[array.length - 1];\n    }\n\n    function tokenUntil(stream, state, untilRegExp) {\n      if (stream.sol()) {\n        for (var indent = 0; indent < state.indent; indent++) {\n          if (!stream.eat(/\\s/)) break;\n        }\n        if (indent) return null;\n      }\n      var oldString = stream.string;\n      var match = untilRegExp.exec(oldString.substr(stream.pos));\n      if (match) {\n        // We don't use backUp because it backs up just the position, not the state.\n        // This uses an undocumented API.\n        stream.string = oldString.substr(0, stream.pos + match.index);\n      }\n      var result = stream.hideFirstChars(state.indent, function() {\n        var localState = last(state.localStates);\n        return localState.mode.token(stream, localState.state);\n      });\n      stream.string = oldString;\n      return result;\n    }\n\n    function contains(list, element) {\n      while (list) {\n        if (list.element === element) return true;\n        list = list.next;\n      }\n      return false;\n    }\n\n    function prepend(list, element) {\n      return {\n        element: element,\n        next: list\n      };\n    }\n\n    // Reference a variable `name` in `list`.\n    // Let `loose` be truthy to ignore missing identifiers.\n    function ref(list, name, loose) {\n      return contains(list, name) ? \"variable-2\" : (loose ? \"variable\" : \"variable-2 error\");\n    }\n\n    function popscope(state) {\n      if (state.scopes) {\n        state.variables = state.scopes.element;\n        state.scopes = state.scopes.next;\n      }\n    }\n\n    return {\n      startState: function() {\n        return {\n          kind: [],\n          kindTag: [],\n          soyState: [],\n          templates: null,\n          variables: prepend(null, 'ij'),\n          scopes: null,\n          indent: 0,\n          quoteKind: null,\n          localStates: [{\n            mode: modes.html,\n            state: CodeMirror.startState(modes.html)\n          }]\n        };\n      },\n\n      copyState: function(state) {\n        return {\n          tag: state.tag, // Last seen Soy tag.\n          kind: state.kind.concat([]), // Values of kind=\"\" attributes.\n          kindTag: state.kindTag.concat([]), // Opened tags with kind=\"\" attributes.\n          soyState: state.soyState.concat([]),\n          templates: state.templates,\n          variables: state.variables,\n          scopes: state.scopes,\n          indent: state.indent, // Indentation of the following line.\n          quoteKind: state.quoteKind,\n          localStates: state.localStates.map(function(localState) {\n            return {\n              mode: localState.mode,\n              state: CodeMirror.copyState(localState.mode, localState.state)\n            };\n          })\n        };\n      },\n\n      token: function(stream, state) {\n        var match;\n\n        switch (last(state.soyState)) {\n          case \"comment\":\n            if (stream.match(/^.*?\\*\\//)) {\n              state.soyState.pop();\n            } else {\n              stream.skipToEnd();\n            }\n            if (!state.scopes) {\n              var paramRe = /@param\\??\\s+(\\S+)/g;\n              var current = stream.current();\n              for (var match; (match = paramRe.exec(current)); ) {\n                state.variables = prepend(state.variables, match[1]);\n              }\n            }\n            return \"comment\";\n\n          case \"string\":\n            var match = stream.match(/^.*?([\"']|\\\\[\\s\\S])/);\n            if (!match) {\n              stream.skipToEnd();\n            } else if (match[1] == state.quoteKind) {\n              state.quoteKind = null;\n              state.soyState.pop();\n            }\n            return \"string\";\n        }\n\n        if (!state.soyState.length || last(state.soyState) != \"literal\") {\n          if (stream.match(/^\\/\\*/)) {\n            state.soyState.push(\"comment\");\n            return \"comment\";\n          } else if (stream.match(stream.sol() ? /^\\s*\\/\\/.*/ : /^\\s+\\/\\/.*/)) {\n            return \"comment\";\n          }\n        }\n\n        switch (last(state.soyState)) {\n          case \"templ-def\":\n            if (match = stream.match(/^\\.?([\\w]+(?!\\.[\\w]+)*)/)) {\n              state.templates = prepend(state.templates, match[1]);\n              state.scopes = prepend(state.scopes, state.variables);\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"templ-ref\":\n            if (match = stream.match(/(\\.?[a-zA-Z_][a-zA-Z_0-9]+)+/)) {\n              state.soyState.pop();\n              // If the first character is '.', it can only be a local template.\n              if (match[0][0] == '.') {\n                return \"variable-2\"\n              }\n              // Otherwise\n              return \"variable\";\n            }\n            stream.next();\n            return null;\n\n          case \"namespace-def\":\n            if (match = stream.match(/^\\.?([\\w\\.]+)/)) {\n              state.soyState.pop();\n              return \"variable\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-def\":\n            if (match = stream.match(/^\\w+/)) {\n              state.variables = prepend(state.variables, match[0]);\n              state.soyState.pop();\n              state.soyState.push(\"param-type\");\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-ref\":\n            if (match = stream.match(/^\\w+/)) {\n              state.soyState.pop();\n              return \"property\";\n            }\n            stream.next();\n            return null;\n\n          case \"param-type\":\n            if (stream.peek() == \"}\") {\n              state.soyState.pop();\n              return null;\n            }\n            if (stream.eatWhile(/^([\\w]+|[?])/)) {\n              return \"type\";\n            }\n            stream.next();\n            return null;\n\n          case \"var-def\":\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              state.variables = prepend(state.variables, match[1]);\n              state.soyState.pop();\n              return \"def\";\n            }\n            stream.next();\n            return null;\n\n          case \"tag\":\n            if (stream.match(/^\\/?}/)) {\n              if (state.tag == \"/template\" || state.tag == \"/deltemplate\") {\n                popscope(state);\n                state.variables = prepend(null, 'ij');\n                state.indent = 0;\n              } else {\n                if (state.tag == \"/for\" || state.tag == \"/foreach\") {\n                  popscope(state);\n                }\n                state.indent -= config.indentUnit *\n                    (stream.current() == \"/}\" || indentingTags.indexOf(state.tag) == -1 ? 2 : 1);\n              }\n              state.soyState.pop();\n              return \"keyword\";\n            } else if (stream.match(/^([\\w?]+)(?==)/)) {\n              if (stream.current() == \"kind\" && (match = stream.match(/^=\"([^\"]+)/, false))) {\n                var kind = match[1];\n                state.kind.push(kind);\n                state.kindTag.push(state.tag);\n                var mode = modes[kind] || modes.html;\n                var localState = last(state.localStates);\n                if (localState.mode.indent) {\n                  state.indent += localState.mode.indent(localState.state, \"\", \"\");\n                }\n                state.localStates.push({\n                  mode: mode,\n                  state: CodeMirror.startState(mode)\n                });\n              }\n              return \"attribute\";\n            } else if (match = stream.match(/([\\w]+)(?=\\()/)) {\n              return \"variable callee\";\n            } else if (match = stream.match(/^[\"']/)) {\n              state.soyState.push(\"string\");\n              state.quoteKind = match;\n              return \"string\";\n            }\n            if (stream.match(/(null|true|false)(?!\\w)/) ||\n              stream.match(/0x([0-9a-fA-F]{2,})/) ||\n              stream.match(/-?([0-9]*[.])?[0-9]+(e[0-9]*)?/)) {\n              return \"atom\";\n            }\n            if (stream.match(/(\\||[+\\-*\\/%]|[=!]=|\\?:|[<>]=?)/)) {\n              // Tokenize filter, binary, null propagator, and equality operators.\n              return \"operator\";\n            }\n            if (match = stream.match(/^\\$([\\w]+)/)) {\n              return ref(state.variables, match[1]);\n            }\n            if (match = stream.match(/^\\w+/)) {\n              return /^(?:as|and|or|not|in)$/.test(match[0]) ? \"keyword\" : null;\n            }\n            stream.next();\n            return null;\n\n          case \"literal\":\n            if (stream.match(/^(?=\\{\\/literal})/)) {\n              state.indent -= config.indentUnit;\n              state.soyState.pop();\n              return this.token(stream, state);\n            }\n            return tokenUntil(stream, state, /\\{\\/literal}/);\n        }\n\n        if (stream.match(/^\\{literal}/)) {\n          state.indent += config.indentUnit;\n          state.soyState.push(\"literal\");\n          return \"keyword\";\n\n        // A tag-keyword must be followed by whitespace, comment or a closing tag.\n        } else if (match = stream.match(/^\\{([/@\\\\]?\\w+\\??)(?=$|[\\s}]|\\/[/*])/)) {\n          if (match[1] != \"/switch\")\n            state.indent += (/^(\\/|(else|elseif|ifempty|case|fallbackmsg|default)$)/.test(match[1]) && state.tag != \"switch\" ? 1 : 2) * config.indentUnit;\n          state.tag = match[1];\n          if (state.tag == \"/\" + last(state.kindTag)) {\n            // We found the tag that opened the current kind=\"\".\n            state.kind.pop();\n            state.kindTag.pop();\n            state.localStates.pop();\n            var localState = last(state.localStates);\n            if (localState.mode.indent) {\n              state.indent -= localState.mode.indent(localState.state, \"\", \"\");\n            }\n          }\n          state.soyState.push(\"tag\");\n          if (state.tag == \"template\" || state.tag == \"deltemplate\") {\n            state.soyState.push(\"templ-def\");\n          } else if (state.tag == \"call\" || state.tag == \"delcall\") {\n            state.soyState.push(\"templ-ref\");\n          } else if (state.tag == \"let\") {\n            state.soyState.push(\"var-def\");\n          } else if (state.tag == \"for\" || state.tag == \"foreach\") {\n            state.scopes = prepend(state.scopes, state.variables);\n            state.soyState.push(\"var-def\");\n          } else if (state.tag == \"namespace\") {\n            state.soyState.push(\"namespace-def\");\n            if (!state.scopes) {\n              state.variables = prepend(null, 'ij');\n            }\n          } else if (state.tag.match(/^@(?:param\\??|inject|state)/)) {\n            state.soyState.push(\"param-def\");\n          } else if (state.tag.match(/^(?:param)/)) {\n            state.soyState.push(\"param-ref\");\n          }\n          return \"keyword\";\n\n        // Not a tag-keyword; it's an implicit print tag.\n        } else if (stream.eat('{')) {\n          state.tag = \"print\";\n          state.indent += 2 * config.indentUnit;\n          state.soyState.push(\"tag\");\n          return \"keyword\";\n        }\n\n        return tokenUntil(stream, state, /\\{|\\s+\\/\\/|\\/\\*/);\n      },\n\n      indent: function(state, textAfter, line) {\n        var indent = state.indent, top = last(state.soyState);\n        if (top == \"comment\") return CodeMirror.Pass;\n\n        if (top == \"literal\") {\n          if (/^\\{\\/literal}/.test(textAfter)) indent -= config.indentUnit;\n        } else {\n          if (/^\\s*\\{\\/(template|deltemplate)\\b/.test(textAfter)) return 0;\n          if (/^\\{(\\/|(fallbackmsg|elseif|else|ifempty)\\b)/.test(textAfter)) indent -= config.indentUnit;\n          if (state.tag != \"switch\" && /^\\{(case|default)\\b/.test(textAfter)) indent -= config.indentUnit;\n          if (/^\\{\\/switch\\b/.test(textAfter)) indent -= config.indentUnit;\n        }\n        var localState = last(state.localStates);\n        if (indent && localState.mode.indent) {\n          indent += localState.mode.indent(localState.state, textAfter, line);\n        }\n        return indent;\n      },\n\n      innerMode: function(state) {\n        if (state.soyState.length && last(state.soyState) != \"literal\") return null;\n        else return last(state.localStates);\n      },\n\n      electricInput: /^\\s*\\{(\\/|\\/template|\\/deltemplate|\\/switch|fallbackmsg|elseif|else|case|default|ifempty|\\/literal\\})$/,\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      blockCommentContinue: \" * \",\n      useInnerComments: false,\n      fold: \"indent\"\n    };\n  }, \"htmlmixed\");\n\n  CodeMirror.registerHelper(\"wordChars\", \"soy\", /[\\w$]/);\n\n  CodeMirror.registerHelper(\"hintWords\", \"soy\", indentingTags.concat(\n      [\"delpackage\", \"namespace\", \"alias\", \"print\", \"css\", \"debugger\"]));\n\n  CodeMirror.defineMIME(\"text/x-soy\", \"soy\");\n});\n"]}