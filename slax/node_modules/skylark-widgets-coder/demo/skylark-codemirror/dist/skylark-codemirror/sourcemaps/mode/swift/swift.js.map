{"version":3,"sources":["mode/swift/swift.js"],"names":["define","CodeMirror","wordSet","words","set","i","length","keywords","definingKeywords","atoms","types","operators","punc","binary","octal","hexadecimal","decimal","identifier","property","instruction","attribute","tokenBase","stream","state","prev","sol","indented","indentation","eatSpace","quote","singleLine","ch","peek","match","skipToEnd","tokenize","push","tokenComment","indexOf","next","escaped","tokenUntilClosingParen","pop","ident","current","hasOwnProperty","depth","inner","backUp","eat","defineMode","config","startState","context","token","style","bracket","exec","align","column","this","indent","textAfter","cx","closing","test","indentUnit","electricInput","lineComment","blockCommentStart","blockCommentEnd","fold","closeBrackets","defineMIME"],"mappings":"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","file":"../../../mode/swift/swift.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Swift mode created by Michael Kaminsky https://github.com/mkaminsky11\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n  \"use strict\"\n\n  function wordSet(words) {\n    var set = {}\n    for (var i = 0; i < words.length; i++) set[words[i]] = true\n    return set\n  }\n\n  var keywords = wordSet([\"_\",\"var\",\"let\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\n                          \"open\",\"public\",\"internal\",\"fileprivate\",\"private\",\"deinit\",\"init\",\"new\",\"override\",\"self\",\"subscript\",\"super\",\n                          \"convenience\",\"dynamic\",\"final\",\"indirect\",\"lazy\",\"required\",\"static\",\"unowned\",\"unowned(safe)\",\"unowned(unsafe)\",\"weak\",\"as\",\"is\",\n                          \"break\",\"case\",\"continue\",\"default\",\"else\",\"fallthrough\",\"for\",\"guard\",\"if\",\"in\",\"repeat\",\"switch\",\"where\",\"while\",\n                          \"defer\",\"return\",\"inout\",\"mutating\",\"nonmutating\",\"catch\",\"do\",\"rethrows\",\"throw\",\"throws\",\"try\",\"didSet\",\"get\",\"set\",\"willSet\",\n                          \"assignment\",\"associativity\",\"infix\",\"left\",\"none\",\"operator\",\"postfix\",\"precedence\",\"precedencegroup\",\"prefix\",\"right\",\n                          \"Any\",\"AnyObject\",\"Type\",\"dynamicType\",\"Self\",\"Protocol\",\"__COLUMN__\",\"__FILE__\",\"__FUNCTION__\",\"__LINE__\"])\n  var definingKeywords = wordSet([\"var\",\"let\",\"class\",\"enum\",\"extension\",\"import\",\"protocol\",\"struct\",\"func\",\"typealias\",\"associatedtype\",\"for\"])\n  var atoms = wordSet([\"true\",\"false\",\"nil\",\"self\",\"super\",\"_\"])\n  var types = wordSet([\"Array\",\"Bool\",\"Character\",\"Dictionary\",\"Double\",\"Float\",\"Int\",\"Int8\",\"Int16\",\"Int32\",\"Int64\",\"Never\",\"Optional\",\"Set\",\"String\",\n                       \"UInt8\",\"UInt16\",\"UInt32\",\"UInt64\",\"Void\"])\n  var operators = \"+-/*%=|&<>~^?!\"\n  var punc = \":;,.(){}[]\"\n  var binary = /^\\-?0b[01][01_]*/\n  var octal = /^\\-?0o[0-7][0-7_]*/\n  var hexadecimal = /^\\-?0x[\\dA-Fa-f][\\dA-Fa-f_]*(?:(?:\\.[\\dA-Fa-f][\\dA-Fa-f_]*)?[Pp]\\-?\\d[\\d_]*)?/\n  var decimal = /^\\-?\\d[\\d_]*(?:\\.\\d[\\d_]*)?(?:[Ee]\\-?\\d[\\d_]*)?/\n  var identifier = /^\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1/\n  var property = /^\\.(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n  var instruction = /^\\#[A-Za-z]+/\n  var attribute = /^@(?:\\$\\d+|(`?)[_A-Za-z][_A-Za-z$0-9]*\\1)/\n  //var regexp = /^\\/(?!\\s)(?:\\/\\/)?(?:\\\\.|[^\\/])+\\//\n\n  function tokenBase(stream, state, prev) {\n    if (stream.sol()) state.indented = stream.indentation()\n    if (stream.eatSpace()) return null\n\n    var ch = stream.peek()\n    if (ch == \"/\") {\n      if (stream.match(\"//\")) {\n        stream.skipToEnd()\n        return \"comment\"\n      }\n      if (stream.match(\"/*\")) {\n        state.tokenize.push(tokenComment)\n        return tokenComment(stream, state)\n      }\n    }\n    if (stream.match(instruction)) return \"builtin\"\n    if (stream.match(attribute)) return \"attribute\"\n    if (stream.match(binary)) return \"number\"\n    if (stream.match(octal)) return \"number\"\n    if (stream.match(hexadecimal)) return \"number\"\n    if (stream.match(decimal)) return \"number\"\n    if (stream.match(property)) return \"property\"\n    if (operators.indexOf(ch) > -1) {\n      stream.next()\n      return \"operator\"\n    }\n    if (punc.indexOf(ch) > -1) {\n      stream.next()\n      stream.match(\"..\")\n      return \"punctuation\"\n    }\n    if (ch = stream.match(/(\"{3}|\"|')/)) {\n      var tokenize = tokenString(ch[0])\n      state.tokenize.push(tokenize)\n      return tokenize(stream, state)\n    }\n\n    if (stream.match(identifier)) {\n      var ident = stream.current()\n      if (types.hasOwnProperty(ident)) return \"variable-2\"\n      if (atoms.hasOwnProperty(ident)) return \"atom\"\n      if (keywords.hasOwnProperty(ident)) {\n        if (definingKeywords.hasOwnProperty(ident))\n          state.prev = \"define\"\n        return \"keyword\"\n      }\n      if (prev == \"define\") return \"def\"\n      return \"variable\"\n    }\n\n    stream.next()\n    return null\n  }\n\n  function tokenUntilClosingParen() {\n    var depth = 0\n    return function(stream, state, prev) {\n      var inner = tokenBase(stream, state, prev)\n      if (inner == \"punctuation\") {\n        if (stream.current() == \"(\") ++depth\n        else if (stream.current() == \")\") {\n          if (depth == 0) {\n            stream.backUp(1)\n            state.tokenize.pop()\n            return state.tokenize[state.tokenize.length - 1](stream, state)\n          }\n          else --depth\n        }\n      }\n      return inner\n    }\n  }\n\n  function tokenString(quote) {\n    var singleLine = quote.length == 1\n    return function(stream, state) {\n      var ch, escaped = false\n      while (ch = stream.next()) {\n        if (escaped) {\n          if (ch == \"(\") {\n            state.tokenize.push(tokenUntilClosingParen())\n            return \"string\"\n          }\n          escaped = false\n        } else if (stream.match(quote)) {\n          state.tokenize.pop()\n          return \"string\"\n        } else {\n          escaped = ch == \"\\\\\"\n        }\n      }\n      if (singleLine) {\n        state.tokenize.pop()\n      }\n      return \"string\"\n    }\n  }\n\n  function tokenComment(stream, state) {\n    var ch\n    while (true) {\n      stream.match(/^[^/*]+/, true)\n      ch = stream.next()\n      if (!ch) break\n      if (ch === \"/\" && stream.eat(\"*\")) {\n        state.tokenize.push(tokenComment)\n      } else if (ch === \"*\" && stream.eat(\"/\")) {\n        state.tokenize.pop()\n      }\n    }\n    return \"comment\"\n  }\n\n  function Context(prev, align, indented) {\n    this.prev = prev\n    this.align = align\n    this.indented = indented\n  }\n\n  function pushContext(state, stream) {\n    var align = stream.match(/^\\s*($|\\/[\\/\\*])/, false) ? null : stream.column() + 1\n    state.context = new Context(state.context, align, state.indented)\n  }\n\n  function popContext(state) {\n    if (state.context) {\n      state.indented = state.context.indented\n      state.context = state.context.prev\n    }\n  }\n\n  CodeMirror.defineMode(\"swift\", function(config) {\n    return {\n      startState: function() {\n        return {\n          prev: null,\n          context: null,\n          indented: 0,\n          tokenize: []\n        }\n      },\n\n      token: function(stream, state) {\n        var prev = state.prev\n        state.prev = null\n        var tokenize = state.tokenize[state.tokenize.length - 1] || tokenBase\n        var style = tokenize(stream, state, prev)\n        if (!style || style == \"comment\") state.prev = prev\n        else if (!state.prev) state.prev = style\n\n        if (style == \"punctuation\") {\n          var bracket = /[\\(\\[\\{]|([\\]\\)\\}])/.exec(stream.current())\n          if (bracket) (bracket[1] ? popContext : pushContext)(state, stream)\n        }\n\n        return style\n      },\n\n      indent: function(state, textAfter) {\n        var cx = state.context\n        if (!cx) return 0\n        var closing = /^[\\]\\}\\)]/.test(textAfter)\n        if (cx.align != null) return cx.align - (closing ? 1 : 0)\n        return cx.indented + (closing ? 0 : config.indentUnit)\n      },\n\n      electricInput: /^\\s*[\\)\\}\\]]$/,\n\n      lineComment: \"//\",\n      blockCommentStart: \"/*\",\n      blockCommentEnd: \"*/\",\n      fold: \"brace\",\n      closeBrackets: \"()[]{}''\\\"\\\"``\"\n    }\n  })\n\n  CodeMirror.defineMIME(\"text/x-swift\",\"swift\")\n});\n"]}