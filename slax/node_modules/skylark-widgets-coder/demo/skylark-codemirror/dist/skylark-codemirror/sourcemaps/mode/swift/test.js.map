{"version":3,"sources":["mode/swift/test.js"],"names":["mode","CodeMirror","getMode","indentUnit","MT","name","test","Array","prototype","slice","call","arguments"],"mappings":";;;;;;;CAGA,WACE,IAAIA,EAAOC,WAAWC,SAASC,WAAY,GAAI,SAC/C,SAASC,EAAGC,GAAQC,KAAKN,KAAKK,EAAML,EAAMO,MAAMC,UAAUC,MAAMC,KAAKC,UAAW,IAGhFP,EAAG,UACA,iDACA,mDACA,wDACA,oDACA,qDACA,sDACA,uDACA,0DACA,uDAGHA,EAAG,aACA,gDACA,iFACA,0DACA,2DACA,yDACA,8DACA,6DACA,yEACA,oCACA,uEACA,mCACA,uHAGHA,EAAG,UACA,wFACA,6GACA,kDACA,iBACA,gBACA,kBACA,gBAGHA,EAAG,WACA,iCACA,0CACA,4EAGHA,EAAG,QACA,iDACA,6EACA,2EACA,sMACA,mDACA,qEACA,gDACA,gFACA,uEACA,gHACA,kGACA,0EACA,wBACA,sBACA,oBACA,mBAGHA,EAAG,QACA,gGACA,+FACA,6IACA,iJACA,yFACA,uFACA,kBACA,0FACA,wFACA,mBAGHA,EAAG,YACA,wEACA,wEACA,wEACA,wEACA,wEACA,wEACA,wEACA,yEACA,yEACA,wEACA,4DACA,uGACA,gJAGHA,EAAG,cACA,6GACA,oLACA,+HACA,mGACA,mBAGHA,EAAG,cACA,kDACA,kDACA,mDACA,sDACA,yDACA,wIACA,kJACA,+FAGHA,EAAG,aACA,8EACA,8EACA,+EACA,kFACA,qFACA,gFACA,8EAGHA,EAAG,eACA,wIACA,mGACA,iGACA,4BACA,2BACA,iCACA,2BACA,mBACA,wKAGHA,EAAG,aACA,qEACA,sEAGHA,EAAG,kBACA,+EACA,mCAEHA,EAAG,kBACA,eACA,6DACA,8CACA,8CACA,gBAvJL","file":"../../../mode/swift/test.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function() {\n  var mode = CodeMirror.getMode({indentUnit: 2}, \"swift\");\n  function MT(name) { test.mode(name, mode, Array.prototype.slice.call(arguments, 1)); }\n\n  // Ensure all number types are properly represented.\n  MT(\"numbers\",\n     \"[keyword var] [def a] [operator =] [number 17]\",\n     \"[keyword var] [def b] [operator =] [number -0.5]\",\n     \"[keyword var] [def c] [operator =] [number 0.3456e-4]\",\n     \"[keyword var] [def d] [operator =] [number 345e2]\",\n     \"[keyword var] [def e] [operator =] [number 0o7324]\",\n     \"[keyword var] [def f] [operator =] [number 0b10010]\",\n     \"[keyword var] [def g] [operator =] [number -0x35ade]\",\n     \"[keyword var] [def h] [operator =] [number 0xaea.ep-13]\",\n     \"[keyword var] [def i] [operator =] [number 0x13ep6]\");\n\n  // Variable/class/etc definition.\n  MT(\"definition\",\n     \"[keyword var] [def a] [operator =] [number 5]\",\n     \"[keyword let] [def b][punctuation :] [variable-2 Int] [operator =] [number 10]\",\n     \"[keyword class] [def C] [punctuation {] [punctuation }]\",\n     \"[keyword struct] [def D] [punctuation {] [punctuation }]\",\n     \"[keyword enum] [def E] [punctuation {] [punctuation }]\",\n     \"[keyword extension] [def F] [punctuation {] [punctuation }]\",\n     \"[keyword protocol] [def G] [punctuation {] [punctuation }]\",\n     \"[keyword func] [def h][punctuation ()] [punctuation {] [punctuation }]\",\n     \"[keyword import] [def Foundation]\",\n     \"[keyword typealias] [def NewString] [operator =] [variable-2 String]\",\n     \"[keyword associatedtype] [def I]\",\n     \"[keyword for] [def j] [keyword in] [number 0][punctuation ..][operator <][number 3] [punctuation {] [punctuation }]\");\n\n  // Strings and string interpolation.\n  MT(\"strings\",\n     \"[keyword var] [def a][punctuation :] [variable-2 String] [operator =] [string \\\"test\\\"]\",\n     \"[keyword var] [def b][punctuation :] [variable-2 String] [operator =] [string \\\"\\\\(][variable a][string )\\\"]\",\n     \"[keyword var] [def c] [operator =] [string \\\"\\\"\\\"]\",\n     \"[string multi]\",\n     \"[string line]\",\n     \"[string \\\"test\\\"]\",\n     \"[string \\\"\\\"\\\"]\");\n\n  // Comments.\n  MT(\"comments\",\n     \"[comment // This is a comment]\",\n     \"[comment /* This is another comment */]\",\n     \"[keyword var] [def a] [operator =] [number 5] [comment // Third comment]\");\n\n  // Atoms.\n  MT(\"atoms\",\n     \"[keyword class] [def FooClass] [punctuation {]\",\n     \"  [keyword let] [def fooBool][punctuation :] [variable-2 Bool][operator ?]\",\n     \"  [keyword let] [def fooInt][punctuation :] [variable-2 Int][operator ?]\",\n     \"  [keyword func] [keyword init][punctuation (][variable fooBool][punctuation :] [variable-2 Bool][punctuation ,] [variable barBool][punctuation :] [variable-2 Bool][punctuation )] [punctuation {]\",\n     \"    [atom super][property .init][punctuation ()]\",\n     \"    [atom self][property .fooBool] [operator =] [variable fooBool]\",\n     \"    [variable fooInt] [operator =] [atom nil]\",\n     \"    [keyword if] [variable barBool] [operator ==] [atom true] [punctuation {]\",\n     \"      [variable print][punctuation (][string \\\"True!\\\"][punctuation )]\",\n     \"    [punctuation }] [keyword else] [keyword if] [variable barBool] [operator ==] [atom false] [punctuation {]\",\n     \"      [keyword for] [atom _] [keyword in] [number 0][punctuation ...][number 5] [punctuation {]\",\n     \"        [variable print][punctuation (][string \\\"False!\\\"][punctuation )]\",\n     \"      [punctuation }]\",\n     \"    [punctuation }]\",\n     \"  [punctuation }]\",\n     \"[punctuation }]\");\n\n  // Types.\n  MT(\"types\",\n     \"[keyword var] [def a] [operator =] [variable-2 Array][operator <][variable-2 Int][operator >]\",\n     \"[keyword var] [def b] [operator =] [variable-2 Set][operator <][variable-2 Bool][operator >]\",\n     \"[keyword var] [def c] [operator =] [variable-2 Dictionary][operator <][variable-2 String][punctuation ,][variable-2 Character][operator >]\",\n     \"[keyword var] [def d][punctuation :] [variable-2 Int64][operator ?] [operator =] [variable-2 Optional][punctuation (][number 8][punctuation )]\",\n     \"[keyword func] [def e][punctuation ()] [operator ->] [variable-2 Void] [punctuation {]\",\n     \"  [keyword var] [def e1][punctuation :] [variable-2 Float] [operator =] [number 1.2]\",\n     \"[punctuation }]\",\n     \"[keyword func] [def f][punctuation ()] [operator ->] [variable-2 Never] [punctuation {]\",\n     \"  [keyword var] [def f1][punctuation :] [variable-2 Double] [operator =] [number 2.4]\",\n     \"[punctuation }]\");\n\n  // Operators.\n  MT(\"operators\",\n     \"[keyword var] [def a] [operator =] [number 1] [operator +] [number 2]\",\n     \"[keyword var] [def b] [operator =] [number 1] [operator -] [number 2]\",\n     \"[keyword var] [def c] [operator =] [number 1] [operator *] [number 2]\",\n     \"[keyword var] [def d] [operator =] [number 1] [operator /] [number 2]\",\n     \"[keyword var] [def e] [operator =] [number 1] [operator %] [number 2]\",\n     \"[keyword var] [def f] [operator =] [number 1] [operator |] [number 2]\",\n     \"[keyword var] [def g] [operator =] [number 1] [operator &] [number 2]\",\n     \"[keyword var] [def h] [operator =] [number 1] [operator <<] [number 2]\",\n     \"[keyword var] [def i] [operator =] [number 1] [operator >>] [number 2]\",\n     \"[keyword var] [def j] [operator =] [number 1] [operator ^] [number 2]\",\n     \"[keyword var] [def k] [operator =] [operator ~][number 1]\",\n     \"[keyword var] [def l] [operator =] [variable foo] [operator ?] [number 1] [punctuation :] [number 2]\",\n     \"[keyword var] [def m][punctuation :] [variable-2 Int] [operator =] [variable-2 Optional][punctuation (][number 8][punctuation )][operator !]\");\n\n  // Punctuation.\n  MT(\"punctuation\",\n     \"[keyword let] [def a] [operator =] [number 1][punctuation ;] [keyword let] [def b] [operator =] [number 2]\",\n     \"[keyword let] [def testArr][punctuation :] [punctuation [[][variable-2 Int][punctuation ]]] [operator =] [punctuation [[][variable a][punctuation ,] [variable b][punctuation ]]]\",\n     \"[keyword for] [def i] [keyword in] [number 0][punctuation ..][operator <][variable testArr][property .count] [punctuation {]\",\n     \"  [variable print][punctuation (][variable testArr][punctuation [[][variable i][punctuation ]])]\",\n     \"[punctuation }]\");\n\n  // Identifiers.\n  MT(\"identifiers\",\n     \"[keyword let] [def abc] [operator =] [number 1]\",\n     \"[keyword let] [def ABC] [operator =] [number 2]\",\n     \"[keyword let] [def _123] [operator =] [number 3]\",\n     \"[keyword let] [def _$1$2$3] [operator =] [number 4]\",\n     \"[keyword let] [def A1$_c32_$_] [operator =] [number 5]\",\n     \"[keyword let] [def `var`] [operator =] [punctuation [[][number 1][punctuation ,] [number 2][punctuation ,] [number 3][punctuation ]]]\",\n     \"[keyword let] [def square$] [operator =] [variable `var`][property .map] [punctuation {][variable $0] [operator *] [variable $0][punctuation }]\",\n     \"$$ [number 1][variable a] $[atom _] [variable _$] [variable __] `[variable a] [variable b]`\");\n\n  // Properties.\n  MT(\"properties\",\n     \"[variable print][punctuation (][variable foo][property .abc][punctuation )]\",\n     \"[variable print][punctuation (][variable foo][property .ABC][punctuation )]\",\n     \"[variable print][punctuation (][variable foo][property ._123][punctuation )]\",\n     \"[variable print][punctuation (][variable foo][property ._$1$2$3][punctuation )]\",\n     \"[variable print][punctuation (][variable foo][property .A1$_c32_$_][punctuation )]\",\n     \"[variable print][punctuation (][variable foo][property .`var`][punctuation )]\",\n     \"[variable print][punctuation (][variable foo][property .__][punctuation )]\");\n\n  // Instructions or other things that start with #.\n  MT(\"instructions\",\n     \"[keyword if] [builtin #available][punctuation (][variable iOS] [number 9][punctuation ,] [operator *][punctuation )] [punctuation {}]\",\n     \"[variable print][punctuation (][builtin #file][punctuation ,] [builtin #function][punctuation )]\",\n     \"[variable print][punctuation (][builtin #line][punctuation ,] [builtin #column][punctuation )]\",\n     \"[builtin #if] [atom true]\",\n     \"[keyword import] [def A]\",\n     \"[builtin #elseif] [atom false]\",\n     \"[keyword import] [def B]\",\n     \"[builtin #endif]\",\n     \"[builtin #sourceLocation][punctuation (][variable file][punctuation :] [string \\\"file.swift\\\"][punctuation ,] [variable line][punctuation :] [number 2][punctuation )]\");\n\n  // Attributes; things that start with @.\n  MT(\"attributes\",\n     \"[attribute @objc][punctuation (][variable objcFoo][punctuation :)]\",\n     \"[attribute @available][punctuation (][variable iOS][punctuation )]\");\n\n  // Property/number edge case.\n  MT(\"property_number\",\n     \"[variable print][punctuation (][variable foo][property ._123][punctuation )]\",\n     \"[variable print][punctuation (]\")\n\n  MT(\"nested_comments\",\n     \"[comment /*]\",\n     \"[comment But wait /* this is a nested comment */ for real]\",\n     \"[comment /**** let * me * show * you ****/]\",\n     \"[comment ///// let / me / show / you /////]\",\n     \"[comment */]\");\n\n  // TODO: correctly identify when multiple variables are being declared\n  // by use of a comma-separated list.\n  // TODO: correctly identify when variables are being declared in a tuple.\n  // TODO: identify protocols as types when used before an extension?\n})();\n"]}