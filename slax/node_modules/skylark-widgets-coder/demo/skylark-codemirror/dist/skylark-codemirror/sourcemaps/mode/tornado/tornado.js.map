{"version":3,"sources":["mode/tornado/tornado.js"],"names":["define","CodeMirror","defineMode","keywords","tokenBase","stream","state","eatWhile","ch","next","eat","tokenize","close","match","inTag","RegExp","join","startState","token","config","htmlBase","getMode","tornadoInner","overlayMode","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,mBAAoB,yBAChB,4BAA6B,SAASC,GAChD,aAEAA,EAAWC,WAAW,gBAAiB,WACrC,IAAIC,GAAY,MAAM,KAAK,SAAS,aAAa,QAAQ,QAAQ,QAAQ,UAAU,UACnE,WAAW,WAAW,MAAM,MAAM,OAAO,OAAO,MAAM,SAAS,SAC/D,OAAO,UAAU,QAAQ,UAAU,MAAM,OAAO,SAAS,KAAK,SAAS,KACvE,UAAU,KAAK,cAAc,SAAS,SAAS,UAAU,OAAO,SAChE,OAAO,MAAM,KAAK,OAAO,QAAQ,MAAM,QAAQ,MAAM,SAAS,OAAO,MACrE,UAAU,QAAQ,OAAO,MAAM,aAAa,QAAQ,OAAO,UAAU,eAAe,SAGpG,SAASC,EAAWC,EAAQC,GAC1BD,EAAOE,SAAS,SAChB,IAAIC,EAAKH,EAAOI,OAChB,GAAU,KAAND,IACEA,EAAKH,EAAOK,IAAI,WAElB,OADAJ,EAAMK,SAKZ,SAAgBC,GACD,KAATA,IACFA,EAAQ,KAEV,OAAO,SAAUP,EAAQC,GACvB,IAAIE,EAAKH,EAAOI,OAChB,OAAKD,GAAMI,GAAUP,EAAOK,IAAI,MAC9BJ,EAAMK,SAAWP,EACV,OAELC,EAAOQ,MAAMV,GACR,UAEO,KAATS,EAAe,UAAY,UAlBfE,CAAMN,GAChB,MAoBb,OA5BAL,EAAW,IAAIY,OAAO,MAAQZ,EAASa,KAAK,OAAS,UA6BnDC,WAAY,WACV,OAAQN,SAAUP,IAEpBc,MAAO,SAAUb,EAAQC,GACvB,OAAOA,EAAMK,SAASN,EAAQC,OAKpCL,EAAWC,WAAW,UAAW,SAASiB,GACxC,IAAIC,EAAWnB,EAAWoB,QAAQF,EAAQ,aACtCG,EAAerB,EAAWoB,QAAQF,EAAQ,iBAC9C,OAAOlB,EAAWsB,YAAYH,EAAUE,KAG1CrB,EAAWuB,WAAW,iBAAkB","file":"../../../mode/tornado/tornado.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\", \"../htmlmixed/htmlmixed\",\n            \"../../addon/mode/overlay\"], function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineMode(\"tornado:inner\", function() {\n    var keywords = [\"and\",\"as\",\"assert\",\"autoescape\",\"block\",\"break\",\"class\",\"comment\",\"context\",\n                    \"continue\",\"datetime\",\"def\",\"del\",\"elif\",\"else\",\"end\",\"escape\",\"except\",\n                    \"exec\",\"extends\",\"false\",\"finally\",\"for\",\"from\",\"global\",\"if\",\"import\",\"in\",\n                    \"include\",\"is\",\"json_encode\",\"lambda\",\"length\",\"linkify\",\"load\",\"module\",\n                    \"none\",\"not\",\"or\",\"pass\",\"print\",\"put\",\"raise\",\"raw\",\"return\",\"self\",\"set\",\n                    \"squeeze\",\"super\",\"true\",\"try\",\"url_escape\",\"while\",\"with\",\"without\",\"xhtml_escape\",\"yield\"];\n    keywords = new RegExp(\"^((\" + keywords.join(\")|(\") + \"))\\\\b\");\n\n    function tokenBase (stream, state) {\n      stream.eatWhile(/[^\\{]/);\n      var ch = stream.next();\n      if (ch == \"{\") {\n        if (ch = stream.eat(/\\{|%|#/)) {\n          state.tokenize = inTag(ch);\n          return \"tag\";\n        }\n      }\n    }\n    function inTag (close) {\n      if (close == \"{\") {\n        close = \"}\";\n      }\n      return function (stream, state) {\n        var ch = stream.next();\n        if ((ch == close) && stream.eat(\"}\")) {\n          state.tokenize = tokenBase;\n          return \"tag\";\n        }\n        if (stream.match(keywords)) {\n          return \"keyword\";\n        }\n        return close == \"#\" ? \"comment\" : \"string\";\n      };\n    }\n    return {\n      startState: function () {\n        return {tokenize: tokenBase};\n      },\n      token: function (stream, state) {\n        return state.tokenize(stream, state);\n      }\n    };\n  });\n\n  CodeMirror.defineMode(\"tornado\", function(config) {\n    var htmlBase = CodeMirror.getMode(config, \"text/html\");\n    var tornadoInner = CodeMirror.getMode(config, \"tornado:inner\");\n    return CodeMirror.overlayMode(htmlBase, tornadoInner);\n  });\n\n  CodeMirror.defineMIME(\"text/x-tornado\", \"tornado\");\n});\n"]}