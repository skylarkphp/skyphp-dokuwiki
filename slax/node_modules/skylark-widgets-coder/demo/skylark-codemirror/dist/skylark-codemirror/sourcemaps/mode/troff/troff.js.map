{"version":3,"sources":["mode/troff/troff.js"],"names":["define","CodeMirror","defineMode","words","tokenize","stream","state","tokens","eatSpace","sol","ch","next","match","skipTo","eatWhile","eat","skipToEnd","cur","current","hasOwnProperty","startState","token","defineMIME"],"mappings":";;;;;;;AAGAA,QAAQ,oBAAqB,SAASC,GAEtC,aAEAA,EAAWC,WAAW,QAAS,WAE7B,IAAIC,KAoDJ,SAASC,EAASC,EAAQC,GACxB,OAAQA,EAAMC,OAAO,IAnDvB,SAAmBF,GACjB,GAAIA,EAAOG,WAAY,OAAO,KAE9B,IAAIC,EAAMJ,EAAOI,MACbC,EAAKL,EAAOM,OAEhB,GAAW,OAAPD,EACF,OAAIL,EAAOO,MAAM,OAASP,EAAOO,MAAM,OAASP,EAAOO,MAAM,OACzDP,EAAOO,MAAM,MAASP,EAAOO,MAAM,MACnCP,EAAOO,MAAM,MAASP,EAAOO,MAAM,KAC9B,SAELP,EAAOO,MAAM,OACfP,EAAOQ,OAAO,KACdR,EAAOM,OACA,UAELN,EAAOO,MAAM,OAASP,EAAOO,MAAM,OACrCP,EAAOS,SAAS,SACT,UAELT,EAAOO,MAAM,MAASP,EAAOO,MAAM,OACrCP,EAAOS,SAAS,SACT,UAEF,SAET,GAAIL,IAAe,MAAPC,GAAqB,MAAPA,IACpBL,EAAOU,IAAI,OAASV,EAAOU,IAAI,KAEjC,OADAV,EAAOW,YACA,UAGX,GAAIP,GAAc,MAAPC,EAAY,CACrB,GAAIL,EAAOO,MAAM,OAASP,EAAOO,MAAM,OAASP,EAAOO,MAAM,MAC3D,MAAO,YAET,GAAIP,EAAOO,MAAM,QAAUP,EAAOO,MAAM,QAAUP,EAAOO,MAAM,QAAUP,EAAOO,MAAM,OAEpF,OADAP,EAAOW,YACA,QAET,GAAKX,EAAOO,MAAM,UAAYP,EAAOO,MAAM,UAAcP,EAAOO,MAAM,UAAYP,EAAOO,MAAM,SAC7F,MAAO,YAGXP,EAAOS,SAAS,SAChB,IAAIG,EAAMZ,EAAOa,UACjB,OAAOf,EAAMgB,eAAeF,GAAOd,EAAMc,GAAO,OAITZ,EAAQC,GAGjD,OACEc,WAAY,WAAY,OAAQb,YAChCc,MAAO,SAAShB,EAAQC,GACtB,OAAOF,EAASC,EAAQC,OAK9BL,EAAWqB,WAAW,aAAc,SACpCrB,EAAWqB,WAAW,eAAgB,SACtCrB,EAAWqB,WAAW,sBAAuB","file":"../../../mode/troff/troff.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\n\"use strict\";\n\nCodeMirror.defineMode('troff', function() {\n\n  var words = {};\n\n  function tokenBase(stream) {\n    if (stream.eatSpace()) return null;\n\n    var sol = stream.sol();\n    var ch = stream.next();\n\n    if (ch === '\\\\') {\n      if (stream.match('fB') || stream.match('fR') || stream.match('fI') ||\n          stream.match('u')  || stream.match('d')  ||\n          stream.match('%')  || stream.match('&')) {\n        return 'string';\n      }\n      if (stream.match('m[')) {\n        stream.skipTo(']');\n        stream.next();\n        return 'string';\n      }\n      if (stream.match('s+') || stream.match('s-')) {\n        stream.eatWhile(/[\\d-]/);\n        return 'string';\n      }\n      if (stream.match('\\(') || stream.match('*\\(')) {\n        stream.eatWhile(/[\\w-]/);\n        return 'string';\n      }\n      return 'string';\n    }\n    if (sol && (ch === '.' || ch === '\\'')) {\n      if (stream.eat('\\\\') && stream.eat('\\\"')) {\n        stream.skipToEnd();\n        return 'comment';\n      }\n    }\n    if (sol && ch === '.') {\n      if (stream.match('B ') || stream.match('I ') || stream.match('R ')) {\n        return 'attribute';\n      }\n      if (stream.match('TH ') || stream.match('SH ') || stream.match('SS ') || stream.match('HP ')) {\n        stream.skipToEnd();\n        return 'quote';\n      }\n      if ((stream.match(/[A-Z]/) && stream.match(/[A-Z]/)) || (stream.match(/[a-z]/) && stream.match(/[a-z]/))) {\n        return 'attribute';\n      }\n    }\n    stream.eatWhile(/[\\w-]/);\n    var cur = stream.current();\n    return words.hasOwnProperty(cur) ? words[cur] : null;\n  }\n\n  function tokenize(stream, state) {\n    return (state.tokens[0] || tokenBase) (stream, state);\n  };\n\n  return {\n    startState: function() {return {tokens:[]};},\n    token: function(stream, state) {\n      return tokenize(stream, state);\n    }\n  };\n});\n\nCodeMirror.defineMIME('text/troff', 'troff');\nCodeMirror.defineMIME('text/x-troff', 'troff');\nCodeMirror.defineMIME('application/x-troff', 'troff');\n\n});\n"]}