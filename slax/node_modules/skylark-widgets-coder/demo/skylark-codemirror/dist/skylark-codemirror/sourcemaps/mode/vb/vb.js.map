{"version":3,"sources":["mode/vb/vb.js"],"names":["define","CodeMirror","defineMode","conf","parserConf","ERRORCLASS","wordRegexp","words","RegExp","join","singleOperators","singleDelimiters","doubleOperators","doubleDelimiters","tripleDelimiters","identifiers","openingKeywords","middleKeywords","endKeywords","operatorKeywords","wordOperators","commonKeywords","commontypes","keywords","types","stringPrefixes","opening","middle","closing","doubleClosing","doOpening","indentInfo","indent","_stream","state","currentIndent","dedent","tokenBase","stream","eatSpace","delimiter","singleline","peek","skipToEnd","match","floatLiteral","eat","intLiteral","tokenize","current","length","eol","eatWhile","singleLineStringErrors","doInCurrentLine","next","registerHelper","concat","electricChars","startState","lastToken","nextLineIndent","token","sol","style","delimiter_index","indexOf","tokenLexer","content","textAfter","trueText","replace","indentUnit","lineComment","defineMIME"],"mappings":"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","file":"../../../mode/vb/vb.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"vb\", function(conf, parserConf) {\n    var ERRORCLASS = 'error';\n\n    function wordRegexp(words) {\n        return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n    }\n\n    var singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\n    var singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\n    var doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\n    var doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\n    var tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\n    var identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\n    var openingKeywords = ['class','module', 'sub','enum','select','while','if','function',  'get','set','property', 'try'];\n    var middleKeywords = ['else','elseif','case', 'catch'];\n    var endKeywords = ['next','loop'];\n\n    var operatorKeywords = ['and', 'or', 'not', 'xor', 'in'];\n    var wordOperators = wordRegexp(operatorKeywords);\n    var commonKeywords = ['as', 'dim', 'break',  'continue','optional', 'then',  'until',\n                          'goto', 'byval','byref','new','handles','property', 'return',\n                          'const','private', 'protected', 'friend', 'public', 'shared', 'static', 'true','false'];\n    var commontypes = ['integer','string','double','decimal','boolean','short','char', 'float','single'];\n\n    var keywords = wordRegexp(commonKeywords);\n    var types = wordRegexp(commontypes);\n    var stringPrefixes = '\"';\n\n    var opening = wordRegexp(openingKeywords);\n    var middle = wordRegexp(middleKeywords);\n    var closing = wordRegexp(endKeywords);\n    var doubleClosing = wordRegexp(['end']);\n    var doOpening = wordRegexp(['do']);\n\n    var indentInfo = null;\n\n    CodeMirror.registerHelper(\"hintWords\", \"vb\", openingKeywords.concat(middleKeywords).concat(endKeywords)\n                                .concat(operatorKeywords).concat(commonKeywords).concat(commontypes));\n\n    function indent(_stream, state) {\n      state.currentIndent++;\n    }\n\n    function dedent(_stream, state) {\n      state.currentIndent--;\n    }\n    // tokenizers\n    function tokenBase(stream, state) {\n        if (stream.eatSpace()) {\n            return null;\n        }\n\n        var ch = stream.peek();\n\n        // Handle Comments\n        if (ch === \"'\") {\n            stream.skipToEnd();\n            return 'comment';\n        }\n\n\n        // Handle Number Literals\n        if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n            var floatLiteral = false;\n            // Floats\n            if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n            else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n            else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n            if (floatLiteral) {\n                // Float literals may be \"imaginary\"\n                stream.eat(/J/i);\n                return 'number';\n            }\n            // Integers\n            var intLiteral = false;\n            // Hex\n            if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n            // Octal\n            else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n            // Decimal\n            else if (stream.match(/^[1-9]\\d*F?/)) {\n                // Decimal literals may be \"imaginary\"\n                stream.eat(/J/i);\n                // TODO - Can you have imaginary longs?\n                intLiteral = true;\n            }\n            // Zero by itself with no other piece of number.\n            else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n            if (intLiteral) {\n                // Integer literals may be \"long\"\n                stream.eat(/L/i);\n                return 'number';\n            }\n        }\n\n        // Handle Strings\n        if (stream.match(stringPrefixes)) {\n            state.tokenize = tokenStringFactory(stream.current());\n            return state.tokenize(stream, state);\n        }\n\n        // Handle operators and Delimiters\n        if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doubleOperators)\n            || stream.match(singleOperators)\n            || stream.match(wordOperators)) {\n            return 'operator';\n        }\n        if (stream.match(singleDelimiters)) {\n            return null;\n        }\n        if (stream.match(doOpening)) {\n            indent(stream,state);\n            state.doInCurrentLine = true;\n            return 'keyword';\n        }\n        if (stream.match(opening)) {\n            if (! state.doInCurrentLine)\n              indent(stream,state);\n            else\n              state.doInCurrentLine = false;\n            return 'keyword';\n        }\n        if (stream.match(middle)) {\n            return 'keyword';\n        }\n\n        if (stream.match(doubleClosing)) {\n            dedent(stream,state);\n            dedent(stream,state);\n            return 'keyword';\n        }\n        if (stream.match(closing)) {\n            dedent(stream,state);\n            return 'keyword';\n        }\n\n        if (stream.match(types)) {\n            return 'keyword';\n        }\n\n        if (stream.match(keywords)) {\n            return 'keyword';\n        }\n\n        if (stream.match(identifiers)) {\n            return 'variable';\n        }\n\n        // Handle non-detected items\n        stream.next();\n        return ERRORCLASS;\n    }\n\n    function tokenStringFactory(delimiter) {\n        var singleline = delimiter.length == 1;\n        var OUTCLASS = 'string';\n\n        return function(stream, state) {\n            while (!stream.eol()) {\n                stream.eatWhile(/[^'\"]/);\n                if (stream.match(delimiter)) {\n                    state.tokenize = tokenBase;\n                    return OUTCLASS;\n                } else {\n                    stream.eat(/['\"]/);\n                }\n            }\n            if (singleline) {\n                if (parserConf.singleLineStringErrors) {\n                    return ERRORCLASS;\n                } else {\n                    state.tokenize = tokenBase;\n                }\n            }\n            return OUTCLASS;\n        };\n    }\n\n\n    function tokenLexer(stream, state) {\n        var style = state.tokenize(stream, state);\n        var current = stream.current();\n\n        // Handle '.' connected identifiers\n        if (current === '.') {\n            style = state.tokenize(stream, state);\n            if (style === 'variable') {\n                return 'variable';\n            } else {\n                return ERRORCLASS;\n            }\n        }\n\n\n        var delimiter_index = '[({'.indexOf(current);\n        if (delimiter_index !== -1) {\n            indent(stream, state );\n        }\n        if (indentInfo === 'dedent') {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n        delimiter_index = '])}'.indexOf(current);\n        if (delimiter_index !== -1) {\n            if (dedent(stream, state)) {\n                return ERRORCLASS;\n            }\n        }\n\n        return style;\n    }\n\n    var external = {\n        electricChars:\"dDpPtTfFeE \",\n        startState: function() {\n            return {\n              tokenize: tokenBase,\n              lastToken: null,\n              currentIndent: 0,\n              nextLineIndent: 0,\n              doInCurrentLine: false\n\n\n          };\n        },\n\n        token: function(stream, state) {\n            if (stream.sol()) {\n              state.currentIndent += state.nextLineIndent;\n              state.nextLineIndent = 0;\n              state.doInCurrentLine = 0;\n            }\n            var style = tokenLexer(stream, state);\n\n            state.lastToken = {style:style, content: stream.current()};\n\n\n\n            return style;\n        },\n\n        indent: function(state, textAfter) {\n            var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n            if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return conf.indentUnit*(state.currentIndent-1);\n            if(state.currentIndent < 0) return 0;\n            return state.currentIndent * conf.indentUnit;\n        },\n\n        lineComment: \"'\"\n    };\n    return external;\n});\n\nCodeMirror.defineMIME(\"text/x-vb\", \"vb\");\n\n});\n"]}