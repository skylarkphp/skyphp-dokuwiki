{"version":3,"sources":["mode/vhdl/vhdl.js"],"names":["define","CodeMirror","words","str","obj","split","i","length","allCaps","toUpperCase","firstCap","charAt","slice","metaHook","stream","eatWhile","defineMode","config","parserConfig","curPunc","indentUnit","atoms","hooks","`","$","multiLineStrings","keywords","blockKeywords","isOperatorChar","tokenBase","state","quote","ch","next","result","tokenize","escaped","end","tokenString","test","eat","skipToEnd","cur","current","propertyIsEnumerable","toLowerCase","Context","indented","column","type","align","prev","this","pushContext","col","context","popContext","t","startState","basecolumn","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","firstChar","closing","electricChars","defineMIME"],"mappings":"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","file":"../../../mode/vhdl/vhdl.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n// Originally written by Alf Nielsen, re-written by Michael Zhou\ndefine([\"../../CodeMirror\"], function(CodeMirror) {\n\"use strict\";\n\nfunction words(str) {\n  var obj = {}, words = str.split(\",\");\n  for (var i = 0; i < words.length; ++i) {\n    var allCaps = words[i].toUpperCase();\n    var firstCap = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n    obj[words[i]] = true;\n    obj[allCaps] = true;\n    obj[firstCap] = true;\n  }\n  return obj;\n}\n\nfunction metaHook(stream) {\n  stream.eatWhile(/[\\w\\$_]/);\n  return \"meta\";\n}\n\nCodeMirror.defineMode(\"vhdl\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit,\n      atoms = parserConfig.atoms || words(\"null\"),\n      hooks = parserConfig.hooks || {\"`\": metaHook, \"$\": metaHook},\n      multiLineStrings = parserConfig.multiLineStrings;\n\n  var keywords = words(\"abs,access,after,alias,all,and,architecture,array,assert,attribute,begin,block,\" +\n      \"body,buffer,bus,case,component,configuration,constant,disconnect,downto,else,elsif,end,end block,end case,\" +\n      \"end component,end for,end generate,end if,end loop,end process,end record,end units,entity,exit,file,for,\" +\n      \"function,generate,generic,generic map,group,guarded,if,impure,in,inertial,inout,is,label,library,linkage,\" +\n      \"literal,loop,map,mod,nand,new,next,nor,null,of,on,open,or,others,out,package,package body,port,port map,\" +\n      \"postponed,procedure,process,pure,range,record,register,reject,rem,report,return,rol,ror,select,severity,signal,\" +\n      \"sla,sll,sra,srl,subtype,then,to,transport,type,unaffected,units,until,use,variable,wait,when,while,with,xnor,xor\");\n\n  var blockKeywords = words(\"architecture,entity,begin,case,port,else,elsif,end,for,function,if\");\n\n  var isOperatorChar = /[&|~><!\\)\\(*#%@+\\/=?\\:;}{,\\.\\^\\-\\[\\]]/;\n  var curPunc;\n\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (hooks[ch]) {\n      var result = hooks[ch](stream, state);\n      if (result !== false) return result;\n    }\n    if (ch == '\"') {\n      state.tokenize = tokenString2(ch);\n      return state.tokenize(stream, state);\n    }\n    if (ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    }\n    if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      curPunc = ch;\n      return null;\n    }\n    if (/[\\d']/.test(ch)) {\n      stream.eatWhile(/[\\w\\.']/);\n      return \"number\";\n    }\n    if (ch == \"-\") {\n      if (stream.eat(\"-\")) {\n        stream.skipToEnd();\n        return \"comment\";\n      }\n    }\n    if (isOperatorChar.test(ch)) {\n      stream.eatWhile(isOperatorChar);\n      return \"operator\";\n    }\n    stream.eatWhile(/[\\w\\$_]/);\n    var cur = stream.current();\n    if (keywords.propertyIsEnumerable(cur.toLowerCase())) {\n      if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n      return \"keyword\";\n    }\n    if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n    return \"variable\";\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string\";\n    };\n  }\n  function tokenString2(quote) {\n    return function(stream, state) {\n      var escaped = false, next, end = false;\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) {end = true; break;}\n        escaped = !escaped && next == \"--\";\n      }\n      if (end || !(escaped || multiLineStrings))\n        state.tokenize = tokenBase;\n      return \"string-2\";\n    };\n  }\n\n  function Context(indented, column, type, align, prev) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.align = align;\n    this.prev = prev;\n  }\n  function pushContext(state, col, type) {\n    return state.context = new Context(state.indented, col, type, null, state.context);\n  }\n  function popContext(state) {\n    var t = state.context.type;\n    if (t == \")\" || t == \"]\" || t == \"}\")\n      state.indented = state.context.indented;\n    return state.context = state.context.prev;\n  }\n\n  // Interface\n  return {\n    startState: function(basecolumn) {\n      return {\n        tokenize: null,\n        context: new Context((basecolumn || 0) - indentUnit, 0, \"top\", false),\n        indented: 0,\n        startOfLine: true\n      };\n    },\n\n    token: function(stream, state) {\n      var ctx = state.context;\n      if (stream.sol()) {\n        if (ctx.align == null) ctx.align = false;\n        state.indented = stream.indentation();\n        state.startOfLine = true;\n      }\n      if (stream.eatSpace()) return null;\n      curPunc = null;\n      var style = (state.tokenize || tokenBase)(stream, state);\n      if (style == \"comment\" || style == \"meta\") return style;\n      if (ctx.align == null) ctx.align = true;\n\n      if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n      else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n      else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n      else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n      else if (curPunc == \"}\") {\n        while (ctx.type == \"statement\") ctx = popContext(state);\n        if (ctx.type == \"}\") ctx = popContext(state);\n        while (ctx.type == \"statement\") ctx = popContext(state);\n      }\n      else if (curPunc == ctx.type) popContext(state);\n      else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n        pushContext(state, stream.column(), \"statement\");\n      state.startOfLine = false;\n      return style;\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize != tokenBase && state.tokenize != null) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), ctx = state.context, closing = firstChar == ctx.type;\n      if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : indentUnit);\n      else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n      else return ctx.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricChars: \"{}\"\n  };\n});\n\nCodeMirror.defineMIME(\"text/x-vhdl\", \"vhdl\");\n\n});\n"]}