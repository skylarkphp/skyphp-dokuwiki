{"version":3,"sources":["primitives/display/highlight_worker.js"],"names":["define","highlight","models","misc","operations","view_tracking","startWorker","cm","time","doc","highlightFrontier","display","viewTo","state","set","bind","highlightWorker","end","Date","options","workTime","context","getContextBefore","changedLines","iter","line","Math","min","first","size","viewFrom","oldStyles","styles","resetState","text","length","maxHighlightLength","copyState","mode","highlighted","highlightLine","oldCls","styleClasses","newCls","classes","ischange","bgClass","textClass","i","push","stateAfter","save","nextLine","processLine","workDelay","modeFrontier","max","runInOp","regLineChange"],"mappings":";;;;;;;AAAAA,QACI,oBACA,WACA,eACA,eACA,mBACD,SAAUC,EAAWC,EAAQC,EAAMC,EAAYC,GAC9C,aACA,SAASC,EAAYC,EAAIC,GACjBD,EAAGE,IAAIC,kBAAoBH,EAAGI,QAAQC,QACtCL,EAAGM,MAAMZ,UAAUa,IAAIN,EAAML,EAAKY,KAAKC,EAAiBT,IAEhE,SAASS,EAAgBT,GACrB,IAAIE,EAAMF,EAAGE,IACb,GAAIA,EAAIC,mBAAqBH,EAAGI,QAAQC,OACpC,OACJ,IAAIK,GAAO,IAAIC,KAASX,EAAGY,QAAQC,SAC/BC,EAAUpB,EAAUqB,iBAAiBf,EAAIE,EAAIC,mBAC7Ca,KACJd,EAAIe,KAAKH,EAAQI,KAAMC,KAAKC,IAAIlB,EAAImB,MAAQnB,EAAIoB,KAAMtB,EAAGI,QAAQC,OAAS,KAAMa,IAC5E,GAAIJ,EAAQI,MAAQlB,EAAGI,QAAQmB,SAAU,CACrC,IAAIC,EAAYN,EAAKO,OACjBC,EAAaR,EAAKS,KAAKC,OAAS5B,EAAGY,QAAQiB,mBAAqBlC,EAAOmC,UAAU5B,EAAI6B,KAAMjB,EAAQR,OAAS,KAC5G0B,EAActC,EAAUuC,cAAcjC,EAAIkB,EAAMJ,GAAS,GACzDY,IACAZ,EAAQR,MAAQoB,GACpBR,EAAKO,OAASO,EAAYP,OAC1B,IAAIS,EAAShB,EAAKiB,aAAcC,EAASJ,EAAYK,QACjDD,EACAlB,EAAKiB,aAAeC,EACfF,IACLhB,EAAKiB,aAAe,MACxB,IAAIG,GAAYd,GAAaA,EAAUI,QAAUV,EAAKO,OAAOG,QAAUM,GAAUE,KAAYF,IAAWE,GAAUF,EAAOK,SAAWH,EAAOG,SAAWL,EAAOM,WAAaJ,EAAOI,WACjL,IAAK,IAAIC,EAAI,GAAIH,GAAYG,EAAIjB,EAAUI,SAAUa,EACjDH,EAAWd,EAAUiB,IAAMvB,EAAKO,OAAOgB,GACvCH,GACAtB,EAAa0B,KAAK5B,EAAQI,MAC9BA,EAAKyB,WAAa7B,EAAQ8B,OAC1B9B,EAAQ+B,gBAEJ3B,EAAKS,KAAKC,QAAU5B,EAAGY,QAAQiB,oBAC/BnC,EAAUoD,YAAY9C,EAAIkB,EAAKS,KAAMb,GACzCI,EAAKyB,WAAa7B,EAAQI,KAAO,GAAK,EAAIJ,EAAQ8B,OAAS,KAC3D9B,EAAQ+B,WAEZ,IAAK,IAAIlC,KAASD,EAEd,OADAX,EAAYC,EAAIA,EAAGY,QAAQmC,YACpB,IAGf7C,EAAIC,kBAAoBW,EAAQI,KAChChB,EAAI8C,aAAe7B,KAAK8B,IAAI/C,EAAI8C,aAAclC,EAAQI,MAClDF,EAAaY,QACb/B,EAAWqD,QAAQlD,EAAI,KACnB,IAAK,IAAIyC,EAAI,EAAGA,EAAIzB,EAAaY,OAAQa,IACrC3C,EAAcqD,cAAcnD,EAAIgB,EAAayB,GAAI,UAGjE,OAAS1C,YAAaA","file":"../../../primitives/display/highlight_worker.js","sourcesContent":["define([\n    '../line/highlight',\n    '../modes',\n    '../util/misc',\n    './operations',\n    './view_tracking'\n], function (highlight, models, misc, operations, view_tracking) {\n    'use strict';\n    function startWorker(cm, time) {\n        if (cm.doc.highlightFrontier < cm.display.viewTo)\n            cm.state.highlight.set(time, misc.bind(highlightWorker, cm));\n    }\n    function highlightWorker(cm) {\n        let doc = cm.doc;\n        if (doc.highlightFrontier >= cm.display.viewTo)\n            return;\n        let end = +new Date() + cm.options.workTime;\n        let context = highlight.getContextBefore(cm, doc.highlightFrontier);\n        let changedLines = [];\n        doc.iter(context.line, Math.min(doc.first + doc.size, cm.display.viewTo + 500), line => {\n            if (context.line >= cm.display.viewFrom) {\n                let oldStyles = line.styles;\n                let resetState = line.text.length > cm.options.maxHighlightLength ? models.copyState(doc.mode, context.state) : null;\n                let highlighted = highlight.highlightLine(cm, line, context, true);\n                if (resetState)\n                    context.state = resetState;\n                line.styles = highlighted.styles;\n                let oldCls = line.styleClasses, newCls = highlighted.classes;\n                if (newCls)\n                    line.styleClasses = newCls;\n                else if (oldCls)\n                    line.styleClasses = null;\n                let ischange = !oldStyles || oldStyles.length != line.styles.length || oldCls != newCls && (!oldCls || !newCls || oldCls.bgClass != newCls.bgClass || oldCls.textClass != newCls.textClass);\n                for (let i = 0; !ischange && i < oldStyles.length; ++i)\n                    ischange = oldStyles[i] != line.styles[i];\n                if (ischange)\n                    changedLines.push(context.line);\n                line.stateAfter = context.save();\n                context.nextLine();\n            } else {\n                if (line.text.length <= cm.options.maxHighlightLength)\n                    highlight.processLine(cm, line.text, context);\n                line.stateAfter = context.line % 5 == 0 ? context.save() : null;\n                context.nextLine();\n            }\n            if (+new Date() > end) {\n                startWorker(cm, cm.options.workDelay);\n                return true;\n            }\n        });\n        doc.highlightFrontier = context.line;\n        doc.modeFrontier = Math.max(doc.modeFrontier, context.line);\n        if (changedLines.length)\n            operations.runInOp(cm, () => {\n                for (let i = 0; i < changedLines.length; i++)\n                    view_tracking.regLineChange(cm, changedLines[i], 'text');\n            });\n    }\n    return { startWorker: startWorker };\n});"]}