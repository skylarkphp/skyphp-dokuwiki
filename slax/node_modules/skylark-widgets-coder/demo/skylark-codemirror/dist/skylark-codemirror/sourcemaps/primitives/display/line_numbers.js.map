{"version":3,"sources":["primitives/display/line_numbers.js"],"names":["define","utils_line","position_measurement","dom","update_display","alignHorizontally","cm","display","view","alignWidgets","gutters","firstChild","options","fixedGutter","comp","compensateForHScroll","scroller","scrollLeft","doc","gutterW","offsetWidth","left","i","length","hidden","gutter","style","gutterBackground","align","alignable","j","maybeUpdateLineNumberWidth","lineNumbers","last","lineNumberFor","first","size","lineNumChars","test","measure","appendChild","elt","innerW","padding","lineGutter","width","lineNumInnerWidth","Math","max","lineNumWidth","updateGutterSpace"],"mappings":";;;;;;;AAAAA,QACI,qBACA,sCACA,cACA,oBACD,SAAUC,EAAYC,EAAsBC,EAAKC,GAChD,aAwCA,OACIC,kBAxCJ,SAA2BC,GACvB,IAAIC,EAAUD,EAAGC,QAASC,EAAOD,EAAQC,KACzC,KAAKD,EAAQE,cAAkBF,EAAQG,QAAQC,YAAeL,EAAGM,QAAQC,aACrE,OACJ,IAAIC,EAAOZ,EAAqBa,qBAAqBR,GAAWA,EAAQS,SAASC,WAAaX,EAAGY,IAAID,WACjGE,EAAUZ,EAAQG,QAAQU,YAAaC,EAAOP,EAAO,KACzD,IAAK,IAAIQ,EAAI,EAAGA,EAAId,EAAKe,OAAQD,IAC7B,IAAKd,EAAKc,GAAGE,OAAQ,CACblB,EAAGM,QAAQC,cACPL,EAAKc,GAAGG,SACRjB,EAAKc,GAAGG,OAAOC,MAAML,KAAOA,GAC5Bb,EAAKc,GAAGK,mBACRnB,EAAKc,GAAGK,iBAAiBD,MAAML,KAAOA,IAE9C,IAAIO,EAAQpB,EAAKc,GAAGO,UACpB,GAAID,EACA,IAAK,IAAIE,EAAI,EAAGA,EAAIF,EAAML,OAAQO,IAC9BF,EAAME,GAAGJ,MAAML,KAAOA,EAElCf,EAAGM,QAAQC,cACXN,EAAQG,QAAQgB,MAAML,KAAOP,EAAOK,EAAU,OAqBlDY,2BAnBJ,SAAoCzB,GAChC,IAAKA,EAAGM,QAAQoB,YACZ,OAAO,EACX,IAAId,EAAMZ,EAAGY,IAAKe,EAAOhC,EAAWiC,cAAc5B,EAAGM,QAASM,EAAIiB,MAAQjB,EAAIkB,KAAO,GAAI7B,EAAUD,EAAGC,QACtG,GAAI0B,EAAKV,QAAUhB,EAAQ8B,aAAc,CACrC,IAAIC,EAAO/B,EAAQgC,QAAQC,YAAYrC,EAAIsC,IAAI,OAAQtC,EAAIsC,IAAI,MAAOR,IAAQ,gDAC1ES,EAASJ,EAAK3B,WAAWS,YAAauB,EAAUL,EAAKlB,YAAcsB,EAOvE,OANAnC,EAAQqC,WAAWlB,MAAMmB,MAAQ,GACjCtC,EAAQuC,kBAAoBC,KAAKC,IAAIN,EAAQnC,EAAQqC,WAAWxB,YAAcuB,GAAW,EACzFpC,EAAQ0C,aAAe1C,EAAQuC,kBAAoBH,EACnDpC,EAAQ8B,aAAe9B,EAAQuC,kBAAoBb,EAAKV,QAAU,EAClEhB,EAAQqC,WAAWlB,MAAMmB,MAAQtC,EAAQ0C,aAAe,KACxD7C,EAAe8C,kBAAkB5C,IAC1B,EAEX,OAAO","file":"../../../primitives/display/line_numbers.js","sourcesContent":["define([\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/dom',\n    './update_display'\n], function (utils_line, position_measurement, dom, update_display) {\n    'use strict';\n    function alignHorizontally(cm) {\n        let display = cm.display, view = display.view;\n        if (!display.alignWidgets && (!display.gutters.firstChild || !cm.options.fixedGutter))\n            return;\n        let comp = position_measurement.compensateForHScroll(display) - display.scroller.scrollLeft + cm.doc.scrollLeft;\n        let gutterW = display.gutters.offsetWidth, left = comp + 'px';\n        for (let i = 0; i < view.length; i++)\n            if (!view[i].hidden) {\n                if (cm.options.fixedGutter) {\n                    if (view[i].gutter)\n                        view[i].gutter.style.left = left;\n                    if (view[i].gutterBackground)\n                        view[i].gutterBackground.style.left = left;\n                }\n                let align = view[i].alignable;\n                if (align)\n                    for (let j = 0; j < align.length; j++)\n                        align[j].style.left = left;\n            }\n        if (cm.options.fixedGutter)\n            display.gutters.style.left = comp + gutterW + 'px';\n    }\n    function maybeUpdateLineNumberWidth(cm) {\n        if (!cm.options.lineNumbers)\n            return false;\n        let doc = cm.doc, last = utils_line.lineNumberFor(cm.options, doc.first + doc.size - 1), display = cm.display;\n        if (last.length != display.lineNumChars) {\n            let test = display.measure.appendChild(dom.elt('div', [dom.elt('div', last)], 'CodeMirror-linenumber CodeMirror-gutter-elt'));\n            let innerW = test.firstChild.offsetWidth, padding = test.offsetWidth - innerW;\n            display.lineGutter.style.width = '';\n            display.lineNumInnerWidth = Math.max(innerW, display.lineGutter.offsetWidth - padding) + 1;\n            display.lineNumWidth = display.lineNumInnerWidth + padding;\n            display.lineNumChars = display.lineNumInnerWidth ? last.length : -1;\n            display.lineGutter.style.width = display.lineNumWidth + 'px';\n            update_display.updateGutterSpace(cm);\n            return true;\n        }\n        return false;\n    }\n    return {\n        alignHorizontally: alignHorizontally,\n        maybeUpdateLineNumberWidth: maybeUpdateLineNumberWidth\n    };\n});"]}