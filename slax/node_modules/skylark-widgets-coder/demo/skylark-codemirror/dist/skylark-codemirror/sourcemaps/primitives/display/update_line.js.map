{"version":3,"sources":["primitives/display/update_line.js"],"names":["define","a","b","c","d","e","ensureLineWrapped","lineView","node","text","elt","parentNode","replaceChild","appendChild","ie","ie_version","style","zIndex","getLineContent","cm","ext","display","externalMeasured","line","measure","built","buildLineContent","updateLineText","cls","className","pre","bgClass","textClass","updateLineClasses","background","removeChild","wrap","insertBefore","firstChild","input","setUneditable","updateLineBackground","wrapClass","updateLineGutter","lineN","dims","gutter","gutterBackground","gutterClass","options","fixedGutter","fixedPos","gutterTotalWidth","markers","gutterMarkers","lineNumbers","gutterWrap","lineNumber","lineNumberFor","gutterLeft","lineNumInnerWidth","k","gutters","length","id","found","hasOwnProperty","gutterWidth","updateLineWidgets","alignable","next","nextSibling","insertLineWidgets","insertLineWidgetsFor","rest","i","allowAbove","widgets","ws","widget","handleMouseEvents","setAttribute","positionLineWidget","above","signalLater","noHScroll","push","width","wrapperWidth","left","coverGutter","paddingLeft","position","marginLeft","updateLineForChanges","j","changes","type","buildLineElement"],"mappings":"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","file":"../../../primitives/display/update_line.js","sourcesContent":["define([\n    '../line/line_data',\n    '../line/utils_line',\n    '../util/browser',\n    '../util/dom',\n    '../util/operation_group'\n], function (a, b, c, d, e) {\n    'use strict';\n    function updateLineForChanges(cm, lineView, lineN, dims) {\n        for (let j = 0; j < lineView.changes.length; j++) {\n            let type = lineView.changes[j];\n            if (type == 'text')\n                updateLineText(cm, lineView);\n            else if (type == 'gutter')\n                updateLineGutter(cm, lineView, lineN, dims);\n            else if (type == 'class')\n                updateLineClasses(cm, lineView);\n            else if (type == 'widget')\n                updateLineWidgets(cm, lineView, dims);\n        }\n        lineView.changes = null;\n    }\n    function ensureLineWrapped(lineView) {\n        if (lineView.node == lineView.text) {\n            lineView.node = d.elt('div', null, null, 'position: relative');\n            if (lineView.text.parentNode)\n                lineView.text.parentNode.replaceChild(lineView.node, lineView.text);\n            lineView.node.appendChild(lineView.text);\n            if (c.ie && c.ie_version < 8)\n                lineView.node.style.zIndex = 2;\n        }\n        return lineView.node;\n    }\n    function updateLineBackground(cm, lineView) {\n        let cls = lineView.bgClass ? lineView.bgClass + ' ' + (lineView.line.bgClass || '') : lineView.line.bgClass;\n        if (cls)\n            cls += ' CodeMirror-linebackground';\n        if (lineView.background) {\n            if (cls)\n                lineView.background.className = cls;\n            else {\n                lineView.background.parentNode.removeChild(lineView.background);\n                lineView.background = null;\n            }\n        } else if (cls) {\n            let wrap = ensureLineWrapped(lineView);\n            lineView.background = wrap.insertBefore(d.elt('div', null, cls), wrap.firstChild);\n            cm.display.input.setUneditable(lineView.background);\n        }\n    }\n    function getLineContent(cm, lineView) {\n        let ext = cm.display.externalMeasured;\n        if (ext && ext.line == lineView.line) {\n            cm.display.externalMeasured = null;\n            lineView.measure = ext.measure;\n            return ext.built;\n        }\n        return a.buildLineContent(cm, lineView);\n    }\n    function updateLineText(cm, lineView) {\n        let cls = lineView.text.className;\n        let built = getLineContent(cm, lineView);\n        if (lineView.text == lineView.node)\n            lineView.node = built.pre;\n        lineView.text.parentNode.replaceChild(built.pre, lineView.text);\n        lineView.text = built.pre;\n        if (built.bgClass != lineView.bgClass || built.textClass != lineView.textClass) {\n            lineView.bgClass = built.bgClass;\n            lineView.textClass = built.textClass;\n            updateLineClasses(cm, lineView);\n        } else if (cls) {\n            lineView.text.className = cls;\n        }\n    }\n    function updateLineClasses(cm, lineView) {\n        updateLineBackground(cm, lineView);\n        if (lineView.line.wrapClass)\n            ensureLineWrapped(lineView).className = lineView.line.wrapClass;\n        else if (lineView.node != lineView.text)\n            lineView.node.className = '';\n        let textClass = lineView.textClass ? lineView.textClass + ' ' + (lineView.line.textClass || '') : lineView.line.textClass;\n        lineView.text.className = textClass || '';\n    }\n    function updateLineGutter(cm, lineView, lineN, dims) {\n        if (lineView.gutter) {\n            lineView.node.removeChild(lineView.gutter);\n            lineView.gutter = null;\n        }\n        if (lineView.gutterBackground) {\n            lineView.node.removeChild(lineView.gutterBackground);\n            lineView.gutterBackground = null;\n        }\n        if (lineView.line.gutterClass) {\n            let wrap = ensureLineWrapped(lineView);\n            lineView.gutterBackground = d.elt('div', null, 'CodeMirror-gutter-background ' + lineView.line.gutterClass, `left: ${ cm.options.fixedGutter ? dims.fixedPos : -dims.gutterTotalWidth }px; width: ${ dims.gutterTotalWidth }px`);\n            cm.display.input.setUneditable(lineView.gutterBackground);\n            wrap.insertBefore(lineView.gutterBackground, lineView.text);\n        }\n        let markers = lineView.line.gutterMarkers;\n        if (cm.options.lineNumbers || markers) {\n            let wrap = ensureLineWrapped(lineView);\n            let gutterWrap = lineView.gutter = d.elt('div', null, 'CodeMirror-gutter-wrapper', `left: ${ cm.options.fixedGutter ? dims.fixedPos : -dims.gutterTotalWidth }px`);\n            cm.display.input.setUneditable(gutterWrap);\n            wrap.insertBefore(gutterWrap, lineView.text);\n            if (lineView.line.gutterClass)\n                gutterWrap.className += ' ' + lineView.line.gutterClass;\n            if (cm.options.lineNumbers && (!markers || !markers['CodeMirror-linenumbers']))\n                lineView.lineNumber = gutterWrap.appendChild(d.elt('div', b.lineNumberFor(cm.options, lineN), 'CodeMirror-linenumber CodeMirror-gutter-elt', `left: ${ dims.gutterLeft['CodeMirror-linenumbers'] }px; width: ${ cm.display.lineNumInnerWidth }px`));\n            if (markers)\n                for (let k = 0; k < cm.options.gutters.length; ++k) {\n                    let id = cm.options.gutters[k], found = markers.hasOwnProperty(id) && markers[id];\n                    if (found)\n                        gutterWrap.appendChild(d.elt('div', [found], 'CodeMirror-gutter-elt', `left: ${ dims.gutterLeft[id] }px; width: ${ dims.gutterWidth[id] }px`));\n                }\n        }\n    }\n    function updateLineWidgets(cm, lineView, dims) {\n        if (lineView.alignable)\n            lineView.alignable = null;\n        for (let node = lineView.node.firstChild, next; node; node = next) {\n            next = node.nextSibling;\n            if (node.className == 'CodeMirror-linewidget')\n                lineView.node.removeChild(node);\n        }\n        insertLineWidgets(cm, lineView, dims);\n    }\n    function buildLineElement(cm, lineView, lineN, dims) {\n        let built = getLineContent(cm, lineView);\n        lineView.text = lineView.node = built.pre;\n        if (built.bgClass)\n            lineView.bgClass = built.bgClass;\n        if (built.textClass)\n            lineView.textClass = built.textClass;\n        updateLineClasses(cm, lineView);\n        updateLineGutter(cm, lineView, lineN, dims);\n        insertLineWidgets(cm, lineView, dims);\n        return lineView.node;\n    }\n    function insertLineWidgets(cm, lineView, dims) {\n        insertLineWidgetsFor(cm, lineView.line, lineView, dims, true);\n        if (lineView.rest)\n            for (let i = 0; i < lineView.rest.length; i++)\n                insertLineWidgetsFor(cm, lineView.rest[i], lineView, dims, false);\n    }\n    function insertLineWidgetsFor(cm, line, lineView, dims, allowAbove) {\n        if (!line.widgets)\n            return;\n        let wrap = ensureLineWrapped(lineView);\n        for (let i = 0, ws = line.widgets; i < ws.length; ++i) {\n            let widget = ws[i], node = d.elt('div', [widget.node], 'CodeMirror-linewidget');\n            if (!widget.handleMouseEvents)\n                node.setAttribute('cm-ignore-events', 'true');\n            positionLineWidget(widget, node, lineView, dims);\n            cm.display.input.setUneditable(node);\n            if (allowAbove && widget.above)\n                wrap.insertBefore(node, lineView.gutter || lineView.text);\n            else\n                wrap.appendChild(node);\n            e.signalLater(widget, 'redraw');\n        }\n    }\n    function positionLineWidget(widget, node, lineView, dims) {\n        if (widget.noHScroll) {\n            ;\n            (lineView.alignable || (lineView.alignable = [])).push(node);\n            let width = dims.wrapperWidth;\n            node.style.left = dims.fixedPos + 'px';\n            if (!widget.coverGutter) {\n                width -= dims.gutterTotalWidth;\n                node.style.paddingLeft = dims.gutterTotalWidth + 'px';\n            }\n            node.style.width = width + 'px';\n        }\n        if (widget.coverGutter) {\n            node.style.zIndex = 5;\n            node.style.position = 'relative';\n            if (!widget.noHScroll)\n                node.style.marginLeft = -dims.gutterTotalWidth + 'px';\n        }\n    }\n    return {\n        updateLineForChanges: updateLineForChanges,\n        buildLineElement: buildLineElement\n    };\n});"]}