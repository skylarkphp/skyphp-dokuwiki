{"version":3,"sources":["primitives/display/update_lines.js"],"names":["define","a","b","c","d","updateWidgetHeight","line","widgets","i","length","w","parent","node","parentNode","height","offsetHeight","updateHeightsInViewport","cm","display","prevBottom","lineDiv","offsetTop","view","cur","wrapping","options","lineWrapping","width","hidden","ie","ie_version","bot","box","getBoundingClientRect","bottom","top","text","firstChild","right","left","diff","updateLineHeight","rest","j","sizerWidth","chWidth","Math","ceil","charWidth","maxLineLength","maxLine","maxLineChanged","visibleLines","doc","viewport","max","scroller","scrollTop","floor","paddingTop","wrapper","clientHeight","from","lineAtHeight","to","ensure","ensureFrom","ensureTo","heightAtLine","getLine","min","lastLine"],"mappings":";;;;;;;AAAAA,QACI,gBACA,qBACA,sCACA,mBACD,SAAUC,EAAGC,EAAGC,EAAGC,GAClB,aAqCA,SAASC,EAAmBC,GACxB,GAAIA,EAAKC,QACL,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKC,QAAQE,SAAUD,EAAG,CAC1C,IAAIE,EAAIJ,EAAKC,QAAQC,GAAIG,EAASD,EAAEE,KAAKC,WACrCF,IACAD,EAAEI,OAASH,EAAOI,eAuBlC,OACIC,wBAjEJ,SAAiCC,GAC7B,IAAIC,EAAUD,EAAGC,QACbC,EAAaD,EAAQE,QAAQC,UACjC,IAAK,IAAIb,EAAI,EAAGA,EAAIU,EAAQI,KAAKb,OAAQD,IAAK,CAC1C,IACIM,EADAS,EAAML,EAAQI,KAAKd,GAAIgB,EAAWP,EAAGQ,QAAQC,aACrCC,EAAQ,EACpB,GAAIJ,EAAIK,OACJ,SACJ,GAAIxB,EAAEyB,IAAMzB,EAAE0B,WAAa,EAAG,CAC1B,IAAIC,EAAMR,EAAIX,KAAKS,UAAYE,EAAIX,KAAKG,aACxCD,EAASiB,EAAMZ,EACfA,EAAaY,MACV,CACH,IAAIC,EAAMT,EAAIX,KAAKqB,wBACnBnB,EAASkB,EAAIE,OAASF,EAAIG,KACrBX,GAAYD,EAAIa,KAAKC,aACtBV,EAAQJ,EAAIa,KAAKC,WAAWJ,wBAAwBK,MAAQN,EAAIO,KAAO,GAE/E,IAAIC,EAAOjB,EAAIjB,KAAKQ,OAASA,EAC7B,IAAI0B,EAAO,MAASA,GAAQ,QACxBtC,EAAEuC,iBAAiBlB,EAAIjB,KAAMQ,GAC7BT,EAAmBkB,EAAIjB,MACnBiB,EAAImB,MACJ,IAAK,IAAIC,EAAI,EAAGA,EAAIpB,EAAImB,KAAKjC,OAAQkC,IACjCtC,EAAmBkB,EAAImB,KAAKC,IAExC,GAAIhB,EAAQV,EAAGC,QAAQ0B,WAAY,CAC/B,IAAIC,EAAUC,KAAKC,KAAKpB,EAAQxB,EAAE6C,UAAU/B,EAAGC,UAC3C2B,EAAU5B,EAAGC,QAAQ+B,gBACrBhC,EAAGC,QAAQ+B,cAAgBJ,EAC3B5B,EAAGC,QAAQgC,QAAU3B,EAAIjB,KACzBW,EAAGC,QAAQiC,gBAAiB,MAmCxCC,aAtBJ,SAAsBlC,EAASmC,EAAKC,GAChC,IAAInB,EAAMmB,GAA4B,MAAhBA,EAASnB,IAAcW,KAAKS,IAAI,EAAGD,EAASnB,KAAOjB,EAAQsC,SAASC,UAC1FtB,EAAMW,KAAKY,MAAMvB,EAAMhC,EAAEwD,WAAWzC,IACpC,IAAIgB,EAASoB,GAA+B,MAAnBA,EAASpB,OAAiBoB,EAASpB,OAASC,EAAMjB,EAAQ0C,QAAQC,aACvFC,EAAO5D,EAAE6D,aAAaV,EAAKlB,GAAM6B,EAAK9D,EAAE6D,aAAaV,EAAKnB,GAC9D,GAAIoB,GAAYA,EAASW,OAAQ,CAC7B,IAAIC,EAAaZ,EAASW,OAAOH,KAAKxD,KAAM6D,EAAWb,EAASW,OAAOD,GAAG1D,KACtE4D,EAAaJ,GACbA,EAAOI,EACPF,EAAK9D,EAAE6D,aAAaV,EAAKpD,EAAEmE,aAAalE,EAAEmE,QAAQhB,EAAKa,IAAehD,EAAQ0C,QAAQC,eAC/Ef,KAAKwB,IAAIH,EAAUd,EAAIkB,aAAeP,IAC7CF,EAAO5D,EAAE6D,aAAaV,EAAKpD,EAAEmE,aAAalE,EAAEmE,QAAQhB,EAAKc,IAAajD,EAAQ0C,QAAQC,cACtFG,EAAKG,GAGb,OACIL,KAAMA,EACNE,GAAIlB,KAAKS,IAAIS,EAAIF,EAAO","file":"../../../primitives/display/update_lines.js","sourcesContent":["define([\n    '../line/spans',\n    '../line/utils_line',\n    '../measurement/position_measurement',\n    '../util/browser'\n], function (a, b, c, d) {\n    'use strict';\n    function updateHeightsInViewport(cm) {\n        let display = cm.display;\n        let prevBottom = display.lineDiv.offsetTop;\n        for (let i = 0; i < display.view.length; i++) {\n            let cur = display.view[i], wrapping = cm.options.lineWrapping;\n            let height, width = 0;\n            if (cur.hidden)\n                continue;\n            if (d.ie && d.ie_version < 8) {\n                let bot = cur.node.offsetTop + cur.node.offsetHeight;\n                height = bot - prevBottom;\n                prevBottom = bot;\n            } else {\n                let box = cur.node.getBoundingClientRect();\n                height = box.bottom - box.top;\n                if (!wrapping && cur.text.firstChild)\n                    width = cur.text.firstChild.getBoundingClientRect().right - box.left - 1;\n            }\n            let diff = cur.line.height - height;\n            if (diff > 0.005 || diff < -0.005) {\n                b.updateLineHeight(cur.line, height);\n                updateWidgetHeight(cur.line);\n                if (cur.rest)\n                    for (let j = 0; j < cur.rest.length; j++)\n                        updateWidgetHeight(cur.rest[j]);\n            }\n            if (width > cm.display.sizerWidth) {\n                let chWidth = Math.ceil(width / c.charWidth(cm.display));\n                if (chWidth > cm.display.maxLineLength) {\n                    cm.display.maxLineLength = chWidth;\n                    cm.display.maxLine = cur.line;\n                    cm.display.maxLineChanged = true;\n                }\n            }\n        }\n    }\n    function updateWidgetHeight(line) {\n        if (line.widgets)\n            for (let i = 0; i < line.widgets.length; ++i) {\n                let w = line.widgets[i], parent = w.node.parentNode;\n                if (parent)\n                    w.height = parent.offsetHeight;\n            }\n    }\n    function visibleLines(display, doc, viewport) {\n        let top = viewport && viewport.top != null ? Math.max(0, viewport.top) : display.scroller.scrollTop;\n        top = Math.floor(top - c.paddingTop(display));\n        let bottom = viewport && viewport.bottom != null ? viewport.bottom : top + display.wrapper.clientHeight;\n        let from = b.lineAtHeight(doc, top), to = b.lineAtHeight(doc, bottom);\n        if (viewport && viewport.ensure) {\n            let ensureFrom = viewport.ensure.from.line, ensureTo = viewport.ensure.to.line;\n            if (ensureFrom < from) {\n                from = ensureFrom;\n                to = b.lineAtHeight(doc, a.heightAtLine(b.getLine(doc, ensureFrom)) + display.wrapper.clientHeight);\n            } else if (Math.min(ensureTo, doc.lastLine()) >= to) {\n                from = b.lineAtHeight(doc, a.heightAtLine(b.getLine(doc, ensureTo)) - display.wrapper.clientHeight);\n                to = ensureTo;\n            }\n        }\n        return {\n            from: from,\n            to: Math.max(to, from + 1)\n        };\n    }\n    return {\n        updateHeightsInViewport: updateHeightsInViewport,\n        visibleLines: visibleLines\n    };\n});"]}