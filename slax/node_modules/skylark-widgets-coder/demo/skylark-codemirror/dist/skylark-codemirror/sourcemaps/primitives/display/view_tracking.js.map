{"version":3,"sources":["primitives/display/view_tracking.js"],"names":["define","a","b","c","d","e","resetView","cm","display","viewFrom","viewTo","doc","first","view","viewOffset","viewCuttingPoint","oldN","newN","dir","diff","index","findViewIndex","sawCollapsedSpans","size","lineN","n","i","length","visualLineNo","regChange","from","to","lendiff","updateLineNumbers","curOp","viewChanged","visualLineEndNo","cut","slice","cutTop","cutBot","concat","buildViewArray","ext","externalMeasured","regLineChange","line","type","lineView","node","arr","changes","indexOf","push","adjustView","countDirtyView","dirty","hidden"],"mappings":"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","file":"../../../primitives/display/view_tracking.js","sourcesContent":["define([\n    '../line/line_data',\n    '../line/saw_special_spans',\n    '../line/spans',\n    '../measurement/position_measurement',\n    '../util/misc'\n], function (a, b, c, d, e) {\n    'use strict';\n    function regChange(cm, from, to, lendiff) {\n        if (from == null)\n            from = cm.doc.first;\n        if (to == null)\n            to = cm.doc.first + cm.doc.size;\n        if (!lendiff)\n            lendiff = 0;\n        let display = cm.display;\n        if (lendiff && to < display.viewTo && (display.updateLineNumbers == null || display.updateLineNumbers > from))\n            display.updateLineNumbers = from;\n        cm.curOp.viewChanged = true;\n        if (from >= display.viewTo) {\n            if (b.sawCollapsedSpans && c.visualLineNo(cm.doc, from) < display.viewTo)\n                resetView(cm);\n        } else if (to <= display.viewFrom) {\n            if (b.sawCollapsedSpans && c.visualLineEndNo(cm.doc, to + lendiff) > display.viewFrom) {\n                resetView(cm);\n            } else {\n                display.viewFrom += lendiff;\n                display.viewTo += lendiff;\n            }\n        } else if (from <= display.viewFrom && to >= display.viewTo) {\n            resetView(cm);\n        } else if (from <= display.viewFrom) {\n            let cut = viewCuttingPoint(cm, to, to + lendiff, 1);\n            if (cut) {\n                display.view = display.view.slice(cut.index);\n                display.viewFrom = cut.lineN;\n                display.viewTo += lendiff;\n            } else {\n                resetView(cm);\n            }\n        } else if (to >= display.viewTo) {\n            let cut = viewCuttingPoint(cm, from, from, -1);\n            if (cut) {\n                display.view = display.view.slice(0, cut.index);\n                display.viewTo = cut.lineN;\n            } else {\n                resetView(cm);\n            }\n        } else {\n            let cutTop = viewCuttingPoint(cm, from, from, -1);\n            let cutBot = viewCuttingPoint(cm, to, to + lendiff, 1);\n            if (cutTop && cutBot) {\n                display.view = display.view.slice(0, cutTop.index).concat(a.buildViewArray(cm, cutTop.lineN, cutBot.lineN)).concat(display.view.slice(cutBot.index));\n                display.viewTo += lendiff;\n            } else {\n                resetView(cm);\n            }\n        }\n        let ext = display.externalMeasured;\n        if (ext) {\n            if (to < ext.lineN)\n                ext.lineN += lendiff;\n            else if (from < ext.lineN + ext.size)\n                display.externalMeasured = null;\n        }\n    }\n    function regLineChange(cm, line, type) {\n        cm.curOp.viewChanged = true;\n        let display = cm.display, ext = cm.display.externalMeasured;\n        if (ext && line >= ext.lineN && line < ext.lineN + ext.size)\n            display.externalMeasured = null;\n        if (line < display.viewFrom || line >= display.viewTo)\n            return;\n        let lineView = display.view[d.findViewIndex(cm, line)];\n        if (lineView.node == null)\n            return;\n        let arr = lineView.changes || (lineView.changes = []);\n        if (e.indexOf(arr, type) == -1)\n            arr.push(type);\n    }\n    function resetView(cm) {\n        cm.display.viewFrom = cm.display.viewTo = cm.doc.first;\n        cm.display.view = [];\n        cm.display.viewOffset = 0;\n    }\n    function viewCuttingPoint(cm, oldN, newN, dir) {\n        let index = d.findViewIndex(cm, oldN), diff, view = cm.display.view;\n        if (!b.sawCollapsedSpans || newN == cm.doc.first + cm.doc.size)\n            return {\n                index: index,\n                lineN: newN\n            };\n        let n = cm.display.viewFrom;\n        for (let i = 0; i < index; i++)\n            n += view[i].size;\n        if (n != oldN) {\n            if (dir > 0) {\n                if (index == view.length - 1)\n                    return null;\n                diff = n + view[index].size - oldN;\n                index++;\n            } else {\n                diff = n - oldN;\n            }\n            oldN += diff;\n            newN += diff;\n        }\n        while (c.visualLineNo(cm.doc, newN) != newN) {\n            if (index == (dir < 0 ? 0 : view.length - 1))\n                return null;\n            newN += dir * view[index - (dir < 0 ? 1 : 0)].size;\n            index += dir;\n        }\n        return {\n            index: index,\n            lineN: newN\n        };\n    }\n    function adjustView(cm, from, to) {\n        let display = cm.display, view = display.view;\n        if (view.length == 0 || from >= display.viewTo || to <= display.viewFrom) {\n            display.view = a.buildViewArray(cm, from, to);\n            display.viewFrom = from;\n        } else {\n            if (display.viewFrom > from)\n                display.view = a.buildViewArray(cm, from, display.viewFrom).concat(display.view);\n            else if (display.viewFrom < from)\n                display.view = display.view.slice(d.findViewIndex(cm, from));\n            display.viewFrom = from;\n            if (display.viewTo < to)\n                display.view = display.view.concat(a.buildViewArray(cm, display.viewTo, to));\n            else if (display.viewTo > to)\n                display.view = display.view.slice(0, d.findViewIndex(cm, to));\n        }\n        display.viewTo = to;\n    }\n    function countDirtyView(cm) {\n        let view = cm.display.view, dirty = 0;\n        for (let i = 0; i < view.length; i++) {\n            let lineView = view[i];\n            if (!lineView.hidden && (!lineView.node || lineView.changes))\n                ++dirty;\n        }\n        return dirty;\n    }\n    return {\n        regChange: regChange,\n        regLineChange: regLineChange,\n        resetView: resetView,\n        adjustView: adjustView,\n        countDirtyView: countDirtyView\n    };\n});"]}