{"version":3,"sources":["primitives/edit/main.js"],"names":["define","CodeMirror","events","misc","options","addEditorMethods","Doc","ContentEditableInput","TextareaInput","modes","m_fromTextArea","legacy","defineOptions","dontDelegate","split","prop","prototype","hasOwnProperty","indexOf","method","apply","this","doc","arguments","eventMixin","inputStyles","textarea","contenteditable","defineMode","name","defaults","mode","defineMIME","token","stream","skipToEnd","defineExtension","func","defineDocExtension","fromTextArea","addLegacyProps","version"],"mappings":";;;;;;;AAAAA,QACI,eACA,gBACA,eACA,YACA,YACA,eACA,gCACA,yBACA,WACA,iBACA,YACD,SAAUC,EAAYC,EAAQC,EAAMC,EAASC,EAAkBC,EAAKC,EAAsBC,EAAeC,EAAOC,EAAgBC,GAC/H,aACAP,EAAQQ,cAAcX,GAEtBI,EAAiBJ,GAEjB,IAAIY,EAAe,gDAAgDC,MAAM,KACzE,IAAK,IAAIC,KAAQT,EAAIU,UACbV,EAAIU,UAAUC,eAAeF,IAASZ,EAAKe,QAAQL,EAAcE,GAAQ,IACzEd,EAAWe,UAAUD,GAAQ,SAAUI,GACnC,OAAO,WACH,OAAOA,EAAOC,MAAMC,KAAKC,IAAKC,YAFT,CAI3BjB,EAAIU,UAAUD,KAiCxB,OA/BAb,EAAOsB,WAAWlB,GAElBL,EAAWwB,aACPC,SAAYlB,EACZmB,gBAAmBpB,GAGvBN,EAAW2B,WAAa,SAAUC,GACzB5B,EAAW6B,SAASC,MAAgB,QAARF,IAC7B5B,EAAW6B,SAASC,KAAOF,GAC/BpB,EAAMmB,WAAWR,MAAMC,KAAME,YAGjCtB,EAAW+B,WAAavB,EAAMuB,WAE9B/B,EAAW2B,WAAW,OAAQ,MAASK,MAAOC,GAAUA,EAAOC,eAE/DlC,EAAW+B,WAAW,aAAc,QAEpC/B,EAAWmC,gBAAkB,EAACP,EAAMQ,KAChCpC,EAAWe,UAAUa,GAAQQ,IAGjCpC,EAAWqC,mBAAqB,EAACT,EAAMQ,KACnC/B,EAAIU,UAAUa,GAAQQ,IAG1BpC,EAAWsC,aAAe7B,EAAe6B,aAEzC5B,EAAO6B,eAAevC,GACtBA,EAAWwC,QAAU,UAEjBxC,WAAaA","file":"../../../primitives/edit/main.js","sourcesContent":["define([\n    './CodeMirror',\n    '../util/event',\n    '../util/misc',\n    './options',\n    './methods',\n    '../model/Doc',\n    '../input/ContentEditableInput',\n    '../input/TextareaInput',\n    '../modes',\n    './fromTextArea',\n    './legacy'\n], function (CodeMirror, events, misc, options, addEditorMethods, Doc, ContentEditableInput, TextareaInput, modes, m_fromTextArea, legacy) {\n    'use strict';\n    options.defineOptions(CodeMirror);\n\n    addEditorMethods(CodeMirror);\n\n    let dontDelegate = 'iter insert remove copy getEditor constructor'.split(' ');\n    for (let prop in Doc.prototype)\n        if (Doc.prototype.hasOwnProperty(prop) && misc.indexOf(dontDelegate, prop) < 0)\n            CodeMirror.prototype[prop] = function (method) {\n                return function () {\n                    return method.apply(this.doc, arguments);\n                };\n            }(Doc.prototype[prop]);\n\n    events.eventMixin(Doc);\n\n    CodeMirror.inputStyles = {\n        'textarea': TextareaInput,\n        'contenteditable': ContentEditableInput\n    };\n\n    CodeMirror.defineMode = function (name) {\n        if (!CodeMirror.defaults.mode && name != 'null')\n            CodeMirror.defaults.mode = name;\n        modes.defineMode.apply(this, arguments);\n    };\n\n    CodeMirror.defineMIME = modes.defineMIME;\n\n    CodeMirror.defineMode('null', () => ({ token: stream => stream.skipToEnd() }));\n\n    CodeMirror.defineMIME('text/plain', 'null');\n\n    CodeMirror.defineExtension = (name, func) => {\n        CodeMirror.prototype[name] = func;\n    };\n\n    CodeMirror.defineDocExtension = (name, func) => {\n        Doc.prototype[name] = func;\n    };\n\n    CodeMirror.fromTextArea = m_fromTextArea.fromTextArea;\n\n    legacy.addLegacyProps(CodeMirror);\n    CodeMirror.version = '5.45.0';\n    return { \n        CodeMirror : CodeMirror \n    };\n});"]}