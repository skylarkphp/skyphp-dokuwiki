{"version":3,"sources":["primitives/input/input.js"],"names":["define","operations","scrolling","line_pos","utils_line","changes","browser","dom","misc","operation_group","feature_detection","indent","lastCopied","applyTextInput","cm","inserted","deleted","sel","origin","doc","display","shift","recent","Date","paste","state","pasteIncoming","textLines","splitLinesAuto","multiPaste","ranges","length","text","join","i","push","splitLines","options","pasteLinesPerSelection","map","l","updateInput","curOp","range","from","to","empty","Pos","line","ch","overwrite","Math","min","getLine","lst","lineWise","changeEvent","cutIncoming","makeChange","signalLater","triggerElectric","ensureCursorVisible","typing","electricChars","smartIndent","head","mode","getModeAt","indented","j","indexOf","charAt","indentLine","electricInput","test","slice","disableBrowserMagic","field","spellcheck","autocorrect","autocapitalize","setAttribute","setLastCopied","newLastCopied","handlePaste","e","pasted","clipboardData","getData","preventDefault","isReadOnly","disableInput","runInOp","copyableRanges","lineRange","anchor","getRange","hiddenTextarea","te","elt","div","webkit","style","width","ios","border"],"mappings":"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","file":"../../../primitives/input/input.js","sourcesContent":["define([\n    '../display/operations',\n    '../display/scrolling',\n    '../line/pos',\n    '../line/utils_line',\n    '../model/changes',\n    '../util/browser',\n    '../util/dom',\n    '../util/misc',\n    '../util/operation_group',\n    '../util/feature_detection',\n    './indent'\n], function (operations, scrolling, line_pos, utils_line, changes, browser, dom, misc, operation_group, feature_detection, indent) {\n    'use strict';\n    let lastCopied = null;\n    function setLastCopied(newLastCopied) {\n        lastCopied = newLastCopied;\n    }\n    function applyTextInput(cm, inserted, deleted, sel, origin) {\n        let doc = cm.doc;\n        cm.display.shift = false;\n        if (!sel)\n            sel = doc.sel;\n        let recent = +new Date() - 200;\n        let paste = origin == 'paste' || cm.state.pasteIncoming > recent;\n        let textLines = feature_detection.splitLinesAuto(inserted), multiPaste = null;\n        if (paste && sel.ranges.length > 1) {\n            if (lastCopied && lastCopied.text.join('\\n') == inserted) {\n                if (sel.ranges.length % lastCopied.text.length == 0) {\n                    multiPaste = [];\n                    for (let i = 0; i < lastCopied.text.length; i++)\n                        multiPaste.push(doc.splitLines(lastCopied.text[i]));\n                }\n            } else if (textLines.length == sel.ranges.length && cm.options.pasteLinesPerSelection) {\n                multiPaste = misc.map(textLines, l => [l]);\n            }\n        }\n        let updateInput = cm.curOp.updateInput;\n        for (let i = sel.ranges.length - 1; i >= 0; i--) {\n            let range = sel.ranges[i];\n            let from = range.from(), to = range.to();\n            if (range.empty()) {\n                if (deleted && deleted > 0)\n                    from = line_pos.Pos(from.line, from.ch - deleted);\n                else if (cm.state.overwrite && !paste)\n                    to = line_pos.Pos(to.line, Math.min(utils_line.getLine(doc, to.line).text.length, to.ch + misc.lst(textLines).length));\n                else if (paste && lastCopied && lastCopied.lineWise && lastCopied.text.join('\\n') == inserted)\n                    from = to = line_pos.Pos(from.line, 0);\n            }\n            let changeEvent = {\n                from: from,\n                to: to,\n                text: multiPaste ? multiPaste[i % multiPaste.length] : textLines,\n                origin: origin || (paste ? 'paste' : cm.state.cutIncoming > recent ? 'cut' : '+input')\n            };\n            changes.makeChange(cm.doc, changeEvent);\n            operation_group.signalLater(cm, 'inputRead', cm, changeEvent);\n        }\n        if (inserted && !paste)\n            triggerElectric(cm, inserted);\n        scrolling.ensureCursorVisible(cm);\n        if (cm.curOp.updateInput < 2)\n            cm.curOp.updateInput = updateInput;\n        cm.curOp.typing = true;\n        cm.state.pasteIncoming = cm.state.cutIncoming = -1;\n    }\n    function handlePaste(e, cm) {\n        let pasted = e.clipboardData && e.clipboardData.getData('Text');\n        if (pasted) {\n            e.preventDefault();\n            if (!cm.isReadOnly() && !cm.options.disableInput)\n                operations.runInOp(cm, () => applyTextInput(cm, pasted, 0, null, 'paste'));\n            return true;\n        }\n    }\n    function triggerElectric(cm, inserted) {\n        if (!cm.options.electricChars || !cm.options.smartIndent)\n            return;\n        let sel = cm.doc.sel;\n        for (let i = sel.ranges.length - 1; i >= 0; i--) {\n            let range = sel.ranges[i];\n            if (range.head.ch > 100 || i && sel.ranges[i - 1].head.line == range.head.line)\n                continue;\n            let mode = cm.getModeAt(range.head);\n            let indented = false;\n            if (mode.electricChars) {\n                for (let j = 0; j < mode.electricChars.length; j++)\n                    if (inserted.indexOf(mode.electricChars.charAt(j)) > -1) {\n                        indented = indent.indentLine(cm, range.head.line, 'smart');\n                        break;\n                    }\n            } else if (mode.electricInput) {\n                if (mode.electricInput.test(utils_line.getLine(cm.doc, range.head.line).text.slice(0, range.head.ch)))\n                    indented = indent.indentLine(cm, range.head.line, 'smart');\n            }\n            if (indented)\n                operation_group.signalLater(cm, 'electricInput', cm, range.head.line);\n        }\n    }\n    function copyableRanges(cm) {\n        let text = [], ranges = [];\n        for (let i = 0; i < cm.doc.sel.ranges.length; i++) {\n            let line = cm.doc.sel.ranges[i].head.line;\n            let lineRange = {\n                anchor: line_pos.Pos(line, 0),\n                head: line_pos.Pos(line + 1, 0)\n            };\n            ranges.push(lineRange);\n            text.push(cm.getRange(lineRange.anchor, lineRange.head));\n        }\n        return {\n            text: text,\n            ranges: ranges\n        };\n    }\n    function disableBrowserMagic(field, spellcheck, autocorrect, autocapitalize) {\n        field.setAttribute('autocorrect', !!autocorrect);\n        field.setAttribute('autocapitalize', !!autocapitalize);\n        field.setAttribute('spellcheck', !!spellcheck);\n    }\n    function hiddenTextarea() {\n        let te = dom.elt('textarea', null, null, 'position: absolute; bottom: -1em; padding: 0; width: 1px; height: 1em; outline: none');\n        let div = dom.elt('div', [te], null, 'overflow: hidden; position: relative; width: 3px; height: 0px;');\n        if (browser.webkit)\n            te.style.width = '1000px';\n        else\n            te.setAttribute('wrap', 'off');\n        if (browser.ios)\n            te.style.border = '1px solid black';\n        disableBrowserMagic(te);\n        return div;\n    }\n    return {\n        lastCopied: lastCopied,\n        setLastCopied: setLastCopied,\n        applyTextInput: applyTextInput,\n        handlePaste: handlePaste,\n        triggerElectric: triggerElectric,\n        copyableRanges: copyableRanges,\n        disableBrowserMagic: disableBrowserMagic,\n        hiddenTextarea: hiddenTextarea\n    };\n});"]}