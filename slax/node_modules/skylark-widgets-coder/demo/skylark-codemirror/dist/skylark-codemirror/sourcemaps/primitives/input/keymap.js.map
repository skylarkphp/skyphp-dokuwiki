{"version":3,"sources":["primitives/input/keymap.js"],"names":["define","browser","misc","keynames","keyMap","normalizeKeyName","name","alt","ctrl","shift","cmd","parts","split","length","i","mod","test","Error","addModifierNames","event","noShift","base","altKey","flipCtrlCmd","metaKey","ctrlKey","shiftKey","getKeyMap","val","basic","Left","Right","Up","Down","End","Home","PageUp","PageDown","Delete","Backspace","Shift-Backspace","Tab","Shift-Tab","Enter","Insert","Esc","pcDefault","Ctrl-A","Ctrl-D","Ctrl-Z","Shift-Ctrl-Z","Ctrl-Y","Ctrl-Home","Ctrl-End","Ctrl-Up","Ctrl-Down","Ctrl-Left","Ctrl-Right","Alt-Left","Alt-Right","Ctrl-Backspace","Ctrl-Delete","Ctrl-S","Ctrl-F","Ctrl-G","Shift-Ctrl-G","Shift-Ctrl-F","Shift-Ctrl-R","Ctrl-[","Ctrl-]","Ctrl-U","Shift-Ctrl-U","Alt-U","fallthrough","emacsy","Ctrl-B","Ctrl-P","Ctrl-N","Alt-F","Alt-B","Ctrl-E","Ctrl-V","Shift-Ctrl-V","Ctrl-H","Alt-D","Alt-Backspace","Ctrl-K","Ctrl-T","Ctrl-O","macDefault","Cmd-A","Cmd-D","Cmd-Z","Shift-Cmd-Z","Cmd-Y","Cmd-Home","Cmd-Up","Cmd-End","Cmd-Down","Cmd-Left","Cmd-Right","Ctrl-Alt-Backspace","Alt-Delete","Cmd-S","Cmd-F","Cmd-G","Shift-Cmd-G","Cmd-Alt-F","Shift-Cmd-Alt-F","Cmd-[","Cmd-]","Cmd-Backspace","Cmd-Delete","Cmd-U","Shift-Cmd-U","mac","normalizeKeyMap","keymap","copy","keyname","hasOwnProperty","value","keys","map","join","slice","prev","prop","lookupKey","key","handle","context","found","call","Object","prototype","toString","result","isModifierKey","keyNames","keyCode","keyName","presto","altGraphKey","code"],"mappings":"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","file":"../../../primitives/input/keymap.js","sourcesContent":["define([\n    '../util/browser',\n    '../util/misc',\n    './keynames'\n], function (browser, misc, keynames) {\n    'use strict';\n    let keyMap = {};\n    keyMap.basic = {\n        'Left': 'goCharLeft',\n        'Right': 'goCharRight',\n        'Up': 'goLineUp',\n        'Down': 'goLineDown',\n        'End': 'goLineEnd',\n        'Home': 'goLineStartSmart',\n        'PageUp': 'goPageUp',\n        'PageDown': 'goPageDown',\n        'Delete': 'delCharAfter',\n        'Backspace': 'delCharBefore',\n        'Shift-Backspace': 'delCharBefore',\n        'Tab': 'defaultTab',\n        'Shift-Tab': 'indentAuto',\n        'Enter': 'newlineAndIndent',\n        'Insert': 'toggleOverwrite',\n        'Esc': 'singleSelection'\n    };\n    keyMap.pcDefault = {\n        'Ctrl-A': 'selectAll',\n        'Ctrl-D': 'deleteLine',\n        'Ctrl-Z': 'undo',\n        'Shift-Ctrl-Z': 'redo',\n        'Ctrl-Y': 'redo',\n        'Ctrl-Home': 'goDocStart',\n        'Ctrl-End': 'goDocEnd',\n        'Ctrl-Up': 'goLineUp',\n        'Ctrl-Down': 'goLineDown',\n        'Ctrl-Left': 'goGroupLeft',\n        'Ctrl-Right': 'goGroupRight',\n        'Alt-Left': 'goLineStart',\n        'Alt-Right': 'goLineEnd',\n        'Ctrl-Backspace': 'delGroupBefore',\n        'Ctrl-Delete': 'delGroupAfter',\n        'Ctrl-S': 'save',\n        'Ctrl-F': 'find',\n        'Ctrl-G': 'findNext',\n        'Shift-Ctrl-G': 'findPrev',\n        'Shift-Ctrl-F': 'replace',\n        'Shift-Ctrl-R': 'replaceAll',\n        'Ctrl-[': 'indentLess',\n        'Ctrl-]': 'indentMore',\n        'Ctrl-U': 'undoSelection',\n        'Shift-Ctrl-U': 'redoSelection',\n        'Alt-U': 'redoSelection',\n        'fallthrough': 'basic'\n    };\n    keyMap.emacsy = {\n        'Ctrl-F': 'goCharRight',\n        'Ctrl-B': 'goCharLeft',\n        'Ctrl-P': 'goLineUp',\n        'Ctrl-N': 'goLineDown',\n        'Alt-F': 'goWordRight',\n        'Alt-B': 'goWordLeft',\n        'Ctrl-A': 'goLineStart',\n        'Ctrl-E': 'goLineEnd',\n        'Ctrl-V': 'goPageDown',\n        'Shift-Ctrl-V': 'goPageUp',\n        'Ctrl-D': 'delCharAfter',\n        'Ctrl-H': 'delCharBefore',\n        'Alt-D': 'delWordAfter',\n        'Alt-Backspace': 'delWordBefore',\n        'Ctrl-K': 'killLine',\n        'Ctrl-T': 'transposeChars',\n        'Ctrl-O': 'openLine'\n    };\n    keyMap.macDefault = {\n        'Cmd-A': 'selectAll',\n        'Cmd-D': 'deleteLine',\n        'Cmd-Z': 'undo',\n        'Shift-Cmd-Z': 'redo',\n        'Cmd-Y': 'redo',\n        'Cmd-Home': 'goDocStart',\n        'Cmd-Up': 'goDocStart',\n        'Cmd-End': 'goDocEnd',\n        'Cmd-Down': 'goDocEnd',\n        'Alt-Left': 'goGroupLeft',\n        'Alt-Right': 'goGroupRight',\n        'Cmd-Left': 'goLineLeft',\n        'Cmd-Right': 'goLineRight',\n        'Alt-Backspace': 'delGroupBefore',\n        'Ctrl-Alt-Backspace': 'delGroupAfter',\n        'Alt-Delete': 'delGroupAfter',\n        'Cmd-S': 'save',\n        'Cmd-F': 'find',\n        'Cmd-G': 'findNext',\n        'Shift-Cmd-G': 'findPrev',\n        'Cmd-Alt-F': 'replace',\n        'Shift-Cmd-Alt-F': 'replaceAll',\n        'Cmd-[': 'indentLess',\n        'Cmd-]': 'indentMore',\n        'Cmd-Backspace': 'delWrappedLineLeft',\n        'Cmd-Delete': 'delWrappedLineRight',\n        'Cmd-U': 'undoSelection',\n        'Shift-Cmd-U': 'redoSelection',\n        'Ctrl-Up': 'goDocStart',\n        'Ctrl-Down': 'goDocEnd',\n        'fallthrough': [\n            'basic',\n            'emacsy'\n        ]\n    };\n    keyMap['default'] = browser.mac ? keyMap.macDefault : keyMap.pcDefault;\n    function normalizeKeyName(name) {\n        let parts = name.split(/-(?!$)/);\n        name = parts[parts.length - 1];\n        let alt, ctrl, shift, cmd;\n        for (let i = 0; i < parts.length - 1; i++) {\n            let mod = parts[i];\n            if (/^(cmd|meta|m)$/i.test(mod))\n                cmd = true;\n            else if (/^a(lt)?$/i.test(mod))\n                alt = true;\n            else if (/^(c|ctrl|control)$/i.test(mod))\n                ctrl = true;\n            else if (/^s(hift)?$/i.test(mod))\n                shift = true;\n            else\n                throw new Error('Unrecognized modifier name: ' + mod);\n        }\n        if (alt)\n            name = 'Alt-' + name;\n        if (ctrl)\n            name = 'Ctrl-' + name;\n        if (cmd)\n            name = 'Cmd-' + name;\n        if (shift)\n            name = 'Shift-' + name;\n        return name;\n    }\n    function normalizeKeyMap(keymap) {\n        let copy = {};\n        for (let keyname in keymap)\n            if (keymap.hasOwnProperty(keyname)) {\n                let value = keymap[keyname];\n                if (/^(name|fallthrough|(de|at)tach)$/.test(keyname))\n                    continue;\n                if (value == '...') {\n                    delete keymap[keyname];\n                    continue;\n                }\n                let keys = misc.map(keyname.split(' '), normalizeKeyName);\n                for (let i = 0; i < keys.length; i++) {\n                    let val, name;\n                    if (i == keys.length - 1) {\n                        name = keys.join(' ');\n                        val = value;\n                    } else {\n                        name = keys.slice(0, i + 1).join(' ');\n                        val = '...';\n                    }\n                    let prev = copy[name];\n                    if (!prev)\n                        copy[name] = val;\n                    else if (prev != val)\n                        throw new Error('Inconsistent bindings for ' + name);\n                }\n                delete keymap[keyname];\n            }\n        for (let prop in copy)\n            keymap[prop] = copy[prop];\n        return keymap;\n    }\n    function lookupKey(key, map, handle, context) {\n        map = getKeyMap(map);\n        let found = map.call ? map.call(key, context) : map[key];\n        if (found === false)\n            return 'nothing';\n        if (found === '...')\n            return 'multi';\n        if (found != null && handle(found))\n            return 'handled';\n        if (map.fallthrough) {\n            if (Object.prototype.toString.call(map.fallthrough) != '[object Array]')\n                return lookupKey(key, map.fallthrough, handle, context);\n            for (let i = 0; i < map.fallthrough.length; i++) {\n                let result = lookupKey(key, map.fallthrough[i], handle, context);\n                if (result)\n                    return result;\n            }\n        }\n    }\n    function isModifierKey(value) {\n        let name = typeof value == 'string' ? value : keynames.keyNames[value.keyCode];\n        return name == 'Ctrl' || name == 'Alt' || name == 'Shift' || name == 'Mod';\n    }\n    function addModifierNames(name, event, noShift) {\n        let base = name;\n        if (event.altKey && base != 'Alt')\n            name = 'Alt-' + name;\n        if ((browser.flipCtrlCmd ? event.metaKey : event.ctrlKey) && base != 'Ctrl')\n            name = 'Ctrl-' + name;\n        if ((browser.flipCtrlCmd ? event.ctrlKey : event.metaKey) && base != 'Cmd')\n            name = 'Cmd-' + name;\n        if (!noShift && event.shiftKey && base != 'Shift')\n            name = 'Shift-' + name;\n        return name;\n    }\n    function keyName(event, noShift) {\n        if (browser.presto && event.keyCode == 34 && event['char'])\n            return false;\n        let name = keynames.keyNames[event.keyCode];\n        if (name == null || event.altGraphKey)\n            return false;\n        if (event.keyCode == 3 && event.code)\n            name = event.code;\n        return addModifierNames(name, event, noShift);\n    }\n    function getKeyMap(val) {\n        return typeof val == 'string' ? keyMap[val] : val;\n    }\n    return {\n        keyMap: keyMap,\n        normalizeKeyMap: normalizeKeyMap,\n        lookupKey: lookupKey,\n        isModifierKey: isModifierKey,\n        addModifierNames: addModifierNames,\n        keyName: keyName,\n        getKeyMap: getKeyMap\n    };\n});"]}