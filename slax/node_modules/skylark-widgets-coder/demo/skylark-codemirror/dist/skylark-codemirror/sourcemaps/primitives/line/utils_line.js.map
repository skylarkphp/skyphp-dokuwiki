{"version":3,"sources":["primitives/line/utils_line.js"],"names":["define","a","getLine","doc","n","first","size","Error","chunk","lines","i","child","children","sz","chunkSize","getBetween","start","end","out","line","iter","text","slice","ch","push","getLines","from","to","updateLineHeight","height","diff","parent","lineNo","cur","no","indexOf","lineAtHeight","h","outer","length","lh","isLine","l","lineNumberFor","options","String","lineNumberFormatter","firstLineNumber"],"mappings":";;;;;;;AAAAA,QAAQ,gBAAiB,SAAUC,GAC/B,aAuFA,OACIC,QAvFJ,SAAiBC,EAAKC,GAElB,IADAA,GAAKD,EAAIE,OACD,GAAKD,GAAKD,EAAIG,KAClB,MAAM,IAAIC,MAAM,qBAAuBH,EAAID,EAAIE,OAAS,qBAC5D,IAAIG,EAAQL,EACZ,MAAQK,EAAMC,OACV,IAAK,IAAIC,EAAI,KAAMA,EAAG,CAClB,IAAIC,EAAQH,EAAMI,SAASF,GAAIG,EAAKF,EAAMG,YAC1C,GAAIV,EAAIS,EAAI,CACRL,EAAQG,EACR,MAEJP,GAAKS,EAGb,OAAOL,EAAMC,MAAML,IAyEnBW,WAvEJ,SAAoBZ,EAAKa,EAAOC,GAC5B,IAAIC,KAAUd,EAAIY,EAAMG,KAUxB,OATAhB,EAAIiB,KAAKJ,EAAMG,KAAMF,EAAIE,KAAO,EAAGA,IAC/B,IAAIE,EAAOF,EAAKE,KACZjB,GAAKa,EAAIE,OACTE,EAAOA,EAAKC,MAAM,EAAGL,EAAIM,KACzBnB,GAAKY,EAAMG,OACXE,EAAOA,EAAKC,MAAMN,EAAMO,KAC5BL,EAAIM,KAAKH,KACPjB,IAECc,GA6DPO,SA3DJ,SAAkBtB,EAAKuB,EAAMC,GACzB,IAAIT,KAIJ,OAHAf,EAAIiB,KAAKM,EAAMC,EAAIR,IACfD,EAAIM,KAAKL,EAAKE,QAEXH,GAuDPU,iBArDJ,SAA0BT,EAAMU,GAC5B,IAAIC,EAAOD,EAASV,EAAKU,OACzB,GAAIC,EACA,IAAK,IAAI1B,EAAIe,EAAMf,EAAGA,EAAIA,EAAE2B,OACxB3B,EAAEyB,QAAUC,GAkDpBE,OAhDJ,SAAgBb,GACZ,GAAmB,MAAfA,EAAKY,OACL,OAAO,KACX,IAAIE,EAAMd,EAAKY,OAAQG,EAAKjC,EAAEkC,QAAQF,EAAIxB,MAAOU,GACjD,IAAK,IAAIX,EAAQyB,EAAIF,OAAQvB,EAAOyB,EAAMzB,EAAOA,EAAQA,EAAMuB,OAC3D,IAAK,IAAIrB,EAAI,EACLF,EAAMI,SAASF,IAAMuB,IADVvB,EAGfwB,GAAM1B,EAAMI,SAASF,GAAGI,YAGhC,OAAOoB,EAAKD,EAAI5B,OAsChB+B,aApCJ,SAAsB5B,EAAO6B,GACzB,IAAIjC,EAAII,EAAMH,MACdiC,EACI,EAAG,CACC,IAAK,IAAI5B,EAAI,EAAGA,EAAIF,EAAMI,SAAS2B,SAAU7B,EAAG,CAC5C,IAAIC,EAAQH,EAAMI,SAASF,GAAIa,EAAKZ,EAAMkB,OAC1C,GAAIQ,EAAId,EAAI,CACRf,EAAQG,EACR,SAAS2B,EAEbD,GAAKd,EACLnB,GAAKO,EAAMG,YAEf,OAAOV,SACDI,EAAMC,OACpB,IAAIC,EAAI,EACR,KAAOA,EAAIF,EAAMC,MAAM8B,SAAU7B,EAAG,CAChC,IAA2B8B,EAAhBhC,EAAMC,MAAMC,GAAcmB,OACrC,GAAIQ,EAAIG,EACJ,MACJH,GAAKG,EAET,OAAOpC,EAAIM,GAeX+B,OAbJ,SAAgBtC,EAAKuC,GACjB,OAAOA,GAAKvC,EAAIE,OAASqC,EAAIvC,EAAIE,MAAQF,EAAIG,MAa7CqC,cAXJ,SAAuBC,EAASlC,GAC5B,OAAOmC,OAAOD,EAAQE,oBAAoBpC,EAAIkC,EAAQG","file":"../../../primitives/line/utils_line.js","sourcesContent":["define(['../util/misc'], function (a) {\n    'use strict';\n    function getLine(doc, n) {\n        n -= doc.first;\n        if (n < 0 || n >= doc.size)\n            throw new Error('There is no line ' + (n + doc.first) + ' in the document.');\n        let chunk = doc;\n        while (!chunk.lines) {\n            for (let i = 0;; ++i) {\n                let child = chunk.children[i], sz = child.chunkSize();\n                if (n < sz) {\n                    chunk = child;\n                    break;\n                }\n                n -= sz;\n            }\n        }\n        return chunk.lines[n];\n    }\n    function getBetween(doc, start, end) {\n        let out = [], n = start.line;\n        doc.iter(start.line, end.line + 1, line => {\n            let text = line.text;\n            if (n == end.line)\n                text = text.slice(0, end.ch);\n            if (n == start.line)\n                text = text.slice(start.ch);\n            out.push(text);\n            ++n;\n        });\n        return out;\n    }\n    function getLines(doc, from, to) {\n        let out = [];\n        doc.iter(from, to, line => {\n            out.push(line.text);\n        });\n        return out;\n    }\n    function updateLineHeight(line, height) {\n        let diff = height - line.height;\n        if (diff)\n            for (let n = line; n; n = n.parent)\n                n.height += diff;\n    }\n    function lineNo(line) {\n        if (line.parent == null)\n            return null;\n        let cur = line.parent, no = a.indexOf(cur.lines, line);\n        for (let chunk = cur.parent; chunk; cur = chunk, chunk = chunk.parent) {\n            for (let i = 0;; ++i) {\n                if (chunk.children[i] == cur)\n                    break;\n                no += chunk.children[i].chunkSize();\n            }\n        }\n        return no + cur.first;\n    }\n    function lineAtHeight(chunk, h) {\n        let n = chunk.first;\n        outer:\n            do {\n                for (let i = 0; i < chunk.children.length; ++i) {\n                    let child = chunk.children[i], ch = child.height;\n                    if (h < ch) {\n                        chunk = child;\n                        continue outer;\n                    }\n                    h -= ch;\n                    n += child.chunkSize();\n                }\n                return n;\n            } while (!chunk.lines);\n        let i = 0;\n        for (; i < chunk.lines.length; ++i) {\n            let line = chunk.lines[i], lh = line.height;\n            if (h < lh)\n                break;\n            h -= lh;\n        }\n        return n + i;\n    }\n    function isLine(doc, l) {\n        return l >= doc.first && l < doc.first + doc.size;\n    }\n    function lineNumberFor(options, i) {\n        return String(options.lineNumberFormatter(i + options.firstLineNumber));\n    }\n    return {\n        getLine: getLine,\n        getBetween: getBetween,\n        getLines: getLines,\n        updateLineHeight: updateLineHeight,\n        lineNo: lineNo,\n        lineAtHeight: lineAtHeight,\n        isLine: isLine,\n        lineNumberFor: lineNumberFor\n    };\n});"]}