{"version":3,"sources":["primitives/model/change_measurement.js"],"names":["define","line_pos","misc","selection","changeEnd","change","text","Pos","from","line","length","lst","ch","to","adjustForChange","pos","cmp","offsetPos","old","nw","computeSelAfterChange","doc","out","i","sel","ranges","range","push","Range","anchor","head","normalizeSelection","cm","primIndex","computeReplacedSel","changes","hint","oldPrev","first","newPrev","inv","Selection"],"mappings":";;;;;;;AAAAA,QACI,cACA,eACA,eACD,SAAUC,EAAUC,EAAMC,GACzB,aACA,SAASC,EAAUC,GACf,OAAKA,EAAOC,KAELL,EAASM,IAAIF,EAAOG,KAAKC,KAAOJ,EAAOC,KAAKI,OAAS,EAAGR,EAAKS,IAAIN,EAAOC,MAAMI,QAAgC,GAAtBL,EAAOC,KAAKI,OAAcL,EAAOG,KAAKI,GAAK,IAD/HP,EAAOQ,GAGtB,SAASC,EAAgBC,EAAKV,GAC1B,GAAIJ,EAASe,IAAID,EAAKV,EAAOG,MAAQ,EACjC,OAAOO,EACX,GAAId,EAASe,IAAID,EAAKV,EAAOQ,KAAO,EAChC,OAAOT,EAAUC,GACrB,IAAII,EAAOM,EAAIN,KAAOJ,EAAOC,KAAKI,QAAUL,EAAOQ,GAAGJ,KAAOJ,EAAOG,KAAKC,MAAQ,EAAGG,EAAKG,EAAIH,GAG7F,OAFIG,EAAIN,MAAQJ,EAAOQ,GAAGJ,OACtBG,GAAMR,EAAUC,GAAQO,GAAKP,EAAOQ,GAAGD,IACpCX,EAASM,IAAIE,EAAMG,GAU9B,SAASK,EAAUF,EAAKG,EAAKC,GACzB,OAAIJ,EAAIN,MAAQS,EAAIT,KACTR,EAASM,IAAIY,EAAGV,KAAMM,EAAIH,GAAKM,EAAIN,GAAKO,EAAGP,IAE3CX,EAASM,IAAIY,EAAGV,MAAQM,EAAIN,KAAOS,EAAIT,MAAOM,EAAIH,IAoBjE,OACIR,UAAWA,EACXgB,sBAlCJ,SAA+BC,EAAKhB,GAChC,IAAIiB,KACJ,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIG,IAAIC,OAAOf,OAAQa,IAAK,CAC5C,IAAIG,EAAQL,EAAIG,IAAIC,OAAOF,GAC3BD,EAAIK,KAAK,IAAIxB,EAAUyB,MAAMd,EAAgBY,EAAMG,OAAQxB,GAASS,EAAgBY,EAAMI,KAAMzB,KAEpG,OAAOF,EAAU4B,mBAAmBV,EAAIW,GAAIV,EAAKD,EAAIG,IAAIS,YA6BzDC,mBArBJ,SAA4Bb,EAAKc,EAASC,GACtC,IAAId,KACAe,EAAUpC,EAASM,IAAIc,EAAIiB,MAAO,GAAIC,EAAUF,EACpD,IAAK,IAAId,EAAI,EAAGA,EAAIY,EAAQzB,OAAQa,IAAK,CACrC,IAAIlB,EAAS8B,EAAQZ,GACjBf,EAAOS,EAAUZ,EAAOG,KAAM6B,EAASE,GACvC1B,EAAKI,EAAUb,EAAUC,GAASgC,EAASE,GAG/C,GAFAF,EAAUhC,EAAOQ,GACjB0B,EAAU1B,EACE,UAARuB,EAAkB,CAClB,IAAIV,EAAQL,EAAIG,IAAIC,OAAOF,GAAIiB,EAAMvC,EAASe,IAAIU,EAAMI,KAAMJ,EAAMG,QAAU,EAC9EP,EAAIC,GAAK,IAAIpB,EAAUyB,MAAMY,EAAM3B,EAAKL,EAAMgC,EAAMhC,EAAOK,QAE3DS,EAAIC,GAAK,IAAIpB,EAAUyB,MAAMpB,EAAMA,GAG3C,OAAO,IAAIL,EAAUsC,UAAUnB,EAAKD,EAAIG,IAAIS","file":"../../../primitives/model/change_measurement.js","sourcesContent":["define([\n    '../line/pos',\n    '../util/misc',\n    './selection'\n], function (line_pos, misc, selection) {\n    'use strict';\n    function changeEnd(change) {\n        if (!change.text)\n            return change.to;\n        return line_pos.Pos(change.from.line + change.text.length - 1, misc.lst(change.text).length + (change.text.length == 1 ? change.from.ch : 0));\n    }\n    function adjustForChange(pos, change) {\n        if (line_pos.cmp(pos, change.from) < 0)\n            return pos;\n        if (line_pos.cmp(pos, change.to) <= 0)\n            return changeEnd(change);\n        let line = pos.line + change.text.length - (change.to.line - change.from.line) - 1, ch = pos.ch;\n        if (pos.line == change.to.line)\n            ch += changeEnd(change).ch - change.to.ch;\n        return line_pos.Pos(line, ch);\n    }\n    function computeSelAfterChange(doc, change) {\n        let out = [];\n        for (let i = 0; i < doc.sel.ranges.length; i++) {\n            let range = doc.sel.ranges[i];\n            out.push(new selection.Range(adjustForChange(range.anchor, change), adjustForChange(range.head, change)));\n        }\n        return selection.normalizeSelection(doc.cm, out, doc.sel.primIndex);\n    }\n    function offsetPos(pos, old, nw) {\n        if (pos.line == old.line)\n            return line_pos.Pos(nw.line, pos.ch - old.ch + nw.ch);\n        else\n            return line_pos.Pos(nw.line + (pos.line - old.line), pos.ch);\n    }\n    function computeReplacedSel(doc, changes, hint) {\n        let out = [];\n        let oldPrev = line_pos.Pos(doc.first, 0), newPrev = oldPrev;\n        for (let i = 0; i < changes.length; i++) {\n            let change = changes[i];\n            let from = offsetPos(change.from, oldPrev, newPrev);\n            let to = offsetPos(changeEnd(change), oldPrev, newPrev);\n            oldPrev = change.to;\n            newPrev = to;\n            if (hint == 'around') {\n                let range = doc.sel.ranges[i], inv = line_pos.cmp(range.head, range.anchor) < 0;\n                out[i] = new selection.Range(inv ? to : from, inv ? from : to);\n            } else {\n                out[i] = new selection.Range(from, from);\n            }\n        }\n        return new selection.Selection(out, doc.sel.primIndex);\n    }\n    return {\n        changeEnd: changeEnd,\n        computeSelAfterChange: computeSelAfterChange,\n        computeReplacedSel: computeReplacedSel\n    };\n});"]}