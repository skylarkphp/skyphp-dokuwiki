{"version":3,"sources":["primitives/modes.js"],"names":["define","misc","modes","mimeModes","resolveMode","spec","hasOwnProperty","name","found","createObj","test","modeExtensions","defineMode","mode","arguments","length","dependencies","Array","prototype","slice","call","defineMIME","mime","getMode","options","mfactory","modeObj","exts","prop","helperType","modeProps","extendMode","properties","copyObj","copyState","state","nstate","n","val","concat","innerMode","info","startState","a1","a2"],"mappings":";;;;;;;AAAAA,QAAQ,eAAgB,SAAUC,GAC9B,aACA,IAAIC,KAAYC,KAShB,SAASC,EAAYC,GACjB,GAAmB,iBAARA,GAAoBF,EAAUG,eAAeD,GACpDA,EAAOF,EAAUE,QACd,GAAIA,GAA4B,iBAAbA,EAAKE,MAAoBJ,EAAUG,eAAeD,EAAKE,MAAO,CACpF,IAAIC,EAAQL,EAAUE,EAAKE,MACP,iBAATC,IACPA,GAAUD,KAAMC,KACpBH,EAAOJ,EAAKQ,UAAUD,EAAOH,IACxBE,KAAOC,EAAMD,SACf,CAAA,GAAmB,iBAARF,GAAoB,0BAA0BK,KAAKL,GACjE,OAAOD,EAAY,mBAChB,GAAmB,iBAARC,GAAoB,2BAA2BK,KAAKL,GAClE,OAAOD,EAAY,oBAEvB,MAAmB,iBAARC,GACEE,KAAMF,GAERA,IAAUE,KAAM,QA0B/B,IAAII,KAoCJ,OACIT,MAAOA,EACPC,UAAWA,EACXS,WA1FJ,SAAoBL,EAAMM,GAClBC,UAAUC,OAAS,IACnBF,EAAKG,aAAeC,MAAMC,UAAUC,MAAMC,KAAKN,UAAW,IAC9DZ,EAAMK,GAAQM,GAwFdQ,WAtFJ,SAAoBC,EAAMjB,GACtBF,EAAUmB,GAAQjB,GAsFlBD,YAAaA,EACbmB,QAlEJ,SAASA,EAAQC,EAASnB,GACtBA,EAAOD,EAAYC,GACnB,IAAIoB,EAAWvB,EAAMG,EAAKE,MAC1B,IAAKkB,EACD,OAAOF,EAAQC,EAAS,cAC5B,IAAIE,EAAUD,EAASD,EAASnB,GAChC,GAAIM,EAAeL,eAAeD,EAAKE,MAAO,CAC1C,IAAIoB,EAAOhB,EAAeN,EAAKE,MAC/B,IAAK,IAAIqB,KAAQD,EACRA,EAAKrB,eAAesB,KAErBF,EAAQpB,eAAesB,KACvBF,EAAQ,IAAME,GAAQF,EAAQE,IAClCF,EAAQE,GAAQD,EAAKC,IAM7B,GAHAF,EAAQnB,KAAOF,EAAKE,KAChBF,EAAKwB,aACLH,EAAQG,WAAaxB,EAAKwB,YAC1BxB,EAAKyB,UACL,IAAK,IAAIF,KAAQvB,EAAKyB,UAClBJ,EAAQE,GAAQvB,EAAKyB,UAAUF,GACvC,OAAOF,GA6CPf,eAAgBA,EAChBoB,WA3CJ,SAAoBlB,EAAMmB,GACtB,IAAIL,EAAOhB,EAAeL,eAAeO,GAAQF,EAAeE,GAAQF,EAAeE,MACvFZ,EAAKgC,QAAQD,EAAYL,IA0CzBO,UAxCJ,SAAmBrB,EAAMsB,GACrB,IAAc,IAAVA,EACA,OAAOA,EACX,GAAItB,EAAKqB,UACL,OAAOrB,EAAKqB,UAAUC,GAC1B,IAAIC,KACJ,IAAK,IAAIC,KAAKF,EAAO,CACjB,IAAIG,EAAMH,EAAME,GACZC,aAAerB,QACfqB,EAAMA,EAAIC,YACdH,EAAOC,GAAKC,EAEhB,OAAOF,GA6BPI,UA3BJ,SAAmB3B,EAAMsB,GACrB,IAAIM,EACJ,KAAO5B,EAAK2B,YACRC,EAAO5B,EAAK2B,UAAUL,KACTM,EAAK5B,MAAQA,GAE1BsB,EAAQM,EAAKN,MACbtB,EAAO4B,EAAK5B,KAEhB,OAAO4B,IACH5B,KAAMA,EACNsB,MAAOA,IAiBXO,WAdJ,SAAoB7B,EAAM8B,EAAIC,GAC1B,OAAO/B,EAAK6B,YAAa7B,EAAK6B,WAAWC,EAAIC","file":"../../primitives/modes.js","sourcesContent":["define(['./util/misc'], function (misc) {\n    'use strict';\n    let modes = {}, mimeModes = {};\n    function defineMode(name, mode) {\n        if (arguments.length > 2)\n            mode.dependencies = Array.prototype.slice.call(arguments, 2);\n        modes[name] = mode;\n    }\n    function defineMIME(mime, spec) {\n        mimeModes[mime] = spec;\n    }\n    function resolveMode(spec) {\n        if (typeof spec == 'string' && mimeModes.hasOwnProperty(spec)) {\n            spec = mimeModes[spec];\n        } else if (spec && typeof spec.name == 'string' && mimeModes.hasOwnProperty(spec.name)) {\n            let found = mimeModes[spec.name];\n            if (typeof found == 'string')\n                found = { name: found };\n            spec = misc.createObj(found, spec);\n            spec.name = found.name;\n        } else if (typeof spec == 'string' && /^[\\w\\-]+\\/[\\w\\-]+\\+xml$/.test(spec)) {\n            return resolveMode('application/xml');\n        } else if (typeof spec == 'string' && /^[\\w\\-]+\\/[\\w\\-]+\\+json$/.test(spec)) {\n            return resolveMode('application/json');\n        }\n        if (typeof spec == 'string')\n            return { name: spec };\n        else\n            return spec || { name: 'null' };\n    }\n    function getMode(options, spec) {\n        spec = resolveMode(spec);\n        let mfactory = modes[spec.name];\n        if (!mfactory)\n            return getMode(options, 'text/plain');\n        let modeObj = mfactory(options, spec);\n        if (modeExtensions.hasOwnProperty(spec.name)) {\n            let exts = modeExtensions[spec.name];\n            for (let prop in exts) {\n                if (!exts.hasOwnProperty(prop))\n                    continue;\n                if (modeObj.hasOwnProperty(prop))\n                    modeObj['_' + prop] = modeObj[prop];\n                modeObj[prop] = exts[prop];\n            }\n        }\n        modeObj.name = spec.name;\n        if (spec.helperType)\n            modeObj.helperType = spec.helperType;\n        if (spec.modeProps)\n            for (let prop in spec.modeProps)\n                modeObj[prop] = spec.modeProps[prop];\n        return modeObj;\n    }\n    let modeExtensions = {};\n    function extendMode(mode, properties) {\n        let exts = modeExtensions.hasOwnProperty(mode) ? modeExtensions[mode] : modeExtensions[mode] = {};\n        misc.copyObj(properties, exts);\n    }\n    function copyState(mode, state) {\n        if (state === true)\n            return state;\n        if (mode.copyState)\n            return mode.copyState(state);\n        let nstate = {};\n        for (let n in state) {\n            let val = state[n];\n            if (val instanceof Array)\n                val = val.concat([]);\n            nstate[n] = val;\n        }\n        return nstate;\n    }\n    function innerMode(mode, state) {\n        let info;\n        while (mode.innerMode) {\n            info = mode.innerMode(state);\n            if (!info || info.mode == mode)\n                break;\n            state = info.state;\n            mode = info.mode;\n        }\n        return info || {\n            mode: mode,\n            state: state\n        };\n    }\n    function startState(mode, a1, a2) {\n        return mode.startState ? mode.startState(a1, a2) : true;\n    }\n    return {\n        modes: modes,\n        mimeModes: mimeModes,\n        defineMode: defineMode,\n        defineMIME: defineMIME,\n        resolveMode: resolveMode,\n        getMode: getMode,\n        modeExtensions: modeExtensions,\n        extendMode: extendMode,\n        copyState: copyState,\n        innerMode: innerMode,\n        startState: startState\n    };\n});"]}