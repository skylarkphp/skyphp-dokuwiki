{"version":3,"sources":["primitives/util/StringStream.js"],"names":["define","a","[object Object]","string","tabSize","lineOracle","this","pos","start","lastColumnPos","lastColumnValue","lineStart","length","charAt","undefined","match","ok","ch","test","eat","found","indexOf","n","countColumn","pattern","consume","caseInsensitive","slice","index","cased","str","toLowerCase","substr","inner","oracle","lookAhead","baseToken"],"mappings":";;;;;;;AAAAA,QAAQ,UAAW,SAAUC,GACzB,aA4GA,aA1GIC,YAAYC,EAAQC,EAASC,GACzBC,KAAKC,IAAMD,KAAKE,MAAQ,EACxBF,KAAKH,OAASA,EACdG,KAAKF,QAAUA,GAAW,EAC1BE,KAAKG,cAAgBH,KAAKI,gBAAkB,EAC5CJ,KAAKK,UAAY,EACjBL,KAAKD,WAAaA,EAEtBH,MACI,OAAOI,KAAKC,KAAOD,KAAKH,OAAOS,OAEnCV,MACI,OAAOI,KAAKC,KAAOD,KAAKK,UAE5BT,OACI,OAAOI,KAAKH,OAAOU,OAAOP,KAAKC,WAAQO,EAE3CZ,OACI,GAAII,KAAKC,IAAMD,KAAKH,OAAOS,OACvB,OAAON,KAAKH,OAAOU,OAAOP,KAAKC,OAEvCL,IAAIa,GACA,IACIC,EADAC,EAAKX,KAAKH,OAAOU,OAAOP,KAAKC,KAMjC,GAHIS,EADgB,iBAATD,EACFE,GAAMF,EAENE,IAAOF,EAAMG,KAAOH,EAAMG,KAAKD,GAAMF,EAAME,IAGhD,QADEX,KAAKC,IACAU,EAGff,SAASa,GACL,IAAIP,EAAQF,KAAKC,IACjB,KAAOD,KAAKa,IAAIJ,KAEhB,OAAOT,KAAKC,IAAMC,EAEtBN,WACI,IAAIM,EAAQF,KAAKC,IACjB,KAAO,aAAaW,KAAKZ,KAAKH,OAAOU,OAAOP,KAAKC,SAC3CD,KAAKC,IACX,OAAOD,KAAKC,IAAMC,EAEtBN,YACII,KAAKC,IAAMD,KAAKH,OAAOS,OAE3BV,OAAOe,GACH,IAAIG,EAAQd,KAAKH,OAAOkB,QAAQJ,EAAIX,KAAKC,KACzC,GAAIa,GAAS,EAET,OADAd,KAAKC,IAAMa,GACJ,EAGflB,OAAOoB,GACHhB,KAAKC,KAAOe,EAEhBpB,SAKI,OAJII,KAAKG,cAAgBH,KAAKE,QAC1BF,KAAKI,gBAAkBT,EAAEsB,YAAYjB,KAAKH,OAAQG,KAAKE,MAAOF,KAAKF,QAASE,KAAKG,cAAeH,KAAKI,iBACrGJ,KAAKG,cAAgBH,KAAKE,OAEvBF,KAAKI,iBAAmBJ,KAAKK,UAAYV,EAAEsB,YAAYjB,KAAKH,OAAQG,KAAKK,UAAWL,KAAKF,SAAW,GAE/GF,cACI,OAAOD,EAAEsB,YAAYjB,KAAKH,OAAQ,KAAMG,KAAKF,UAAYE,KAAKK,UAAYV,EAAEsB,YAAYjB,KAAKH,OAAQG,KAAKK,UAAWL,KAAKF,SAAW,GAEzIF,MAAMsB,EAASC,EAASC,GACpB,GAAsB,iBAAXF,EAQJ,CACH,IAAIT,EAAQT,KAAKH,OAAOwB,MAAMrB,KAAKC,KAAKQ,MAAMS,GAC9C,OAAIT,GAASA,EAAMa,MAAQ,EAChB,MACPb,IAAqB,IAAZU,IACTnB,KAAKC,KAAOQ,EAAM,GAAGH,QAClBG,GAdqB,CAC5B,IAAIc,EAAQC,GAAOJ,EAAkBI,EAAIC,cAAgBD,EAEzD,GAAID,EADSvB,KAAKH,OAAO6B,OAAO1B,KAAKC,IAAKiB,EAAQZ,UAC7BiB,EAAML,GAGvB,OAFgB,IAAZC,IACAnB,KAAKC,KAAOiB,EAAQZ,SACjB,GAWnBV,UACI,OAAOI,KAAKH,OAAOwB,MAAMrB,KAAKE,MAAOF,KAAKC,KAE9CL,eAAeoB,EAAGW,GACd3B,KAAKK,WAAaW,EAClB,IACI,OAAOW,IACT,QACE3B,KAAKK,WAAaW,GAG1BpB,UAAUoB,GACN,IAAIY,EAAS5B,KAAKD,WAClB,OAAO6B,GAAUA,EAAOC,UAAUb,GAEtCpB,YACI,IAAIgC,EAAS5B,KAAKD,WAClB,OAAO6B,GAAUA,EAAOE,UAAU9B,KAAKC","file":"../../../primitives/util/StringStream.js","sourcesContent":["define(['./misc'], function (a) {\n    'use strict';\n    class StringStream {\n        constructor(string, tabSize, lineOracle) {\n            this.pos = this.start = 0;\n            this.string = string;\n            this.tabSize = tabSize || 8;\n            this.lastColumnPos = this.lastColumnValue = 0;\n            this.lineStart = 0;\n            this.lineOracle = lineOracle;\n        }\n        eol() {\n            return this.pos >= this.string.length;\n        }\n        sol() {\n            return this.pos == this.lineStart;\n        }\n        peek() {\n            return this.string.charAt(this.pos) || undefined;\n        }\n        next() {\n            if (this.pos < this.string.length)\n                return this.string.charAt(this.pos++);\n        }\n        eat(match) {\n            let ch = this.string.charAt(this.pos);\n            let ok;\n            if (typeof match == 'string')\n                ok = ch == match;\n            else\n                ok = ch && (match.test ? match.test(ch) : match(ch));\n            if (ok) {\n                ++this.pos;\n                return ch;\n            }\n        }\n        eatWhile(match) {\n            let start = this.pos;\n            while (this.eat(match)) {\n            }\n            return this.pos > start;\n        }\n        eatSpace() {\n            let start = this.pos;\n            while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n                ++this.pos;\n            return this.pos > start;\n        }\n        skipToEnd() {\n            this.pos = this.string.length;\n        }\n        skipTo(ch) {\n            let found = this.string.indexOf(ch, this.pos);\n            if (found > -1) {\n                this.pos = found;\n                return true;\n            }\n        }\n        backUp(n) {\n            this.pos -= n;\n        }\n        column() {\n            if (this.lastColumnPos < this.start) {\n                this.lastColumnValue = a.countColumn(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n                this.lastColumnPos = this.start;\n            }\n            return this.lastColumnValue - (this.lineStart ? a.countColumn(this.string, this.lineStart, this.tabSize) : 0);\n        }\n        indentation() {\n            return a.countColumn(this.string, null, this.tabSize) - (this.lineStart ? a.countColumn(this.string, this.lineStart, this.tabSize) : 0);\n        }\n        match(pattern, consume, caseInsensitive) {\n            if (typeof pattern == 'string') {\n                let cased = str => caseInsensitive ? str.toLowerCase() : str;\n                let substr = this.string.substr(this.pos, pattern.length);\n                if (cased(substr) == cased(pattern)) {\n                    if (consume !== false)\n                        this.pos += pattern.length;\n                    return true;\n                }\n            } else {\n                let match = this.string.slice(this.pos).match(pattern);\n                if (match && match.index > 0)\n                    return null;\n                if (match && consume !== false)\n                    this.pos += match[0].length;\n                return match;\n            }\n        }\n        current() {\n            return this.string.slice(this.start, this.pos);\n        }\n        hideFirstChars(n, inner) {\n            this.lineStart += n;\n            try {\n                return inner();\n            } finally {\n                this.lineStart -= n;\n            }\n        }\n        lookAhead(n) {\n            let oracle = this.lineOracle;\n            return oracle && oracle.lookAhead(n);\n        }\n        baseToken() {\n            let oracle = this.lineOracle;\n            return oracle && oracle.baseToken(this.pos);\n        }\n    }\n    return StringStream;\n});"]}