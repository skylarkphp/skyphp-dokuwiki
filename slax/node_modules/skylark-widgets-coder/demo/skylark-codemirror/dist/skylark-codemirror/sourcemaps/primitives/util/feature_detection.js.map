{"version":3,"sources":["primitives/util/feature_detection.js"],"names":["define","a","b","zwspSupported","badBidiRects","badZoomedRects","dragAndDrop","ie","ie_version","div","elt","zeroWidthElement","measure","test","removeChildrenAndAdd","document","createTextNode","firstChild","offsetHeight","offsetWidth","node","setAttribute","hasBadBidiRects","txt","r0","range","getBoundingClientRect","r1","removeChildren","left","right","splitLinesAuto","split","length","string","pos","result","l","nl","indexOf","line","slice","charAt","rt","push","hasSelection","window","getSelection","te","selectionStart","selectionEnd","e","ownerDocument","selection","createRange","parentElement","compareEndPoints","hasCopyEvent","oncopy","hasBadZoomedRects","normal","fromRange","Math","abs"],"mappings":";;;;;;;AAAAA,QACI,QACA,aACD,SAAUC,EAAGC,GACZ,aACA,IAMIC,EAeAC,EAYJ,IAyCIC,EAAiB,KASrB,OACIC,YApFc,WACd,GAAIJ,EAAEK,IAAML,EAAEM,WAAa,EACvB,OAAO,EACX,IAAIC,EAAMR,EAAES,IAAI,OAChB,MAAO,cAAeD,GAAO,aAAcA,EAJ7B,GAqFdE,iBA9EJ,SAA0BC,GACtB,GAAqB,MAAjBT,EAAuB,CACvB,IAAIU,EAAOZ,EAAES,IAAI,OAAQ,KACzBT,EAAEa,qBAAqBF,EAASX,EAAES,IAAI,QAClCG,EACAE,SAASC,eAAe,QAEW,GAAnCJ,EAAQK,WAAWC,eACnBf,EAAgBU,EAAKM,aAAe,GAAKN,EAAKK,aAAe,KAAOhB,EAAEK,IAAML,EAAEM,WAAa,IAEnG,IAAIY,EAAOjB,EAAgBF,EAAES,IAAI,OAAQ,KAAYT,EAAES,IAAI,OAAQ,IAAQ,KAAM,yDAEjF,OADAU,EAAKC,aAAa,UAAW,IACtBD,GAmEPE,gBAhEJ,SAAyBV,GACrB,GAAoB,MAAhBR,EACA,OAAOA,EACX,IAAImB,EAAMtB,EAAEa,qBAAqBF,EAASG,SAASC,eAAe,QAC9DQ,EAAKvB,EAAEwB,MAAMF,EAAK,EAAG,GAAGG,wBACxBC,EAAK1B,EAAEwB,MAAMF,EAAK,EAAG,GAAGG,wBAE5B,OADAzB,EAAE2B,eAAehB,MACZY,GAAMA,EAAGK,MAAQL,EAAGM,SAElB1B,EAAeuB,EAAGG,MAAQN,EAAGM,MAAQ,IAwD5CC,eAtD+C,GAA9B,QAAQC,MAAM,MAAMC,OAAcC,IACnD,IAAIC,EAAM,EAAGC,KAAaC,EAAIH,EAAOD,OACrC,KAAOE,GAAOE,GAAG,CACb,IAAIC,EAAKJ,EAAOK,QAAQ,KAAMJ,IACnB,GAAPG,IACAA,EAAKJ,EAAOD,QAChB,IAAIO,EAAON,EAAOO,MAAMN,EAA8B,MAAzBD,EAAOQ,OAAOJ,EAAK,GAAaA,EAAK,EAAIA,GAClEK,EAAKH,EAAKD,QAAQ,OACX,GAAPI,GACAP,EAAOQ,KAAKJ,EAAKC,MAAM,EAAGE,IAC1BR,GAAOQ,EAAK,IAEZP,EAAOQ,KAAKJ,GACZL,EAAMG,EAAK,GAGnB,OAAOF,GACPF,GAAUA,EAAOF,MAAM,YAsCvBa,aArCeC,OAAOC,aAAeC,IACrC,IACI,OAAOA,EAAGC,gBAAkBD,EAAGE,aACjC,MAAOC,GACL,OAAO,IAEXH,IACA,IAAIvB,EACJ,IACIA,EAAQuB,EAAGI,cAAcC,UAAUC,cACrC,MAAOH,IAET,SAAK1B,GAASA,EAAM8B,iBAAmBP,IAEe,GAA/CvB,EAAM+B,iBAAiB,aAAc/B,IAwB5CgC,aAtBe,MACf,IAAIN,EAAIlD,EAAES,IAAI,OACd,MAAI,WAAYyC,IAEhBA,EAAE9B,aAAa,SAAU,WACC,mBAAZ8B,EAAEO,SALD,GAuBfC,kBAfJ,SAA2B/C,GACvB,GAAsB,MAAlBP,EACA,OAAOA,EACX,IAAIe,EAAOnB,EAAEa,qBAAqBF,EAASX,EAAES,IAAI,OAAQ,MACrDkD,EAASxC,EAAKM,wBACdmC,EAAY5D,EAAEwB,MAAML,EAAM,EAAG,GAAGM,wBACpC,OAAOrB,EAAiByD,KAAKC,IAAIH,EAAO/B,KAAOgC,EAAUhC,MAAQ","file":"../../../primitives/util/feature_detection.js","sourcesContent":["define([\n    './dom',\n    './browser'\n], function (a, b) {\n    'use strict';\n    let dragAndDrop = function () {\n        if (b.ie && b.ie_version < 9)\n            return false;\n        let div = a.elt('div');\n        return 'draggable' in div || 'dragDrop' in div;\n    }();\n    let zwspSupported;\n    function zeroWidthElement(measure) {\n        if (zwspSupported == null) {\n            let test = a.elt('span', '\\u200B');\n            a.removeChildrenAndAdd(measure, a.elt('span', [\n                test,\n                document.createTextNode('x')\n            ]));\n            if (measure.firstChild.offsetHeight != 0)\n                zwspSupported = test.offsetWidth <= 1 && test.offsetHeight > 2 && !(b.ie && b.ie_version < 8);\n        }\n        let node = zwspSupported ? a.elt('span', '\\u200B') : a.elt('span', '\\xA0', null, 'display: inline-block; width: 1px; margin-right: -1px');\n        node.setAttribute('cm-text', '');\n        return node;\n    }\n    let badBidiRects;\n    function hasBadBidiRects(measure) {\n        if (badBidiRects != null)\n            return badBidiRects;\n        let txt = a.removeChildrenAndAdd(measure, document.createTextNode('AØ®A'));\n        let r0 = a.range(txt, 0, 1).getBoundingClientRect();\n        let r1 = a.range(txt, 1, 2).getBoundingClientRect();\n        a.removeChildren(measure);\n        if (!r0 || r0.left == r0.right)\n            return false;\n        return badBidiRects = r1.right - r0.right < 3;\n    }\n    let splitLinesAuto = '\\n\\nb'.split(/\\n/).length != 3 ? string => {\n        let pos = 0, result = [], l = string.length;\n        while (pos <= l) {\n            let nl = string.indexOf('\\n', pos);\n            if (nl == -1)\n                nl = string.length;\n            let line = string.slice(pos, string.charAt(nl - 1) == '\\r' ? nl - 1 : nl);\n            let rt = line.indexOf('\\r');\n            if (rt != -1) {\n                result.push(line.slice(0, rt));\n                pos += rt + 1;\n            } else {\n                result.push(line);\n                pos = nl + 1;\n            }\n        }\n        return result;\n    } : string => string.split(/\\r\\n?|\\n/);\n    let hasSelection = window.getSelection ? te => {\n        try {\n            return te.selectionStart != te.selectionEnd;\n        } catch (e) {\n            return false;\n        }\n    } : te => {\n        let range;\n        try {\n            range = te.ownerDocument.selection.createRange();\n        } catch (e) {\n        }\n        if (!range || range.parentElement() != te)\n            return false;\n        return range.compareEndPoints('StartToEnd', range) != 0;\n    };\n    let hasCopyEvent = (() => {\n        let e = a.elt('div');\n        if ('oncopy' in e)\n            return true;\n        e.setAttribute('oncopy', 'return;');\n        return typeof e.oncopy == 'function';\n    })();\n    let badZoomedRects = null;\n    function hasBadZoomedRects(measure) {\n        if (badZoomedRects != null)\n            return badZoomedRects;\n        let node = a.removeChildrenAndAdd(measure, a.elt('span', 'x'));\n        let normal = node.getBoundingClientRect();\n        let fromRange = a.range(node, 0, 1).getBoundingClientRect();\n        return badZoomedRects = Math.abs(normal.left - fromRange.left) > 1;\n    }\n    return {\n        dragAndDrop: dragAndDrop,\n        zeroWidthElement: zeroWidthElement,\n        hasBadBidiRects: hasBadBidiRects,\n        splitLinesAuto: splitLinesAuto,\n        hasSelection: hasSelection,\n        hasCopyEvent: hasCopyEvent,\n        hasBadZoomedRects: hasBadZoomedRects\n    };\n});"]}