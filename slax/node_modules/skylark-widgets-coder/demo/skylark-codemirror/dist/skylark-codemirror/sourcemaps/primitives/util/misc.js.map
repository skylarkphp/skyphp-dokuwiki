{"version":3,"sources":["primitives/util/misc.js"],"names":["define","copyObj","obj","target","overwrite","prop","hasOwnProperty","spaceStrs","lst","arr","length","nothing","nonASCIISingleCaseWordChar","isWordCharBasic","ch","test","toUpperCase","toLowerCase","extendingChars","isExtendingChar","charCodeAt","bind","f","args","Array","prototype","slice","call","arguments","apply","countColumn","string","end","tabSize","startIndex","startValue","search","i","n","nextTab","indexOf","Delayed","[object Object]","this","id","ms","clearTimeout","setTimeout","array","elt","scrollerGap","Pass","toString","sel_dontScroll","scroll","sel_mouse","origin","sel_move","findColumn","goal","pos","col","skipped","Math","min","spaceStr","push","map","out","insertSorted","value","score","priority","splice","createObj","base","props","inst","Object","create","isWordChar","helper","source","isEmpty","skipExtendingChars","str","dir","charAt","findFirst","pred","from","to","midF","mid","ceil","floor"],"mappings":"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","file":"../../../primitives/util/misc.js","sourcesContent":["define(function () {\n    'use strict';\n    function bind(f) {\n        let args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return f.apply(null, args);\n        };\n    }\n    function copyObj(obj, target, overwrite) {\n        if (!target)\n            target = {};\n        for (let prop in obj)\n            if (obj.hasOwnProperty(prop) && (overwrite !== false || !target.hasOwnProperty(prop)))\n                target[prop] = obj[prop];\n        return target;\n    }\n    function countColumn(string, end, tabSize, startIndex, startValue) {\n        if (end == null) {\n            end = string.search(/[^\\s\\u00a0]/);\n            if (end == -1)\n                end = string.length;\n        }\n        for (let i = startIndex || 0, n = startValue || 0;;) {\n            let nextTab = string.indexOf('\\t', i);\n            if (nextTab < 0 || nextTab >= end)\n                return n + (end - i);\n            n += nextTab - i;\n            n += tabSize - n % tabSize;\n            i = nextTab + 1;\n        }\n    }\n    class Delayed {\n        constructor() {\n            this.id = null;\n        }\n        set(ms, f) {\n            clearTimeout(this.id);\n            this.id = setTimeout(f, ms);\n        }\n    }\n    function indexOf(array, elt) {\n        for (let i = 0; i < array.length; ++i)\n            if (array[i] == elt)\n                return i;\n        return -1;\n    }\n    let scrollerGap = 30;\n    let Pass = {\n        toString: function () {\n            return 'CodeMirror.Pass';\n        }\n    };\n    let sel_dontScroll = { scroll: false }, sel_mouse = { origin: '*mouse' }, sel_move = { origin: '+move' };\n    function findColumn(string, goal, tabSize) {\n        for (let pos = 0, col = 0;;) {\n            let nextTab = string.indexOf('\\t', pos);\n            if (nextTab == -1)\n                nextTab = string.length;\n            let skipped = nextTab - pos;\n            if (nextTab == string.length || col + skipped >= goal)\n                return pos + Math.min(skipped, goal - col);\n            col += nextTab - pos;\n            col += tabSize - col % tabSize;\n            pos = nextTab + 1;\n            if (col >= goal)\n                return pos;\n        }\n    }\n    let spaceStrs = [''];\n    function spaceStr(n) {\n        while (spaceStrs.length <= n)\n            spaceStrs.push(lst(spaceStrs) + ' ');\n        return spaceStrs[n];\n    }\n    function lst(arr) {\n        return arr[arr.length - 1];\n    }\n    function map(array, f) {\n        let out = [];\n        for (let i = 0; i < array.length; i++)\n            out[i] = f(array[i], i);\n        return out;\n    }\n    function insertSorted(array, value, score) {\n        let pos = 0, priority = score(value);\n        while (pos < array.length && score(array[pos]) <= priority)\n            pos++;\n        array.splice(pos, 0, value);\n    }\n    function nothing() {\n    }\n    function createObj(base, props) {\n        let inst;\n        if (Object.create) {\n            inst = Object.create(base);\n        } else {\n            nothing.prototype = base;\n            inst = new nothing();\n        }\n        if (props)\n            copyObj(props, inst);\n        return inst;\n    }\n    let nonASCIISingleCaseWordChar = /[\\u00df\\u0587\\u0590-\\u05f4\\u0600-\\u06ff\\u3040-\\u309f\\u30a0-\\u30ff\\u3400-\\u4db5\\u4e00-\\u9fcc\\uac00-\\ud7af]/;\n    function isWordCharBasic(ch) {\n        return /\\w/.test(ch) || ch > '\\x80' && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch));\n    }\n    function isWordChar(ch, helper) {\n        if (!helper)\n            return isWordCharBasic(ch);\n        if (helper.source.indexOf('\\\\w') > -1 && isWordCharBasic(ch))\n            return true;\n        return helper.test(ch);\n    }\n    function isEmpty(obj) {\n        for (let n in obj)\n            if (obj.hasOwnProperty(n) && obj[n])\n                return false;\n        return true;\n    }\n    let extendingChars = /[\\u0300-\\u036f\\u0483-\\u0489\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u065e\\u0670\\u06d6-\\u06dc\\u06de-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07eb-\\u07f3\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0900-\\u0902\\u093c\\u0941-\\u0948\\u094d\\u0951-\\u0955\\u0962\\u0963\\u0981\\u09bc\\u09be\\u09c1-\\u09c4\\u09cd\\u09d7\\u09e2\\u09e3\\u0a01\\u0a02\\u0a3c\\u0a41\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a70\\u0a71\\u0a75\\u0a81\\u0a82\\u0abc\\u0ac1-\\u0ac5\\u0ac7\\u0ac8\\u0acd\\u0ae2\\u0ae3\\u0b01\\u0b3c\\u0b3e\\u0b3f\\u0b41-\\u0b44\\u0b4d\\u0b56\\u0b57\\u0b62\\u0b63\\u0b82\\u0bbe\\u0bc0\\u0bcd\\u0bd7\\u0c3e-\\u0c40\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0cbc\\u0cbf\\u0cc2\\u0cc6\\u0ccc\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0d3e\\u0d41-\\u0d44\\u0d4d\\u0d57\\u0d62\\u0d63\\u0dca\\u0dcf\\u0dd2-\\u0dd4\\u0dd6\\u0ddf\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0eb1\\u0eb4-\\u0eb9\\u0ebb\\u0ebc\\u0ec8-\\u0ecd\\u0f18\\u0f19\\u0f35\\u0f37\\u0f39\\u0f71-\\u0f7e\\u0f80-\\u0f84\\u0f86\\u0f87\\u0f90-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102d-\\u1030\\u1032-\\u1037\\u1039\\u103a\\u103d\\u103e\\u1058\\u1059\\u105e-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108d\\u109d\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b7-\\u17bd\\u17c6\\u17c9-\\u17d3\\u17dd\\u180b-\\u180d\\u18a9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193b\\u1a17\\u1a18\\u1a56\\u1a58-\\u1a5e\\u1a60\\u1a62\\u1a65-\\u1a6c\\u1a73-\\u1a7c\\u1a7f\\u1b00-\\u1b03\\u1b34\\u1b36-\\u1b3a\\u1b3c\\u1b42\\u1b6b-\\u1b73\\u1b80\\u1b81\\u1ba2-\\u1ba5\\u1ba8\\u1ba9\\u1c2c-\\u1c33\\u1c36\\u1c37\\u1cd0-\\u1cd2\\u1cd4-\\u1ce0\\u1ce2-\\u1ce8\\u1ced\\u1dc0-\\u1de6\\u1dfd-\\u1dff\\u200c\\u200d\\u20d0-\\u20f0\\u2cef-\\u2cf1\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua66f-\\ua672\\ua67c\\ua67d\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua825\\ua826\\ua8c4\\ua8e0-\\ua8f1\\ua926-\\ua92d\\ua947-\\ua951\\ua980-\\ua982\\ua9b3\\ua9b6-\\ua9b9\\ua9bc\\uaa29-\\uaa2e\\uaa31\\uaa32\\uaa35\\uaa36\\uaa43\\uaa4c\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uabe5\\uabe8\\uabed\\udc00-\\udfff\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe26\\uff9e\\uff9f]/;\n    function isExtendingChar(ch) {\n        return ch.charCodeAt(0) >= 768 && extendingChars.test(ch);\n    }\n    function skipExtendingChars(str, pos, dir) {\n        while ((dir < 0 ? pos > 0 : pos < str.length) && isExtendingChar(str.charAt(pos)))\n            pos += dir;\n        return pos;\n    }\n    function findFirst(pred, from, to) {\n        let dir = from > to ? -1 : 1;\n        for (;;) {\n            if (from == to)\n                return from;\n            let midF = (from + to) / 2, mid = dir < 0 ? Math.ceil(midF) : Math.floor(midF);\n            if (mid == from)\n                return pred(mid) ? from : to;\n            if (pred(mid))\n                to = mid;\n            else\n                from = mid + dir;\n        }\n    }\n    return {\n        bind: bind,\n        copyObj: copyObj,\n        countColumn: countColumn,\n        Delayed: Delayed,\n        indexOf: indexOf,\n        scrollerGap: scrollerGap,\n        Pass: Pass,\n        sel_dontScroll: sel_dontScroll,\n        sel_mouse: sel_mouse,\n        sel_move: sel_move,\n        findColumn: findColumn,\n        spaceStr: spaceStr,\n        lst: lst,\n        map: map,\n        insertSorted: insertSorted,\n        createObj: createObj,\n        isWordCharBasic: isWordCharBasic,\n        isWordChar: isWordChar,\n        isEmpty: isEmpty,\n        isExtendingChar: isExtendingChar,\n        skipExtendingChars: skipExtendingChars,\n        findFirst: findFirst\n    };\n});"]}