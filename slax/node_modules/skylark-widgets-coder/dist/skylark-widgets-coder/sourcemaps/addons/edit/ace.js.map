{"version":3,"sources":["addons/edit/ace.js"],"names":["define","langx","datax","ace","Addon","util","Coder","AddonAce","[object Object]","super","_init","i","coder","this","options","editor","$editors","$container","querySelectorAll","length","$textarea","querySelector","type","data","file","$aceContainer","document","createElement","appendChild","edit","editorOptions","clone","getSession","setMode","getMode","setOptions","$blockScrolling","Infinity","on","change","bind","params","content","getValue","emit","e","callback","aceEditor","setValue","editorChange","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,oBACA,cACA,cACA,aACA,eACD,SAAUC,EAAMC,EAAMC,EAAIC,EAAMC,EAAKC,GACpC,mBACMC,UAAiBH,EAGnBI,QACIC,MAAMC,QACN,IAIIC,EAJAC,EAAQC,KAAKD,MACbE,EAAUD,KAAKC,QAInBD,KAAKE,UAMDD,EAAUD,KAAKC,QAAnB,IACIE,EAAWJ,EAAMK,WAAWC,iBAAiB,iBACjD,IAAKP,EAAI,EAAGA,EAAIK,EAASG,OAAQR,IAAK,CAClC,IAAIS,EAAYJ,EAASL,GAAGU,cAAc,YACtCC,EAAOpB,EAAMqB,KAAKH,EAAW,cAC7BI,EAAOtB,EAAMqB,KAAKH,EAAW,cAC7BK,EAAgBC,SAASC,cAAc,OAC3CX,EAASL,GAAGiB,YAAYH,GACxBZ,KAAKE,OAAOO,GAAQnB,EAAI0B,KAAKJ,GAC7B,IAAIV,EAASF,KAAKE,OAAOO,GACrBQ,EAAgB7B,EAAM8B,MAAMjB,GAChCC,EAAOiB,aAAaC,QAAQ,YAAc5B,EAAK6B,QAAQZ,EAAME,IAC7DT,EAAOiB,aAAaG,WAAWL,GAC/Bf,EAAOqB,gBAAkBC,EAAAA,EAE7BzB,EAAM0B,GAAG,SAAUzB,KAAK0B,OAAOC,KAAK3B,MAvBrB,GAyBnBL,aAAaiC,GACT,MAAO,KACH,IAAI1B,EAASF,KAAKE,OAAO0B,EAAOnB,MAChCmB,EAAOC,QAAU3B,EAAO4B,WACxB9B,KAAKD,MAAMgC,KAAK,SAAUH,IAGlCjC,OAAOqC,EAAGC,GACN,IAAIL,EAASI,EAAEtB,KACXR,EAASF,KAAKE,OAAO0B,EAAOnB,MAC3BmB,EAAOM,YACRhC,EAAOiB,aAAagB,SAASP,EAAOC,SACpCD,EAAOM,UAAYhC,EACnBA,EAAOuB,GAAG,SAAUzB,KAAKoC,aAAaR,KAO9CS,0BACI,MAAO,OAGXC,uBACI,MAAO,OAMf,OAFA5C,EAAS6C,SAAS9C,GAEXC","file":"../../../addons/edit/ace.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-ace',\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\"\n], function (langx,datax,ace,Addon,util,Coder) {\n    'use strict';\n    class AddonAce extends Addon {\n        //constructor(coder, options) \n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editor = {};\n            //this.coder = coder;\n            //options = langx.clone(options);\n            //if (typeof //window.ace === 'undefined') {\n            //    retur//n;\n            // }\n            var options = this.options;\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                let $aceContainer = document.createElement('div');\n                $editors[i].appendChild($aceContainer);\n                this.editor[type] = ace.edit($aceContainer);\n                let editor = this.editor[type];\n                let editorOptions = langx.clone(options);\n                editor.getSession().setMode('ace/mode/' + util.getMode(type, file));\n                editor.getSession().setOptions(editorOptions);\n                editor.$blockScrolling = Infinity;\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                var editor = this.editor[params.type];\n                params.content = editor.getValue();\n                this.coder.emit('change', params);\n            };\n        }\n        change(e, callback) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            if (!params.aceEditor) {\n                editor.getSession().setValue(params.content);\n                params.aceEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            //params.content = editor.getValue();\n            //callback(null, params);\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"ace\";\n        }        \n    };\n\n    AddonAce.register(Coder);\n    \n    return AddonAce;\n});"]}