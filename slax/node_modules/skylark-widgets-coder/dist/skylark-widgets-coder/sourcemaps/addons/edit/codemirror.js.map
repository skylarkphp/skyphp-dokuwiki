{"version":3,"sources":["addons/edit/codemirror.js"],"names":["define","langx","datax","CodeMirror","Addon","util","Coder","AddonCodeMirror","options","highlightLine","lineNumbers","lineWrapping","foldGutter","gutters","pluginCssClass","[object Object]","super","_init","i","coder","this","editor","modemap","html","$editors","$container","querySelectorAll","length","$textarea","querySelector","type","data","file","fromTextArea","setOption","getMode","on","change","bind","params","content","getValue","emit","e","callback","cmEditor","setValue","editorChange","categoryName","addonName","register"],"mappings":";;;;;;;AAAAA,QACI,sBACA,oBACA,gCACA,cACA,aACA,cACA,kCACA,kCACA,gDACA,8CACA,4CAEA,2CAEA,iDAEA,yCACA,2CACA,2CACA,yCACA,4CACA,8CACA,6CAEA,8CACA,8CACA,8CAEA,+CACA,yCACA,oDAMA,yCAEA,6CACA,gDAEA,gDACA,qCAEA,sCACD,SAAUC,EAAMC,EAAMC,EAAWC,EAAMC,EAAKC,GAC3C,mBACMC,UAAyBH,EAG3BI,cACI,OACIC,eAAe,EAEfC,aAAa,EACbC,cAAc,EACdC,YAAY,EACZC,SAAU,yBAA0B,yBAEpCC,eAAiB,2BAIzBC,QACIC,MAAMC,QACN,IAIIC,EAJAC,EAAQC,KAAKD,MACbX,EAAUY,KAAKZ,QAInBY,KAAKC,UAEL,IAAIC,GAAYC,KAAQ,aAKpBC,GAJAhB,EAAUY,KAAKZ,QAIJW,EAAMM,WAAWC,iBAAiB,kBACjD,IAAKR,EAAI,EAAGA,EAAIM,EAASG,OAAQT,IAAK,CAClC,IAAIU,EAAYJ,EAASN,GAAGW,cAAc,YACtCC,EAAO5B,EAAM6B,KAAKH,EAAW,cAC7BI,EAAO9B,EAAM6B,KAAKH,EAAW,cACjCR,KAAKC,OAAOS,GAAQ3B,EAAW8B,aAAaL,EAAWpB,GACvDY,KAAKC,OAAOS,GAAMI,UAAU,OAAQ7B,EAAK8B,QAAQL,EAAME,EAAMV,IAEjEH,EAAMiB,GAAG,SAAUhB,KAAKiB,OAAOC,KAAKlB,MAjBrB,GAmBnBL,aAAawB,GACT,MAAO,KACH,IAAIlB,EAASD,KAAKC,OAAOkB,EAAOT,MAChCS,EAAOC,QAAUnB,EAAOoB,WACxBrB,KAAKD,MAAMuB,KAAK,SAAUH,IAGlCxB,OAAO4B,EAAGC,GACN,IAAIL,EAASI,EAAEZ,KACXV,EAASD,KAAKC,OAAOkB,EAAOT,MAC3BS,EAAOM,WACRxB,EAAOyB,SAASP,EAAOC,SACvBD,EAAOM,SAAWxB,EAClBA,EAAOe,GAAG,SAAUhB,KAAK2B,aAAaR,KAO9CS,0BACI,MAAO,OAGXC,uBACI,MAAO,cAMf,OAFA1C,EAAgB2C,SAAS5C,GAElBC","file":"../../../addons/edit/codemirror.js","sourcesContent":["define([\n    'skylark-langx/langx',\n    'skylark-domx-data',\n    'skylark-codemirror/CodeMirror',\n    \"../../Addon\",\n    '../../util',\n    \"../../Coder\",\n    \"skylark-codemirror/mode/xml/xml\",\n    \"skylark-codemirror/mode/css/css\",\n    \"skylark-codemirror/mode/javascript/javascript\",\n    \"skylark-codemirror/mode/htmlmixed/htmlmixed\",\n    \"skylark-codemirror/mode/markdown/markdown\",\n\n    \"skylark-codemirror/addon/comment/comment\",\n\n    \"skylark-codemirror/addon/selection/active-line\",\n\n    \"skylark-codemirror/addon/fold/foldcode\",\n    \"skylark-codemirror/addon/fold/foldgutter\",\n    \"skylark-codemirror/addon/fold/brace-fold\",\n    \"skylark-codemirror/addon/fold/xml-fold\",\n    \"skylark-codemirror/addon/fold/indent-fold\",\n    \"skylark-codemirror/addon/fold/markdown-fold\",\n    \"skylark-codemirror/addon/fold/comment-fold\",\n\n    \"skylark-codemirror/addon/edit/matchbrackets\",\n    \"skylark-codemirror/addon/edit/closebrackets\",\n    \"skylark-codemirror/addon/edit/trailingspace\",\n\n    \"skylark-codemirror/addon/search/searchcursor\",\n    \"skylark-codemirror/addon/search/search\",\n    \"skylark-codemirror/addon/search/match-highlighter\",\n\n\n    ///\"skylark-codemirror/addon/keymap/emacs\",\n    ///\"skylark-codemirror/addon/keymap/sublime\",\n\n    \"skylark-codemirror/addon/dialog/dialog\",\n\n    \"skylark-codemirror/addon/hint/anyword-hint\",\n    \"skylark-codemirror/addon/hint/javascript-hint\",\n\n    \"skylark-codemirror/addon/lint/javascript-lint\",\n    \"skylark-codemirror/addon/lint/lint\",\n\n    \"skylark-codemirror/addon/tern/tern\"\n], function (langx,datax,CodeMirror,Addon,util,Coder) {\n    'use strict';\n    class AddonCodeMirror  extends Addon{\n        //constructor(coder, options) \n\n        get options() {\n            return {\n                highlightLine: true,\n\n                lineNumbers: true,\n                lineWrapping: true,\n                foldGutter: true,\n                gutters: [\"CodeMirror-linenumbers\", \"CodeMirror-foldgutter\"],\n\n                pluginCssClass : \"coder-plugin-codemirror\"\n            }\n        }\n\n        _init() {\n            super._init();\n            var coder = this.coder,\n                options = this.options;\n\n            var priority = 1;\n            var i;\n            this.editor = {};\n            //this.coder = coder;\n            var modemap = { 'html': 'htmlmixed' };\n            var options = this.options;\n            //if (typeof window.CodeMirror === 'undefined') {\n            //    return;\n            //}\n            var $editors = coder.$container.querySelectorAll('.coder-editor');\n            for (i = 0; i < $editors.length; i++) {\n                let $textarea = $editors[i].querySelector('textarea');\n                let type = datax.data($textarea, 'coder-type');\n                let file = datax.data($textarea, 'coder-file');\n                this.editor[type] = CodeMirror.fromTextArea($textarea, options);\n                this.editor[type].setOption('mode', util.getMode(type, file, modemap));\n            }\n            coder.on('change', this.change.bind(this), priority);\n        }\n        editorChange(params) {\n            return () => {\n                var editor = this.editor[params.type];\n                params.content = editor.getValue();\n                this.coder.emit('change', params);\n            };\n        }\n        change(e, callback) {\n            var params = e.data,\n                editor = this.editor[params.type];\n            if (!params.cmEditor) {\n                editor.setValue(params.content);\n                params.cmEditor = editor;\n                editor.on('change', this.editorChange(params));\n            }\n            //params.content = editor.getValue();\n            //callback(null, params);\n        }\n\n\n        static get categoryName() {\n            return \"edit\";\n        }\n\n        static get addonName(){\n            return \"codemirror\";\n        }        \n    };\n\n    AddonCodeMirror.register(Coder);\n\n    return AddonCodeMirror;\n});"]}