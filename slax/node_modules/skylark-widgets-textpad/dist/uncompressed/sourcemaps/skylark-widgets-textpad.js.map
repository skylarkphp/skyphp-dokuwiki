{"version":3,"sources":["skylark-widgets-textpad.js"],"names":[],"mappingsfile":"../skylark-widgets-textpad.js","sourcesContent":["define('skylark-widgets-textpad/textpad',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n\treturn skylark.attach(\"widgets.textpad\",{});\r\n});\ndefine('skylark-widgets-textpad/Preview',[\r\n  \"skylark-langx/langx\",\r\n  \"skylark-domx-browser\",\r\n  \"skylark-domx-data\",\r\n  \"skylark-domx-eventer\",\r\n  \"skylark-domx-noder\",\r\n  \"skylark-domx-geom\",\r\n  \"skylark-domx-velm\",\r\n  \"skylark-domx-query\",\r\n  \"skylark-widgets-base/widget\"\r\n],function(langx,browser,datax,eventer,noder,geom,elmx,$,Widget){\r\n\r\n    'use strict';\r\n\r\n    var Preview = Widget.inherit({\r\n        klassName: \"Preview\",\r\n\r\n        pluginName : \"lark.codeeditor.preview\",\r\n\r\n        options : {\r\n            className : 'easyeditor',\r\n            css : null,\r\n            onLoaded : null,\r\n            theme : null\r\n        },\r\n\r\n        _init :   function ( ){\r\n            this.elem = this._elm;\r\n            this.className = this.options.className ;\r\n\r\n            this.css = this.options.css;\r\n            this.onLoaded = this.options.onLoaded;\r\n\r\n            this.randomString = \"Cls\"+Math.random().toString(36).substring(7);\r\n            this.theme = this.options.theme;\r\n\r\n            var doc = this.doc = this._elm.ownerDocument;\r\n            this.win = doc.defaultView || doc.parentWindow;\r\n\r\n            this.attachEvents();\r\n        },\r\n\r\n\r\n        attachEvents : function() {\r\n            this.bootstrap();\r\n            this.handleKeypress();\r\n            this.handleResizeImage();\r\n            this.utils();\r\n\r\n            if(this.onLoaded !== null) {\r\n                this.onLoaded.call(this);\r\n            }\r\n        },\r\n\r\n        // destory editor\r\n        detachEvents : function() {\r\n            var _this = this;\r\n\r\n            $(_this.elem).removeClass(_this.className).removeAttr('contenteditable').unwrap();\r\n        },\r\n\r\n        // Adding necessary classes and attributes in editor\r\n        bootstrap : function() {\r\n            var _this = this;\r\n            $(_this.elem).attr('contentEditable', true).addClass(_this.className).wrap('<div class=\"'+ _this.className +'-wrapper\"></div>');\r\n\r\n            this.$wrapperElem = $(_this.elem).parent();\r\n\r\n            if(_this.css !== null) {\r\n                $(_this.elem).css(_this.css);\r\n            }\r\n\r\n            this.containerClass = '.' + _this.className +'-wrapper';\r\n\r\n            if(typeof _this.elem === 'string') {\r\n                _this.elem = $(_this.elem).get(0);\r\n            }\r\n\r\n            if(_this.theme !== null) {\r\n                $(_this.elem).closest(_this.containerClass).addClass(_this.theme);\r\n            }\r\n        },\r\n\r\n\r\n        // enter and paste key handler\r\n        handleKeypress : function(){\r\n            var _this = this;\r\n\r\n            $(_this.elem).keydown(function(e) {\r\n                if(e.keyCode === 13 && _this.isSelectionInsideElement('li') === false) {\r\n     //               e.preventDefault();\r\n    //\r\n    //                if(e.shiftKey === true) {\r\n    //                    document.execCommand('insertHTML', false, '<br>');\r\n    //                }\r\n    //                else {\r\n    //                    document.execCommand('insertHTML', false, '<br><br>');\r\n    //                }\r\n    //\r\n    //                return false;\r\n                }\r\n            });\r\n\r\n            _this.elem.addEventListener('paste', function(e) {\r\n                e.preventDefault();\r\n                var text = e.clipboardData.getData('text/plain').replace(/\\n/ig, '<br>');\r\n                //document.execCommand('insertHTML', false, text);\r\n                _this.doc.execCommand('insertHTML', false, text);\r\n            });\r\n\r\n        },\r\n\r\n        isSelectionInsideElement : function(tagName) {\r\n            var sel, containerNode;\r\n            var win = this.win,\r\n                doc = this.doc;\r\n            tagName = tagName.toUpperCase();\r\n            if (win.getSelection) {\r\n                sel = win.getSelection();\r\n                if (sel.rangeCount > 0) {\r\n                    containerNode = sel.getRangeAt(0).commonAncestorContainer;\r\n                }\r\n            } else if ( (sel = doc.selection) && sel.type != \"Control\" ) {\r\n                containerNode = sel.createRange().parentElement();\r\n            }\r\n            while (containerNode) {\r\n                if (containerNode.nodeType == 1 && containerNode.tagName == tagName) {\r\n                    return true;\r\n                }\r\n                containerNode = containerNode.parentNode;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // allowing resizing image\r\n        handleResizeImage : function(){\r\n            var _this = this;\r\n\r\n            $('html').on(_this.containerClass + ' figure', 'click', function(event) {\r\n                event.stopPropagation();\r\n                $(this).addClass('is-resizable');\r\n            });\r\n\r\n            $('html').on(_this.containerClass + ' figure.is-resizable', 'mousemove', function(event) {\r\n                $(this).find('img').css({ 'width' : $(this).width() + 'px' });\r\n            });\r\n\r\n            $(_this.doc).click(function() {\r\n                $(_this.elem).find('figure').removeClass('is-resizable');\r\n            });\r\n        },\r\n\r\n        // get selection\r\n        getSelection : function(){\r\n            if (this.win.getSelection) {\r\n                var selection = this.win.getSelection();\r\n\r\n                if (selection.rangeCount) {\r\n                    return selection;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        },\r\n\r\n        // remove formatting\r\n        removeFormatting : function(arg){\r\n            var _this = this;\r\n            var inFullArea = arg.inFullArea;\r\n\r\n            if(_this.isSelectionOutsideOfEditor() === true) {\r\n                return false;\r\n            }\r\n\r\n            if(inFullArea === false) {\r\n                var selection = _this.getSelection();\r\n                var selectedText = selection.toString();\r\n\r\n                if(selection && selectedText.length > 0) {\r\n\r\n                    var range = selection.getRangeAt(0);\r\n                    var $parent = $(range.commonAncestorContainer.parentNode);\r\n\r\n                    if($parent.attr('class') === _this.className || $parent.attr('class') === _this.className + '-wrapper') {\r\n                        var node = _this.doc.createElement('span');\r\n                        $(node).attr('data-value', 'temp').html(selectedText.replace(/\\n/ig, '<br>'));\r\n                        range.deleteContents();\r\n                        range.insertNode(node);\r\n\r\n                        $('[data-value=\"temp\"]').contents().unwrap();\r\n                    }\r\n                    else {\r\n\r\n                        var topMostParent;\r\n                        var hasParentNode = false;\r\n                        $.each($parent.parentsUntil(_this.elem), function(index, el) {\r\n                            topMostParent = el;\r\n                            hasParentNode = true;\r\n                        });\r\n\r\n                        if(hasParentNode === true) {\r\n                            $(topMostParent).html($(topMostParent).text().replace(/\\n/ig, '<br>')).contents().unwrap();\r\n                        }\r\n                        else {\r\n                            $parent.contents().unwrap();\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n            else {\r\n                $(_this.elem).html($(_this.elem).text().replace(/\\n/ig, '<br>'));\r\n            }\r\n\r\n            // _this.removeEmptyTags();\r\n        },\r\n\r\n        // removing empty tags\r\n        removeEmptyTags : function(){\r\n            var _this = this;\r\n            $(_this.elem).html( $(_this.elem).html().replace(/(<(?!\\/)[^>]+>)+(<\\/[^>]+>)+/, '') );\r\n        },\r\n\r\n        // remove block elemenet from selection\r\n        removeBlockElementFromSelection : function(selection, removeBr){\r\n            var _this = this;\r\n            var result;\r\n\r\n            removeBr = removeBr === undefined ? false : removeBr;\r\n            var removeBrNode = '';\r\n            if(removeBr === true) {\r\n                removeBrNode = ', br';\r\n            }\r\n\r\n            var range = selection.getRangeAt(0);\r\n            var selectedHtml = range.cloneContents();\r\n            var temp = _this.doc.createElement('temp');\r\n            $(temp).html(selectedHtml);\r\n            $(temp).find('h1, h2, h3, h4, h5, h6, p, div' + removeBrNode).each(function() { $(this).replaceWith(this.childNodes); });\r\n            result = $(temp).html();\r\n\r\n            return result;\r\n        },\r\n\r\n        // wrap selction with a tag\r\n        wrapSelectionWithNodeName : function(arg){\r\n            var _this = this;\r\n            if(_this.isSelectionOutsideOfEditor() === true) {\r\n                return false;\r\n            }\r\n\r\n            var node = {\r\n                name: 'span',\r\n                blockElement: false,\r\n                style: null,\r\n                class: null,\r\n                attribute: null,\r\n                keepHtml: false\r\n            };\r\n\r\n            if(typeof arg === 'string') {\r\n                node.name = arg;\r\n            }\r\n            else {\r\n                node.name = arg.nodeName || node.name;\r\n                node.blockElement = arg.blockElement || node.blockElement;\r\n                node.style = arg.style || node.style;\r\n                node.class = arg.class || node.class;\r\n                node.attribute = arg.attribute || node.attribute;\r\n                node.keepHtml = arg.keepHtml || node.keepHtml;\r\n            }\r\n\r\n            var selection = _this.getSelection();\r\n\r\n            if(selection && selection.toString().length > 0 && selection.rangeCount) {\r\n                // checking if already wrapped\r\n                var isWrapped = _this.isAlreadyWrapped(selection, node);\r\n\r\n                // wrap node\r\n                var range = selection.getRangeAt(0).cloneRange();\r\n                var tag = _this.doc.createElement(node.name);\r\n\r\n                    // adding necessary attribute to tag\r\n                    if(node.style !== null || node.class !== null || node.attribute !== null) {\r\n                        tag = _this.addAttribute(tag, node);\r\n                    }\r\n\r\n                // if selection contains html, surround contents has some problem with pre html tag and raw text selection\r\n                if(_this.selectionContainsHtml(range)) {\r\n                    range = selection.getRangeAt(0);\r\n\r\n                    if(node.keepHtml === true) {\r\n                        var clonedSelection = range.cloneContents();\r\n                        var div = _this.doc.createElement('div');\r\n                        div.appendChild(clonedSelection);\r\n                        $(tag).html(div.innerHTML);\r\n                    }\r\n                    else {\r\n                        tag.textContent = selection.toString();\r\n                    }\r\n\r\n                    range.deleteContents();\r\n                    range.insertNode(tag);\r\n\r\n                    if(range.commonAncestorContainer.localName === node.name) {\r\n                        $(range.commonAncestorContainer).contents().unwrap();\r\n                        _this.removeEmptyTags();\r\n                    }\r\n                }\r\n                else {\r\n                    range.surroundContents(tag);\r\n                    selection.removeAllRanges();\r\n                    selection.addRange(range);\r\n                }\r\n\r\n                if(isWrapped === true) {\r\n                    _this.removeWrappedDuplicateTag(tag);\r\n                }\r\n\r\n                _this.removeEmptyTags();\r\n                //selection.removeAllRanges();\r\n                selection.select();\r\n                range.select();\r\n            }\r\n        },\r\n\r\n        // wrap selection with unordered list\r\n        wrapSelectionWithList : function(tagname){\r\n            var _this = this;\r\n            tagname = tagname || 'ul';\r\n\r\n            // preventing outside selection\r\n            if(_this.isSelectionOutsideOfEditor() === true) {\r\n                return false;\r\n            }\r\n\r\n            // if text selected\r\n            var selection = _this.getSelection();\r\n            if(selection && selection.toString().length > 0 && selection.rangeCount) {\r\n                var selectedHtml = _this.removeBlockElementFromSelection(selection, true);\r\n                var listArray = selectedHtml.split('\\n').filter(function(v){return v!=='';});\r\n                var wrappedListHtml = $.map(listArray, function(item) {\r\n                    return '<li>' + $.trim(item) + '</li>';\r\n                });\r\n\r\n                var node = _this.doc.createElement(tagname);\r\n                $(node).html(wrappedListHtml);\r\n\r\n                var range = selection.getRangeAt(0);\r\n                range.deleteContents();\r\n                range.insertNode(node);\r\n\r\n                selection.removeAllRanges();\r\n            }\r\n\r\n        },\r\n\r\n        // if selection contains html tag, surround content fails if selection contains html\r\n        selectionContainsHtml : function(range){\r\n            var _this = this;\r\n            if(range.startContainer.parentNode.className === _this.className + '-wrapper') return false;\r\n            else return true;\r\n        },\r\n\r\n        // if already wrapped with same tag\r\n        isAlreadyWrapped : function(selection, node){\r\n            var _this = this;\r\n            var range = selection.getRangeAt(0);\r\n            var el = $(range.commonAncestorContainer);\r\n            var result = false;\r\n\r\n            if( el.parent().prop('tagName').toLowerCase() === node.name && el.parent().hasClass(_this.className) === false ) {\r\n                result = true;\r\n            }\r\n            else if(node.blockElement === true) {\r\n                $.each(el.parentsUntil(_this.elem), function(index, el) {\r\n                    var tag = el.tagName.toLowerCase();\r\n                    if( $.inArray(tag, ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']) !== -1 ) {\r\n                        result = true;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                $.each(el.parentsUntil(_this.elem), function(index, el) {\r\n                    var tag = el.tagName.toLowerCase();\r\n                    if( tag === node.name ) {\r\n                        result = true;\r\n                    }\r\n                });\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        // remove wrap if already wrapped with same tag\r\n        removeWrappedDuplicateTag : function(tag){\r\n            var _this = this;\r\n            var tagName = tag.tagName;\r\n\r\n            $(tag).unwrap();\r\n\r\n            if($(tag).prop('tagName') === tagName && $(tag).parent().hasClass(_this.className) === false && $(tag).parent().hasClass(_this.className + '-wrapper')) {\r\n                $(tag).unwrap();\r\n            }\r\n        },\r\n\r\n        // adding attribute in tag\r\n        addAttribute : function(tag, node){\r\n            if(node.style !== null) {\r\n                $(tag).attr('style', node.style);\r\n            }\r\n\r\n            if(node.class !== null) {\r\n                $(tag).addClass(node.class);\r\n            }\r\n\r\n            if(node.attribute !== null) {\r\n                if($.isArray(node.attribute) === true) {\r\n                    $(tag).attr(node.attribute[0], node.attribute[1]);\r\n                }\r\n                else {\r\n                    $(tag).attr(node.attribute);\r\n                }\r\n            }\r\n\r\n            return tag;\r\n        },\r\n\r\n        // insert a node into cursor point in editor\r\n        insertAtCaret : function(node){\r\n            var _this = this;\r\n            if(_this.isSelectionOutsideOfEditor() === true) {\r\n                return false;\r\n            }\r\n\r\n            if(_this.getSelection()) {\r\n                var range = _this.getSelection().getRangeAt(0);\r\n                range.insertNode(node);\r\n            }\r\n            else {\r\n                $(node).appendTo(_this.elem);\r\n            }\r\n        },\r\n\r\n        // checking if selection outside of editor or not\r\n        isSelectionOutsideOfEditor : function(){\r\n            //return false;\r\n            return !this.elementContainsSelection(this.elem);\r\n        },\r\n\r\n        isActive : function(){\r\n            //return false;\r\n            return this.elementContainsSelection(this.elem);\r\n        },\r\n\r\n        readonly : function(readonly) {\r\n            if (readonly === undefined) {\r\n                return $(this.elem).attr('contentEditable');\r\n            } else {\r\n                $(this.elem).attr('contentEditable', readonly && true);\r\n                return this;\r\n            }\r\n        },\r\n\r\n        // node contains in containers or not\r\n        isOrContains : function(node, container) {\r\n            while (node) {\r\n                if (node === container) {\r\n                    return true;\r\n                }\r\n                node = node.parentNode;\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // selected text is inside container\r\n        elementContainsSelection : function(el) {\r\n            var _this = this;\r\n            var sel;\r\n            if (this.win.getSelection) {\r\n                sel = this.win.getSelection();\r\n                if (sel.rangeCount > 0) {\r\n                    for (var i = 0; i < sel.rangeCount; ++i) {\r\n                        if (!_this.isOrContains(sel.getRangeAt(i).commonAncestorContainer, el)) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                }\r\n            } else if ( (sel = _this.doc.selection) && sel.type !== \"Control\") {\r\n                return _this.isOrContains(sel.createRange().parentElement(), el);\r\n            }\r\n            return false;\r\n        },\r\n\r\n        // insert html chunk into editor's temp tag\r\n        insertHtml : function(html){\r\n            var _this = this;\r\n            $(_this.elem).find('temp').html(html);\r\n        },\r\n\r\n        // utility of editor\r\n        utils : function(){\r\n            var _this = this;\r\n\r\n            $('html').on('.'+ _this.className +'-modal-close', 'click', function(event) {\r\n                event.preventDefault();\r\n                _this.closeModal('#' + $(this).closest('.'+ _this.className + '-modal').attr('id'));\r\n            });\r\n\r\n            if( $('.' + _this.randomString + '-bind').length > 0 ) {\r\n                var bindData;\r\n                $('html').on(_this.elem, 'click keyup', function() {\r\n                    var el = _this.elem;\r\n                    clearTimeout(bindData);\r\n                    bindData = setTimeout(function(){ $('.' + _this.randomString + '-bind').html( $(el).html() ); }, 250);\r\n                });\r\n            }\r\n\r\n            $(_this.doc).click(function(event) {\r\n                $('.' + _this.className).closest('.' + _this.className + '-wrapper').find('.' + _this.className + '-toolbar > ul > li > ul').hide();\r\n            });\r\n        },\r\n\r\n        // youtube video id from url\r\n        getYoutubeVideoIdFromUrl : function(url){\r\n            if(url.length === 0) return false;\r\n            var videoId = '';\r\n            url = url.replace(/(>|<)/gi,'').split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\r\n            if(url[2] !== undefined) {\r\n                videoId = url[2].split(/[^0-9a-z_\\-]/i);\r\n                videoId = videoId[0];\r\n            }\r\n            else {\r\n                videoId = url;\r\n            }\r\n            return videoId;\r\n        },\r\n\r\n        // opening modal window\r\n        openModal : function(selector){\r\n            var temp = this.doc.createElement('temp');\r\n            temp.textContent = '.';\r\n            this.insertAtCaret(temp);\r\n\r\n            $(selector).removeClass('is-hidden');\r\n        },\r\n\r\n        // closing modal window\r\n        closeModal : function(selector){\r\n            var _this = this;\r\n\r\n            $(selector).addClass('is-hidden').find('input').val('');\r\n            $(selector).find('.' + _this.className + '-modal-content-body-loader').css('width', '0');\r\n            var $temp = $(this.elem).find('temp');\r\n\r\n            if($temp.html() === '.') {\r\n                $temp.remove();\r\n            }\r\n            else {\r\n                $temp.contents().unwrap();\r\n            }\r\n\r\n            $(this.elem).focus();\r\n        },\r\n\r\n        bold : function(){\r\n           this.doc.execCommand(\"Bold\");\r\n           //this.wrapSelectionWithNodeName({ nodeName: 'strong', keepHtml: true });\r\n        },\r\n\r\n        italic : function(){\r\n           this.doc.execCommand(\"Italic\");\r\n           //this.wrapSelectionWithNodeName({ nodeName: 'em', keepHtml: true });\r\n        },\r\n\r\n        strike : function(){\r\n           this.doc.execCommand(\"strikethrough\");\r\n           //this.wrapSelectionWithNodeName({ nodeName: 'strong', keepHtml: true });\r\n        },\r\n\r\n        listOl : function(){\r\n           this.doc.execCommand(\"insertorderedlist\");\r\n           //this.wrapSelectionWithNodeName({ nodeName: 'strong', keepHtml: true });\r\n        },\r\n\r\n        listUl : function(){\r\n           this.doc.execCommand(\"insertunorderedlist\");\r\n           //this.wrapSelectionWithNodeName({ nodeName: 'strong', keepHtml: true });\r\n        },\r\n\r\n        h2 : function(){\r\n           this.doc.execCommand(\"h2\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'h2', blockElement: true });\r\n        },\r\n\r\n        h3 : function(){\r\n           this.doc.execCommand(\"h3\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'h3', blockElement: true });\r\n        },\r\n\r\n        h4 : function(){\r\n           this.doc.execCommand(\"h4\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'h4', blockElement: true });\r\n        },\r\n\r\n        x : function(){\r\n           this.doc.execCommand(\"h4\");\r\n        },\r\n\r\n        alignleft : function(){\r\n           this.doc.execCommand(\"justifyleft\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: left', class: 'text-left', keepHtml: true });\r\n        },\r\n\r\n        aligncenter : function(){\r\n           this.doc.execCommand(\"justifycenter\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: center', class: 'text-center', keepHtml: true });\r\n        },\r\n\r\n        alignright : function(){\r\n           this.doc.execCommand(\"justifyright\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: right', class: 'text-right', keepHtml: true });\r\n        },\r\n\r\n        alignfull : function(){\r\n           this.doc.execCommand(\"justifyfull\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'p', style: 'text-align: right', class: 'text-right', keepHtml: true });\r\n        },\r\n\r\n        blockquote : function(){\r\n           this.doc.execCommand(\"blockquote\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'blockquote' });\r\n        },\r\n\r\n        code : function(){\r\n           this.doc.execCommand(\"p\");\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'pre' });\r\n        },\r\n\r\n        inserthorizontalrule : function(){\r\n           this.doc.execCommand(\"inserthorizontalrule\");\r\n        },\r\n\r\n\r\n        image : function(){\r\n           var url = prompt('Insert Image URL','http://');\r\n           var urlRegex = new RegExp('^((http|https)://|(mailto:)|(//))[a-z0-9]', 'i');\r\n           if (url !== null && url !== '' && url !== 'http://' && urlRegex.test(url)) {\r\n               this.doc.execCommand(\"insertimage\", false, url);\r\n           }\r\n        },\r\n\r\n        link : function(){\r\n            var url = prompt('Insert URL','http://');\r\n            var urlRegex = new RegExp('^((http|https)://|(mailto:)|(//))[a-z0-9]', 'i');\r\n            if (url !== null && url !== '' && url !== 'http://' && urlRegex.test(url)) {\r\n               this.doc.execCommand(\"createlink\", false, url);\r\n            }\r\n            //this.wrapSelectionWithNodeName({ nodeName: 'a', attribute: ['href', prompt('Insert link', '')] });\r\n        },\r\n\r\n        indent : function(){\r\n           this.doc.execCommand(\"indent\");\r\n        },\r\n\r\n        outdent : function(){\r\n           this.doc.execCommand(\"outdent\");\r\n        },\r\n\r\n\r\n        toMd : function() {\r\n            return  toMarkdown(this.elem.innerHTML);\r\n        }\r\n    });\r\n\r\n    return Preview;\r\n});\r\n\ndefine('skylark-widgets-textpad/helper',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n\t\"./textpad\"\r\n],function(langx,$,textpad) {\r\n    var helper = {\r\n        debounce : function(func, wait, immediate) {\r\n            var timeout;\r\n            return function() {\r\n                var context = this, args = arguments;\r\n                var later = function() {\r\n                    timeout = null;\r\n                    if (!immediate) func.apply(context, args);\r\n                };\r\n                var callNow = immediate && !timeout;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(later, wait);\r\n                if (callNow) func.apply(context, args);\r\n            };\r\n        },\r\n        options : function(string) {\r\n\r\n            if (langx.type(string)!='string') return string;\r\n\r\n            if (string.indexOf(':') != -1 && string.trim().substr(-1) != '}') {\r\n                string = '{'+string+'}';\r\n            }\r\n\r\n            var start = (string ? string.indexOf(\"{\") : -1), options = {};\r\n\r\n            if (start != -1) {\r\n                try {\r\n                    options = helper.str2json(string.substr(start));\r\n                } catch (e) {}\r\n            }\r\n\r\n            return options;\r\n        },\r\n        str2json : function(str, notevil) {\r\n            try {\r\n                if (notevil) {\r\n                    return JSON.parse(str\r\n                        // wrap keys without quote with valid double quote\r\n                        .replace(/([\\$\\w]+)\\s*:/g, function(_, $1){return '\"'+$1+'\":';})\r\n                        // replacing single quote wrapped ones to double quote\r\n                        .replace(/'([^']+)'/g, function(_, $1){return '\"'+$1+'\"';})\r\n                    );\r\n                } else {\r\n                    return (new Function(\"\", \"var json = \" + str + \"; return JSON.parse(JSON.stringify(json));\"))();\r\n                }\r\n            } catch(e) { return false; }\r\n        }\r\n    };\r\n\r\n\r\n    return textpad.helper = helper;\r\n\r\n  \t\r\n });\ndefine('skylark-widgets-textpad/editor',[\r\n    \"skylark-langx/langx\",\r\n    \"skylark-domx-query\",\r\n    \"skylark-widgets-base/widget\",\r\n    \"skylark-codemirror/CodeMirror\",\r\n    \"skylark-easyeditor/EasyEditor\",\r\n    \"./textpad\",\r\n    \"./Preview\",\r\n    \"./helper\"\r\n],function(langx, $, Widget,CodeMirror,EasyEditor,textpad,Preview,helper){\r\n    var Editor = Widget.inherit({\r\n        options: {\r\n            addons       : [],\r\n            iframe       : false,\r\n            mode         : 'split',\r\n            markdown     : false,\r\n            autocomplete : true,\r\n            height       : 500,\r\n            maxsplitsize : 1000,\r\n            codemirror   : { \r\n                            mode: 'htmlmixed', \r\n                            lineWrapping: true, \r\n                            dragDrop: false, \r\n                            autoCloseTags: true, \r\n                            matchTags: true, \r\n                            autoCloseBrackets: true, \r\n                            matchBrackets: true, \r\n                            indentUnit: 4, \r\n                            indentWithTabs: false, \r\n                            tabSize: 4, \r\n                            hintOptions: {\r\n                                completionSingle:\r\n                                false\r\n                            } \r\n                            },\r\n            toolbar      : [ \r\n                            'bold', \r\n                            'italic', \r\n                            'strike', \r\n                            'link', \r\n                            'image', \r\n                            'blockquote', \r\n                            'listUl', \r\n                            'listOl' \r\n                            ],\r\n            lblPreview   : 'Preview',\r\n            lblCodeview  : 'HTML',\r\n            lblMarkedview: 'Markdown',\r\n\r\n            template : [\r\n                '<div class=\"uk-htmleditor uk-clearfix\" data-mode=\"split\">',\r\n                    '<div class=\"uk-htmleditor-navbar\">',\r\n                        '<ul class=\"uk-htmleditor-navbar-nav uk-htmleditor-toolbar\"></ul>',\r\n                        '<div class=\"uk-htmleditor-navbar-flip\">',\r\n                            '<ul class=\"uk-htmleditor-navbar-nav\">',\r\n                                '<li class=\"uk-htmleditor-button-code\"><a>{:lblCodeview}</a></li>',\r\n                                '<li class=\"uk-htmleditor-button-preview\"><a>{:lblPreview}</a></li>',\r\n                                '<li><a data-htmleditor-button=\"fullscreen\"><i class=\"fa fa-expand\"></i></a></li>',\r\n                            '</ul>',\r\n                        '</div>',\r\n                    '</div>',\r\n                    '<div class=\"uk-htmleditor-content\">',\r\n                        '<div class=\"uk-htmleditor-code\"></div>',\r\n                        '<div class=\"uk-htmleditor-preview\"><div></div></div>',\r\n                    '</div>',\r\n                '</div>'\r\n            ].join('')\r\n\r\n        },\r\n\r\n\r\n        _init: function() {\r\n\r\n            var $this = this, \r\n                tpl = this.options.template;\r\n\r\n            this.element = $(this._elm); // TODO\r\n\r\n            this.options.iframe = true;\r\n            this.CodeMirror = this.options.CodeMirror || CodeMirror;\r\n            this.buttons    = {};\r\n\r\n\r\n            this.addButtons({\r\n                fullscreen: {\r\n                    title  : 'Fullscreen',\r\n                    label  : '<i class=\"fa fa-expand\"></i>'\r\n                },\r\n                bold : {\r\n                    title  : 'Bold',\r\n                    label  : '<i class=\"fa fa-bold\"></i>'\r\n                },\r\n                italic : {\r\n                    title  : 'Italic',\r\n                    label  : '<i class=\"fa fa-italic\"></i>'\r\n                },\r\n                strike : {\r\n                    title  : 'Strikethrough',\r\n                    label  : '<i class=\"fa fa-strikethrough\"></i>'\r\n                },\r\n                blockquote : {\r\n                    title  : 'Blockquote',\r\n                    label  : '<i class=\"fa fa-quote-right\"></i>'\r\n                },\r\n                link : {\r\n                    title  : 'Link',\r\n                    label  : '<i class=\"fa fa-link\"></i>'\r\n                },\r\n                image : {\r\n                    title  : 'Image',\r\n                    label  : '<i class=\"fa fa-image\"></i>'\r\n                },\r\n                listUl : {\r\n                    title  : 'Unordered List',\r\n                    label  : '<i class=\"fa fa-list-ul\"></i>'\r\n                },\r\n                listOl : {\r\n                    title  : 'Ordered List',\r\n                    label  : '<i class=\"fa fa-list-ol\"></i>'\r\n                }\r\n\r\n            });\r\n\r\n\r\n            tpl = tpl.replace(/\\{:lblPreview}/g, this.options.lblPreview);\r\n            tpl = tpl.replace(/\\{:lblCodeview}/g, this.options.lblCodeview);\r\n\r\n            this.htmleditor = $(tpl);\r\n            this.content    = this.htmleditor.find('.uk-htmleditor-content');\r\n            this.toolbar    = this.htmleditor.find('.uk-htmleditor-toolbar');\r\n            $(this.toolbar)\r\n                 .attr('unselectable', 'on')\r\n                 .css('user-select', 'none')\r\n                 .on('selectstart', false);\r\n            this.preview    = this.htmleditor.find('.uk-htmleditor-preview').children().eq(0);\r\n            this.code       = this.htmleditor.find('.uk-htmleditor-code');\r\n\r\n            this.element.before(this.htmleditor).appendTo(this.code);\r\n            this.editor = this.CodeMirror.fromTextArea(this.element[0], this.options.codemirror);\r\n            this.editor.htmleditor = this;\r\n            this.editor.on('change', helper.debounce(function() { $this.render(); }, 150));\r\n            this.editor.on('change', function() {\r\n                $this.editor.save();\r\n                $this.element.trigger('input');\r\n            });\r\n            this.code.find('.CodeMirror').css('height', this.options.height);\r\n\r\n            // iframe mode?\r\n            if (this.options.iframe) {\r\n\r\n                this.iframe = $('<iframe class=\"uk-htmleditor-iframe\" frameborder=\"0\" scrolling=\"auto\" height=\"100\" width=\"100%\"></iframe>');\r\n                this.preview.append(this.iframe);\r\n\r\n                // must open and close document object to start using it!\r\n                this.iframe[0].contentWindow.document.open();\r\n                this.iframe[0].contentWindow.document.close();\r\n\r\n                this.preview.container = $(this.iframe[0].contentWindow.document).find('body');\r\n\r\n                // append custom stylesheet\r\n                if (typeof(this.options.iframe) === 'string') {\r\n                    this.preview.container.parent().append('<link rel=\"stylesheet\" href=\"'+this.options.iframe+'\">');\r\n                }\r\n\r\n            } else {\r\n                this.preview.container = this.preview;\r\n            }\r\n            this.previewer   = this.preview.container.plugin(\"lark.codeeditor.preview\");\r\n\r\n            //$win.on('resize load', helper.debounce(function() { $this.fit(); }, 200));\r\n            $(window).on('resize load', helper.debounce(function() { $this.fit(); }, 200));\r\n\r\n            var previewContainer = this.iframe ? this.preview.container:$this.preview.parent(),\r\n                codeContent      = this.code.find('.CodeMirror-sizer'),\r\n                codeScroll       = this.code.find('.CodeMirror-scroll').on('scroll', helper.debounce(function() {\r\n\r\n                    if ($this.htmleditor.attr('data-mode') == 'tab') return;\r\n\r\n                    // calc position\r\n                    var codeHeight      = codeContent.height() - codeScroll.height(),\r\n                        previewHeight   = previewContainer[0].scrollHeight - ($this.iframe ? $this.iframe.height() : previewContainer.height()),\r\n                        ratio           = previewHeight / codeHeight,\r\n                        previewPosition = codeScroll.scrollTop() * ratio;\r\n\r\n                    // apply new scroll\r\n                    previewContainer.scrollTop(previewPosition);\r\n\r\n                }, 10));\r\n\r\n            this.htmleditor.on('click', '.uk-htmleditor-button-code, .uk-htmleditor-button-preview', function(e) {\r\n\r\n                e.preventDefault();\r\n\r\n                if ($this.htmleditor.attr('data-mode') == 'tab') {\r\n\r\n                    $this.htmleditor.find('.uk-htmleditor-button-code, .uk-htmleditor-button-preview').removeClass('uk-active').filter(this).addClass('uk-active');\r\n\r\n                    $this.activetab = $(this).hasClass('uk-htmleditor-button-code') ? 'code' : 'preview';\r\n\r\n                    if ($this.activetab == 'code') {\r\n                        //var visualEditor = $this.$preview.data('plugin_easyEditor');\r\n                        $this.editor.setValue($this.previewer.toMd());\r\n\r\n                    }\r\n                    $this.htmleditor.attr('data-active-tab', $this.activetab);\r\n                    $this.editor.refresh();\r\n                }\r\n            });\r\n\r\n            // toolbar actions\r\n            this.htmleditor.on('click', 'a[data-htmleditor-button]', function() {\r\n\r\n                if (!$this.code.is(':visible')) {\r\n                    //var editor = $this.$preview.data('plugin_easyEditor');\r\n                    $this.previewer[ $(this).data('htmleditor-button')]();\r\n                    return;\r\n                }\r\n\r\n                $this.trigger('action.' + $(this).data('htmleditor-button'), [$this.editor]);\r\n            });\r\n\r\n            this.preview.parent().css('height', this.code.height());\r\n\r\n            // autocomplete\r\n            if (this.options.autocomplete && this.CodeMirror.showHint && this.CodeMirror.hint && this.CodeMirror.hint.html) {\r\n\r\n                this.editor.on('inputRead', helper.debounce(function() {\r\n                    var doc = $this.editor.getDoc(), POS = doc.getCursor(), mode = $this.CodeMirror.innerMode($this.editor.getMode(), $this.editor.getTokenAt(POS).state).mode.name;\r\n\r\n                    if (mode == 'xml') { //html depends on xml\r\n\r\n                        var cur = $this.editor.getCursor(), token = $this.editor.getTokenAt(cur);\r\n\r\n                        if (token.string.charAt(0) == '<' || token.type == 'attribute') {\r\n                            $this.CodeMirror.showHint($this.editor, $this.CodeMirror.hint.html, { completeSingle: false });\r\n                        }\r\n                    }\r\n                }, 100));\r\n            }\r\n\r\n            this.addons = [];\r\n            (this.options.addons.length ? this.options.addons : Object.keys(addons)).forEach(function(addon) {\r\n\r\n                if (addons[addon].init) {\r\n                    addons[addon].init($this);\r\n                    $this.addons[addon] = true;\r\n                }\r\n\r\n            });\r\n\r\n\r\n            this.debouncedRedraw = helper.debounce(function () { $this.redraw(); }, 5);\r\n\r\n            //this.on('init.uk.component', function() {\r\n                $this.debouncedRedraw();\r\n            //});\r\n\r\n            this.element.attr('data-uk-check-display', 1).on('display.uk.check', function(e) {\r\n                if (this.htmleditor.is(\":visible\")) this.fit();\r\n            }.bind(this));\r\n\r\n            //editors.push(this);\r\n        },\r\n\r\n        addButton: function(name, button) {\r\n            this.buttons[name] = button;\r\n        },\r\n\r\n        addButtons: function(buttons) {\r\n            langx.extend(this.buttons, buttons);\r\n        },\r\n\r\n        replaceInPreview: function(regexp, callback) {\r\n\r\n            var editor = this.editor, results = [], value = editor.getValue(), offset = -1, index = 0;\r\n\r\n            this.currentvalue = this.currentvalue.replace(regexp, function() {\r\n\r\n                offset = value.indexOf(arguments[0], ++offset);\r\n\r\n                var match  = {\r\n                    matches: arguments,\r\n                    from   : translateOffset(offset),\r\n                    to     : translateOffset(offset + arguments[0].length),\r\n                    replace: function(value) {\r\n                        editor.replaceRange(value, match.from, match.to);\r\n                    },\r\n                    inRange: function(cursor) {\r\n\r\n                        if (cursor.line === match.from.line && cursor.line === match.to.line) {\r\n                            return cursor.ch >= match.from.ch && cursor.ch < match.to.ch;\r\n                        }\r\n\r\n                        return  (cursor.line === match.from.line && cursor.ch   >= match.from.ch) ||\r\n                                (cursor.line >   match.from.line && cursor.line <  match.to.line) ||\r\n                                (cursor.line === match.to.line   && cursor.ch   <  match.to.ch);\r\n                    }\r\n                };\r\n\r\n                var result = typeof(callback) === 'string' ? callback : callback(match, index);\r\n\r\n                if (!result && result !== '') {\r\n                    return arguments[0];\r\n                }\r\n\r\n                index++;\r\n\r\n                results.push(match);\r\n                return result;\r\n            });\r\n\r\n            function translateOffset(offset) {\r\n                var result = editor.getValue().substring(0, offset).split('\\n');\r\n                return { line: result.length - 1, ch: result[result.length - 1].length }\r\n            }\r\n\r\n            return results;\r\n        },\r\n\r\n        _buildtoolbar: function() {\r\n\r\n            if (!(this.options.toolbar && this.options.toolbar.length)) return;\r\n\r\n            var $this = this, bar = [];\r\n\r\n            this.toolbar.empty();\r\n\r\n            this.options.toolbar.forEach(function(button) {\r\n                if (!$this.buttons[button]) return;\r\n\r\n                var title = $this.buttons[button].title ? $this.buttons[button].title : button;\r\n\r\n                bar.push('<li><a data-htmleditor-button=\"'+button+'\" title=\"'+title+'\" data-uk-tooltip>'+$this.buttons[button].label+'</a></li>');\r\n            });\r\n\r\n            this.toolbar.html(bar.join('\\n'));\r\n        },\r\n\r\n        fit: function() {\r\n\r\n            var mode = this.options.mode;\r\n\r\n            if (mode == 'split' && this.htmleditor.width() < this.options.maxsplitsize) {\r\n                mode = 'tab';\r\n            }\r\n\r\n            if (mode == 'tab') {\r\n                if (!this.activetab) {\r\n                    this.activetab = 'code';\r\n                    this.htmleditor.attr('data-active-tab', this.activetab);\r\n                }\r\n\r\n                this.htmleditor.find('.uk-htmleditor-button-code, .uk-htmleditor-button-preview').removeClass('uk-active')\r\n                    .filter(this.activetab == 'code' ? '.uk-htmleditor-button-code' : '.uk-htmleditor-button-preview')\r\n                    .addClass('uk-active');\r\n            }\r\n\r\n            //var visualEditor = this.$preview.data('plugin_easyEditor');\r\n            this.previewer.readonly(mode == 'tab');\r\n\r\n            this.editor.refresh();\r\n            this.preview.parent().css('height', this.code.height());\r\n\r\n            this.htmleditor.attr('data-mode', mode);\r\n        },\r\n\r\n        redraw: function() {\r\n            this._buildtoolbar();\r\n            this.render();\r\n            this.fit();\r\n        },\r\n\r\n        getMode: function() {\r\n            return this.editor.getOption('mode');\r\n        },\r\n\r\n        getCursorMode: function() {\r\n            var param = { mode: 'html'};\r\n            this.trigger('cursorMode', [param]);\r\n            return param.mode;\r\n        },\r\n\r\n        render: function() {\r\n\r\n            this.currentvalue = this.editor.getValue();\r\n\r\n            // empty code\r\n            if (!this.currentvalue) {\r\n\r\n                this.element.val('');\r\n                this.preview.container.html('');\r\n\r\n                return;\r\n            }\r\n\r\n            this.trigger('render', [this]);\r\n            this.trigger('renderLate', [this]);\r\n\r\n            this.preview.container.html(this.currentvalue);\r\n        },\r\n\r\n        addShortcut: function(name, callback) {\r\n            var map = {};\r\n            if (!langx.isArray(name)) {\r\n                name = [name];\r\n            }\r\n\r\n            name.forEach(function(key) {\r\n                map[key] = callback;\r\n            });\r\n\r\n            this.editor.addKeyMap(map);\r\n\r\n            return map;\r\n        },\r\n\r\n        addShortcutAction: function(action, shortcuts) {\r\n            var editor = this;\r\n            this.addShortcut(shortcuts, function() {\r\n                editor.element.trigger('action.' + action, [editor.editor]);\r\n            });\r\n        },\r\n\r\n        insertImage : function(url,text) {\r\n            if (!this.code.is(':visible')) {\r\n                //var editor = this.$preview.data('plugin_easyEditor');\r\n                var html = \"<img src=\\\"\"+url+\"\\\" alt=\\\"\"+text+\"\\\">\";\r\n                this.previewer.insertAtCaret($(html)[0]);\r\n                return;\r\n            }\r\n            var text = '\\n![' + text + '](' + url + ')\\n';\r\n            this.replaceSelection(text);\r\n        },\r\n        \r\n        replaceSelection: function(replace) {\r\n\r\n            var text = this.editor.getSelection();\r\n\r\n            if (!text.length) {\r\n\r\n                var cur     = this.editor.getCursor(),\r\n                    curLine = this.editor.getLine(cur.line),\r\n                    start   = cur.ch,\r\n                    end     = start;\r\n\r\n                while (end < curLine.length && /[\\w$]+/.test(curLine.charAt(end))) ++end;\r\n                while (start && /[\\w$]+/.test(curLine.charAt(start - 1))) --start;\r\n\r\n                var curWord = start != end && curLine.slice(start, end);\r\n\r\n                if (curWord) {\r\n                    this.editor.setSelection({ line: cur.line, ch: start}, { line: cur.line, ch: end });\r\n                    text = curWord;\r\n                }\r\n            }\r\n\r\n            var html = replace.replace('$1', text);\r\n\r\n            this.editor.replaceSelection(html, 'end');\r\n            this.editor.focus();\r\n        },\r\n\r\n        replaceLine: function(replace) {\r\n            var pos  = this.editor.getDoc().getCursor(),\r\n                text = this.editor.getLine(pos.line),\r\n                html = replace.replace('$1', text);\r\n\r\n            this.editor.replaceRange(html , { line: pos.line, ch: 0 }, { line: pos.line, ch: text.length });\r\n            this.editor.setCursor({ line: pos.line, ch: html.length });\r\n            this.editor.focus();\r\n        },\r\n\r\n        save: function() {\r\n            this.editor.save();\r\n        },\r\n        _setPreviewFocus : function(){\r\n            //var editor = this.$preview.data('plugin_easyEditor')\r\n            this.previewr.win.focus();\r\n            var range = this.range;\r\n            if (!range) {\r\n                if(editor.doc.selection)\r\n                {\r\n                    range = editor.doc.selection.createRange();\r\n                }\r\n\r\n            } else {\r\n                range.select();\r\n                range = this.range = null;\r\n\r\n            }\r\n\r\n        }\r\n    });\r\n\r\n    var addons = {};\r\n\r\n    Editor.addon = function(name,def) {\r\n       addons[name] = def;\r\n\r\n    }\r\n\r\n\r\n    return textpad.Editor = Editor;\r\n\r\n\r\n});\r\n\r\n\ndefine('skylark-widgets-textpad/main',[\r\n    \"./textpad\",\r\n    \"./editor\"\r\n], function(textpad) {\r\n    return textpad;\r\n});\ndefine('skylark-widgets-textpad', ['skylark-widgets-textpad/main'], function (main) { return main; });\n\n"]}