{"version":3,"sources":["TextPane.js"],"names":["define","base","Widget","TextMixin","TextPane","inherit","_construct","parent","prototype","call","this","skin","getSkin","_elm","style","pointerEvents","color","textColor","display","_buildText","CENTER","LEFT","RIGHT","TOP","BOTTOM","CLIP","ELLIPSIS"],"mappings":";;;;;;;AAAAA,QACE,SACA,WACA,sBACA,SACDC,EACAC,EACAC,GAEA,aAUA,IAAIC,EAAWF,EAAOG,SAErBC,WAAa,SAAUC,GACtBL,EAAOM,UAAUF,WAAWG,KAAKC,KAAMH,EAAO,OAE9C,IAAII,EAAOD,KAAKE,UAEhBF,KAAKG,KAAKC,MAAMC,cAAgB,OAChCL,KAAKG,KAAKC,MAAME,MAAQL,EAAKM,UAC7BP,KAAKG,KAAKC,MAAMI,QAAU,OA8B1BR,KAAKS,iBAIHhB,IAYJ,OATAC,EAASgB,OAAS,EAClBhB,EAASiB,KAAO,EAChBjB,EAASkB,MAAQ,EACjBlB,EAASmB,IAAM,EACfnB,EAASoB,OAAS,EAElBpB,EAASqB,KAAO,GAChBrB,EAASsB,SAAW,GAEbzB,EAAKG,SAAWA","file":"../TextPane.js","sourcesContent":["define([\r\n  \"./base\",\r\n  \"./Widget\",\r\n  \"./mixins/TextMixin\"\r\n],function(\r\n\tbase,\r\n\tWidget,\r\n\tTextMixin\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Element}\r\n\t * @param {Element} parent Parent element.\r\n\t */\r\n\r\n\tvar TextPane = Widget.inherit({\r\n\r\n\t\t_construct : function (parent) {\r\n\t\t\tWidget.prototype._construct.call(this, parent,\"div\");\r\n\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\tthis._elm.style.pointerEvents = \"none\";\r\n\t\t\tthis._elm.style.color = skin.textColor;\r\n\t\t\tthis._elm.style.display = \"flex\";\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t\t * \r\n\t\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t\t *\r\n\t\t\t\t * @attribute span\r\n\t\t\t\t * @type {DOM}\r\n\t\t\t \t \r\n\t\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\t\tthis.element.appendChild(this.span);\r\n\r\n\t\t\t\t//Text\r\n\t\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t\t**\r\n\t\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t\t *\r\n\t\t\t\t * @attribute fitContent\r\n\t\t\t\t * @type {Boolean}\r\n\t\t\t\t *\r\n\t\t\t\tthis.fitContent = false;\r\n\r\n\t\t\t\tthis.allowWordBreak(false);\r\n\t\t\t\tthis.setVerticalAlignment(Text.CENTER);\r\n\t\t\t\tthis.setAlignment(Text.CENTER);\r\n\t\t\t*/\r\n\r\n\t\t\tthis._buildText();\r\n\r\n\r\n\t\t},\r\n\t\t...TextMixin\r\n\t});\r\n\t\r\n\tTextPane.CENTER = 0;\r\n\tTextPane.LEFT = 1;\r\n\tTextPane.RIGHT = 2;\r\n\tTextPane.TOP = 3;\r\n\tTextPane.BOTTOM = 4;\r\n\r\n\tTextPane.CLIP = 10;\r\n\tTextPane.ELLIPSIS = 11;\r\n\r\n\treturn base.TextPane = TextPane;\r\n});"]}