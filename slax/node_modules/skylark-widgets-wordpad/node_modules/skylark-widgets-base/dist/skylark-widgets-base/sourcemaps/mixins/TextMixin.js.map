{"version":3,"sources":["mixins/TextMixin.js"],"names":["define","Vector2","Widget","TextMixin","_buildText","this","getSkin","span","document","createElement","style","overflow","_elm","appendChild","text","createTextNode","fitContent","allowWordBreak","setVerticalAlignment","CENTER","setAlignment","setFont","fontFamily","fontWeight","fontStyle","undefined","value","whiteSpace","wordBreak","setText","data","setTextBorder","size","color","textShadow","setTextSize","fontSize","setTextColor","setOverflow","ELLIPSIS","textOverflow","align","justifyContent","textAlign","LEFT","RIGHT","alignItems","TOP","BOTTOM","measure","offsetWidth","offsetHeight","setMargin","margin","updateSize","x","clientWidth","y","clientHeight","prototype","call","updateVisibility","display","visible","CLIP"],"mappings":";;;;;;;AAAAA,QACC,iCACA,aACC,SACDC,EACAC,GAEA,aAUA,IAAIC,GACHC,WAAa,WACDC,KAAKC,UAahBD,KAAKE,KAAOC,SAASC,cAAc,QACnCJ,KAAKE,KAAKG,MAAMC,SAAW,SAC3BN,KAAKO,KAAKC,YAAYR,KAAKE,MAG3BF,KAAKS,KAAON,SAASO,eAAe,IACpCV,KAAKE,KAAKM,YAAYR,KAAKS,MAQ3BT,KAAKW,YAAa,EAElBX,KAAKY,gBAAe,GACpBZ,KAAKa,qBAAqBf,EAAUgB,QACpCd,KAAKe,aAAajB,EAAUgB,SAW7BE,QAAU,SAASC,EAAYC,EAAYC,GAC1CnB,KAAKE,KAAKG,MAAMY,WAAaA,OAEXG,IAAfF,IACFlB,KAAKE,KAAKG,MAAMa,WAAaA,QAGbE,IAAdD,IACFnB,KAAKE,KAAKG,MAAMc,UAAYA,IAU9BP,eAAiB,SAASS,IACZ,IAAVA,GACFrB,KAAKE,KAAKG,MAAMiB,WAAa,SAC7BtB,KAAKE,KAAKG,MAAMkB,UAAY,eAE5BvB,KAAKE,KAAKG,MAAMiB,WAAa,MAC7BtB,KAAKE,KAAKG,MAAMkB,UAAY,WAU9BC,QAAU,SAASf,GAClBT,KAAKS,KAAKgB,KAAOhB,GAUlBiB,cAAgB,SAASC,EAAMC,GAC9B5B,KAAKE,KAAKG,MAAMwB,WAAa,IAAMF,EAAO,QAAUC,EAAQ,OAASD,EAAO,MAAQC,EAAQ,KAAOD,EAAO,QAAUC,EAAQ,QAAUD,EAAO,MAAQC,GAStJE,YAAc,SAASH,GACtB3B,KAAKO,KAAKF,MAAM0B,SAAWJ,EAAO,MASnCK,aAAe,SAASJ,GACvB5B,KAAKE,KAAKG,MAAMuB,MAAQA,GASzBK,YAAc,SAAS3B,GACnBA,IAAaR,EAAUoC,UACzBlC,KAAKE,KAAKG,MAAMiB,WAAa,SAC7BtB,KAAKE,KAAKG,MAAM8B,aAAe,aAE/BnC,KAAKE,KAAKG,MAAMiB,WAAa,MAC7BtB,KAAKE,KAAKG,MAAM8B,aAAe,SAajCpB,aAAe,SAASqB,GACpBA,IAAUtC,EAAUgB,QACtBd,KAAKO,KAAKF,MAAMgC,eAAiB,SACjCrC,KAAKO,KAAKF,MAAMiC,UAAY,UACnBF,IAAUtC,EAAUyC,MAC7BvC,KAAKO,KAAKF,MAAMgC,eAAiB,aACjCrC,KAAKO,KAAKF,MAAMiC,UAAY,QACnBF,IAAUtC,EAAU0C,QAC7BxC,KAAKO,KAAKF,MAAMgC,eAAiB,WACjCrC,KAAKO,KAAKF,MAAMiC,UAAY,UAa9BzB,qBAAuB,SAASuB,GAC5BA,IAAUtC,EAAUgB,OACtBd,KAAKO,KAAKF,MAAMoC,WAAa,SACpBL,IAAUtC,EAAU4C,IAC5B1C,KAAKO,KAAKF,MAAMoC,WAAa,aACrBL,IAAUtC,EAAU6C,SAC7B3C,KAAKO,KAAKF,MAAMoC,WAAa,aAU/BG,QAAU,WACR,OAAO,IAAIhD,EAAQI,KAAKE,KAAK2C,YAAa7C,KAAKE,KAAK4C,eAStDC,UAAY,SAASC,GACpBhD,KAAKE,KAAKG,MAAM2C,OAASA,EAAS,MAGnCC,WAAa,WACTjD,KAAKW,aACPX,KAAK2B,KAAKuB,EAAIlD,KAAKE,KAAKiD,YACxBnD,KAAK2B,KAAKyB,EAAIpD,KAAKE,KAAKmD,cAGzBxD,EAAOyD,UAAUL,WAAWM,KAAKvD,OAGlCwD,iBAAmB,WAClBxD,KAAKO,KAAKF,MAAMoD,QAAUzD,KAAK0D,QAAU,OAAS,QAGnD5C,OAAS,EACTyB,KAAO,EACJC,MAAQ,EACRE,IAAM,EACNC,OAAS,EAETgB,KAAO,GACPzB,SAAW,IAKf,OAAOpC","file":"../../mixins/TextMixin.js","sourcesContent":["define([\r\n\t\"skylark-langx-numerics/Vector2\",\r\n\t\"../Widget\"\r\n],function(\r\n\tVector2,\r\n\tWidget\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Text element without background.\r\n\t * \r\n\t * @class Text\r\n\t * @extends {Widget}\r\n\t * @param {Widget} parent Parent widget.\r\n\t */\r\n\r\n\tvar TextMixin = {\r\n\t\t_buildText : function() {\r\n\t\t\tvar skin = this.getSkin();\r\n\r\n\t\t\t//this._elm.style.pointerEvents = \"none\";\r\n\t\t\t//this._elm.style.color = Editor.theme.textColor;\r\n\t\t\t//this._elm.style.color = skin.textColor;\r\n\t\t\t//this._elm.style.display = \"flex\";\r\n\r\n\t\t\t/** \r\n\t\t\t * Span DOM element used to represent the text.\r\n\t\t\t *\r\n\t\t\t * @attribute span\r\n\t\t\t * @type {DOM}\r\n\t\t \t */\r\n\t\t\tthis.span = document.createElement(\"span\");\r\n\t\t\tthis.span.style.overflow = \"hidden\";\r\n\t\t\tthis._elm.appendChild(this.span);\r\n\r\n\t\t\t//Text\r\n\t\t\tthis.text = document.createTextNode(\"\");\r\n\t\t\tthis.span.appendChild(this.text);\r\n\r\n\t\t\t/**\r\n\t\t\t * If set to true the text container will automatically fit the text size.\r\n\t\t\t *\r\n\t\t\t * @attribute fitContent\r\n\t\t\t * @type {Boolean}\r\n\t\t\t */\r\n\t\t\tthis.fitContent = false;\r\n\r\n\t\t\tthis.allowWordBreak(false);\r\n\t\t\tthis.setVerticalAlignment(TextMixin.CENTER);\r\n\t\t\tthis.setAlignment(TextMixin.CENTER);\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set font to use for the text.\r\n\t\t * \r\n\t\t * @method setFont\r\n\t\t * @param {String} fontFamily Font family.\r\n\t\t * @param {Number} fontWeight Font weigth, sets how thick or thin characters in text should be displayed.\r\n\t\t * @param {String} fontStyle Font style, specifies the font style for a text.\r\n\t\t */\r\n\t\tsetFont : function(fontFamily, fontWeight, fontStyle) {\r\n\t\t\tthis.span.style.fontFamily = fontFamily;\r\n\r\n\t\t\tif(fontWeight !== undefined) {\r\n\t\t\t\tthis.span.style.fontWeight = fontWeight;\r\n\t\t\t}\r\n\r\n\t\t\tif(fontStyle !== undefined) {\r\n\t\t\t\tthis.span.style.fontStyle = fontStyle;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable of disable word breaking.\r\n\t\t *\r\n\t\t * @method allowWordBreak\r\n\t\t * @param {Boolean} line If true words can be breaked.\r\n\t\t */\r\n\t\tallowWordBreak : function(value) {\r\n\t\t\tif(value === true) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"normal\";\r\n\t\t\t\tthis.span.style.wordBreak = \"break-word\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.wordBreak = \"normal\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text.\r\n\t\t *\r\n\t\t * @method setText\r\n\t\t * @param {String} text Text. \r\n\t\t */\r\n\t\tsetText : function(text){\r\n\t\t\tthis.text.data = text;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text border.\r\n\t\t *\r\n\t\t * @method setTextBorder\r\n\t\t * @param {Number} size Border size in pixels.\r\n\t\t * @param {String} color CSS Color. \r\n\t\t */\r\n\t\tsetTextBorder : function(size, color) {\r\n\t\t\tthis.span.style.textShadow = \"-\" + size + \"px 0 \" + color + \", 0 \" + size + \"px \" + color + \", \" + size + \"px 0 \" + color + \", 0 -\" + size + \"px \" + color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set Text size, in pixels.\r\n\t\t * \r\n\t\t * @method setTextSize\r\n\t\t * @param {Number} size Size in pixel for this text element.\r\n\t\t */\r\n\t\tsetTextSize : function(size) {\r\n\t\t\tthis._elm.style.fontSize = size + \"px\";\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text color.\r\n\t\t * \r\n\t\t * @method setTextColor\r\n\t\t * @param {String} color Color code.\r\n\t\t */\r\n\t\tsetTextColor : function(color) {\r\n\t\t\tthis.span.style.color = color;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text overflow handling\r\n\t\t *\r\n\t\t * @method setOverflow\r\n\t\t * @param {Number} overflow\r\n\t\t */\r\n\t\tsetOverflow : function(overflow) {\r\n\t\t\tif(overflow === TextMixin.ELLIPSIS) {\r\n\t\t\t\tthis.span.style.whiteSpace = \"nowrap\";\r\n\t\t\t\tthis.span.style.textOverflow = \"ellipsis\";\r\n\t\t\t} else \t{\r\n\t\t\t\tthis.span.style.whiteSpace = \"pre\";\r\n\t\t\t\tthis.span.style.textOverflow = \"clip\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text horizontal alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.LEFT\r\n\t\t *  - TextMixin.RIGHT\r\n\t\t * \r\n\t\t * @method setAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetAlignment : function(align) \t{\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"center\";\r\n\t\t\t\tthis._elm.style.textAlign = \"center\";\r\n\t\t\t} else if(align === TextMixin.LEFT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-start\";\r\n\t\t\t\tthis._elm.style.textAlign = \"left\";\r\n\t\t\t} else if(align === TextMixin.RIGHT) {\r\n\t\t\t\tthis._elm.style.justifyContent = \"flex-end\";\r\n\t\t\t\tthis._elm.style.textAlign = \"right\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text vertical alignment.\r\n\t\t *  - TextMixin.CENTER\r\n\t\t *  - TextMixin.TOP\r\n\t\t *  - TextMixin.BOTTOM\r\n\t\t * \r\n\t\t * @method setVerticalAlignment\r\n\t\t * @param {Number} align Alingment mode.\r\n\t\t */\r\n\t\tsetVerticalAlignment : function(align) {\r\n\t\t\tif(align === TextMixin.CENTER) {\r\n\t\t\t\tthis._elm.style.alignItems = \"center\";\r\n\t\t\t} else if(align === TextMixin.TOP) {\r\n\t\t \t\tthis._elm.style.alignItems = \"flex-start\";\r\n\t\t\t} else if(align === TextMixin.BOTTOM) {\r\n\t\t\t\tthis._elm.style.alignItems = \"flex-end\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get size of the text inside of this component in px.\r\n\t\t * \r\n\t\t * @method measure\r\n\t\t * @return {Vector2} A vector with the size of the text. \r\n\t\t */\r\n\t\tmeasure : function() \t{\r\n\t\t \treturn new Vector2(this.span.offsetWidth, this.span.offsetHeight);\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set text internal margin in pixels.\r\n\t\t * \r\n\t\t * @method setMargin\r\n\t\t * @param {Number} margin Margin size in pixels.\r\n\t\t */\r\n\t\tsetMargin : function(margin) {\r\n\t\t\tthis.span.style.margin = margin + \"px\";\r\n\t\t},\r\n\r\n\t\tupdateSize : function() {\r\n\t\t\tif(this.fitContent) { \r\n\t\t\t\tthis.size.x = this.span.clientWidth;\r\n\t\t\t\tthis.size.y = this.span.clientHeight;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tWidget.prototype.updateSize.call(this);\r\n\t\t},\r\n\r\n\t\tupdateVisibility : function() {\r\n\t\t\tthis._elm.style.display = this.visible ? \"flex\" : \"none\";\r\n\t\t},\r\n\r\n\t\tCENTER : 0,\r\n\t\tLEFT : 1,\r\n\t    RIGHT : 2,\r\n\t    TOP : 3,\r\n\t    BOTTOM : 4,\r\n\r\n\t    CLIP : 10,\r\n\t    ELLIPSIS : 11\r\n\r\n\t};\r\n\r\n\r\n\treturn TextMixin;\r\n});"]}